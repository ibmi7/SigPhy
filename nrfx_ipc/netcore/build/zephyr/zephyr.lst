
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

01000000 <_vector_table>:
 1000000:	18 1d 00 21 c1 2b 00 01 19 65 00 01 95 2b 00 01     ...!.+...e...+..
 1000010:	95 2b 00 01 95 2b 00 01 95 2b 00 01 00 00 00 00     .+...+...+......
	...
 100002c:	65 25 00 01 95 2b 00 01 00 00 00 00 0d 25 00 01     e%...+.......%..
 100003c:	95 2b 00 01                                         .+..

01000040 <_irq_vector_table>:
 1000040:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 1000050:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 1000060:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 1000070:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 1000080:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 1000090:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 10000a0:	e5 25 00 01 e5 25 00 01 e5 25 00 01 e5 25 00 01     .%...%...%...%..
 10000b0:	e5 25 00 01 e5 25 00 01                             .%...%..

Disassembly of section text:

010000b8 <__aeabi_uldivmod>:
 10000b8:	b953      	cbnz	r3, 10000d0 <__aeabi_uldivmod+0x18>
 10000ba:	b94a      	cbnz	r2, 10000d0 <__aeabi_uldivmod+0x18>
 10000bc:	2900      	cmp	r1, #0
 10000be:	bf08      	it	eq
 10000c0:	2800      	cmpeq	r0, #0
 10000c2:	bf1c      	itt	ne
 10000c4:	f04f 31ff 	movne.w	r1, #4294967295
 10000c8:	f04f 30ff 	movne.w	r0, #4294967295
 10000cc:	f000 b80c 	b.w	10000e8 <__aeabi_idiv0>
 10000d0:	f1ad 0c08 	sub.w	ip, sp, #8
 10000d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 10000d8:	f000 f808 	bl	10000ec <__udivmoddi4>
 10000dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 10000e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 10000e4:	b004      	add	sp, #16
 10000e6:	4770      	bx	lr

010000e8 <__aeabi_idiv0>:
 10000e8:	4770      	bx	lr
 10000ea:	bf00      	nop

010000ec <__udivmoddi4>:
 10000ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10000f0:	4686      	mov	lr, r0
 10000f2:	468c      	mov	ip, r1
 10000f4:	4608      	mov	r0, r1
 10000f6:	9e08      	ldr	r6, [sp, #32]
 10000f8:	4615      	mov	r5, r2
 10000fa:	4674      	mov	r4, lr
 10000fc:	4619      	mov	r1, r3
 10000fe:	2b00      	cmp	r3, #0
 1000100:	f040 80c1 	bne.w	1000286 <__udivmoddi4+0x19a>
 1000104:	4285      	cmp	r5, r0
 1000106:	fab2 f282 	clz	r2, r2
 100010a:	d945      	bls.n	1000198 <__udivmoddi4+0xac>
 100010c:	b14a      	cbz	r2, 1000122 <__udivmoddi4+0x36>
 100010e:	f1c2 0320 	rsb	r3, r2, #32
 1000112:	fa00 fc02 	lsl.w	ip, r0, r2
 1000116:	4095      	lsls	r5, r2
 1000118:	4094      	lsls	r4, r2
 100011a:	fa2e f303 	lsr.w	r3, lr, r3
 100011e:	ea43 0c0c 	orr.w	ip, r3, ip
 1000122:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 1000126:	b2a8      	uxth	r0, r5
 1000128:	0c23      	lsrs	r3, r4, #16
 100012a:	fbbc f8fe 	udiv	r8, ip, lr
 100012e:	fb0e cc18 	mls	ip, lr, r8, ip
 1000132:	fb08 f900 	mul.w	r9, r8, r0
 1000136:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 100013a:	4599      	cmp	r9, r3
 100013c:	d928      	bls.n	1000190 <__udivmoddi4+0xa4>
 100013e:	18eb      	adds	r3, r5, r3
 1000140:	f108 37ff 	add.w	r7, r8, #4294967295
 1000144:	d204      	bcs.n	1000150 <__udivmoddi4+0x64>
 1000146:	4599      	cmp	r9, r3
 1000148:	d902      	bls.n	1000150 <__udivmoddi4+0x64>
 100014a:	f1a8 0702 	sub.w	r7, r8, #2
 100014e:	442b      	add	r3, r5
 1000150:	eba3 0309 	sub.w	r3, r3, r9
 1000154:	b2a4      	uxth	r4, r4
 1000156:	fbb3 fcfe 	udiv	ip, r3, lr
 100015a:	fb0e 331c 	mls	r3, lr, ip, r3
 100015e:	fb0c f000 	mul.w	r0, ip, r0
 1000162:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 1000166:	42a0      	cmp	r0, r4
 1000168:	d914      	bls.n	1000194 <__udivmoddi4+0xa8>
 100016a:	192c      	adds	r4, r5, r4
 100016c:	f10c 33ff 	add.w	r3, ip, #4294967295
 1000170:	d204      	bcs.n	100017c <__udivmoddi4+0x90>
 1000172:	42a0      	cmp	r0, r4
 1000174:	d902      	bls.n	100017c <__udivmoddi4+0x90>
 1000176:	f1ac 0302 	sub.w	r3, ip, #2
 100017a:	442c      	add	r4, r5
 100017c:	1a24      	subs	r4, r4, r0
 100017e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 1000182:	b11e      	cbz	r6, 100018c <__udivmoddi4+0xa0>
 1000184:	40d4      	lsrs	r4, r2
 1000186:	2300      	movs	r3, #0
 1000188:	6034      	str	r4, [r6, #0]
 100018a:	6073      	str	r3, [r6, #4]
 100018c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1000190:	4647      	mov	r7, r8
 1000192:	e7dd      	b.n	1000150 <__udivmoddi4+0x64>
 1000194:	4663      	mov	r3, ip
 1000196:	e7f1      	b.n	100017c <__udivmoddi4+0x90>
 1000198:	bb92      	cbnz	r2, 1000200 <__udivmoddi4+0x114>
 100019a:	1b43      	subs	r3, r0, r5
 100019c:	2101      	movs	r1, #1
 100019e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 10001a2:	b2af      	uxth	r7, r5
 10001a4:	0c20      	lsrs	r0, r4, #16
 10001a6:	fbb3 fcfe 	udiv	ip, r3, lr
 10001aa:	fb0e 331c 	mls	r3, lr, ip, r3
 10001ae:	fb0c f807 	mul.w	r8, ip, r7
 10001b2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 10001b6:	4598      	cmp	r8, r3
 10001b8:	d961      	bls.n	100027e <__udivmoddi4+0x192>
 10001ba:	18eb      	adds	r3, r5, r3
 10001bc:	f10c 30ff 	add.w	r0, ip, #4294967295
 10001c0:	d204      	bcs.n	10001cc <__udivmoddi4+0xe0>
 10001c2:	4598      	cmp	r8, r3
 10001c4:	d902      	bls.n	10001cc <__udivmoddi4+0xe0>
 10001c6:	f1ac 0002 	sub.w	r0, ip, #2
 10001ca:	442b      	add	r3, r5
 10001cc:	eba3 0308 	sub.w	r3, r3, r8
 10001d0:	b2a4      	uxth	r4, r4
 10001d2:	fbb3 fcfe 	udiv	ip, r3, lr
 10001d6:	fb0e 331c 	mls	r3, lr, ip, r3
 10001da:	fb0c f707 	mul.w	r7, ip, r7
 10001de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 10001e2:	42a7      	cmp	r7, r4
 10001e4:	d94d      	bls.n	1000282 <__udivmoddi4+0x196>
 10001e6:	192c      	adds	r4, r5, r4
 10001e8:	f10c 33ff 	add.w	r3, ip, #4294967295
 10001ec:	d204      	bcs.n	10001f8 <__udivmoddi4+0x10c>
 10001ee:	42a7      	cmp	r7, r4
 10001f0:	d902      	bls.n	10001f8 <__udivmoddi4+0x10c>
 10001f2:	f1ac 0302 	sub.w	r3, ip, #2
 10001f6:	442c      	add	r4, r5
 10001f8:	1be4      	subs	r4, r4, r7
 10001fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 10001fe:	e7c0      	b.n	1000182 <__udivmoddi4+0x96>
 1000200:	f1c2 0320 	rsb	r3, r2, #32
 1000204:	4095      	lsls	r5, r2
 1000206:	4094      	lsls	r4, r2
 1000208:	fa20 f103 	lsr.w	r1, r0, r3
 100020c:	fa2e f303 	lsr.w	r3, lr, r3
 1000210:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 1000214:	4090      	lsls	r0, r2
 1000216:	b2af      	uxth	r7, r5
 1000218:	4303      	orrs	r3, r0
 100021a:	fbb1 fcfe 	udiv	ip, r1, lr
 100021e:	fb0e 101c 	mls	r0, lr, ip, r1
 1000222:	0c19      	lsrs	r1, r3, #16
 1000224:	fb0c f807 	mul.w	r8, ip, r7
 1000228:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 100022c:	4588      	cmp	r8, r1
 100022e:	d922      	bls.n	1000276 <__udivmoddi4+0x18a>
 1000230:	1869      	adds	r1, r5, r1
 1000232:	f10c 30ff 	add.w	r0, ip, #4294967295
 1000236:	d204      	bcs.n	1000242 <__udivmoddi4+0x156>
 1000238:	4588      	cmp	r8, r1
 100023a:	d902      	bls.n	1000242 <__udivmoddi4+0x156>
 100023c:	f1ac 0002 	sub.w	r0, ip, #2
 1000240:	4429      	add	r1, r5
 1000242:	eba1 0108 	sub.w	r1, r1, r8
 1000246:	b29b      	uxth	r3, r3
 1000248:	fbb1 fcfe 	udiv	ip, r1, lr
 100024c:	fb0e 111c 	mls	r1, lr, ip, r1
 1000250:	fb0c f707 	mul.w	r7, ip, r7
 1000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 1000258:	429f      	cmp	r7, r3
 100025a:	d90e      	bls.n	100027a <__udivmoddi4+0x18e>
 100025c:	18eb      	adds	r3, r5, r3
 100025e:	f10c 31ff 	add.w	r1, ip, #4294967295
 1000262:	d204      	bcs.n	100026e <__udivmoddi4+0x182>
 1000264:	429f      	cmp	r7, r3
 1000266:	d902      	bls.n	100026e <__udivmoddi4+0x182>
 1000268:	f1ac 0102 	sub.w	r1, ip, #2
 100026c:	442b      	add	r3, r5
 100026e:	1bdb      	subs	r3, r3, r7
 1000270:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1000274:	e793      	b.n	100019e <__udivmoddi4+0xb2>
 1000276:	4660      	mov	r0, ip
 1000278:	e7e3      	b.n	1000242 <__udivmoddi4+0x156>
 100027a:	4661      	mov	r1, ip
 100027c:	e7f7      	b.n	100026e <__udivmoddi4+0x182>
 100027e:	4660      	mov	r0, ip
 1000280:	e7a4      	b.n	10001cc <__udivmoddi4+0xe0>
 1000282:	4663      	mov	r3, ip
 1000284:	e7b8      	b.n	10001f8 <__udivmoddi4+0x10c>
 1000286:	4283      	cmp	r3, r0
 1000288:	d906      	bls.n	1000298 <__udivmoddi4+0x1ac>
 100028a:	b916      	cbnz	r6, 1000292 <__udivmoddi4+0x1a6>
 100028c:	2100      	movs	r1, #0
 100028e:	4608      	mov	r0, r1
 1000290:	e77c      	b.n	100018c <__udivmoddi4+0xa0>
 1000292:	e9c6 e000 	strd	lr, r0, [r6]
 1000296:	e7f9      	b.n	100028c <__udivmoddi4+0x1a0>
 1000298:	fab3 f783 	clz	r7, r3
 100029c:	b98f      	cbnz	r7, 10002c2 <__udivmoddi4+0x1d6>
 100029e:	4283      	cmp	r3, r0
 10002a0:	d301      	bcc.n	10002a6 <__udivmoddi4+0x1ba>
 10002a2:	4572      	cmp	r2, lr
 10002a4:	d808      	bhi.n	10002b8 <__udivmoddi4+0x1cc>
 10002a6:	ebbe 0402 	subs.w	r4, lr, r2
 10002aa:	eb60 0303 	sbc.w	r3, r0, r3
 10002ae:	2001      	movs	r0, #1
 10002b0:	469c      	mov	ip, r3
 10002b2:	b91e      	cbnz	r6, 10002bc <__udivmoddi4+0x1d0>
 10002b4:	2100      	movs	r1, #0
 10002b6:	e769      	b.n	100018c <__udivmoddi4+0xa0>
 10002b8:	4638      	mov	r0, r7
 10002ba:	e7fa      	b.n	10002b2 <__udivmoddi4+0x1c6>
 10002bc:	e9c6 4c00 	strd	r4, ip, [r6]
 10002c0:	e7f8      	b.n	10002b4 <__udivmoddi4+0x1c8>
 10002c2:	f1c7 0c20 	rsb	ip, r7, #32
 10002c6:	40bb      	lsls	r3, r7
 10002c8:	fa0e f507 	lsl.w	r5, lr, r7
 10002cc:	fa22 f40c 	lsr.w	r4, r2, ip
 10002d0:	fa2e f10c 	lsr.w	r1, lr, ip
 10002d4:	40ba      	lsls	r2, r7
 10002d6:	431c      	orrs	r4, r3
 10002d8:	fa20 f30c 	lsr.w	r3, r0, ip
 10002dc:	40b8      	lsls	r0, r7
 10002de:	ea4f 4914 	mov.w	r9, r4, lsr #16
 10002e2:	4301      	orrs	r1, r0
 10002e4:	fa1f fe84 	uxth.w	lr, r4
 10002e8:	fbb3 f8f9 	udiv	r8, r3, r9
 10002ec:	fb09 3018 	mls	r0, r9, r8, r3
 10002f0:	0c0b      	lsrs	r3, r1, #16
 10002f2:	fb08 fa0e 	mul.w	sl, r8, lr
 10002f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 10002fa:	459a      	cmp	sl, r3
 10002fc:	d940      	bls.n	1000380 <__udivmoddi4+0x294>
 10002fe:	18e3      	adds	r3, r4, r3
 1000300:	f108 30ff 	add.w	r0, r8, #4294967295
 1000304:	d204      	bcs.n	1000310 <__udivmoddi4+0x224>
 1000306:	459a      	cmp	sl, r3
 1000308:	d902      	bls.n	1000310 <__udivmoddi4+0x224>
 100030a:	f1a8 0002 	sub.w	r0, r8, #2
 100030e:	4423      	add	r3, r4
 1000310:	eba3 030a 	sub.w	r3, r3, sl
 1000314:	b289      	uxth	r1, r1
 1000316:	fbb3 f8f9 	udiv	r8, r3, r9
 100031a:	fb09 3318 	mls	r3, r9, r8, r3
 100031e:	fb08 fe0e 	mul.w	lr, r8, lr
 1000322:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 1000326:	458e      	cmp	lr, r1
 1000328:	d92c      	bls.n	1000384 <__udivmoddi4+0x298>
 100032a:	1861      	adds	r1, r4, r1
 100032c:	f108 33ff 	add.w	r3, r8, #4294967295
 1000330:	d204      	bcs.n	100033c <__udivmoddi4+0x250>
 1000332:	458e      	cmp	lr, r1
 1000334:	d902      	bls.n	100033c <__udivmoddi4+0x250>
 1000336:	f1a8 0302 	sub.w	r3, r8, #2
 100033a:	4421      	add	r1, r4
 100033c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 1000340:	eba1 010e 	sub.w	r1, r1, lr
 1000344:	fba0 9802 	umull	r9, r8, r0, r2
 1000348:	4541      	cmp	r1, r8
 100034a:	46ce      	mov	lr, r9
 100034c:	4643      	mov	r3, r8
 100034e:	d302      	bcc.n	1000356 <__udivmoddi4+0x26a>
 1000350:	d106      	bne.n	1000360 <__udivmoddi4+0x274>
 1000352:	454d      	cmp	r5, r9
 1000354:	d204      	bcs.n	1000360 <__udivmoddi4+0x274>
 1000356:	3801      	subs	r0, #1
 1000358:	ebb9 0e02 	subs.w	lr, r9, r2
 100035c:	eb68 0304 	sbc.w	r3, r8, r4
 1000360:	2e00      	cmp	r6, #0
 1000362:	d0a7      	beq.n	10002b4 <__udivmoddi4+0x1c8>
 1000364:	ebb5 020e 	subs.w	r2, r5, lr
 1000368:	eb61 0103 	sbc.w	r1, r1, r3
 100036c:	fa01 fc0c 	lsl.w	ip, r1, ip
 1000370:	fa22 f307 	lsr.w	r3, r2, r7
 1000374:	40f9      	lsrs	r1, r7
 1000376:	ea4c 0303 	orr.w	r3, ip, r3
 100037a:	e9c6 3100 	strd	r3, r1, [r6]
 100037e:	e799      	b.n	10002b4 <__udivmoddi4+0x1c8>
 1000380:	4640      	mov	r0, r8
 1000382:	e7c5      	b.n	1000310 <__udivmoddi4+0x224>
 1000384:	4643      	mov	r3, r8
 1000386:	e7d9      	b.n	100033c <__udivmoddi4+0x250>

01000388 <nrfx_ipc_send.part.0>:
			ipc_rx_buf->busy = 0;
		}
	}
}

int nrfx_ipc_send(const void *data, int size)
 1000388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	{
		return -EINVAL;
	}
	if (ipc_tx_buf->valid == MAGIC_VALID && ipc_tx_buf->busy == 1)
	{
		LOG_ERR("ipc is busy");
 100038a:	4b08      	ldr	r3, [pc, #32]	; (10003ac <nrfx_ipc_send.part.0+0x24>)
 100038c:	9305      	str	r3, [sp, #20]
 100038e:	2302      	movs	r3, #2
 1000390:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
 1000392:	2300      	movs	r3, #0
 1000394:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1000398:	4805      	ldr	r0, [pc, #20]	; (10003b0 <nrfx_ipc_send.part.0+0x28>)
 100039a:	aa04      	add	r2, sp, #16
 100039c:	f001 fc86 	bl	1001cac <z_impl_z_log_msg_static_create>
	ipc_tx_buf->busy = 1;
	ipc_tx_buf->len = size;
	memcpy(ipc_tx_buf->data, data, size);
	nrfx_ipc_signal(CH_NO_SEND);
	return 0;
}
 10003a0:	f06f 000f 	mvn.w	r0, #15
 10003a4:	b007      	add	sp, #28
 10003a6:	f85d fb04 	ldr.w	pc, [sp], #4
 10003aa:	bf00      	nop
 10003ac:	0100711c 	.word	0x0100711c
 10003b0:	01006ee0 	.word	0x01006ee0

010003b4 <nrfx_ipc_handler>:
{
 10003b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("event_mask %d", event_mask);
 10003b8:	466d      	mov	r5, sp
{
 10003ba:	af00      	add	r7, sp, #0
	LOG_INF("event_mask %d", event_mask);
 10003bc:	b088      	sub	sp, #32
{
 10003be:	4604      	mov	r4, r0
	LOG_INF("event_mask %d", event_mask);
 10003c0:	466a      	mov	r2, sp
 10003c2:	2603      	movs	r6, #3
 10003c4:	4b22      	ldr	r3, [pc, #136]	; (1000450 <nrfx_ipc_handler+0x9c>)
 10003c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
 10003ca:	f842 6f10 	str.w	r6, [r2, #16]!
 10003ce:	2300      	movs	r3, #0
 10003d0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 10003d4:	481f      	ldr	r0, [pc, #124]	; (1000454 <nrfx_ipc_handler+0xa0>)
 10003d6:	f001 fc69 	bl	1001cac <z_impl_z_log_msg_static_create>
 10003da:	46ad      	mov	sp, r5
	if (event_mask == CH_NO_RECEIVE) {
 10003dc:	b9ac      	cbnz	r4, 100040a <nrfx_ipc_handler+0x56>
		if (ipc_rx_buf->valid != MAGIC_VALID)
 10003de:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1000458 <nrfx_ipc_handler+0xa4>
 10003e2:	4a1e      	ldr	r2, [pc, #120]	; (100045c <nrfx_ipc_handler+0xa8>)
 10003e4:	f8d8 3000 	ldr.w	r3, [r8]
 10003e8:	681b      	ldr	r3, [r3, #0]
 10003ea:	4293      	cmp	r3, r2
 10003ec:	d010      	beq.n	1000410 <nrfx_ipc_handler+0x5c>
			LOG_WRN("invalid ipc data %x", ipc_rx_buf->valid);			
 10003ee:	b088      	sub	sp, #32
 10003f0:	466a      	mov	r2, sp
 10003f2:	491b      	ldr	r1, [pc, #108]	; (1000460 <nrfx_ipc_handler+0xac>)
 10003f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
 10003f8:	f842 6f10 	str.w	r6, [r2, #16]!
 10003fc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 1000400:	4623      	mov	r3, r4
 1000402:	4814      	ldr	r0, [pc, #80]	; (1000454 <nrfx_ipc_handler+0xa0>)
 1000404:	f001 fc52 	bl	1001cac <z_impl_z_log_msg_static_create>
 1000408:	46ad      	mov	sp, r5
}
 100040a:	46bd      	mov	sp, r7
 100040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_HEXDUMP_INF(ipc_rx_buf->data, ipc_rx_buf->len, "Received: ");
 1000410:	b088      	sub	sp, #32
 1000412:	466a      	mov	r2, sp
 1000414:	4b13      	ldr	r3, [pc, #76]	; (1000464 <nrfx_ipc_handler+0xb0>)
 1000416:	4914      	ldr	r1, [pc, #80]	; (1000468 <nrfx_ipc_handler+0xb4>)
 1000418:	6153      	str	r3, [r2, #20]
 100041a:	4b14      	ldr	r3, [pc, #80]	; (100046c <nrfx_ipc_handler+0xb8>)
 100041c:	6193      	str	r3, [r2, #24]
 100041e:	f44f 7300 	mov.w	r3, #512	; 0x200
 1000422:	8393      	strh	r3, [r2, #28]
 1000424:	4b12      	ldr	r3, [pc, #72]	; (1000470 <nrfx_ipc_handler+0xbc>)
 1000426:	f842 3f10 	str.w	r3, [r2, #16]!
 100042a:	f8d8 3000 	ldr.w	r3, [r8]
 100042e:	6898      	ldr	r0, [r3, #8]
 1000430:	68db      	ldr	r3, [r3, #12]
 1000432:	ea01 41c0 	and.w	r1, r1, r0, lsl #19
 1000436:	f441 51e6 	orr.w	r1, r1, #7360	; 0x1cc0
 100043a:	4806      	ldr	r0, [pc, #24]	; (1000454 <nrfx_ipc_handler+0xa0>)
 100043c:	f001 fc36 	bl	1001cac <z_impl_z_log_msg_static_create>
			ipc_rx_buf->valid = 0;
 1000440:	f8d8 3000 	ldr.w	r3, [r8]
 1000444:	46ad      	mov	sp, r5
 1000446:	601c      	str	r4, [r3, #0]
			ipc_rx_buf->busy = 0;
 1000448:	f8d8 3000 	ldr.w	r3, [r8]
 100044c:	605c      	str	r4, [r3, #4]
}
 100044e:	e7dc      	b.n	100040a <nrfx_ipc_handler+0x56>
 1000450:	01007128 	.word	0x01007128
 1000454:	01006ee0 	.word	0x01006ee0
 1000458:	21000000 	.word	0x21000000
 100045c:	20220408 	.word	0x20220408
 1000460:	01007136 	.word	0x01007136
 1000464:	010071c7 	.word	0x010071c7
 1000468:	7ff80000 	.word	0x7ff80000
 100046c:	0100714a 	.word	0x0100714a
 1000470:	01000003 	.word	0x01000003

01000474 <nrfx_ipc_send>:
	if (size > (IPC_DATA_MAX_SIZE - IPC_DATA_HEADER_LEN) )
 1000474:	f5b1 6ffe 	cmp.w	r1, #2032	; 0x7f0
{
 1000478:	460a      	mov	r2, r1
 100047a:	b538      	push	{r3, r4, r5, lr}
	if (size > (IPC_DATA_MAX_SIZE - IPC_DATA_HEADER_LEN) )
 100047c:	dc19      	bgt.n	10004b2 <nrfx_ipc_send+0x3e>
	if (ipc_tx_buf->valid == MAGIC_VALID && ipc_tx_buf->busy == 1)
 100047e:	490e      	ldr	r1, [pc, #56]	; (10004b8 <nrfx_ipc_send+0x44>)
 1000480:	4c0e      	ldr	r4, [pc, #56]	; (10004bc <nrfx_ipc_send+0x48>)
 1000482:	680b      	ldr	r3, [r1, #0]
 1000484:	681d      	ldr	r5, [r3, #0]
 1000486:	42a5      	cmp	r5, r4
 1000488:	d106      	bne.n	1000498 <nrfx_ipc_send+0x24>
 100048a:	685d      	ldr	r5, [r3, #4]
 100048c:	2d01      	cmp	r5, #1
 100048e:	d103      	bne.n	1000498 <nrfx_ipc_send+0x24>
}
 1000490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 1000494:	f7ff bf78 	b.w	1000388 <nrfx_ipc_send.part.0>
	ipc_tx_buf->valid = MAGIC_VALID;
 1000498:	601c      	str	r4, [r3, #0]
	ipc_tx_buf->busy = 1;
 100049a:	2401      	movs	r4, #1
 100049c:	680b      	ldr	r3, [r1, #0]
	memcpy(ipc_tx_buf->data, data, size);
 100049e:	4601      	mov	r1, r0
	ipc_tx_buf->len = size;
 10004a0:	e9c3 4201 	strd	r4, r2, [r3, #4]
	memcpy(ipc_tx_buf->data, data, size);
 10004a4:	68d8      	ldr	r0, [r3, #12]
 10004a6:	f006 f888 	bl	10065ba <memcpy>
	return 0;
 10004aa:	2000      	movs	r0, #0

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10004ac:	4b04      	ldr	r3, [pc, #16]	; (10004c0 <nrfx_ipc_send+0x4c>)
 10004ae:	605c      	str	r4, [r3, #4]
}
 10004b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 10004b2:	f06f 0015 	mvn.w	r0, #21
 10004b6:	e7fb      	b.n	10004b0 <nrfx_ipc_send+0x3c>
 10004b8:	21000004 	.word	0x21000004
 10004bc:	20220408 	.word	0x20220408
 10004c0:	41012000 	.word	0x41012000

010004c4 <send_to_app>:

void send_to_app(void)
{
 10004c4:	b590      	push	{r4, r7, lr}
 10004c6:	b087      	sub	sp, #28
	int ret;
	static uint8_t cnt;
	char test_str[20];

	test_str[0] = 0x1;
 10004c8:	2301      	movs	r3, #1
	snprintf(&test_str[1], 16, "I am from NET %c", cnt++);
 10004ca:	4c19      	ldr	r4, [pc, #100]	; (1000530 <send_to_app+0x6c>)
{
 10004cc:	af00      	add	r7, sp, #0
	test_str[0] = 0x1;
 10004ce:	713b      	strb	r3, [r7, #4]
	snprintf(&test_str[1], 16, "I am from NET %c", cnt++);
 10004d0:	7823      	ldrb	r3, [r4, #0]
 10004d2:	2110      	movs	r1, #16
 10004d4:	1c5a      	adds	r2, r3, #1
 10004d6:	7022      	strb	r2, [r4, #0]
 10004d8:	1d78      	adds	r0, r7, #5
 10004da:	4a16      	ldr	r2, [pc, #88]	; (1000534 <send_to_app+0x70>)
 10004dc:	f002 fdc4 	bl	1003068 <snprintf>
	ret = nrfx_ipc_send(test_str, 16);
 10004e0:	2110      	movs	r1, #16
 10004e2:	1d38      	adds	r0, r7, #4
 10004e4:	f7ff ffc6 	bl	1000474 <nrfx_ipc_send>
	if (ret)
 10004e8:	4603      	mov	r3, r0
 10004ea:	b190      	cbz	r0, 1000512 <send_to_app+0x4e>
	{
		LOG_ERR("nrfx_ipc_send error %d", ret);
 10004ec:	466c      	mov	r4, sp
 10004ee:	b088      	sub	sp, #32
 10004f0:	466a      	mov	r2, sp
 10004f2:	2303      	movs	r3, #3
 10004f4:	4910      	ldr	r1, [pc, #64]	; (1000538 <send_to_app+0x74>)
 10004f6:	e9c2 1005 	strd	r1, r0, [r2, #20]
 10004fa:	f842 3f10 	str.w	r3, [r2, #16]!
 10004fe:	2300      	movs	r3, #0
 1000500:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 1000504:	480d      	ldr	r0, [pc, #52]	; (100053c <send_to_app+0x78>)
 1000506:	f001 fbd1 	bl	1001cac <z_impl_z_log_msg_static_create>
 100050a:	46a5      	mov	sp, r4
	}
	else
	{
		LOG_INF("sent successfully %x", cnt-1);
	}
}
 100050c:	371c      	adds	r7, #28
 100050e:	46bd      	mov	sp, r7
 1000510:	bd90      	pop	{r4, r7, pc}
		LOG_INF("sent successfully %x", cnt-1);
 1000512:	7821      	ldrb	r1, [r4, #0]
 1000514:	466c      	mov	r4, sp
 1000516:	b088      	sub	sp, #32
 1000518:	466a      	mov	r2, sp
 100051a:	3901      	subs	r1, #1
 100051c:	4808      	ldr	r0, [pc, #32]	; (1000540 <send_to_app+0x7c>)
 100051e:	e9c2 0105 	strd	r0, r1, [r2, #20]
 1000522:	2103      	movs	r1, #3
 1000524:	f842 1f10 	str.w	r1, [r2, #16]!
 1000528:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 100052c:	e7ea      	b.n	1000504 <send_to_app+0x40>
 100052e:	bf00      	nop
 1000530:	210008ec 	.word	0x210008ec
 1000534:	01007155 	.word	0x01007155
 1000538:	01007166 	.word	0x01007166
 100053c:	01006ee0 	.word	0x01006ee0
 1000540:	0100717d 	.word	0x0100717d

01000544 <main>:

void main(void)
{
 1000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 1000546:	b087      	sub	sp, #28
	LOG_INF("dual core communication sample - net core side at %s %s", __TIME__, __DATE__);
 1000548:	466c      	mov	r4, sp
{
 100054a:	af00      	add	r7, sp, #0
	LOG_INF("dual core communication sample - net core side at %s %s", __TIME__, __DATE__);
 100054c:	b08a      	sub	sp, #40	; 0x28
 100054e:	466b      	mov	r3, sp
 1000550:	4638      	mov	r0, r7
 1000552:	4930      	ldr	r1, [pc, #192]	; (1000614 <main+0xd0>)
 1000554:	f103 0210 	add.w	r2, r3, #16
 1000558:	6159      	str	r1, [r3, #20]
 100055a:	492f      	ldr	r1, [pc, #188]	; (1000618 <main+0xd4>)
 100055c:	f103 0523 	add.w	r5, r3, #35	; 0x23
 1000560:	6199      	str	r1, [r3, #24]
 1000562:	492e      	ldr	r1, [pc, #184]	; (100061c <main+0xd8>)
 1000564:	6039      	str	r1, [r7, #0]
 1000566:	492e      	ldr	r1, [pc, #184]	; (1000620 <main+0xdc>)
 1000568:	61d9      	str	r1, [r3, #28]
 100056a:	f103 011f 	add.w	r1, r3, #31
 100056e:	f810 6b01 	ldrb.w	r6, [r0], #1
 1000572:	f801 6f01 	strb.w	r6, [r1, #1]!
 1000576:	42a9      	cmp	r1, r5
 1000578:	d1f9      	bne.n	100056e <main+0x2a>
 100057a:	492a      	ldr	r1, [pc, #168]	; (1000624 <main+0xe0>)
 100057c:	6119      	str	r1, [r3, #16]
 100057e:	2300      	movs	r3, #0
 1000580:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
 1000584:	4828      	ldr	r0, [pc, #160]	; (1000628 <main+0xe4>)
 1000586:	f001 fb91 	bl	1001cac <z_impl_z_log_msg_static_create>

	nrfx_ipc_init(0, nrfx_ipc_handler, NULL);
 100058a:	2200      	movs	r2, #0
 100058c:	46a5      	mov	sp, r4
 100058e:	4610      	mov	r0, r2
 1000590:	4926      	ldr	r1, [pc, #152]	; (100062c <main+0xe8>)
 1000592:	f004 f9db 	bl	100494c <nrfx_ipc_init>
	IRQ_CONNECT(NRFX_IRQ_NUMBER_GET(NRF_IPC), 4,
 1000596:	2200      	movs	r2, #0
 1000598:	2104      	movs	r1, #4
 100059a:	2012      	movs	r0, #18
 100059c:	f001 ff6c 	bl	1002478 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);
	ipc_tx_buf->data = (void *)((uint32_t) ipc_tx_buf + IPC_DATA_HEADER_LEN);
 10005a0:	4823      	ldr	r0, [pc, #140]	; (1000630 <main+0xec>)
	ipc_rx_buf->data = (void *)((uint32_t) ipc_rx_buf + IPC_DATA_HEADER_LEN);
 10005a2:	4a24      	ldr	r2, [pc, #144]	; (1000634 <main+0xf0>)
	ipc_tx_buf->data = (void *)((uint32_t) ipc_tx_buf + IPC_DATA_HEADER_LEN);
 10005a4:	6801      	ldr	r1, [r0, #0]
 10005a6:	f101 0310 	add.w	r3, r1, #16
 10005aa:	60cb      	str	r3, [r1, #12]
	ipc_rx_buf->data = (void *)((uint32_t) ipc_rx_buf + IPC_DATA_HEADER_LEN);
 10005ac:	6813      	ldr	r3, [r2, #0]
 10005ae:	f103 0410 	add.w	r4, r3, #16
 10005b2:	60dc      	str	r4, [r3, #12]
	ipc_tx_buf->valid = 0;
 10005b4:	2300      	movs	r3, #0
 10005b6:	600b      	str	r3, [r1, #0]
	ipc_tx_buf->busy = 0;
 10005b8:	6801      	ldr	r1, [r0, #0]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
 10005ba:	2402      	movs	r4, #2
 10005bc:	604b      	str	r3, [r1, #4]
	ipc_rx_buf->valid = 0;
 10005be:	6811      	ldr	r1, [r2, #0]
 10005c0:	600b      	str	r3, [r1, #0]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
 10005c2:	2101      	movs	r1, #1
	ipc_rx_buf->busy = 0;	
 10005c4:	6812      	ldr	r2, [r2, #0]
 10005c6:	6053      	str	r3, [r2, #4]
    p_reg->SEND_CNF[index] = channels_mask;
 10005c8:	4a1b      	ldr	r2, [pc, #108]	; (1000638 <main+0xf4>)
 10005ca:	f8c2 4514 	str.w	r4, [r2, #1300]	; 0x514
    p_reg->RECEIVE_CNF[index] = channels_mask;
 10005ce:	f8c2 1590 	str.w	r1, [r2, #1424]	; 0x590
    p_reg->INTENSET = mask;
 10005d2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304

	nrf_ipc_send_config_set(NRF_IPC, CH_NO_SEND, 1 << CH_NO_SEND);
	nrf_ipc_receive_config_set(NRF_IPC, CH_NO_RECEIVE, 1 << CH_NO_RECEIVE);
	nrf_ipc_int_enable(NRF_IPC, 1 << CH_NO_RECEIVE);

	LOG_INF("ipc init done");
 10005d6:	4a19      	ldr	r2, [pc, #100]	; (100063c <main+0xf8>)
 10005d8:	e9c7 4204 	strd	r4, r2, [r7, #16]

	while (1) {                
        LOG_INF("net core start to send");
 10005dc:	4e18      	ldr	r6, [pc, #96]	; (1000640 <main+0xfc>)
 10005de:	4d12      	ldr	r5, [pc, #72]	; (1000628 <main+0xe4>)
 10005e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 10005e4:	4810      	ldr	r0, [pc, #64]	; (1000628 <main+0xe4>)
 10005e6:	f107 0210 	add.w	r2, r7, #16
 10005ea:	f001 fb5f 	bl	1001cac <z_impl_z_log_msg_static_create>
 10005ee:	e9c7 4604 	strd	r4, r6, [r7, #16]
 10005f2:	2300      	movs	r3, #0
 10005f4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 10005f8:	4628      	mov	r0, r5
 10005fa:	f107 0210 	add.w	r2, r7, #16
 10005fe:	f001 fb55 	bl	1001cac <z_impl_z_log_msg_static_create>
        send_to_app();
 1000602:	f7ff ff5f 	bl	10004c4 <send_to_app>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 1000606:	2100      	movs	r1, #0
 1000608:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 100060c:	f005 f87c 	bl	1005708 <z_impl_k_sleep>
	while (1) {                
 1000610:	e7ed      	b.n	10005ee <main+0xaa>
 1000612:	bf00      	nop
 1000614:	01007192 	.word	0x01007192
 1000618:	010071ca 	.word	0x010071ca
 100061c:	03010200 	.word	0x03010200
 1000620:	010071d3 	.word	0x010071d3
 1000624:	02000004 	.word	0x02000004
 1000628:	01006ee0 	.word	0x01006ee0
 100062c:	010003b5 	.word	0x010003b5
 1000630:	21000004 	.word	0x21000004
 1000634:	21000000 	.word	0x21000000
 1000638:	41012000 	.word	0x41012000
 100063c:	010071df 	.word	0x010071df
 1000640:	010071ed 	.word	0x010071ed

01000644 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 1000644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1000648:	b091      	sub	sp, #68	; 0x44
 100064a:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
 100064c:	f002 0304 	and.w	r3, r2, #4
 1000650:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 1000652:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 1000656:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 1000658:	0784      	lsls	r4, r0, #30
{
 100065a:	4605      	mov	r5, r0
 100065c:	460e      	mov	r6, r1
 100065e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 1000662:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
 1000664:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
 1000666:	f040 81bd 	bne.w	10009e4 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
 100066a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 100066c:	b130      	cbz	r0, 100067c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 100066e:	2907      	cmp	r1, #7
 1000670:	d809      	bhi.n	1000686 <cbvprintf_package+0x42>
		return -ENOSPC;
 1000672:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 1000676:	b011      	add	sp, #68	; 0x44
 1000678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 100067c:	f001 0607 	and.w	r6, r1, #7
 1000680:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 1000682:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
 1000686:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 1000688:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
 100068c:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
 1000690:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 1000692:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 1000696:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
 1000698:	9301      	str	r3, [sp, #4]
	bool parsing = false;
 100069a:	46cb      	mov	fp, r9
	size = sizeof(char *);
 100069c:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 100069e:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
 10006a2:	b10d      	cbz	r5, 10006a8 <cbvprintf_package+0x64>
				*(const char **)buf = s;
 10006a4:	9a00      	ldr	r2, [sp, #0]
 10006a6:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 10006a8:	9805      	ldr	r0, [sp, #20]
 10006aa:	2800      	cmp	r0, #0
 10006ac:	f300 80eb 	bgt.w	1000886 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 10006b0:	4899      	ldr	r0, [pc, #612]	; (1000918 <cbvprintf_package+0x2d4>)
 10006b2:	9a00      	ldr	r2, [sp, #0]
 10006b4:	4282      	cmp	r2, r0
 10006b6:	d303      	bcc.n	10006c0 <cbvprintf_package+0x7c>
 10006b8:	4898      	ldr	r0, [pc, #608]	; (100091c <cbvprintf_package+0x2d8>)
 10006ba:	4282      	cmp	r2, r0
 10006bc:	f0c0 80e3 	bcc.w	1000886 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 10006c0:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 10006c2:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 10006c6:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 10006c8:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 10006cc:	f100 8106 	bmi.w	10008dc <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 10006d0:	2f0f      	cmp	r7, #15
 10006d2:	f200 80b4 	bhi.w	100083e <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
 10006d6:	2d00      	cmp	r5, #0
 10006d8:	f000 8108 	beq.w	10008ec <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
 10006dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 10006e0:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 10006e4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 10006e6:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 10006ea:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
 10006ee:	9804      	ldr	r0, [sp, #16]
 10006f0:	3001      	adds	r0, #1
 10006f2:	9004      	str	r0, [sp, #16]
 10006f4:	e0ea      	b.n	10008cc <cbvprintf_package+0x288>
			switch (*fmt) {
 10006f6:	287a      	cmp	r0, #122	; 0x7a
 10006f8:	d860      	bhi.n	10007bc <cbvprintf_package+0x178>
 10006fa:	284b      	cmp	r0, #75	; 0x4b
 10006fc:	d80e      	bhi.n	100071c <cbvprintf_package+0xd8>
 10006fe:	2847      	cmp	r0, #71	; 0x47
 1000700:	d85c      	bhi.n	10007bc <cbvprintf_package+0x178>
 1000702:	2829      	cmp	r0, #41	; 0x29
 1000704:	d82f      	bhi.n	1000766 <cbvprintf_package+0x122>
 1000706:	2825      	cmp	r0, #37	; 0x25
 1000708:	d055      	beq.n	10007b6 <cbvprintf_package+0x172>
 100070a:	d857      	bhi.n	10007bc <cbvprintf_package+0x178>
 100070c:	2820      	cmp	r0, #32
 100070e:	d07d      	beq.n	100080c <cbvprintf_package+0x1c8>
 1000710:	3823      	subs	r0, #35	; 0x23
 1000712:	f1d0 0b00 	rsbs	fp, r0, #0
 1000716:	eb4b 0b00 	adc.w	fp, fp, r0
 100071a:	e077      	b.n	100080c <cbvprintf_package+0x1c8>
 100071c:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
 1000720:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 1000724:	d84a      	bhi.n	10007bc <cbvprintf_package+0x178>
 1000726:	e8df f00c 	tbb	[pc, ip]
 100072a:	4971      	.short	0x4971
 100072c:	49494949 	.word	0x49494949
 1000730:	49494949 	.word	0x49494949
 1000734:	494c4949 	.word	0x494c4949
 1000738:	49494949 	.word	0x49494949
 100073c:	5a494949 	.word	0x5a494949
 1000740:	5a4c4c49 	.word	0x5a4c4c49
 1000744:	4c715a5a 	.word	0x4c715a5a
 1000748:	4971496e 	.word	0x4971496e
 100074c:	49184c18 	.word	0x49184c18
 1000750:	4c808349 	.word	0x4c808349
 1000754:	494c4949 	.word	0x494c4949
 1000758:	80          	.byte	0x80
 1000759:	00          	.byte	0x00
 100075a:	2000      	movs	r0, #0
 100075c:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
 1000760:	f04f 0a04 	mov.w	sl, #4
 1000764:	e039      	b.n	10007da <cbvprintf_package+0x196>
 1000766:	2201      	movs	r2, #1
			switch (*fmt) {
 1000768:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
 100076c:	fa5f fc8c 	uxtb.w	ip, ip
 1000770:	fa02 fc0c 	lsl.w	ip, r2, ip
 1000774:	ea1c 0f0e 	tst.w	ip, lr
 1000778:	d148      	bne.n	100080c <cbvprintf_package+0x1c8>
 100077a:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
 100077e:	d12e      	bne.n	10007de <cbvprintf_package+0x19a>
 1000780:	ea1c 0b02 	ands.w	fp, ip, r2
 1000784:	d042      	beq.n	100080c <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
 1000786:	3c01      	subs	r4, #1
 1000788:	4454      	add	r4, sl
 100078a:	f1ca 0c00 	rsb	ip, sl, #0
 100078e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 1000792:	2d00      	cmp	r5, #0
 1000794:	d061      	beq.n	100085a <cbvprintf_package+0x216>
 1000796:	eba3 0c05 	sub.w	ip, r3, r5
 100079a:	44a4      	add	ip, r4
 100079c:	45b4      	cmp	ip, r6
 100079e:	f63f af68 	bhi.w	1000672 <cbvprintf_package+0x2e>
		if (is_str_arg) {
 10007a2:	2800      	cmp	r0, #0
 10007a4:	d168      	bne.n	1000878 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
 10007a6:	2b04      	cmp	r3, #4
 10007a8:	d147      	bne.n	100083a <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
 10007aa:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
 10007ae:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
 10007b0:	2304      	movs	r3, #4
 10007b2:	3404      	adds	r4, #4
 10007b4:	e02a      	b.n	100080c <cbvprintf_package+0x1c8>
				arg_idx--;
 10007b6:	9a01      	ldr	r2, [sp, #4]
 10007b8:	3a01      	subs	r2, #1
 10007ba:	9201      	str	r2, [sp, #4]
				parsing = false;
 10007bc:	f04f 0b00 	mov.w	fp, #0
				continue;
 10007c0:	e024      	b.n	100080c <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
 10007c2:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 10007c6:	286c      	cmp	r0, #108	; 0x6c
 10007c8:	d134      	bne.n	1000834 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
 10007ca:	2000      	movs	r0, #0
 10007cc:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
 10007d0:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
 10007d2:	2b6c      	cmp	r3, #108	; 0x6c
 10007d4:	d1c4      	bne.n	1000760 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
 10007d6:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
 10007da:	4653      	mov	r3, sl
 10007dc:	e7d3      	b.n	1000786 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
 10007de:	f108 0807 	add.w	r8, r8, #7
 10007e2:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
 10007e6:	3407      	adds	r4, #7
 10007e8:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
 10007ec:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
 10007f0:	b135      	cbz	r5, 1000800 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
 10007f2:	9806      	ldr	r0, [sp, #24]
 10007f4:	4420      	add	r0, r4
 10007f6:	42b0      	cmp	r0, r6
 10007f8:	f63f af3b 	bhi.w	1000672 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
 10007fc:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
 1000800:	f04f 0b00 	mov.w	fp, #0
				buf += size;
 1000804:	3408      	adds	r4, #8
			switch (*fmt) {
 1000806:	f04f 0a08 	mov.w	sl, #8
 100080a:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
 100080c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 1000810:	2800      	cmp	r0, #0
 1000812:	d078      	beq.n	1000906 <cbvprintf_package+0x2c2>
			if (!parsing) {
 1000814:	f1bb 0f00 	cmp.w	fp, #0
 1000818:	f47f af6d 	bne.w	10006f6 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
 100081c:	2825      	cmp	r0, #37	; 0x25
 100081e:	d1f5      	bne.n	100080c <cbvprintf_package+0x1c8>
					parsing = true;
 1000820:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
 1000824:	9b01      	ldr	r3, [sp, #4]
 1000826:	3301      	adds	r3, #1
 1000828:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
 100082a:	f04f 0a04 	mov.w	sl, #4
 100082e:	e7ec      	b.n	100080a <cbvprintf_package+0x1c6>
			switch (*fmt) {
 1000830:	4658      	mov	r0, fp
 1000832:	e793      	b.n	100075c <cbvprintf_package+0x118>
 1000834:	2000      	movs	r0, #0
				parsing = false;
 1000836:	4683      	mov	fp, r0
 1000838:	e7a5      	b.n	1000786 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
 100083a:	2b08      	cmp	r3, #8
 100083c:	d002      	beq.n	1000844 <cbvprintf_package+0x200>
					return -EINVAL;
 100083e:	f06f 0015 	mvn.w	r0, #21
 1000842:	e718      	b.n	1000676 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
 1000844:	f108 0807 	add.w	r8, r8, #7
 1000848:	f028 0807 	bic.w	r8, r8, #7
 100084c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
 1000850:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
 1000854:	2308      	movs	r3, #8
 1000856:	3408      	adds	r4, #8
 1000858:	e7d8      	b.n	100080c <cbvprintf_package+0x1c8>
		if (is_str_arg) {
 100085a:	b968      	cbnz	r0, 1000878 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
 100085c:	2b04      	cmp	r3, #4
 100085e:	d102      	bne.n	1000866 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
 1000860:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
 1000864:	e7a4      	b.n	10007b0 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
 1000866:	2b08      	cmp	r3, #8
 1000868:	d1e9      	bne.n	100083e <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
 100086a:	f108 0807 	add.w	r8, r8, #7
 100086e:	f028 0807 	bic.w	r8, r8, #7
 1000872:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
 1000876:	e7ed      	b.n	1000854 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 1000878:	9a05      	ldr	r2, [sp, #20]
 100087a:	3a01      	subs	r2, #1
 100087c:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
 100087e:	f858 2b04 	ldr.w	r2, [r8], #4
 1000882:	9200      	str	r2, [sp, #0]
 1000884:	e70d      	b.n	10006a2 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
 1000886:	9a03      	ldr	r2, [sp, #12]
 1000888:	0790      	lsls	r0, r2, #30
 100088a:	d520      	bpl.n	10008ce <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 100088c:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 1000890:	eba4 0e05 	sub.w	lr, r4, r5
 1000894:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
 1000898:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 100089c:	d2cf      	bcs.n	100083e <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 100089e:	2f0f      	cmp	r7, #15
 10008a0:	d8cd      	bhi.n	100083e <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
 10008a2:	b1f5      	cbz	r5, 10008e2 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
 10008a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 10008a8:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
 10008ac:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
 10008ae:	b2c0      	uxtb	r0, r0
 10008b0:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
 10008b4:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
 10008b8:	f1bc 0f00 	cmp.w	ip, #0
 10008bc:	f43f af17 	beq.w	10006ee <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 10008c0:	f060 007f 	orn	r0, r0, #127	; 0x7f
 10008c4:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
 10008c8:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
 10008cc:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
 10008ce:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
 10008d2:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
 10008d6:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
 10008d8:	9206      	str	r2, [sp, #24]
 10008da:	e797      	b.n	100080c <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
 10008dc:	f04f 0c00 	mov.w	ip, #0
 10008e0:	e7da      	b.n	1000898 <cbvprintf_package+0x254>
				} else if (is_ro) {
 10008e2:	f1bc 0f00 	cmp.w	ip, #0
 10008e6:	d001      	beq.n	10008ec <cbvprintf_package+0x2a8>
					len += 1;
 10008e8:	3601      	adds	r6, #1
 10008ea:	e7ef      	b.n	10008cc <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
 10008ec:	9802      	ldr	r0, [sp, #8]
					len += 2;
 10008ee:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
 10008f0:	2800      	cmp	r0, #0
 10008f2:	d1eb      	bne.n	10008cc <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
 10008f4:	9800      	ldr	r0, [sp, #0]
 10008f6:	e9cd 3106 	strd	r3, r1, [sp, #24]
 10008fa:	f005 fe4e 	bl	100659a <strlen>
 10008fe:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 1000902:	4406      	add	r6, r0
 1000904:	e7e2      	b.n	10008cc <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
 1000906:	1b63      	subs	r3, r4, r5
 1000908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 100090c:	d297      	bcs.n	100083e <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
 100090e:	b93d      	cbnz	r5, 1000920 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 1000910:	f1a6 0408 	sub.w	r4, r6, #8
 1000914:	18e0      	adds	r0, r4, r3
 1000916:	e6ae      	b.n	1000676 <cbvprintf_package+0x32>
 1000918:	01006cf8 	.word	0x01006cf8
 100091c:	010079d4 	.word	0x010079d4
	if (rws_pos_en) {
 1000920:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 1000922:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
 1000924:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
 1000926:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 1000928:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
 100092c:	b1c2      	cbz	r2, 1000960 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
 100092e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
 1000930:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
 1000934:	f1b9 0f00 	cmp.w	r9, #0
 1000938:	d005      	beq.n	1000946 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
 100093a:	2200      	movs	r2, #0
 100093c:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
 100093e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
 1000942:	4297      	cmp	r7, r2
 1000944:	d10e      	bne.n	1000964 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
 1000946:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
 100094a:	f1c5 0301 	rsb	r3, r5, #1
 100094e:	f10d 0820 	add.w	r8, sp, #32
 1000952:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
 1000954:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
 1000958:	4557      	cmp	r7, sl
 100095a:	d112      	bne.n	1000982 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
 100095c:	1b60      	subs	r0, r4, r5
 100095e:	e68a      	b.n	1000676 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
 1000960:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
 1000962:	e7e5      	b.n	1000930 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 1000964:	f810 3b01 	ldrb.w	r3, [r0], #1
 1000968:	0619      	lsls	r1, r3, #24
 100096a:	d508      	bpl.n	100097e <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
 100096c:	eb04 0e0c 	add.w	lr, r4, ip
 1000970:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 1000972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
 1000976:	f63f ae7c 	bhi.w	1000672 <cbvprintf_package+0x2e>
			*buf++ = pos;
 100097a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
 100097e:	3201      	adds	r2, #1
 1000980:	e7df      	b.n	1000942 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 1000982:	f1b9 0f00 	cmp.w	r9, #0
 1000986:	d003      	beq.n	1000990 <cbvprintf_package+0x34c>
 1000988:	f998 2000 	ldrsb.w	r2, [r8]
 100098c:	2a00      	cmp	r2, #0
 100098e:	db17      	blt.n	10009c0 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
 1000990:	9b02      	ldr	r3, [sp, #8]
 1000992:	b1d3      	cbz	r3, 10009ca <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
 1000994:	f81a 200b 	ldrb.w	r2, [sl, fp]
 1000998:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
 100099c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
 100099e:	9b01      	ldr	r3, [sp, #4]
 10009a0:	1898      	adds	r0, r3, r2
 10009a2:	4420      	add	r0, r4
 10009a4:	42b0      	cmp	r0, r6
 10009a6:	f63f ae64 	bhi.w	1000672 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
 10009aa:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
 10009ae:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
 10009b0:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
 10009b4:	4620      	mov	r0, r4
 10009b6:	9203      	str	r2, [sp, #12]
 10009b8:	f005 fdff 	bl	10065ba <memcpy>
		buf += size;
 10009bc:	9a03      	ldr	r2, [sp, #12]
 10009be:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
 10009c0:	f10a 0a01 	add.w	sl, sl, #1
 10009c4:	f108 0801 	add.w	r8, r8, #1
 10009c8:	e7c6      	b.n	1000958 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 10009ca:	f898 2000 	ldrb.w	r2, [r8]
 10009ce:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 10009d2:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 10009d4:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
 10009d6:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 10009d8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
 10009dc:	f005 fddd 	bl	100659a <strlen>
 10009e0:	1c42      	adds	r2, r0, #1
 10009e2:	e7dc      	b.n	100099e <cbvprintf_package+0x35a>
		return -EFAULT;
 10009e4:	f06f 000d 	mvn.w	r0, #13
 10009e8:	e645      	b.n	1000676 <cbvprintf_package+0x32>
 10009ea:	bf00      	nop

010009ec <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
 10009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 10009f0:	b095      	sub	sp, #84	; 0x54
 10009f2:	af00      	add	r7, sp, #0
 10009f4:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
 10009f8:	61bb      	str	r3, [r7, #24]
 10009fa:	f3cb 03c0 	ubfx	r3, fp, #3, #1
 10009fe:	4604      	mov	r4, r0
 1000a00:	627a      	str	r2, [r7, #36]	; 0x24
 1000a02:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
 1000a04:	6239      	str	r1, [r7, #32]
 1000a06:	b951      	cbnz	r1, 1000a1e <cbprintf_package_convert+0x32>
	for (int i = 0; i < s_nbr; i++) {
 1000a08:	460d      	mov	r5, r1
	args_size = buf[0] * sizeof(int);
 1000a0a:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
 1000a0c:	7846      	ldrb	r6, [r0, #1]
	ros_nbr   = buf[2];
 1000a0e:	7880      	ldrb	r0, [r0, #2]
	buf += ros_nbr;
 1000a10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 1000a14:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
 1000a16:	42ae      	cmp	r6, r5
 1000a18:	d81a      	bhi.n	1000a50 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
 1000a1a:	1b03      	subs	r3, r0, r4
 1000a1c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
 1000a1e:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
 1000a22:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
 1000a24:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
 1000a26:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
 1000a28:	f1b9 0f00 	cmp.w	r9, #0
 1000a2c:	d002      	beq.n	1000a34 <cbprintf_package_convert+0x48>
 1000a2e:	f01b 0f01 	tst.w	fp, #1
 1000a32:	d116      	bne.n	1000a62 <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
 1000a34:	697b      	ldr	r3, [r7, #20]
 1000a36:	bb53      	cbnz	r3, 1000a8e <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
 1000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000a3a:	b11b      	cbz	r3, 1000a44 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
 1000a3c:	4620      	mov	r0, r4
 1000a3e:	69ba      	ldr	r2, [r7, #24]
 1000a40:	6a39      	ldr	r1, [r7, #32]
 1000a42:	4798      	blx	r3
		}

		return in_len;
 1000a44:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
 1000a46:	4628      	mov	r0, r5
 1000a48:	3754      	adds	r7, #84	; 0x54
 1000a4a:	46bd      	mov	sp, r7
 1000a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
 1000a50:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
 1000a54:	4640      	mov	r0, r8
 1000a56:	f005 fda0 	bl	100659a <strlen>
 1000a5a:	3001      	adds	r0, #1
 1000a5c:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
 1000a5e:	3501      	adds	r5, #1
 1000a60:	e7d9      	b.n	1000a16 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
 1000a62:	6863      	ldr	r3, [r4, #4]
 1000a64:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 1000a68:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
 1000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
 1000a6c:	ea4f 028a 	mov.w	r2, sl, lsl #2
 1000a70:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
 1000a72:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
 1000a76:	2b00      	cmp	r3, #0
 1000a78:	f040 8102 	bne.w	1000c80 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
 1000a7c:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
 1000a7e:	2600      	movs	r6, #0
		out_len = (int)in_len;
 1000a80:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
 1000a82:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
 1000a86:	4543      	cmp	r3, r8
 1000a88:	d14e      	bne.n	1000b28 <cbprintf_package_convert+0x13c>
 1000a8a:	44ca      	add	sl, r9
 1000a8c:	e013      	b.n	1000ab6 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
 1000a8e:	f01b 0f02 	tst.w	fp, #2
 1000a92:	d0d1      	beq.n	1000a38 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
 1000a94:	f894 a000 	ldrb.w	sl, [r4]
 1000a98:	ea4f 038a 	mov.w	r3, sl, lsl #2
 1000a9c:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
 1000a9e:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
 1000aa0:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
 1000aa4:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
 1000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000aa8:	2b00      	cmp	r3, #0
 1000aaa:	d178      	bne.n	1000b9e <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
 1000aac:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 1000aae:	f1b9 0f00 	cmp.w	r9, #0
 1000ab2:	d14e      	bne.n	1000b52 <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
 1000ab4:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
 1000ab6:	f01b 0f05 	tst.w	fp, #5
 1000aba:	bf0c      	ite	eq
 1000abc:	2302      	moveq	r3, #2
 1000abe:	2301      	movne	r3, #1
 1000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 1000ac2:	697b      	ldr	r3, [r7, #20]
 1000ac4:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 1000ac8:	f00b 0302 	and.w	r3, fp, #2
 1000acc:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
 1000ace:	45ca      	cmp	sl, r9
 1000ad0:	d0b9      	beq.n	1000a46 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
 1000ad2:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
 1000ad6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 1000ada:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 1000ade:	4bad      	ldr	r3, [pc, #692]	; (1000d94 <cbprintf_package_convert+0x3a8>)
 1000ae0:	4598      	cmp	r8, r3
 1000ae2:	d302      	bcc.n	1000aea <cbprintf_package_convert+0xfe>
 1000ae4:	4bac      	ldr	r3, [pc, #688]	; (1000d98 <cbprintf_package_convert+0x3ac>)
 1000ae6:	4598      	cmp	r8, r3
 1000ae8:	d339      	bcc.n	1000b5e <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 1000aea:	693b      	ldr	r3, [r7, #16]
 1000aec:	2b00      	cmp	r3, #0
 1000aee:	d043      	beq.n	1000b78 <cbprintf_package_convert+0x18c>
 1000af0:	69f8      	ldr	r0, [r7, #28]
 1000af2:	f005 f8d2 	bl	1005c9a <is_ptr>
 1000af6:	2800      	cmp	r0, #0
 1000af8:	d03e      	beq.n	1000b78 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
 1000afa:	46e8      	mov	r8, sp
 1000afc:	b08a      	sub	sp, #40	; 0x28
 1000afe:	466a      	mov	r2, sp
 1000b00:	4ba6      	ldr	r3, [pc, #664]	; (1000d9c <cbprintf_package_convert+0x3b0>)
 1000b02:	6153      	str	r3, [r2, #20]
 1000b04:	69fb      	ldr	r3, [r7, #28]
 1000b06:	e9c2 3106 	strd	r3, r1, [r2, #24]
 1000b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 1000b0e:	8413      	strh	r3, [r2, #32]
 1000b10:	4ba3      	ldr	r3, [pc, #652]	; (1000da0 <cbprintf_package_convert+0x3b4>)
 1000b12:	f842 3f10 	str.w	r3, [r2, #16]!
 1000b16:	2300      	movs	r3, #0
 1000b18:	f44f 5112 	mov.w	r1, #9344	; 0x2480
 1000b1c:	48a1      	ldr	r0, [pc, #644]	; (1000da4 <cbprintf_package_convert+0x3b8>)
 1000b1e:	f001 f8c5 	bl	1001cac <z_impl_z_log_msg_static_create>
				out_len -= 2;
 1000b22:	3d02      	subs	r5, #2
 1000b24:	46c5      	mov	sp, r8
				continue;
 1000b26:	e7d2      	b.n	1000ace <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
 1000b28:	f818 2b01 	ldrb.w	r2, [r8], #1
 1000b2c:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
 1000b2e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 1000b32:	f005 fd32 	bl	100659a <strlen>
				if (strl && strl_cnt < strl_len) {
 1000b36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 1000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
 1000b3a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
 1000b3c:	b13a      	cbz	r2, 1000b4e <cbprintf_package_convert+0x162>
 1000b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 1000b42:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
 1000b44:	bf3e      	ittt	cc
 1000b46:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
 1000b48:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
 1000b4c:	3601      	addcc	r6, #1
				out_len += len;
 1000b4e:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
 1000b50:	e799      	b.n	1000a86 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 1000b52:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
 1000b56:	bf1c      	itt	ne
 1000b58:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
 1000b5a:	44ca      	addne	sl, r9
 1000b5c:	e7ab      	b.n	1000ab6 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
 1000b5e:	693b      	ldr	r3, [r7, #16]
 1000b60:	b123      	cbz	r3, 1000b6c <cbprintf_package_convert+0x180>
 1000b62:	69f8      	ldr	r0, [r7, #28]
 1000b64:	f005 f899 	bl	1005c9a <is_ptr>
 1000b68:	2800      	cmp	r0, #0
 1000b6a:	d1c6      	bne.n	1000afa <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 1000b6c:	f01b 0f01 	tst.w	fp, #1
 1000b70:	d105      	bne.n	1000b7e <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
 1000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000b74:	1aed      	subs	r5, r5, r3
 1000b76:	e7aa      	b.n	1000ace <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 1000b78:	6a3b      	ldr	r3, [r7, #32]
 1000b7a:	2b00      	cmp	r3, #0
 1000b7c:	d0a7      	beq.n	1000ace <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
 1000b7e:	4640      	mov	r0, r8
 1000b80:	f005 fd0b 	bl	100659a <strlen>
				if (strl && strl_cnt < strl_len) {
 1000b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 1000b86:	b143      	cbz	r3, 1000b9a <cbprintf_package_convert+0x1ae>
 1000b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 1000b8c:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
 1000b8e:	bf3f      	itttt	cc
 1000b90:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
 1000b92:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
 1000b94:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
 1000b98:	3601      	addcc	r6, #1
				out_len += (len - 1);
 1000b9a:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
 1000b9c:	e797      	b.n	1000ace <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 1000b9e:	f1b9 0f00 	cmp.w	r9, #0
 1000ba2:	d072      	beq.n	1000c8a <cbprintf_package_convert+0x29e>
 1000ba4:	f01b 0604 	ands.w	r6, fp, #4
 1000ba8:	d072      	beq.n	1000c90 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
 1000baa:	46c8      	mov	r8, r9
		scpy_cnt = 0;
 1000bac:	2600      	movs	r6, #0
		dst = keep_str_pos;
 1000bae:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
 1000bb2:	464a      	mov	r2, r9
 1000bb4:	4651      	mov	r1, sl
 1000bb6:	f005 fd00 	bl	10065ba <memcpy>
	str_pos += ros_nbr;
 1000bba:	697b      	ldr	r3, [r7, #20]
 1000bbc:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
 1000bbe:	005b      	lsls	r3, r3, #1
 1000bc0:	60bb      	str	r3, [r7, #8]
 1000bc2:	697b      	ldr	r3, [r7, #20]
 1000bc4:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 1000bc8:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 1000bca:	f00b 0302 	and.w	r3, fp, #2
 1000bce:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
 1000bd0:	697b      	ldr	r3, [r7, #20]
 1000bd2:	459a      	cmp	sl, r3
 1000bd4:	d15e      	bne.n	1000c94 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
 1000bd6:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 1000bd8:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
 1000bdc:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 1000bde:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 1000be0:	bf18      	it	ne
 1000be2:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 1000be4:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
 1000be8:	bf08      	it	eq
 1000bea:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 1000bee:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
 1000bf2:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 1000bf4:	f040 809c 	bne.w	1000d30 <cbprintf_package_convert+0x344>
 1000bf8:	f01b 0f04 	tst.w	fp, #4
 1000bfc:	bf14      	ite	ne
 1000bfe:	4640      	movne	r0, r8
 1000c00:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
 1000c02:	f894 b002 	ldrb.w	fp, [r4, #2]
 1000c06:	f894 a003 	ldrb.w	sl, [r4, #3]
 1000c0a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
 1000c0c:	7062      	strb	r2, [r4, #1]
 1000c0e:	70a0      	strb	r0, [r4, #2]
 1000c10:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
 1000c12:	4620      	mov	r0, r4
 1000c14:	69ba      	ldr	r2, [r7, #24]
 1000c16:	68f9      	ldr	r1, [r7, #12]
 1000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000c1a:	4798      	blx	r3
	if (rv < 0) {
 1000c1c:	1e05      	subs	r5, r0, #0
 1000c1e:	f6ff af12 	blt.w	1000a46 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
 1000c22:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 1000c24:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
 1000c26:	7023      	strb	r3, [r4, #0]
 1000c28:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 1000c2a:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
 1000c2c:	7063      	strb	r3, [r4, #1]
 1000c2e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 1000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
 1000c34:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
 1000c38:	f107 0040 	add.w	r0, r7, #64	; 0x40
 1000c3c:	4798      	blx	r3
	if (rv < 0) {
 1000c3e:	f1b0 0800 	subs.w	r8, r0, #0
 1000c42:	f2c0 80a2 	blt.w	1000d8a <cbprintf_package_convert+0x39e>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 1000c46:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
 1000c48:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 1000c4a:	eba3 0109 	sub.w	r1, r3, r9
 1000c4e:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
 1000c50:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
 1000c52:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
 1000c54:	68bb      	ldr	r3, [r7, #8]
 1000c56:	1ac9      	subs	r1, r1, r3
 1000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000c5a:	4798      	blx	r3
	if (rv < 0) {
 1000c5c:	2800      	cmp	r0, #0
 1000c5e:	f2c0 8096 	blt.w	1000d8e <cbprintf_package_convert+0x3a2>
	for (int i = 0; i < scpy_cnt; i++) {
 1000c62:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
 1000c66:	44a8      	add	r8, r5
	out_len += rv;
 1000c68:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
 1000c6c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
 1000c70:	45b3      	cmp	fp, r6
 1000c72:	db5f      	blt.n	1000d34 <cbprintf_package_convert+0x348>
	(void)cb(NULL, 0, ctx);
 1000c74:	2100      	movs	r1, #0
 1000c76:	69ba      	ldr	r2, [r7, #24]
 1000c78:	4608      	mov	r0, r1
 1000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000c7c:	4798      	blx	r3
	return out_len;
 1000c7e:	e6e2      	b.n	1000a46 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
 1000c80:	f04f 0800 	mov.w	r8, #0
 1000c84:	f107 0030 	add.w	r0, r7, #48	; 0x30
 1000c88:	e793      	b.n	1000bb2 <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
 1000c8a:	464e      	mov	r6, r9
		keep_cnt = 0;
 1000c8c:	46c8      	mov	r8, r9
 1000c8e:	e794      	b.n	1000bba <cbprintf_package_convert+0x1ce>
 1000c90:	46b0      	mov	r8, r6
 1000c92:	e792      	b.n	1000bba <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
 1000c94:	f81a 1b02 	ldrb.w	r1, [sl], #2
 1000c98:	4a3e      	ldr	r2, [pc, #248]	; (1000d94 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
 1000c9a:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
 1000c9e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 1000ca2:	4293      	cmp	r3, r2
 1000ca4:	d302      	bcc.n	1000cac <cbprintf_package_convert+0x2c0>
 1000ca6:	4a3c      	ldr	r2, [pc, #240]	; (1000d98 <cbprintf_package_convert+0x3ac>)
 1000ca8:	4293      	cmp	r3, r2
 1000caa:	d31b      	bcc.n	1000ce4 <cbprintf_package_convert+0x2f8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 1000cac:	693b      	ldr	r3, [r7, #16]
 1000cae:	b123      	cbz	r3, 1000cba <cbprintf_package_convert+0x2ce>
 1000cb0:	69f8      	ldr	r0, [r7, #28]
 1000cb2:	f004 fff2 	bl	1005c9a <is_ptr>
 1000cb6:	2800      	cmp	r0, #0
 1000cb8:	d18a      	bne.n	1000bd0 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
 1000cba:	687b      	ldr	r3, [r7, #4]
 1000cbc:	b9eb      	cbnz	r3, 1000cfa <cbprintf_package_convert+0x30e>
				keep_str_pos[keep_cnt++] = arg_idx;
 1000cbe:	f108 0301 	add.w	r3, r8, #1
 1000cc2:	b2db      	uxtb	r3, r3
 1000cc4:	f108 0228 	add.w	r2, r8, #40	; 0x28
 1000cc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
				keep_str_pos[keep_cnt++] = arg_pos;
 1000ccc:	3328      	adds	r3, #40	; 0x28
				keep_str_pos[keep_cnt++] = arg_idx;
 1000cce:	4402      	add	r2, r0
				keep_str_pos[keep_cnt++] = arg_pos;
 1000cd0:	f108 0802 	add.w	r8, r8, #2
 1000cd4:	4403      	add	r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
 1000cd6:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
 1000cda:	fa5f f888 	uxtb.w	r8, r8
 1000cde:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
 1000ce2:	e775      	b.n	1000bd0 <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
 1000ce4:	693b      	ldr	r3, [r7, #16]
 1000ce6:	b12b      	cbz	r3, 1000cf4 <cbprintf_package_convert+0x308>
 1000ce8:	69f8      	ldr	r0, [r7, #28]
 1000cea:	f004 ffd6 	bl	1005c9a <is_ptr>
 1000cee:	2800      	cmp	r0, #0
 1000cf0:	f47f af6e 	bne.w	1000bd0 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
 1000cf4:	f01b 0f01 	tst.w	fp, #1
 1000cf8:	d009      	beq.n	1000d0e <cbprintf_package_convert+0x322>
				cpy_str_pos[scpy_cnt++] = arg_pos;
 1000cfa:	f106 0228 	add.w	r2, r6, #40	; 0x28
 1000cfe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 1000d02:	1c73      	adds	r3, r6, #1
 1000d04:	1856      	adds	r6, r2, r1
 1000d06:	f806 5c20 	strb.w	r5, [r6, #-32]
 1000d0a:	b2de      	uxtb	r6, r3
 1000d0c:	e760      	b.n	1000bd0 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
 1000d0e:	f01b 0f04 	tst.w	fp, #4
 1000d12:	f43f af5d 	beq.w	1000bd0 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
 1000d16:	f108 0228 	add.w	r2, r8, #40	; 0x28
 1000d1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 1000d1e:	f108 0301 	add.w	r3, r8, #1
 1000d22:	eb02 0801 	add.w	r8, r2, r1
 1000d26:	f808 5c10 	strb.w	r5, [r8, #-16]
 1000d2a:	fa5f f883 	uxtb.w	r8, r3
 1000d2e:	e74f      	b.n	1000bd0 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
 1000d30:	2000      	movs	r0, #0
 1000d32:	e766      	b.n	1000c02 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
 1000d34:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
 1000d38:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
 1000d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
 1000d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 1000d42:	b1fb      	cbz	r3, 1000d84 <cbprintf_package_convert+0x398>
 1000d44:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
 1000d48:	2101      	movs	r1, #1
 1000d4a:	69ba      	ldr	r2, [r7, #24]
 1000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000d4e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 1000d52:	4798      	blx	r3
		if (rv < 0) {
 1000d54:	2800      	cmp	r0, #0
 1000d56:	db1a      	blt.n	1000d8e <cbprintf_package_convert+0x3a2>
		out_len += rv;
 1000d58:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
 1000d5a:	f1b8 0f00 	cmp.w	r8, #0
 1000d5e:	d106      	bne.n	1000d6e <cbprintf_package_convert+0x382>
 1000d60:	4648      	mov	r0, r9
 1000d62:	f005 fc1a 	bl	100659a <strlen>
 1000d66:	f100 0801 	add.w	r8, r0, #1
 1000d6a:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
 1000d6e:	4641      	mov	r1, r8
 1000d70:	4648      	mov	r0, r9
 1000d72:	69ba      	ldr	r2, [r7, #24]
 1000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1000d76:	4798      	blx	r3
		if (rv < 0) {
 1000d78:	2800      	cmp	r0, #0
 1000d7a:	db08      	blt.n	1000d8e <cbprintf_package_convert+0x3a2>
		out_len += rv;
 1000d7c:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
 1000d7e:	f10b 0b01 	add.w	fp, fp, #1
 1000d82:	e775      	b.n	1000c70 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
 1000d84:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
 1000d88:	e7de      	b.n	1000d48 <cbprintf_package_convert+0x35c>
 1000d8a:	4645      	mov	r5, r8
 1000d8c:	e65b      	b.n	1000a46 <cbprintf_package_convert+0x5a>
 1000d8e:	4605      	mov	r5, r0
 1000d90:	e659      	b.n	1000a46 <cbprintf_package_convert+0x5a>
 1000d92:	bf00      	nop
 1000d94:	01006cf8 	.word	0x01006cf8
 1000d98:	010079d4 	.word	0x010079d4
 1000d9c:	0100720c 	.word	0x0100720c
 1000da0:	01000004 	.word	0x01000004
 1000da4:	01006ec8 	.word	0x01006ec8

01000da8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
 1000da8:	4b01      	ldr	r3, [pc, #4]	; (1000db0 <__printk_hook_install+0x8>)
 1000daa:	6018      	str	r0, [r3, #0]
}
 1000dac:	4770      	bx	lr
 1000dae:	bf00      	nop
 1000db0:	21000008 	.word	0x21000008

01000db4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 1000db4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
 1000db6:	2500      	movs	r5, #0
{
 1000db8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
 1000dba:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
 1000dbe:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 1000dc0:	9500      	str	r5, [sp, #0]
 1000dc2:	a903      	add	r1, sp, #12
 1000dc4:	4805      	ldr	r0, [pc, #20]	; (1000ddc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
 1000dc6:	9505      	str	r5, [sp, #20]
 1000dc8:	f000 f918 	bl	1000ffc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
 1000dcc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 1000dd0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
 1000dd2:	bfb8      	it	lt
 1000dd4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
 1000dd6:	b007      	add	sp, #28
 1000dd8:	bd30      	pop	{r4, r5, pc}
 1000dda:	bf00      	nop
 1000ddc:	01005ce9 	.word	0x01005ce9

01000de0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
 1000de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000de4:	8b05      	ldrh	r5, [r0, #24]
{
 1000de6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
 1000de8:	0728      	lsls	r0, r5, #28
{
 1000dea:	4690      	mov	r8, r2
	if (processing) {
 1000dec:	d411      	bmi.n	1000e12 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
 1000dee:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000df0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
 1000df4:	f040 80cd 	bne.w	1000f92 <process_event+0x1b2>
			evt = process_recheck(mgr);
 1000df8:	4620      	mov	r0, r4
 1000dfa:	f004 ffac 	bl	1005d56 <process_recheck>
		}

		if (evt == EVT_NOP) {
 1000dfe:	b178      	cbz	r0, 1000e20 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
 1000e00:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000e02:	8b21      	ldrh	r1, [r4, #24]
 1000e04:	2804      	cmp	r0, #4
 1000e06:	d811      	bhi.n	1000e2c <process_event+0x4c>
 1000e08:	e8df f000 	tbb	[pc, r0]
 1000e0c:	856d10c3 	.word	0x856d10c3
 1000e10:	95          	.byte	0x95
 1000e11:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
 1000e12:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
 1000e14:	bf0c      	ite	eq
 1000e16:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000e1a:	f045 0520 	orrne.w	r5, r5, #32
 1000e1e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 1000e20:	f388 8811 	msr	BASEPRI, r8
 1000e24:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
 1000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000e2c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000e30:	45aa      	cmp	sl, r5
 1000e32:	f000 80a6 	beq.w	1000f82 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 1000e36:	2700      	movs	r7, #0
 1000e38:	46b9      	mov	r9, r7
 1000e3a:	463e      	mov	r6, r7
 1000e3c:	68a3      	ldr	r3, [r4, #8]
 1000e3e:	2b00      	cmp	r3, #0
 1000e40:	f000 80bd 	beq.w	1000fbe <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000e44:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 1000e48:	8321      	strh	r1, [r4, #24]
 1000e4a:	f388 8811 	msr	BASEPRI, r8
 1000e4e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 1000e52:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000e54:	2900      	cmp	r1, #0
 1000e56:	f000 80bb 	beq.w	1000fd0 <process_event+0x1f0>
	return node->next;
 1000e5a:	680d      	ldr	r5, [r1, #0]
 1000e5c:	2900      	cmp	r1, #0
 1000e5e:	f000 80b7 	beq.w	1000fd0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
 1000e62:	4633      	mov	r3, r6
 1000e64:	4652      	mov	r2, sl
 1000e66:	4620      	mov	r0, r4
 1000e68:	f8d1 8004 	ldr.w	r8, [r1, #4]
 1000e6c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000e6e:	2d00      	cmp	r5, #0
 1000e70:	d076      	beq.n	1000f60 <process_event+0x180>
 1000e72:	682b      	ldr	r3, [r5, #0]
 1000e74:	4629      	mov	r1, r5
 1000e76:	461d      	mov	r5, r3
 1000e78:	e7f0      	b.n	1000e5c <process_event+0x7c>
 1000e7a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
 1000e7e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
 1000e80:	2a01      	cmp	r2, #1
 1000e82:	d81b      	bhi.n	1000ebc <process_event+0xdc>
	list->head = NULL;
 1000e84:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000e86:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
 1000e8a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
 1000e8c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000e8e:	b289      	uxth	r1, r1
	list->tail = NULL;
 1000e90:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
 1000e94:	d109      	bne.n	1000eaa <process_event+0xca>
 1000e96:	463b      	mov	r3, r7
 1000e98:	e003      	b.n	1000ea2 <process_event+0xc2>
				mgr->refs += 1U;
 1000e9a:	8b62      	ldrh	r2, [r4, #26]
 1000e9c:	3201      	adds	r2, #1
 1000e9e:	8362      	strh	r2, [r4, #26]
	return node->next;
 1000ea0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
 1000ea2:	2b00      	cmp	r3, #0
 1000ea4:	d1f9      	bne.n	1000e9a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000ea6:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
 1000eaa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000eac:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1000eae:	f004 ff52 	bl	1005d56 <process_recheck>
 1000eb2:	2800      	cmp	r0, #0
 1000eb4:	d07b      	beq.n	1000fae <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000eb6:	f041 0120 	orr.w	r1, r1, #32
 1000eba:	e077      	b.n	1000fac <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
 1000ebc:	2b04      	cmp	r3, #4
 1000ebe:	d10a      	bne.n	1000ed6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000ec0:	f021 0107 	bic.w	r1, r1, #7
 1000ec4:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
 1000ec6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000ec8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
 1000eca:	f004 ff44 	bl	1005d56 <process_recheck>
 1000ece:	b110      	cbz	r0, 1000ed6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000ed0:	f041 0120 	orr.w	r1, r1, #32
 1000ed4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000ed6:	8b21      	ldrh	r1, [r4, #24]
 1000ed8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000edc:	45aa      	cmp	sl, r5
 1000ede:	d050      	beq.n	1000f82 <process_event+0x1a2>
 1000ee0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
 1000ee2:	46b9      	mov	r9, r7
 1000ee4:	e7aa      	b.n	1000e3c <process_event+0x5c>
			transit = mgr->transitions->start;
 1000ee6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000ee8:	f021 0107 	bic.w	r1, r1, #7
 1000eec:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
 1000ef0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
 1000ef2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000ef6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1000ef8:	d12d      	bne.n	1000f56 <process_event+0x176>
		    || (transit != NULL)) {
 1000efa:	f1b9 0f00 	cmp.w	r9, #0
 1000efe:	d040      	beq.n	1000f82 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000f00:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 1000f04:	8321      	strh	r1, [r4, #24]
 1000f06:	f388 8811 	msr	BASEPRI, r8
 1000f0a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
 1000f0e:	4620      	mov	r0, r4
 1000f10:	4939      	ldr	r1, [pc, #228]	; (1000ff8 <process_event+0x218>)
 1000f12:	47c8      	blx	r9
 1000f14:	e029      	b.n	1000f6a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000f16:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
 1000f1a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000f1c:	f041 0104 	orr.w	r1, r1, #4
 1000f20:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
 1000f22:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
 1000f24:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000f28:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1000f2a:	d0e6      	beq.n	1000efa <process_event+0x11a>
 1000f2c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000f2e:	f04f 0a04 	mov.w	sl, #4
		res = 0;
 1000f32:	463e      	mov	r6, r7
 1000f34:	e782      	b.n	1000e3c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000f36:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
 1000f3a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000f3c:	f041 0105 	orr.w	r1, r1, #5
 1000f40:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
 1000f42:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
 1000f44:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
 1000f48:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
 1000f4a:	d0d6      	beq.n	1000efa <process_event+0x11a>
 1000f4c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000f4e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
 1000f52:	463e      	mov	r6, r7
 1000f54:	e772      	b.n	1000e3c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
 1000f56:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000f58:	f04f 0a06 	mov.w	sl, #6
		res = 0;
 1000f5c:	463e      	mov	r6, r7
 1000f5e:	e76d      	b.n	1000e3c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
 1000f60:	462b      	mov	r3, r5
 1000f62:	e787      	b.n	1000e74 <process_event+0x94>
			if (transit != NULL) {
 1000f64:	f1b9 0f00 	cmp.w	r9, #0
 1000f68:	d1d1      	bne.n	1000f0e <process_event+0x12e>
	__asm__ volatile(
 1000f6a:	f04f 0320 	mov.w	r3, #32
 1000f6e:	f3ef 8811 	mrs	r8, BASEPRI
 1000f72:	f383 8812 	msr	BASEPRI_MAX, r3
 1000f76:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
 1000f7a:	8b23      	ldrh	r3, [r4, #24]
 1000f7c:	f023 0308 	bic.w	r3, r3, #8
 1000f80:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
 1000f82:	8b25      	ldrh	r5, [r4, #24]
 1000f84:	06ea      	lsls	r2, r5, #27
 1000f86:	d52e      	bpl.n	1000fe6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000f88:	f025 0310 	bic.w	r3, r5, #16
 1000f8c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000f8e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
 1000f92:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1000f94:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
 1000f96:	2e00      	cmp	r6, #0
 1000f98:	f6bf af6f 	bge.w	1000e7a <process_event+0x9a>
	list->head = NULL;
 1000f9c:	2300      	movs	r3, #0
		*clients = mgr->clients;
 1000f9e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
 1000fa0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
 1000fa4:	f021 0107 	bic.w	r1, r1, #7
 1000fa8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
 1000fac:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
 1000fae:	8b21      	ldrh	r1, [r4, #24]
 1000fb0:	f04f 0900 	mov.w	r9, #0
 1000fb4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
 1000fb8:	45aa      	cmp	sl, r5
 1000fba:	f47f af3f 	bne.w	1000e3c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
 1000fbe:	2f00      	cmp	r7, #0
 1000fc0:	d09b      	beq.n	1000efa <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
 1000fc2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
 1000fc6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
 1000fc8:	f388 8811 	msr	BASEPRI, r8
 1000fcc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
 1000fd0:	2f00      	cmp	r7, #0
 1000fd2:	d0c7      	beq.n	1000f64 <process_event+0x184>
	return node->next;
 1000fd4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
 1000fd6:	4639      	mov	r1, r7
 1000fd8:	4633      	mov	r3, r6
 1000fda:	4652      	mov	r2, sl
 1000fdc:	4620      	mov	r0, r4
 1000fde:	f004 fee6 	bl	1005dae <notify_one>
	list->head = node;
 1000fe2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
 1000fe4:	e7f4      	b.n	1000fd0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
 1000fe6:	06ab      	lsls	r3, r5, #26
 1000fe8:	f57f af1a 	bpl.w	1000e20 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
 1000fec:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
 1000ff0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
 1000ff2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
 1000ff6:	e6ff      	b.n	1000df8 <process_event+0x18>
 1000ff8:	01005ddb 	.word	0x01005ddb

01000ffc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
 1000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001000:	4681      	mov	r9, r0
 1001002:	468b      	mov	fp, r1
 1001004:	4617      	mov	r7, r2
 1001006:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 1001008:	2500      	movs	r5, #0
{
 100100a:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 100100c:	7838      	ldrb	r0, [r7, #0]
 100100e:	b908      	cbnz	r0, 1001014 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
 1001010:	4628      	mov	r0, r5
 1001012:	e357      	b.n	10016c4 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
 1001014:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
 1001016:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 1001018:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
 100101a:	d006      	beq.n	100102a <z_cbvprintf_impl+0x2e>
			OUTC('%');
 100101c:	4659      	mov	r1, fp
 100101e:	47c8      	blx	r9
 1001020:	2800      	cmp	r0, #0
 1001022:	f2c0 834f 	blt.w	10016c4 <z_cbvprintf_impl+0x6c8>
 1001026:	3501      	adds	r5, #1
		if (bps == NULL) {
 1001028:	e1fb      	b.n	1001422 <z_cbvprintf_impl+0x426>
		} state = {
 100102a:	2218      	movs	r2, #24
 100102c:	2100      	movs	r1, #0
 100102e:	a80e      	add	r0, sp, #56	; 0x38
 1001030:	f005 face 	bl	10065d0 <memset>
	if (*sp == '%') {
 1001034:	787b      	ldrb	r3, [r7, #1]
 1001036:	2b25      	cmp	r3, #37	; 0x25
 1001038:	d07d      	beq.n	1001136 <z_cbvprintf_impl+0x13a>
 100103a:	2300      	movs	r3, #0
 100103c:	4698      	mov	r8, r3
 100103e:	469e      	mov	lr, r3
 1001040:	469c      	mov	ip, r3
 1001042:	461e      	mov	r6, r3
 1001044:	1c78      	adds	r0, r7, #1
 1001046:	4601      	mov	r1, r0
		switch (*sp) {
 1001048:	f810 2b01 	ldrb.w	r2, [r0], #1
 100104c:	2a2b      	cmp	r2, #43	; 0x2b
 100104e:	f000 80a1 	beq.w	1001194 <z_cbvprintf_impl+0x198>
 1001052:	f200 8098 	bhi.w	1001186 <z_cbvprintf_impl+0x18a>
 1001056:	2a20      	cmp	r2, #32
 1001058:	f000 809f 	beq.w	100119a <z_cbvprintf_impl+0x19e>
 100105c:	2a23      	cmp	r2, #35	; 0x23
 100105e:	f000 809f 	beq.w	10011a0 <z_cbvprintf_impl+0x1a4>
 1001062:	b12b      	cbz	r3, 1001070 <z_cbvprintf_impl+0x74>
 1001064:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 100106c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1001070:	f1b8 0f00 	cmp.w	r8, #0
 1001074:	d005      	beq.n	1001082 <z_cbvprintf_impl+0x86>
 1001076:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 100107a:	f043 0320 	orr.w	r3, r3, #32
 100107e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1001082:	f1be 0f00 	cmp.w	lr, #0
 1001086:	d005      	beq.n	1001094 <z_cbvprintf_impl+0x98>
 1001088:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 100108c:	f043 0310 	orr.w	r3, r3, #16
 1001090:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 1001094:	f1bc 0f00 	cmp.w	ip, #0
 1001098:	d005      	beq.n	10010a6 <z_cbvprintf_impl+0xaa>
 100109a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 100109e:	f043 0308 	orr.w	r3, r3, #8
 10010a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 10010a6:	b12e      	cbz	r6, 10010b4 <z_cbvprintf_impl+0xb8>
 10010a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 10010ac:	f043 0304 	orr.w	r3, r3, #4
 10010b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
 10010b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 10010b8:	f003 0044 	and.w	r0, r3, #68	; 0x44
 10010bc:	2844      	cmp	r0, #68	; 0x44
 10010be:	d103      	bne.n	10010c8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
 10010c0:	f36f 1386 	bfc	r3, #6, #1
 10010c4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
 10010c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 10010cc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
 10010ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 10010d2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
 10010d6:	d17f      	bne.n	10011d8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
 10010d8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 10010dc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
 10010de:	f042 0201 	orr.w	r2, r2, #1
 10010e2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
 10010e6:	781a      	ldrb	r2, [r3, #0]
 10010e8:	2a2e      	cmp	r2, #46	; 0x2e
 10010ea:	bf0c      	ite	eq
 10010ec:	2101      	moveq	r1, #1
 10010ee:	2100      	movne	r1, #0
 10010f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 10010f4:	f361 0241 	bfi	r2, r1, #1, #1
 10010f8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
 10010fc:	d178      	bne.n	10011f0 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
 10010fe:	785a      	ldrb	r2, [r3, #1]
 1001100:	2a2a      	cmp	r2, #42	; 0x2a
 1001102:	d06e      	beq.n	10011e2 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
 1001104:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 1001106:	f04f 0c0a 	mov.w	ip, #10
	++sp;
 100110a:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 100110c:	4619      	mov	r1, r3
 100110e:	f811 0b01 	ldrb.w	r0, [r1], #1
 1001112:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 1001116:	2e09      	cmp	r6, #9
 1001118:	f240 8095 	bls.w	1001246 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
 100111c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
 1001120:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
 1001122:	f3c1 0040 	ubfx	r0, r1, #1, #1
 1001126:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 100112a:	460a      	mov	r2, r1
 100112c:	f360 0241 	bfi	r2, r0, #1, #1
 1001130:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 1001134:	e05c      	b.n	10011f0 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
 1001136:	1cba      	adds	r2, r7, #2
 1001138:	9203      	str	r2, [sp, #12]
 100113a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
 100113e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1001142:	07da      	lsls	r2, r3, #31
 1001144:	f140 812e 	bpl.w	10013a4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
 1001148:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 100114c:	f1b8 0f00 	cmp.w	r8, #0
 1001150:	da07      	bge.n	1001162 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
 1001152:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
 1001156:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
 100115a:	f042 0204 	orr.w	r2, r2, #4
 100115e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
 1001162:	075e      	lsls	r6, r3, #29
 1001164:	f140 8127 	bpl.w	10013b6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
 1001168:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
 100116c:	f1ba 0f00 	cmp.w	sl, #0
 1001170:	f280 8126 	bge.w	10013c0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
 1001174:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 1001178:	f36f 0341 	bfc	r3, #1, #1
 100117c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
 1001180:	f04f 3aff 	mov.w	sl, #4294967295
 1001184:	e11c      	b.n	10013c0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
 1001186:	2a2d      	cmp	r2, #45	; 0x2d
 1001188:	d00d      	beq.n	10011a6 <z_cbvprintf_impl+0x1aa>
 100118a:	2a30      	cmp	r2, #48	; 0x30
 100118c:	f47f af69 	bne.w	1001062 <z_cbvprintf_impl+0x66>
 1001190:	2301      	movs	r3, #1
	} while (loop);
 1001192:	e758      	b.n	1001046 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
 1001194:	f04f 0c01 	mov.w	ip, #1
 1001198:	e755      	b.n	1001046 <z_cbvprintf_impl+0x4a>
 100119a:	f04f 0e01 	mov.w	lr, #1
 100119e:	e752      	b.n	1001046 <z_cbvprintf_impl+0x4a>
 10011a0:	f04f 0801 	mov.w	r8, #1
 10011a4:	e74f      	b.n	1001046 <z_cbvprintf_impl+0x4a>
 10011a6:	2601      	movs	r6, #1
 10011a8:	e74d      	b.n	1001046 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
 10011aa:	4603      	mov	r3, r0
 10011ac:	fb0e 6202 	mla	r2, lr, r2, r6
 10011b0:	3a30      	subs	r2, #48	; 0x30
 10011b2:	4618      	mov	r0, r3
 10011b4:	f810 6b01 	ldrb.w	r6, [r0], #1
 10011b8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 10011bc:	f1bc 0f09 	cmp.w	ip, #9
 10011c0:	d9f3      	bls.n	10011aa <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
 10011c2:	4299      	cmp	r1, r3
 10011c4:	d08f      	beq.n	10010e6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
 10011c6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
 10011ca:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
 10011cc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 10011ce:	f362 0141 	bfi	r1, r2, #1, #1
 10011d2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 10011d6:	e786      	b.n	10010e6 <z_cbvprintf_impl+0xea>
 10011d8:	460b      	mov	r3, r1
	size_t val = 0;
 10011da:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
 10011dc:	f04f 0e0a 	mov.w	lr, #10
 10011e0:	e7e7      	b.n	10011b2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
 10011e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
 10011e6:	3302      	adds	r3, #2
		conv->prec_star = true;
 10011e8:	f042 0204 	orr.w	r2, r2, #4
 10011ec:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
 10011f0:	781a      	ldrb	r2, [r3, #0]
 10011f2:	2a6c      	cmp	r2, #108	; 0x6c
 10011f4:	d047      	beq.n	1001286 <z_cbvprintf_impl+0x28a>
 10011f6:	d82b      	bhi.n	1001250 <z_cbvprintf_impl+0x254>
 10011f8:	2a68      	cmp	r2, #104	; 0x68
 10011fa:	d031      	beq.n	1001260 <z_cbvprintf_impl+0x264>
 10011fc:	2a6a      	cmp	r2, #106	; 0x6a
 10011fe:	d04b      	beq.n	1001298 <z_cbvprintf_impl+0x29c>
 1001200:	2a4c      	cmp	r2, #76	; 0x4c
 1001202:	d051      	beq.n	10012a8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
 1001204:	461a      	mov	r2, r3
 1001206:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
 100120a:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
 100120c:	9203      	str	r2, [sp, #12]
 100120e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
 1001212:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
 1001216:	f200 80be 	bhi.w	1001396 <z_cbvprintf_impl+0x39a>
 100121a:	2b6d      	cmp	r3, #109	; 0x6d
 100121c:	d851      	bhi.n	10012c2 <z_cbvprintf_impl+0x2c6>
 100121e:	2b69      	cmp	r3, #105	; 0x69
 1001220:	f200 80b9 	bhi.w	1001396 <z_cbvprintf_impl+0x39a>
 1001224:	2b57      	cmp	r3, #87	; 0x57
 1001226:	d867      	bhi.n	10012f8 <z_cbvprintf_impl+0x2fc>
 1001228:	2b41      	cmp	r3, #65	; 0x41
 100122a:	d003      	beq.n	1001234 <z_cbvprintf_impl+0x238>
 100122c:	3b45      	subs	r3, #69	; 0x45
 100122e:	2b02      	cmp	r3, #2
 1001230:	f200 80b1 	bhi.w	1001396 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
 1001234:	2204      	movs	r2, #4
 1001236:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 100123a:	f362 0302 	bfi	r3, r2, #0, #3
 100123e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
 1001242:	2301      	movs	r3, #1
			break;
 1001244:	e073      	b.n	100132e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
 1001246:	fb0c 0202 	mla	r2, ip, r2, r0
 100124a:	460b      	mov	r3, r1
 100124c:	3a30      	subs	r2, #48	; 0x30
 100124e:	e75d      	b.n	100110c <z_cbvprintf_impl+0x110>
	switch (*sp) {
 1001250:	2a74      	cmp	r2, #116	; 0x74
 1001252:	d025      	beq.n	10012a0 <z_cbvprintf_impl+0x2a4>
 1001254:	2a7a      	cmp	r2, #122	; 0x7a
 1001256:	d1d5      	bne.n	1001204 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
 1001258:	2106      	movs	r1, #6
 100125a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 100125e:	e00c      	b.n	100127a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
 1001260:	785a      	ldrb	r2, [r3, #1]
 1001262:	2a68      	cmp	r2, #104	; 0x68
 1001264:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 1001268:	d106      	bne.n	1001278 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
 100126a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 100126c:	f361 02c6 	bfi	r2, r1, #3, #4
 1001270:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
 1001274:	3302      	adds	r3, #2
 1001276:	e7c5      	b.n	1001204 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
 1001278:	2102      	movs	r1, #2
 100127a:	f361 02c6 	bfi	r2, r1, #3, #4
 100127e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
 1001282:	3301      	adds	r3, #1
 1001284:	e7be      	b.n	1001204 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
 1001286:	785a      	ldrb	r2, [r3, #1]
 1001288:	2a6c      	cmp	r2, #108	; 0x6c
 100128a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 100128e:	d101      	bne.n	1001294 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
 1001290:	2104      	movs	r1, #4
 1001292:	e7eb      	b.n	100126c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
 1001294:	2103      	movs	r1, #3
 1001296:	e7f0      	b.n	100127a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
 1001298:	2105      	movs	r1, #5
 100129a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 100129e:	e7ec      	b.n	100127a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
 10012a0:	2107      	movs	r1, #7
 10012a2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 10012a6:	e7e8      	b.n	100127a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
 10012a8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 10012ac:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 10012b0:	f022 0202 	bic.w	r2, r2, #2
 10012b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 10012b8:	f042 0202 	orr.w	r2, r2, #2
 10012bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
 10012c0:	e7df      	b.n	1001282 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
 10012c2:	3b6e      	subs	r3, #110	; 0x6e
 10012c4:	b2d9      	uxtb	r1, r3
 10012c6:	2301      	movs	r3, #1
 10012c8:	408b      	lsls	r3, r1
 10012ca:	f240 4182 	movw	r1, #1154	; 0x482
 10012ce:	420b      	tst	r3, r1
 10012d0:	d137      	bne.n	1001342 <z_cbvprintf_impl+0x346>
 10012d2:	f013 0f24 	tst.w	r3, #36	; 0x24
 10012d6:	d151      	bne.n	100137c <z_cbvprintf_impl+0x380>
 10012d8:	07d8      	lsls	r0, r3, #31
 10012da:	d55c      	bpl.n	1001396 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
 10012dc:	2103      	movs	r1, #3
 10012de:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 10012e2:	f361 0302 	bfi	r3, r1, #0, #3
 10012e6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 10012ea:	f002 0378 	and.w	r3, r2, #120	; 0x78
 10012ee:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 10012f2:	424b      	negs	r3, r1
 10012f4:	414b      	adcs	r3, r1
 10012f6:	e01a      	b.n	100132e <z_cbvprintf_impl+0x332>
 10012f8:	2001      	movs	r0, #1
	switch (conv->specifier) {
 10012fa:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 10012fe:	b2c9      	uxtb	r1, r1
 1001300:	fa00 f101 	lsl.w	r1, r0, r1
 1001304:	f411 4f62 	tst.w	r1, #57856	; 0xe200
 1001308:	d194      	bne.n	1001234 <z_cbvprintf_impl+0x238>
 100130a:	f640 0601 	movw	r6, #2049	; 0x801
 100130e:	4231      	tst	r1, r6
 1001310:	d11d      	bne.n	100134e <z_cbvprintf_impl+0x352>
 1001312:	f411 3f04 	tst.w	r1, #135168	; 0x21000
 1001316:	d03e      	beq.n	1001396 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
 1001318:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 100131c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 1001320:	f002 0278 	and.w	r2, r2, #120	; 0x78
 1001324:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
 1001326:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 100132a:	d034      	beq.n	1001396 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
 100132c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
 100132e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 1001332:	f3c2 0140 	ubfx	r1, r2, #1, #1
 1001336:	430b      	orrs	r3, r1
 1001338:	f363 0241 	bfi	r2, r3, #1, #1
 100133c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
 1001340:	e6fd      	b.n	100113e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
 1001342:	2102      	movs	r1, #2
 1001344:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 1001348:	f361 0302 	bfi	r3, r1, #0, #3
 100134c:	e7e8      	b.n	1001320 <z_cbvprintf_impl+0x324>
 100134e:	2002      	movs	r0, #2
 1001350:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
 1001354:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
 1001358:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
 100135c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
 100135e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
 1001362:	bf02      	ittt	eq
 1001364:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
 1001368:	f041 0101 	orreq.w	r1, r1, #1
 100136c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
 1001370:	2b63      	cmp	r3, #99	; 0x63
 1001372:	d1db      	bne.n	100132c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
 1001374:	1e13      	subs	r3, r2, #0
 1001376:	bf18      	it	ne
 1001378:	2301      	movne	r3, #1
 100137a:	e7d8      	b.n	100132e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
 100137c:	2103      	movs	r1, #3
 100137e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 1001382:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 1001386:	f361 0302 	bfi	r3, r1, #0, #3
 100138a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
 100138e:	bf14      	ite	ne
 1001390:	2301      	movne	r3, #1
 1001392:	2300      	moveq	r3, #0
 1001394:	e7cb      	b.n	100132e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
 1001396:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 100139a:	f043 0301 	orr.w	r3, r3, #1
 100139e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
 10013a2:	e7c3      	b.n	100132c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
 10013a4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
 10013a8:	2a00      	cmp	r2, #0
		int width = -1;
 10013aa:	bfac      	ite	ge
 10013ac:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
 10013b0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
 10013b4:	e6d5      	b.n	1001162 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
 10013b6:	0798      	lsls	r0, r3, #30
 10013b8:	f57f aee2 	bpl.w	1001180 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
 10013bc:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
 10013c0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 10013c2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
 10013c6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
 10013ca:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
 10013ce:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 10013d2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 10013d4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 10013d8:	d133      	bne.n	1001442 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
 10013da:	1ecb      	subs	r3, r1, #3
 10013dc:	2b04      	cmp	r3, #4
 10013de:	d804      	bhi.n	10013ea <z_cbvprintf_impl+0x3ee>
 10013e0:	e8df f003 	tbb	[pc, r3]
 10013e4:	21464621 	.word	0x21464621
 10013e8:	21          	.byte	0x21
 10013e9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 10013ea:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
 10013ec:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
 10013ee:	ea4f 72e3 	mov.w	r2, r3, asr #31
 10013f2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 10013f6:	d11c      	bne.n	1001432 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
 10013f8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
 10013fc:	17da      	asrs	r2, r3, #31
 10013fe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
 1001402:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
 1001404:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 1001408:	f013 0603 	ands.w	r6, r3, #3
 100140c:	d050      	beq.n	10014b0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
 100140e:	463a      	mov	r2, r7
 1001410:	4659      	mov	r1, fp
 1001412:	4648      	mov	r0, r9
 1001414:	9b03      	ldr	r3, [sp, #12]
 1001416:	f004 fdbd 	bl	1005f94 <outs>
 100141a:	2800      	cmp	r0, #0
 100141c:	f2c0 8152 	blt.w	10016c4 <z_cbvprintf_impl+0x6c8>
 1001420:	4405      	add	r5, r0
			continue;
 1001422:	9f03      	ldr	r7, [sp, #12]
 1001424:	e5f2      	b.n	100100c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 1001426:	f854 3b04 	ldr.w	r3, [r4], #4
 100142a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
 100142c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 1001430:	e7e8      	b.n	1001404 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
 1001432:	2902      	cmp	r1, #2
 1001434:	d1e5      	bne.n	1001402 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
 1001436:	b21a      	sxth	r2, r3
 1001438:	f343 33c0 	sbfx	r3, r3, #15, #1
 100143c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 1001440:	e7df      	b.n	1001402 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
 1001442:	2b02      	cmp	r3, #2
 1001444:	d124      	bne.n	1001490 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
 1001446:	1ecb      	subs	r3, r1, #3
 1001448:	2b04      	cmp	r3, #4
 100144a:	d804      	bhi.n	1001456 <z_cbvprintf_impl+0x45a>
 100144c:	e8df f003 	tbb	[pc, r3]
 1001450:	18101018 	.word	0x18101018
 1001454:	18          	.byte	0x18
 1001455:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
 1001456:	2901      	cmp	r1, #1
 1001458:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
 100145c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
 1001460:	d014      	beq.n	100148c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
 1001462:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
 1001464:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
 1001468:	d1cc      	bne.n	1001404 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
 100146a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
 100146c:	930e      	str	r3, [sp, #56]	; 0x38
 100146e:	e7c9      	b.n	1001404 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
 1001470:	3407      	adds	r4, #7
 1001472:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 1001476:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 100147a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
 100147e:	e7c1      	b.n	1001404 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
 1001480:	f854 3b04 	ldr.w	r3, [r4], #4
 1001484:	930e      	str	r3, [sp, #56]	; 0x38
 1001486:	2300      	movs	r3, #0
 1001488:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
 100148a:	e7bb      	b.n	1001404 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
 100148c:	b2db      	uxtb	r3, r3
 100148e:	e7cd      	b.n	100142c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
 1001490:	2b04      	cmp	r3, #4
 1001492:	d108      	bne.n	10014a6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
 1001494:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
 1001496:	f024 0407 	bic.w	r4, r4, #7
 100149a:	e9d4 2300 	ldrd	r2, r3, [r4]
 100149e:	3408      	adds	r4, #8
 10014a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 10014a4:	e7ae      	b.n	1001404 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
 10014a6:	2b03      	cmp	r3, #3
 10014a8:	d1ac      	bne.n	1001404 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
 10014aa:	f854 3b04 	ldr.w	r3, [r4], #4
 10014ae:	e7dd      	b.n	100146c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
 10014b0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 10014b4:	2878      	cmp	r0, #120	; 0x78
 10014b6:	d8b4      	bhi.n	1001422 <z_cbvprintf_impl+0x426>
 10014b8:	2862      	cmp	r0, #98	; 0x62
 10014ba:	d81c      	bhi.n	10014f6 <z_cbvprintf_impl+0x4fa>
 10014bc:	2825      	cmp	r0, #37	; 0x25
 10014be:	f43f adad 	beq.w	100101c <z_cbvprintf_impl+0x20>
 10014c2:	2858      	cmp	r0, #88	; 0x58
 10014c4:	d1ad      	bne.n	1001422 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
 10014c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 10014ca:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10014ce:	9300      	str	r3, [sp, #0]
 10014d0:	aa10      	add	r2, sp, #64	; 0x40
 10014d2:	ab08      	add	r3, sp, #32
 10014d4:	f004 fd18 	bl	1005f08 <encode_uint>
			if (precision >= 0) {
 10014d8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
 10014dc:	4607      	mov	r7, r0
			if (precision >= 0) {
 10014de:	f280 8099 	bge.w	1001614 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
 10014e2:	2f00      	cmp	r7, #0
 10014e4:	d09d      	beq.n	1001422 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
 10014e6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 10014ea:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
 10014ec:	2e00      	cmp	r6, #0
 10014ee:	f000 80c0 	beq.w	1001672 <z_cbvprintf_impl+0x676>
			nj_len += 1U;
 10014f2:	3001      	adds	r0, #1
 10014f4:	e0bd      	b.n	1001672 <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
 10014f6:	3863      	subs	r0, #99	; 0x63
 10014f8:	2815      	cmp	r0, #21
 10014fa:	d892      	bhi.n	1001422 <z_cbvprintf_impl+0x426>
 10014fc:	a201      	add	r2, pc, #4	; (adr r2, 1001504 <z_cbvprintf_impl+0x508>)
 10014fe:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 1001502:	bf00      	nop
 1001504:	010015d9 	.word	0x010015d9
 1001508:	010015eb 	.word	0x010015eb
 100150c:	01001423 	.word	0x01001423
 1001510:	01001423 	.word	0x01001423
 1001514:	01001423 	.word	0x01001423
 1001518:	01001423 	.word	0x01001423
 100151c:	010015eb 	.word	0x010015eb
 1001520:	01001423 	.word	0x01001423
 1001524:	01001423 	.word	0x01001423
 1001528:	01001423 	.word	0x01001423
 100152c:	01001423 	.word	0x01001423
 1001530:	01001677 	.word	0x01001677
 1001534:	0100160f 	.word	0x0100160f
 1001538:	01001635 	.word	0x01001635
 100153c:	01001423 	.word	0x01001423
 1001540:	01001423 	.word	0x01001423
 1001544:	0100155d 	.word	0x0100155d
 1001548:	01001423 	.word	0x01001423
 100154c:	0100160f 	.word	0x0100160f
 1001550:	01001423 	.word	0x01001423
 1001554:	01001423 	.word	0x01001423
 1001558:	0100160f 	.word	0x0100160f
			if (precision >= 0) {
 100155c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
 1001560:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
 1001562:	db35      	blt.n	10015d0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
 1001564:	4651      	mov	r1, sl
 1001566:	4638      	mov	r0, r7
 1001568:	f005 f81e 	bl	10065a8 <strnlen>
			bpe = bps + len;
 100156c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
 1001570:	2f00      	cmp	r7, #0
 1001572:	f43f af56 	beq.w	1001422 <z_cbvprintf_impl+0x426>
		char sign = 0;
 1001576:	2600      	movs	r6, #0
		if (conv->altform_0c) {
 1001578:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 100157c:	f013 0210 	ands.w	r2, r3, #16
 1001580:	9205      	str	r2, [sp, #20]
 1001582:	f000 8092 	beq.w	10016aa <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
 1001586:	3002      	adds	r0, #2
		if (conv->pad_fp) {
 1001588:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
 100158a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
 100158c:	bf48      	it	mi
 100158e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
 1001590:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
 1001592:	bf48      	it	mi
 1001594:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 1001596:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
 100159a:	9204      	str	r2, [sp, #16]
		if (width > 0) {
 100159c:	f340 809f 	ble.w	10016de <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
 10015a0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
 10015a4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
 10015a8:	f3c2 0380 	ubfx	r3, r2, #2, #1
 10015ac:	0750      	lsls	r0, r2, #29
 10015ae:	9306      	str	r3, [sp, #24]
 10015b0:	f100 8095 	bmi.w	10016de <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
 10015b4:	0651      	lsls	r1, r2, #25
 10015b6:	f140 8088 	bpl.w	10016ca <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
 10015ba:	b13e      	cbz	r6, 10015cc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
 10015bc:	4659      	mov	r1, fp
 10015be:	4630      	mov	r0, r6
 10015c0:	47c8      	blx	r9
 10015c2:	2800      	cmp	r0, #0
 10015c4:	db7e      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 10015c6:	9b06      	ldr	r3, [sp, #24]
 10015c8:	3501      	adds	r5, #1
 10015ca:	461e      	mov	r6, r3
					pad = '0';
 10015cc:	2230      	movs	r2, #48	; 0x30
 10015ce:	e07d      	b.n	10016cc <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
 10015d0:	4638      	mov	r0, r7
 10015d2:	f004 ffe2 	bl	100659a <strlen>
 10015d6:	e7c9      	b.n	100156c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 10015d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
 10015da:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 10015dc:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 10015de:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
 10015e2:	af08      	add	r7, sp, #32
			bpe = buf + 1;
 10015e4:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
 10015e8:	e7c6      	b.n	1001578 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
 10015ea:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
 10015ec:	bf5a      	itte	pl
 10015ee:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
 10015f2:	015e      	lslpl	r6, r3, #5
				sign = '+';
 10015f4:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
 10015f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
 10015fa:	2b00      	cmp	r3, #0
 10015fc:	f6bf af63 	bge.w	10014c6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
 1001600:	4252      	negs	r2, r2
 1001602:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
 1001606:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 1001608:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 100160c:	e75b      	b.n	10014c6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
 100160e:	2600      	movs	r6, #0
 1001610:	e759      	b.n	10014c6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
 1001612:	2600      	movs	r6, #0
				conv->flag_zero = false;
 1001614:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
 1001618:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 100161c:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 100161e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 1001622:	459a      	cmp	sl, r3
				conv->flag_zero = false;
 1001624:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
 1001628:	f67f af5b 	bls.w	10014e2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
 100162c:	ebaa 0303 	sub.w	r3, sl, r3
 1001630:	9311      	str	r3, [sp, #68]	; 0x44
 1001632:	e756      	b.n	10014e2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
 1001634:	980e      	ldr	r0, [sp, #56]	; 0x38
 1001636:	b390      	cbz	r0, 100169e <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 1001638:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 100163c:	9300      	str	r3, [sp, #0]
 100163e:	2100      	movs	r1, #0
 1001640:	ab08      	add	r3, sp, #32
 1001642:	aa10      	add	r2, sp, #64	; 0x40
 1001644:	f004 fc60 	bl	1005f08 <encode_uint>
				conv->altform_0c = true;
 1001648:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 100164c:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
 1001650:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 1001654:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 1001658:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 100165c:	4607      	mov	r7, r0
				conv->altform_0c = true;
 100165e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
 1001662:	dad6      	bge.n	1001612 <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
 1001664:	2800      	cmp	r0, #0
 1001666:	f43f aedc 	beq.w	1001422 <z_cbvprintf_impl+0x426>
		char sign = 0;
 100166a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
 100166c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 1001670:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
 1001672:	469a      	mov	sl, r3
 1001674:	e780      	b.n	1001578 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
 1001676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
 1001678:	2907      	cmp	r1, #7
 100167a:	f63f aed2 	bhi.w	1001422 <z_cbvprintf_impl+0x426>
 100167e:	e8df f001 	tbb	[pc, r1]
 1001682:	040c      	.short	0x040c
 1001684:	08080c06 	.word	0x08080c06
 1001688:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
 100168a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
 100168c:	e6c9      	b.n	1001422 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
 100168e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
 1001690:	e6c7      	b.n	1001422 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
 1001692:	17ea      	asrs	r2, r5, #31
 1001694:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
 1001698:	e6c3      	b.n	1001422 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 100169a:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
 100169c:	e6c1      	b.n	1001422 <z_cbvprintf_impl+0x426>
 100169e:	4f2f      	ldr	r7, [pc, #188]	; (100175c <z_cbvprintf_impl+0x760>)
		char sign = 0;
 10016a0:	4606      	mov	r6, r0
			bpe = bps + 5;
 10016a2:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
 10016a6:	2005      	movs	r0, #5
 10016a8:	e766      	b.n	1001578 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
 10016aa:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
 10016ac:	bf48      	it	mi
 10016ae:	3001      	addmi	r0, #1
 10016b0:	e76a      	b.n	1001588 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
 10016b2:	4610      	mov	r0, r2
 10016b4:	9307      	str	r3, [sp, #28]
 10016b6:	9206      	str	r2, [sp, #24]
 10016b8:	4659      	mov	r1, fp
 10016ba:	47c8      	blx	r9
 10016bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 10016c0:	2800      	cmp	r0, #0
 10016c2:	da04      	bge.n	10016ce <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
 10016c4:	b015      	add	sp, #84	; 0x54
 10016c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
 10016ca:	2220      	movs	r2, #32
					pad = '0';
 10016cc:	4643      	mov	r3, r8
				while (width-- > 0) {
 10016ce:	4619      	mov	r1, r3
 10016d0:	2900      	cmp	r1, #0
 10016d2:	f103 33ff 	add.w	r3, r3, #4294967295
 10016d6:	dcec      	bgt.n	10016b2 <z_cbvprintf_impl+0x6b6>
 10016d8:	4445      	add	r5, r8
 10016da:	4698      	mov	r8, r3
 10016dc:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
 10016de:	b12e      	cbz	r6, 10016ec <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
 10016e0:	4659      	mov	r1, fp
 10016e2:	4630      	mov	r0, r6
 10016e4:	47c8      	blx	r9
 10016e6:	2800      	cmp	r0, #0
 10016e8:	dbec      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 10016ea:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 10016ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 10016f0:	06da      	lsls	r2, r3, #27
 10016f2:	d401      	bmi.n	10016f8 <z_cbvprintf_impl+0x6fc>
 10016f4:	071b      	lsls	r3, r3, #28
 10016f6:	d505      	bpl.n	1001704 <z_cbvprintf_impl+0x708>
				OUTC('0');
 10016f8:	4659      	mov	r1, fp
 10016fa:	2030      	movs	r0, #48	; 0x30
 10016fc:	47c8      	blx	r9
 10016fe:	2800      	cmp	r0, #0
 1001700:	dbe0      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 1001702:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 1001704:	9b05      	ldr	r3, [sp, #20]
 1001706:	b133      	cbz	r3, 1001716 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
 1001708:	4659      	mov	r1, fp
 100170a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 100170e:	47c8      	blx	r9
 1001710:	2800      	cmp	r0, #0
 1001712:	dbd7      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 1001714:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 1001716:	9e04      	ldr	r6, [sp, #16]
 1001718:	442e      	add	r6, r5
 100171a:	e005      	b.n	1001728 <z_cbvprintf_impl+0x72c>
				OUTC('0');
 100171c:	4659      	mov	r1, fp
 100171e:	2030      	movs	r0, #48	; 0x30
 1001720:	47c8      	blx	r9
 1001722:	2800      	cmp	r0, #0
 1001724:	dbce      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 1001726:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 1001728:	1b73      	subs	r3, r6, r5
 100172a:	2b00      	cmp	r3, #0
 100172c:	dcf6      	bgt.n	100171c <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
 100172e:	4653      	mov	r3, sl
 1001730:	463a      	mov	r2, r7
 1001732:	4659      	mov	r1, fp
 1001734:	4648      	mov	r0, r9
 1001736:	f004 fc2d 	bl	1005f94 <outs>
 100173a:	2800      	cmp	r0, #0
 100173c:	dbc2      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 100173e:	4405      	add	r5, r0
		while (width > 0) {
 1001740:	44a8      	add	r8, r5
 1001742:	eba8 0305 	sub.w	r3, r8, r5
 1001746:	2b00      	cmp	r3, #0
 1001748:	f77f ae6b 	ble.w	1001422 <z_cbvprintf_impl+0x426>
			OUTC(' ');
 100174c:	4659      	mov	r1, fp
 100174e:	2020      	movs	r0, #32
 1001750:	47c8      	blx	r9
 1001752:	2800      	cmp	r0, #0
 1001754:	dbb6      	blt.n	10016c4 <z_cbvprintf_impl+0x6c8>
 1001756:	3501      	adds	r5, #1
			--width;
 1001758:	e7f3      	b.n	1001742 <z_cbvprintf_impl+0x746>
 100175a:	bf00      	nop
 100175c:	010072c0 	.word	0x010072c0

01001760 <nordicsemi_nrf53_init>:
	__asm__ volatile(
 1001760:	f04f 0220 	mov.w	r2, #32
 1001764:	f3ef 8311 	mrs	r3, BASEPRI
 1001768:	f382 8812 	msr	BASEPRI_MAX, r2
 100176c:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
    }
    else
#endif
    {
        p_reg->ICACHECNF = (uint32_t)config;
 1001770:	2101      	movs	r1, #1
 1001772:	4a04      	ldr	r2, [pc, #16]	; (1001784 <nordicsemi_nrf53_init+0x24>)
 1001774:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
 1001778:	f383 8811 	msr	BASEPRI, r3
 100177c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
 1001780:	2000      	movs	r0, #0
 1001782:	4770      	bx	lr
 1001784:	41080000 	.word	0x41080000

01001788 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
 1001788:	b120      	cbz	r0, 1001794 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
 100178a:	4b03      	ldr	r3, [pc, #12]	; (1001798 <arch_busy_wait+0x10>)
 100178c:	0180      	lsls	r0, r0, #6
 100178e:	f043 0301 	orr.w	r3, r3, #1
 1001792:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
 1001794:	4770      	bx	lr
 1001796:	bf00      	nop
 1001798:	01006f40 	.word	0x01006f40

0100179c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
 100179c:	f002 bbee 	b.w	1003f7c <SystemInit>

010017a0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
 10017a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 10017a4:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
 10017a6:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
 10017a8:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 10017ac:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1001800 <activate_foreach_backend+0x60>
	while (mask_cpy) {
 10017b0:	b914      	cbnz	r4, 10017b8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
 10017b2:	4638      	mov	r0, r7
 10017b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
 10017b8:	fa94 f5a4 	rbit	r5, r4
 10017bc:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
 10017c0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 10017c4:	012e      	lsls	r6, r5, #4
 10017c6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
 10017ca:	ea6f 0a03 	mvn.w	sl, r3
 10017ce:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 10017d2:	7b2b      	ldrb	r3, [r5, #12]
 10017d4:	2b00      	cmp	r3, #0
 10017d6:	d0eb      	beq.n	10017b0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
 10017d8:	f858 3006 	ldr.w	r3, [r8, r6]
 10017dc:	691b      	ldr	r3, [r3, #16]
 10017de:	b94b      	cbnz	r3, 10017f4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
 10017e0:	4446      	add	r6, r8
			log_backend_enable(backend,
 10017e2:	6873      	ldr	r3, [r6, #4]
 10017e4:	2204      	movs	r2, #4
 10017e6:	4628      	mov	r0, r5
 10017e8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
 10017ea:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
 10017ee:	f000 fa49 	bl	1001c84 <log_backend_enable>
 10017f2:	e7dd      	b.n	10017b0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
 10017f4:	4628      	mov	r0, r5
 10017f6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
 10017f8:	2800      	cmp	r0, #0
 10017fa:	d1d9      	bne.n	10017b0 <activate_foreach_backend+0x10>
 10017fc:	e7f0      	b.n	10017e0 <activate_foreach_backend+0x40>
 10017fe:	bf00      	nop
 1001800:	01006f20 	.word	0x01006f20

01001804 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 1001804:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 1001806:	2200      	movs	r2, #0
{
 1001808:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
 100180a:	490f      	ldr	r1, [pc, #60]	; (1001848 <enable_logger+0x44>)
 100180c:	480f      	ldr	r0, [pc, #60]	; (100184c <enable_logger+0x48>)
 100180e:	f005 fa44 	bl	1006c9a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 1001812:	2200      	movs	r2, #0
 1001814:	2300      	movs	r3, #0
 1001816:	2400      	movs	r4, #0
 1001818:	e9cd 2306 	strd	r2, r3, [sp, #24]
 100181c:	230e      	movs	r3, #14
 100181e:	4d0c      	ldr	r5, [pc, #48]	; (1001850 <enable_logger+0x4c>)
 1001820:	e9cd 3403 	strd	r3, r4, [sp, #12]
 1001824:	f44f 7240 	mov.w	r2, #768	; 0x300
 1001828:	4628      	mov	r0, r5
 100182a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 100182e:	4b09      	ldr	r3, [pc, #36]	; (1001854 <enable_logger+0x50>)
 1001830:	4909      	ldr	r1, [pc, #36]	; (1001858 <enable_logger+0x54>)
 1001832:	9400      	str	r4, [sp, #0]
 1001834:	f003 fb1a 	bl	1004e6c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
 1001838:	4908      	ldr	r1, [pc, #32]	; (100185c <enable_logger+0x58>)
 100183a:	4628      	mov	r0, r5
 100183c:	f005 f907 	bl	1006a4e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
 1001840:	4620      	mov	r0, r4
 1001842:	b009      	add	sp, #36	; 0x24
 1001844:	bd30      	pop	{r4, r5, pc}
 1001846:	bf00      	nop
 1001848:	01001861 	.word	0x01001861
 100184c:	210005b0 	.word	0x210005b0
 1001850:	21000128 	.word	0x21000128
 1001854:	01001b31 	.word	0x01001b31
 1001858:	21000d18 	.word	0x21000d18
 100185c:	010072ca 	.word	0x010072ca

01001860 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 1001860:	4801      	ldr	r0, [pc, #4]	; (1001868 <log_process_thread_timer_expiry_fn+0x8>)
 1001862:	f003 bc41 	b.w	10050e8 <z_impl_k_sem_give>
 1001866:	bf00      	nop
 1001868:	21000114 	.word	0x21000114

0100186c <z_log_init>:
{
 100186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1001870:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
 1001872:	481f      	ldr	r0, [pc, #124]	; (10018f0 <z_log_init+0x84>)
{
 1001874:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
 1001876:	f004 fdb4 	bl	10063e2 <atomic_inc>
 100187a:	4606      	mov	r6, r0
 100187c:	2800      	cmp	r0, #0
 100187e:	d030      	beq.n	10018e2 <z_log_init+0x76>
	uint32_t mask = 0;
 1001880:	2500      	movs	r5, #0
}
 1001882:	4628      	mov	r0, r5
 1001884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
 1001888:	7b23      	ldrb	r3, [r4, #12]
 100188a:	b173      	cbz	r3, 10018aa <z_log_init+0x3e>
	if (backend->api->init) {
 100188c:	6823      	ldr	r3, [r4, #0]
 100188e:	68db      	ldr	r3, [r3, #12]
 1001890:	b10b      	cbz	r3, 1001896 <z_log_init+0x2a>
		backend->api->init(backend);
 1001892:	4620      	mov	r0, r4
 1001894:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
 1001896:	6823      	ldr	r3, [r4, #0]
 1001898:	691b      	ldr	r3, [r3, #16]
 100189a:	b9d3      	cbnz	r3, 10018d2 <z_log_init+0x66>
				log_backend_enable(backend,
 100189c:	6863      	ldr	r3, [r4, #4]
 100189e:	2204      	movs	r2, #4
 10018a0:	4620      	mov	r0, r4
 10018a2:	6819      	ldr	r1, [r3, #0]
 10018a4:	f000 f9ee 	bl	1001c84 <log_backend_enable>
			i++;
 10018a8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 10018aa:	3410      	adds	r4, #16
 10018ac:	454c      	cmp	r4, r9
 10018ae:	d3eb      	bcc.n	1001888 <z_log_init+0x1c>
	if (blocking) {
 10018b0:	f1b8 0f00 	cmp.w	r8, #0
 10018b4:	d0e5      	beq.n	1001882 <z_log_init+0x16>
		while (mask) {
 10018b6:	2d00      	cmp	r5, #0
 10018b8:	d0e2      	beq.n	1001880 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
 10018ba:	4628      	mov	r0, r5
 10018bc:	f7ff ff70 	bl	10017a0 <activate_foreach_backend>
 10018c0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
 10018c2:	2f00      	cmp	r7, #0
 10018c4:	d0f7      	beq.n	10018b6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
 10018c6:	2100      	movs	r1, #0
 10018c8:	f44f 70a4 	mov.w	r0, #328	; 0x148
 10018cc:	f003 ff1c 	bl	1005708 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 10018d0:	e7f1      	b.n	10018b6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
 10018d2:	4620      	mov	r0, r4
 10018d4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
 10018d6:	2800      	cmp	r0, #0
 10018d8:	d0e0      	beq.n	100189c <z_log_init+0x30>
				mask |= BIT(i);
 10018da:	fa0a f306 	lsl.w	r3, sl, r6
 10018de:	431d      	orrs	r5, r3
 10018e0:	e7e2      	b.n	10018a8 <z_log_init+0x3c>
	uint32_t mask = 0;
 10018e2:	4605      	mov	r5, r0
				mask |= BIT(i);
 10018e4:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 10018e8:	4c02      	ldr	r4, [pc, #8]	; (10018f4 <z_log_init+0x88>)
 10018ea:	f8df 900c 	ldr.w	r9, [pc, #12]	; 10018f8 <z_log_init+0x8c>
 10018ee:	e7dd      	b.n	10018ac <z_log_init+0x40>
 10018f0:	21000720 	.word	0x21000720
 10018f4:	01006f20 	.word	0x01006f20
 10018f8:	01006f40 	.word	0x01006f40

010018fc <log_format_func_t_get>:
}
 10018fc:	4b01      	ldr	r3, [pc, #4]	; (1001904 <log_format_func_t_get+0x8>)
 10018fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 1001902:	4770      	bx	lr
 1001904:	01006f5c 	.word	0x01006f5c

01001908 <log_set_timestamp_func>:
{
 1001908:	b508      	push	{r3, lr}
 100190a:	4603      	mov	r3, r0
 100190c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
 100190e:	b12b      	cbz	r3, 100191c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
 1001910:	4a04      	ldr	r2, [pc, #16]	; (1001924 <log_set_timestamp_func+0x1c>)
 1001912:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
 1001914:	f000 fc3c 	bl	1002190 <log_output_timestamp_freq_set>
	return 0;
 1001918:	2000      	movs	r0, #0
}
 100191a:	bd08      	pop	{r3, pc}
		return -EINVAL;
 100191c:	f06f 0015 	mvn.w	r0, #21
 1001920:	e7fb      	b.n	100191a <log_set_timestamp_func+0x12>
 1001922:	bf00      	nop
 1001924:	2100000c 	.word	0x2100000c

01001928 <z_log_notify_backend_enabled>:
{
 1001928:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 100192a:	4c04      	ldr	r4, [pc, #16]	; (100193c <z_log_notify_backend_enabled+0x14>)
 100192c:	7823      	ldrb	r3, [r4, #0]
 100192e:	b913      	cbnz	r3, 1001936 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
 1001930:	4803      	ldr	r0, [pc, #12]	; (1001940 <z_log_notify_backend_enabled+0x18>)
 1001932:	f003 fbd9 	bl	10050e8 <z_impl_k_sem_give>
	backend_attached = true;
 1001936:	2301      	movs	r3, #1
 1001938:	7023      	strb	r3, [r4, #0]
}
 100193a:	bd10      	pop	{r4, pc}
 100193c:	210008ed 	.word	0x210008ed
 1001940:	21000114 	.word	0x21000114

01001944 <z_log_dropped>:
{
 1001944:	b510      	push	{r4, lr}
 1001946:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
 1001948:	4806      	ldr	r0, [pc, #24]	; (1001964 <z_log_dropped+0x20>)
 100194a:	f004 fd4a 	bl	10063e2 <atomic_inc>
	if (buffered) {
 100194e:	b13c      	cbz	r4, 1001960 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 1001950:	4b05      	ldr	r3, [pc, #20]	; (1001968 <z_log_dropped+0x24>)
 1001952:	e8d3 1fef 	ldaex	r1, [r3]
 1001956:	3901      	subs	r1, #1
 1001958:	e8c3 1fe2 	stlex	r2, r1, [r3]
 100195c:	2a00      	cmp	r2, #0
 100195e:	d1f8      	bne.n	1001952 <z_log_dropped+0xe>
}
 1001960:	bd10      	pop	{r4, pc}
 1001962:	bf00      	nop
 1001964:	21000718 	.word	0x21000718
 1001968:	2100071c 	.word	0x2100071c

0100196c <z_log_dropped_read_and_clear>:
}
 100196c:	2000      	movs	r0, #0
 100196e:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 1001970:	4b03      	ldr	r3, [pc, #12]	; (1001980 <z_log_dropped_read_and_clear+0x14>)
 1001972:	e8d3 0fef 	ldaex	r0, [r3]
 1001976:	e8c3 1fe2 	stlex	r2, r1, [r3]
 100197a:	2a00      	cmp	r2, #0
 100197c:	d1f9      	bne.n	1001972 <z_log_dropped_read_and_clear+0x6>
 100197e:	4770      	bx	lr
 1001980:	21000718 	.word	0x21000718

01001984 <dropped_notify>:
{
 1001984:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 1001986:	f7ff fff1 	bl	100196c <z_log_dropped_read_and_clear>
 100198a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 100198c:	4c07      	ldr	r4, [pc, #28]	; (10019ac <dropped_notify+0x28>)
 100198e:	4e08      	ldr	r6, [pc, #32]	; (10019b0 <dropped_notify+0x2c>)
 1001990:	42b4      	cmp	r4, r6
 1001992:	d300      	bcc.n	1001996 <dropped_notify+0x12>
}
 1001994:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 1001996:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 1001998:	795b      	ldrb	r3, [r3, #5]
 100199a:	b12b      	cbz	r3, 10019a8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
 100199c:	6823      	ldr	r3, [r4, #0]
 100199e:	685b      	ldr	r3, [r3, #4]
 10019a0:	b113      	cbz	r3, 10019a8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
 10019a2:	4629      	mov	r1, r5
 10019a4:	4620      	mov	r0, r4
 10019a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 10019a8:	3410      	adds	r4, #16
 10019aa:	e7f1      	b.n	1001990 <dropped_notify+0xc>
 10019ac:	01006f20 	.word	0x01006f20
 10019b0:	01006f40 	.word	0x01006f40

010019b4 <z_log_msg_init>:
{
 10019b4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 10019b6:	4c04      	ldr	r4, [pc, #16]	; (10019c8 <z_log_msg_init+0x14>)
 10019b8:	4904      	ldr	r1, [pc, #16]	; (10019cc <z_log_msg_init+0x18>)
 10019ba:	4620      	mov	r0, r4
 10019bc:	f004 fbae 	bl	100611c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
 10019c0:	4b03      	ldr	r3, [pc, #12]	; (10019d0 <z_log_msg_init+0x1c>)
 10019c2:	601c      	str	r4, [r3, #0]
}
 10019c4:	bd10      	pop	{r4, pc}
 10019c6:	bf00      	nop
 10019c8:	210000c4 	.word	0x210000c4
 10019cc:	01006f48 	.word	0x01006f48
 10019d0:	21000710 	.word	0x21000710

010019d4 <log_core_init>:
{
 10019d4:	b508      	push	{r3, lr}
	panic_mode = false;
 10019d6:	2300      	movs	r3, #0
 10019d8:	4a06      	ldr	r2, [pc, #24]	; (10019f4 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
 10019da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
 10019de:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 10019e0:	4a05      	ldr	r2, [pc, #20]	; (10019f8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
 10019e2:	4806      	ldr	r0, [pc, #24]	; (10019fc <log_core_init+0x28>)
	dropped_cnt = 0;
 10019e4:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
 10019e6:	f7ff ff8f 	bl	1001908 <log_set_timestamp_func>
}
 10019ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
 10019ee:	f7ff bfe1 	b.w	10019b4 <z_log_msg_init>
 10019f2:	bf00      	nop
 10019f4:	210008ee 	.word	0x210008ee
 10019f8:	21000718 	.word	0x21000718
 10019fc:	010063df 	.word	0x010063df

01001a00 <z_log_msg_alloc>:
{
 1001a00:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
 1001a02:	2200      	movs	r2, #0
 1001a04:	2300      	movs	r3, #0
 1001a06:	4801      	ldr	r0, [pc, #4]	; (1001a0c <z_log_msg_alloc+0xc>)
 1001a08:	f004 bba9 	b.w	100615e <mpsc_pbuf_alloc>
 1001a0c:	210000c4 	.word	0x210000c4

01001a10 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
 1001a10:	4801      	ldr	r0, [pc, #4]	; (1001a18 <z_log_msg_local_claim+0x8>)
 1001a12:	f004 bc42 	b.w	100629a <mpsc_pbuf_claim>
 1001a16:	bf00      	nop
 1001a18:	210000c4 	.word	0x210000c4

01001a1c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
 1001a1c:	4b02      	ldr	r3, [pc, #8]	; (1001a28 <z_log_msg_free+0xc>)
{
 1001a1e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
 1001a20:	6818      	ldr	r0, [r3, #0]
 1001a22:	f004 bc8a 	b.w	100633a <mpsc_pbuf_free>
 1001a26:	bf00      	nop
 1001a28:	21000710 	.word	0x21000710

01001a2c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
 1001a2c:	4801      	ldr	r0, [pc, #4]	; (1001a34 <z_log_msg_pending+0x8>)
 1001a2e:	f004 bcb8 	b.w	10063a2 <mpsc_pbuf_is_pending>
 1001a32:	bf00      	nop
 1001a34:	210000c4 	.word	0x210000c4

01001a38 <z_impl_log_process>:
{
 1001a38:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
 1001a3a:	4b26      	ldr	r3, [pc, #152]	; (1001ad4 <z_impl_log_process+0x9c>)
 1001a3c:	7818      	ldrb	r0, [r3, #0]
 1001a3e:	2800      	cmp	r0, #0
 1001a40:	d047      	beq.n	1001ad2 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
 1001a42:	f7ff ffe5 	bl	1001a10 <z_log_msg_local_claim>
	if (msg) {
 1001a46:	4605      	mov	r5, r0
 1001a48:	b170      	cbz	r0, 1001a68 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 1001a4a:	4b23      	ldr	r3, [pc, #140]	; (1001ad8 <z_impl_log_process+0xa0>)
 1001a4c:	e8d3 1fef 	ldaex	r1, [r3]
 1001a50:	3901      	subs	r1, #1
 1001a52:	e8c3 1fe2 	stlex	r2, r1, [r3]
 1001a56:	2a00      	cmp	r2, #0
 1001a58:	d1f8      	bne.n	1001a4c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001a5a:	4c20      	ldr	r4, [pc, #128]	; (1001adc <z_impl_log_process+0xa4>)
 1001a5c:	4e20      	ldr	r6, [pc, #128]	; (1001ae0 <z_impl_log_process+0xa8>)
 1001a5e:	42b4      	cmp	r4, r6
 1001a60:	d32d      	bcc.n	1001abe <z_impl_log_process+0x86>
		z_log_msg_free(msg);
 1001a62:	4628      	mov	r0, r5
 1001a64:	f7ff ffda 	bl	1001a1c <z_log_msg_free>
	return dropped_cnt > 0;
 1001a68:	4b1e      	ldr	r3, [pc, #120]	; (1001ae4 <z_impl_log_process+0xac>)
 1001a6a:	4c1f      	ldr	r4, [pc, #124]	; (1001ae8 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
 1001a6c:	681b      	ldr	r3, [r3, #0]
 1001a6e:	2b00      	cmp	r3, #0
 1001a70:	dd19      	ble.n	1001aa6 <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
 1001a72:	f005 f90c 	bl	1006c8e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
 1001a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1001a7a:	fba0 0302 	umull	r0, r3, r0, r2
 1001a7e:	fb02 3101 	mla	r1, r2, r1, r3
 1001a82:	0bc3      	lsrs	r3, r0, #15
 1001a84:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 1001a88:	e9d4 2000 	ldrd	r2, r0, [r4]
 1001a8c:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
 1001a8e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 1001a92:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
 1001a96:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
 1001a9a:	4293      	cmp	r3, r2
 1001a9c:	f171 0100 	sbcs.w	r1, r1, #0
 1001aa0:	d301      	bcc.n	1001aa6 <z_impl_log_process+0x6e>
				dropped_notify();
 1001aa2:	f7ff ff6f 	bl	1001984 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
 1001aa6:	e9d4 3200 	ldrd	r3, r2, [r4]
 1001aaa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 1001aae:	f142 0200 	adc.w	r2, r2, #0
 1001ab2:	e9c4 3200 	strd	r3, r2, [r4]
}
 1001ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
 1001aba:	f7ff bfb7 	b.w	1001a2c <z_log_msg_pending>
	return backend->cb->active;
 1001abe:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
 1001ac0:	795b      	ldrb	r3, [r3, #5]
 1001ac2:	b123      	cbz	r3, 1001ace <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
 1001ac4:	6823      	ldr	r3, [r4, #0]
 1001ac6:	4629      	mov	r1, r5
 1001ac8:	4620      	mov	r0, r4
 1001aca:	681b      	ldr	r3, [r3, #0]
 1001acc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001ace:	3410      	adds	r4, #16
 1001ad0:	e7c5      	b.n	1001a5e <z_impl_log_process+0x26>
}
 1001ad2:	bd70      	pop	{r4, r5, r6, pc}
 1001ad4:	210008ed 	.word	0x210008ed
 1001ad8:	2100071c 	.word	0x2100071c
 1001adc:	01006f20 	.word	0x01006f20
 1001ae0:	01006f40 	.word	0x01006f40
 1001ae4:	21000718 	.word	0x21000718
 1001ae8:	210005a8 	.word	0x210005a8

01001aec <z_impl_log_panic>:
{
 1001aec:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
 1001aee:	4d0d      	ldr	r5, [pc, #52]	; (1001b24 <z_impl_log_panic+0x38>)
 1001af0:	7829      	ldrb	r1, [r5, #0]
 1001af2:	b961      	cbnz	r1, 1001b0e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
 1001af4:	2001      	movs	r0, #1
 1001af6:	f7ff feb9 	bl	100186c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001afa:	4c0b      	ldr	r4, [pc, #44]	; (1001b28 <z_impl_log_panic+0x3c>)
 1001afc:	4e0b      	ldr	r6, [pc, #44]	; (1001b2c <z_impl_log_panic+0x40>)
 1001afe:	42b4      	cmp	r4, r6
 1001b00:	d306      	bcc.n	1001b10 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
 1001b02:	f7ff ff99 	bl	1001a38 <z_impl_log_process>
		while (log_process() == true) {
 1001b06:	2800      	cmp	r0, #0
 1001b08:	d1fb      	bne.n	1001b02 <z_impl_log_panic+0x16>
	panic_mode = true;
 1001b0a:	2301      	movs	r3, #1
 1001b0c:	702b      	strb	r3, [r5, #0]
}
 1001b0e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
 1001b10:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 1001b12:	795b      	ldrb	r3, [r3, #5]
 1001b14:	b11b      	cbz	r3, 1001b1e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
 1001b16:	6823      	ldr	r3, [r4, #0]
 1001b18:	4620      	mov	r0, r4
 1001b1a:	689b      	ldr	r3, [r3, #8]
 1001b1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001b1e:	3410      	adds	r4, #16
 1001b20:	e7ed      	b.n	1001afe <z_impl_log_panic+0x12>
 1001b22:	bf00      	nop
 1001b24:	210008ee 	.word	0x210008ee
 1001b28:	01006f20 	.word	0x01006f20
 1001b2c:	01006f40 	.word	0x01006f40

01001b30 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
 1001b30:	2100      	movs	r1, #0
{
 1001b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
 1001b36:	4608      	mov	r0, r1
 1001b38:	f7ff fe98 	bl	100186c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 1001b3c:	4604      	mov	r4, r0
 1001b3e:	b348      	cbz	r0, 1001b94 <log_process_thread_func+0x64>
 1001b40:	f240 6867 	movw	r8, #1639	; 0x667
 1001b44:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
 1001b48:	f003 fdf8 	bl	100573c <z_impl_z_current_get>
	proc_tid = process_tid;
 1001b4c:	4b1a      	ldr	r3, [pc, #104]	; (1001bb8 <log_process_thread_func+0x88>)
 1001b4e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 1001b50:	b130      	cbz	r0, 1001b60 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 1001b52:	4b1a      	ldr	r3, [pc, #104]	; (1001bbc <log_process_thread_func+0x8c>)
	    process_tid &&
 1001b54:	681b      	ldr	r3, [r3, #0]
 1001b56:	2b09      	cmp	r3, #9
 1001b58:	dd02      	ble.n	1001b60 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
 1001b5a:	4819      	ldr	r0, [pc, #100]	; (1001bc0 <log_process_thread_func+0x90>)
 1001b5c:	f003 fac4 	bl	10050e8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 1001b60:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001b62:	4f18      	ldr	r7, [pc, #96]	; (1001bc4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
 1001b64:	f8df a058 	ldr.w	sl, [pc, #88]	; 1001bc0 <log_process_thread_func+0x90>
		if (activate_mask) {
 1001b68:	b144      	cbz	r4, 1001b7c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
 1001b6a:	4620      	mov	r0, r4
 1001b6c:	f7ff fe18 	bl	10017a0 <activate_foreach_backend>
			if (!activate_mask) {
 1001b70:	4604      	mov	r4, r0
 1001b72:	b918      	cbnz	r0, 1001b7c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
 1001b74:	f04f 38ff 	mov.w	r8, #4294967295
 1001b78:	f04f 39ff 	mov.w	r9, #4294967295
 1001b7c:	f7ff ff5c 	bl	1001a38 <z_impl_log_process>
		if (log_process() == false) {
 1001b80:	4606      	mov	r6, r0
 1001b82:	b928      	cbnz	r0, 1001b90 <log_process_thread_func+0x60>
			if (processed_any) {
 1001b84:	b9b5      	cbnz	r5, 1001bb4 <log_process_thread_func+0x84>
 1001b86:	4642      	mov	r2, r8
 1001b88:	464b      	mov	r3, r9
 1001b8a:	4650      	mov	r0, sl
 1001b8c:	f003 facc 	bl	1005128 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
 1001b90:	4635      	mov	r5, r6
 1001b92:	e7e9      	b.n	1001b68 <log_process_thread_func+0x38>
 1001b94:	f04f 38ff 	mov.w	r8, #4294967295
 1001b98:	f04f 39ff 	mov.w	r9, #4294967295
 1001b9c:	e7d4      	b.n	1001b48 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
 1001b9e:	682b      	ldr	r3, [r5, #0]
 1001ba0:	699b      	ldr	r3, [r3, #24]
 1001ba2:	b11b      	cbz	r3, 1001bac <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
 1001ba4:	2200      	movs	r2, #0
 1001ba6:	4628      	mov	r0, r5
 1001ba8:	4611      	mov	r1, r2
 1001baa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
 1001bac:	3510      	adds	r5, #16
 1001bae:	42bd      	cmp	r5, r7
 1001bb0:	d3f5      	bcc.n	1001b9e <log_process_thread_func+0x6e>
 1001bb2:	e7e8      	b.n	1001b86 <log_process_thread_func+0x56>
 1001bb4:	4d04      	ldr	r5, [pc, #16]	; (1001bc8 <log_process_thread_func+0x98>)
 1001bb6:	e7fa      	b.n	1001bae <log_process_thread_func+0x7e>
 1001bb8:	21000714 	.word	0x21000714
 1001bbc:	2100071c 	.word	0x2100071c
 1001bc0:	21000114 	.word	0x21000114
 1001bc4:	01006f40 	.word	0x01006f40
 1001bc8:	01006f20 	.word	0x01006f20

01001bcc <z_log_msg_post_finalize>:
{
 1001bcc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
 1001bce:	4818      	ldr	r0, [pc, #96]	; (1001c30 <z_log_msg_post_finalize+0x64>)
 1001bd0:	f004 fc07 	bl	10063e2 <atomic_inc>
	if (panic_mode) {
 1001bd4:	4b17      	ldr	r3, [pc, #92]	; (1001c34 <z_log_msg_post_finalize+0x68>)
 1001bd6:	781b      	ldrb	r3, [r3, #0]
 1001bd8:	b17b      	cbz	r3, 1001bfa <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
 1001bda:	f04f 0320 	mov.w	r3, #32
 1001bde:	f3ef 8411 	mrs	r4, BASEPRI
 1001be2:	f383 8812 	msr	BASEPRI_MAX, r3
 1001be6:	f3bf 8f6f 	isb	sy
 1001bea:	f7ff ff25 	bl	1001a38 <z_impl_log_process>
	__asm__ volatile(
 1001bee:	f384 8811 	msr	BASEPRI, r4
 1001bf2:	f3bf 8f6f 	isb	sy
}
 1001bf6:	b002      	add	sp, #8
 1001bf8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
 1001bfa:	4b0f      	ldr	r3, [pc, #60]	; (1001c38 <z_log_msg_post_finalize+0x6c>)
 1001bfc:	681b      	ldr	r3, [r3, #0]
 1001bfe:	2b00      	cmp	r3, #0
 1001c00:	d0f9      	beq.n	1001bf6 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
 1001c02:	b950      	cbnz	r0, 1001c1a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
 1001c04:	2200      	movs	r2, #0
 1001c06:	2300      	movs	r3, #0
 1001c08:	480c      	ldr	r0, [pc, #48]	; (1001c3c <z_log_msg_post_finalize+0x70>)
 1001c0a:	e9cd 2300 	strd	r2, r3, [sp]
 1001c0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 1001c12:	2300      	movs	r3, #0
 1001c14:	f003 ffbe 	bl	1005b94 <z_impl_k_timer_start>
 1001c18:	e7ed      	b.n	1001bf6 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 1001c1a:	280a      	cmp	r0, #10
 1001c1c:	d1eb      	bne.n	1001bf6 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
 1001c1e:	4807      	ldr	r0, [pc, #28]	; (1001c3c <z_log_msg_post_finalize+0x70>)
 1001c20:	f005 f847 	bl	1006cb2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 1001c24:	4806      	ldr	r0, [pc, #24]	; (1001c40 <z_log_msg_post_finalize+0x74>)
}
 1001c26:	b002      	add	sp, #8
 1001c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1001c2c:	f003 ba5c 	b.w	10050e8 <z_impl_k_sem_give>
 1001c30:	2100071c 	.word	0x2100071c
 1001c34:	210008ee 	.word	0x210008ee
 1001c38:	21000714 	.word	0x21000714
 1001c3c:	210005b0 	.word	0x210005b0
 1001c40:	21000114 	.word	0x21000114

01001c44 <z_log_msg_commit>:
{
 1001c44:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
 1001c46:	4b06      	ldr	r3, [pc, #24]	; (1001c60 <z_log_msg_commit+0x1c>)
{
 1001c48:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 1001c4a:	681b      	ldr	r3, [r3, #0]
 1001c4c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
 1001c4e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
 1001c50:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
 1001c52:	4804      	ldr	r0, [pc, #16]	; (1001c64 <z_log_msg_commit+0x20>)
 1001c54:	f004 fb01 	bl	100625a <mpsc_pbuf_commit>
}
 1001c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
 1001c5c:	f7ff bfb6 	b.w	1001bcc <z_log_msg_post_finalize>
 1001c60:	2100000c 	.word	0x2100000c
 1001c64:	210000c4 	.word	0x210000c4

01001c68 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 1001c68:	4a04      	ldr	r2, [pc, #16]	; (1001c7c <log_source_name_get+0x14>)
 1001c6a:	4b05      	ldr	r3, [pc, #20]	; (1001c80 <log_source_name_get+0x18>)
 1001c6c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
 1001c6e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
 1001c72:	bf34      	ite	cc
 1001c74:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
 1001c78:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
 1001c7a:	4770      	bx	lr
 1001c7c:	01006eb0 	.word	0x01006eb0
 1001c80:	01006f20 	.word	0x01006f20

01001c84 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 1001c84:	4b08      	ldr	r3, [pc, #32]	; (1001ca8 <log_backend_enable+0x24>)
{
 1001c86:	b410      	push	{r4}
	id += backend - log_backend_get(0);
 1001c88:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
 1001c8a:	6844      	ldr	r4, [r0, #4]
 1001c8c:	111b      	asrs	r3, r3, #4
 1001c8e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
 1001c90:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
 1001c92:	6843      	ldr	r3, [r0, #4]
 1001c94:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
 1001c96:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
 1001c98:	6843      	ldr	r3, [r0, #4]
 1001c9a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 1001c9c:	6843      	ldr	r3, [r0, #4]
 1001c9e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
 1001ca0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
 1001ca2:	f7ff be41 	b.w	1001928 <z_log_notify_backend_enabled>
 1001ca6:	bf00      	nop
 1001ca8:	01006f20 	.word	0x01006f20

01001cac <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
 1001cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 1001cb0:	f3c1 44cb 	ubfx	r4, r1, #19, #12
 1001cb4:	b08f      	sub	sp, #60	; 0x3c
 1001cb6:	f3c1 2649 	ubfx	r6, r1, #9, #10
 1001cba:	460d      	mov	r5, r1
 1001cbc:	4690      	mov	r8, r2
 1001cbe:	4699      	mov	r9, r3
 1001cc0:	9005      	str	r0, [sp, #20]
 1001cc2:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
 1001cc4:	2e00      	cmp	r6, #0
 1001cc6:	d03c      	beq.n	1001d42 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
 1001cc8:	f04f 0b04 	mov.w	fp, #4
 1001ccc:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
 1001cd0:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
 1001cd2:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
 1001cd4:	4631      	mov	r1, r6
 1001cd6:	ab0b      	add	r3, sp, #44	; 0x2c
 1001cd8:	4640      	mov	r0, r8
 1001cda:	f8cd b008 	str.w	fp, [sp, #8]
 1001cde:	9701      	str	r7, [sp, #4]
 1001ce0:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
 1001ce4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 1001ce8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 1001cea:	9607      	str	r6, [sp, #28]
 1001cec:	f7fe fe7e 	bl	10009ec <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
 1001cf0:	f3c0 0309 	ubfx	r3, r0, #0, #10
 1001cf4:	1918      	adds	r0, r3, r4
 1001cf6:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 1001cfa:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
 1001cfc:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 1001cfe:	f363 2552 	bfi	r5, r3, #9, #10
 1001d02:	9306      	str	r3, [sp, #24]
 1001d04:	f7ff fe7c 	bl	1001a00 <z_log_msg_alloc>
		if (msg) {
 1001d08:	4604      	mov	r4, r0
 1001d0a:	b178      	cbz	r0, 1001d2c <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
 1001d0c:	2200      	movs	r2, #0
 1001d0e:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
 1001d10:	3010      	adds	r0, #16
 1001d12:	900b      	str	r0, [sp, #44]	; 0x2c
 1001d14:	930c      	str	r3, [sp, #48]	; 0x30
 1001d16:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
 1001d18:	4640      	mov	r0, r8
 1001d1a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 1001d1e:	4a0c      	ldr	r2, [pc, #48]	; (1001d50 <z_impl_z_log_msg_static_create+0xa4>)
 1001d20:	9907      	ldr	r1, [sp, #28]
 1001d22:	f8cd a000 	str.w	sl, [sp]
 1001d26:	ab0b      	add	r3, sp, #44	; 0x2c
 1001d28:	f7fe fe60 	bl	10009ec <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
 1001d2c:	f366 2552 	bfi	r5, r6, #9, #10
 1001d30:	464b      	mov	r3, r9
 1001d32:	462a      	mov	r2, r5
 1001d34:	4620      	mov	r0, r4
 1001d36:	9905      	ldr	r1, [sp, #20]
}
 1001d38:	b00f      	add	sp, #60	; 0x3c
 1001d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
 1001d3e:	f004 bb82 	b.w	1006446 <z_log_msg_finalize>
 1001d42:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
 1001d46:	0880      	lsrs	r0, r0, #2
 1001d48:	f7ff fe5a 	bl	1001a00 <z_log_msg_alloc>
 1001d4c:	4604      	mov	r4, r0
 1001d4e:	e7ed      	b.n	1001d2c <z_impl_z_log_msg_static_create+0x80>
 1001d50:	0100641b 	.word	0x0100641b

01001d54 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
 1001d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001d58:	b087      	sub	sp, #28
 1001d5a:	4604      	mov	r4, r0
 1001d5c:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
 1001d60:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
 1001d64:	460f      	mov	r7, r1
 1001d66:	4693      	mov	fp, r2
 1001d68:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
 1001d6a:	b3b6      	cbz	r6, 1001dda <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 1001d6c:	2110      	movs	r1, #16
 1001d6e:	4633      	mov	r3, r6
 1001d70:	4652      	mov	r2, sl
 1001d72:	2000      	movs	r0, #0
 1001d74:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
 1001d78:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
 1001d7c:	f7fe fc62 	bl	1000644 <cbvprintf_package>
 1001d80:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
 1001d82:	4b17      	ldr	r3, [pc, #92]	; (1001de0 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
 1001d84:	f004 0407 	and.w	r4, r4, #7
 1001d88:	f00b 0b07 	and.w	fp, fp, #7
 1001d8c:	00e4      	lsls	r4, r4, #3
 1001d8e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 1001d92:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
 1001d96:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
 1001d9a:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 1001d9c:	4408      	add	r0, r1
	struct log_msg_desc desc =
 1001d9e:	4b11      	ldr	r3, [pc, #68]	; (1001de4 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 1001da0:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
 1001da4:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
 1001da8:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
 1001daa:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 1001dac:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
 1001dae:	f7ff fe27 	bl	1001a00 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
 1001db2:	4605      	mov	r5, r0
 1001db4:	b140      	cbz	r0, 1001dc8 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
 1001db6:	b13e      	cbz	r6, 1001dc8 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
 1001db8:	4633      	mov	r3, r6
 1001dba:	4652      	mov	r2, sl
 1001dbc:	9903      	ldr	r1, [sp, #12]
 1001dbe:	f8cd 9000 	str.w	r9, [sp]
 1001dc2:	3010      	adds	r0, #16
 1001dc4:	f7fe fc3e 	bl	1000644 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
 1001dc8:	4643      	mov	r3, r8
 1001dca:	4622      	mov	r2, r4
 1001dcc:	4639      	mov	r1, r7
 1001dce:	4628      	mov	r0, r5
	}
}
 1001dd0:	b007      	add	sp, #28
 1001dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
 1001dd6:	f004 bb36 	b.w	1006446 <z_log_msg_finalize>
		plen = 0;
 1001dda:	4631      	mov	r1, r6
 1001ddc:	e7d1      	b.n	1001d82 <z_impl_z_log_msg_runtime_vcreate+0x2e>
 1001dde:	bf00      	nop
 1001de0:	0007fe00 	.word	0x0007fe00
 1001de4:	7ff80000 	.word	0x7ff80000

01001de8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 1001de8:	b40e      	push	{r1, r2, r3}
 1001dea:	b503      	push	{r0, r1, lr}
 1001dec:	ab03      	add	r3, sp, #12
 1001dee:	f853 2b04 	ldr.w	r2, [r3], #4
 1001df2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
 1001df4:	4804      	ldr	r0, [pc, #16]	; (1001e08 <print_formatted+0x20>)
	va_start(args, fmt);
 1001df6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 1001df8:	f004 fb4c 	bl	1006494 <cbvprintf>
	va_end(args);

	return length;
}
 1001dfc:	b002      	add	sp, #8
 1001dfe:	f85d eb04 	ldr.w	lr, [sp], #4
 1001e02:	b003      	add	sp, #12
 1001e04:	4770      	bx	lr
 1001e06:	bf00      	nop
 1001e08:	010064bd 	.word	0x010064bd

01001e0c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 1001e0c:	06ca      	lsls	r2, r1, #27
 1001e0e:	d405      	bmi.n	1001e1c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 1001e10:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
 1001e12:	bf4c      	ite	mi
 1001e14:	4902      	ldrmi	r1, [pc, #8]	; (1001e20 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
 1001e16:	4903      	ldrpl	r1, [pc, #12]	; (1001e24 <newline_print+0x18>)
 1001e18:	f7ff bfe6 	b.w	1001de8 <print_formatted>
	}
}
 1001e1c:	4770      	bx	lr
 1001e1e:	bf00      	nop
 1001e20:	010072e0 	.word	0x010072e0
 1001e24:	010072df 	.word	0x010072df

01001e28 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
 1001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1001e2c:	b089      	sub	sp, #36	; 0x24
 1001e2e:	469b      	mov	fp, r3
 1001e30:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
 1001e34:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 1001e38:	4604      	mov	r4, r0
 1001e3a:	9304      	str	r3, [sp, #16]
 1001e3c:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
 1001e40:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
 1001e42:	9b04      	ldr	r3, [sp, #16]
{
 1001e44:	460d      	mov	r5, r1
 1001e46:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
 1001e48:	2b00      	cmp	r3, #0
 1001e4a:	f000 8087 	beq.w	1001f5c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 1001e4e:	f006 0308 	and.w	r3, r6, #8
 1001e52:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
 1001e54:	f004 fadf 	bl	1006416 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 1001e58:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
 1001e5c:	4602      	mov	r2, r0
 1001e5e:	2800      	cmp	r0, #0
 1001e60:	d04b      	beq.n	1001efa <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
 1001e62:	4620      	mov	r0, r4
 1001e64:	4985      	ldr	r1, [pc, #532]	; (100207c <log_output_process+0x254>)
 1001e66:	f7ff ffbf 	bl	1001de8 <print_formatted>
 1001e6a:	4680      	mov	r8, r0
	if (stamp) {
 1001e6c:	f1ba 0f00 	cmp.w	sl, #0
 1001e70:	d008      	beq.n	1001e84 <log_output_process+0x5c>
	if (!format) {
 1001e72:	f016 0f44 	tst.w	r6, #68	; 0x44
 1001e76:	d142      	bne.n	1001efe <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
 1001e78:	462a      	mov	r2, r5
 1001e7a:	4620      	mov	r0, r4
 1001e7c:	4980      	ldr	r1, [pc, #512]	; (1002080 <log_output_process+0x258>)
 1001e7e:	f7ff ffb3 	bl	1001de8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
 1001e82:	4480      	add	r8, r0
	if (color) {
 1001e84:	f006 0301 	and.w	r3, r6, #1
 1001e88:	b15b      	cbz	r3, 1001ea2 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
 1001e8a:	4b7e      	ldr	r3, [pc, #504]	; (1002084 <log_output_process+0x25c>)
 1001e8c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
 1001e8e:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
 1001e90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
 1001e94:	4b7c      	ldr	r3, [pc, #496]	; (1002088 <log_output_process+0x260>)
 1001e96:	497d      	ldr	r1, [pc, #500]	; (100208c <log_output_process+0x264>)
 1001e98:	2a00      	cmp	r2, #0
 1001e9a:	bf08      	it	eq
 1001e9c:	461a      	moveq	r2, r3
 1001e9e:	f7ff ffa3 	bl	1001de8 <print_formatted>
	if (level_on) {
 1001ea2:	f006 0308 	and.w	r3, r6, #8
 1001ea6:	2b00      	cmp	r3, #0
 1001ea8:	d055      	beq.n	1001f56 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
 1001eaa:	4b79      	ldr	r3, [pc, #484]	; (1002090 <log_output_process+0x268>)
 1001eac:	9a04      	ldr	r2, [sp, #16]
 1001eae:	4620      	mov	r0, r4
 1001eb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1001eb4:	4977      	ldr	r1, [pc, #476]	; (1002094 <log_output_process+0x26c>)
 1001eb6:	f7ff ff97 	bl	1001de8 <print_formatted>
 1001eba:	4605      	mov	r5, r0
	if (domain) {
 1001ebc:	9b06      	ldr	r3, [sp, #24]
 1001ebe:	b12b      	cbz	r3, 1001ecc <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
 1001ec0:	461a      	mov	r2, r3
 1001ec2:	4620      	mov	r0, r4
 1001ec4:	4974      	ldr	r1, [pc, #464]	; (1002098 <log_output_process+0x270>)
 1001ec6:	f7ff ff8f 	bl	1001de8 <print_formatted>
 1001eca:	4405      	add	r5, r0
	if (source) {
 1001ecc:	f1bb 0f00 	cmp.w	fp, #0
 1001ed0:	d005      	beq.n	1001ede <log_output_process+0xb6>
		total += print_formatted(output,
 1001ed2:	465a      	mov	r2, fp
 1001ed4:	4620      	mov	r0, r4
 1001ed6:	4971      	ldr	r1, [pc, #452]	; (100209c <log_output_process+0x274>)
 1001ed8:	f7ff ff86 	bl	1001de8 <print_formatted>
 1001edc:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
 1001ede:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
 1001ee0:	f1b9 0f00 	cmp.w	r9, #0
 1001ee4:	d149      	bne.n	1001f7a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
 1001ee6:	2f00      	cmp	r7, #0
 1001ee8:	d14f      	bne.n	1001f8a <log_output_process+0x162>
	if (color) {
 1001eea:	07f3      	lsls	r3, r6, #31
 1001eec:	f100 80c0 	bmi.w	1002070 <log_output_process+0x248>
	newline_print(output, flags);
 1001ef0:	4631      	mov	r1, r6
 1001ef2:	4620      	mov	r0, r4
 1001ef4:	f7ff ff8a 	bl	1001e0c <newline_print>
}
 1001ef8:	e0b4      	b.n	1002064 <log_output_process+0x23c>
	uint32_t length = 0U;
 1001efa:	4680      	mov	r8, r0
 1001efc:	e7b6      	b.n	1001e6c <log_output_process+0x44>
	} else if (freq != 0U) {
 1001efe:	4b68      	ldr	r3, [pc, #416]	; (10020a0 <log_output_process+0x278>)
 1001f00:	6818      	ldr	r0, [r3, #0]
 1001f02:	2800      	cmp	r0, #0
 1001f04:	d0bd      	beq.n	1001e82 <log_output_process+0x5a>
		timestamp /= timestamp_div;
 1001f06:	4b67      	ldr	r3, [pc, #412]	; (10020a4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
 1001f08:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
 1001f0c:	681b      	ldr	r3, [r3, #0]
 1001f0e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 1001f12:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
 1001f16:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
 1001f1a:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
 1001f1e:	fb0e f505 	mul.w	r5, lr, r5
 1001f22:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 1001f26:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
 1001f2a:	213c      	movs	r1, #60	; 0x3c
 1001f2c:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 1001f30:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
 1001f34:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 1001f38:	fb0e f505 	mul.w	r5, lr, r5
 1001f3c:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
 1001f40:	fb01 2213 	mls	r2, r1, r3, r2
 1001f44:	4620      	mov	r0, r4
 1001f46:	9200      	str	r2, [sp, #0]
 1001f48:	e9cd c501 	strd	ip, r5, [sp, #4]
 1001f4c:	4652      	mov	r2, sl
 1001f4e:	4956      	ldr	r1, [pc, #344]	; (10020a8 <log_output_process+0x280>)
 1001f50:	f7ff ff4a 	bl	1001de8 <print_formatted>
 1001f54:	e795      	b.n	1001e82 <log_output_process+0x5a>
	int total = 0;
 1001f56:	f006 0508 	and.w	r5, r6, #8
 1001f5a:	e7af      	b.n	1001ebc <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 1001f5c:	f1bb 0f01 	cmp.w	fp, #1
 1001f60:	d106      	bne.n	1001f70 <log_output_process+0x148>
	if (package) {
 1001f62:	f1b9 0f00 	cmp.w	r9, #0
 1001f66:	d164      	bne.n	1002032 <log_output_process+0x20a>
	if (data_len) {
 1001f68:	2f00      	cmp	r7, #0
 1001f6a:	d07b      	beq.n	1002064 <log_output_process+0x23c>
		prefix_offset = 0;
 1001f6c:	2500      	movs	r5, #0
 1001f6e:	e00c      	b.n	1001f8a <log_output_process+0x162>
	if (package) {
 1001f70:	f1b9 0f00 	cmp.w	r9, #0
 1001f74:	d0f8      	beq.n	1001f68 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 1001f76:	484d      	ldr	r0, [pc, #308]	; (10020ac <log_output_process+0x284>)
 1001f78:	e05c      	b.n	1002034 <log_output_process+0x20c>
		cb = out_func;
 1001f7a:	484d      	ldr	r0, [pc, #308]	; (10020b0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 1001f7c:	464b      	mov	r3, r9
 1001f7e:	4622      	mov	r2, r4
 1001f80:	494c      	ldr	r1, [pc, #304]	; (10020b4 <log_output_process+0x28c>)
 1001f82:	f003 fe59 	bl	1005c38 <cbpprintf_external>
	if (data_len) {
 1001f86:	2f00      	cmp	r7, #0
 1001f88:	d068      	beq.n	100205c <log_output_process+0x234>
		print_formatted(output, " ");
 1001f8a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 10020b8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
 1001f8e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 10020bc <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 1001f92:	2f10      	cmp	r7, #16
	newline_print(output, flags);
 1001f94:	4631      	mov	r1, r6
 1001f96:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 1001f98:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
 1001f9a:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 1001f9e:	bf28      	it	cs
 1001fa0:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
 1001fa4:	f7ff ff32 	bl	1001e0c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
 1001fa8:	455d      	cmp	r5, fp
 1001faa:	dc45      	bgt.n	1002038 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
 1001fac:	9b05      	ldr	r3, [sp, #20]
 1001fae:	4651      	mov	r1, sl
 1001fb0:	4620      	mov	r0, r4
 1001fb2:	781a      	ldrb	r2, [r3, #0]
 1001fb4:	f7ff ff18 	bl	1001de8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 1001fb8:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
 1001fbc:	f01b 0f07 	tst.w	fp, #7
 1001fc0:	d103      	bne.n	1001fca <log_output_process+0x1a2>
			print_formatted(output, " ");
 1001fc2:	4649      	mov	r1, r9
 1001fc4:	4620      	mov	r0, r4
 1001fc6:	f7ff ff0f 	bl	1001de8 <print_formatted>
		if (i < length) {
 1001fca:	45d8      	cmp	r8, fp
 1001fcc:	d93b      	bls.n	1002046 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
 1001fce:	9b05      	ldr	r3, [sp, #20]
 1001fd0:	4651      	mov	r1, sl
 1001fd2:	4620      	mov	r0, r4
 1001fd4:	f813 200b 	ldrb.w	r2, [r3, fp]
 1001fd8:	f7ff ff06 	bl	1001de8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 1001fdc:	f10b 0b01 	add.w	fp, fp, #1
 1001fe0:	f1bb 0f10 	cmp.w	fp, #16
 1001fe4:	d1ea      	bne.n	1001fbc <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 1001fe6:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
 1001fea:	4620      	mov	r0, r4
 1001fec:	4934      	ldr	r1, [pc, #208]	; (10020c0 <log_output_process+0x298>)
 1001fee:	f7ff fefb 	bl	1001de8 <print_formatted>
		if (i < length) {
 1001ff2:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
 1001ff4:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
 1001ff6:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
 1001ff8:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
 1001ffa:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
 1001ffe:	295f      	cmp	r1, #95	; 0x5f
 1002000:	bf28      	it	cs
 1002002:	222e      	movcs	r2, #46	; 0x2e
 1002004:	492f      	ldr	r1, [pc, #188]	; (10020c4 <log_output_process+0x29c>)
 1002006:	f7ff feef 	bl	1001de8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 100200a:	f10b 0b01 	add.w	fp, fp, #1
 100200e:	f1bb 0f10 	cmp.w	fp, #16
 1002012:	d01d      	beq.n	1002050 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
 1002014:	f01b 0f07 	tst.w	fp, #7
 1002018:	d103      	bne.n	1002022 <log_output_process+0x1fa>
			print_formatted(output, " ");
 100201a:	4649      	mov	r1, r9
 100201c:	4620      	mov	r0, r4
 100201e:	f7ff fee3 	bl	1001de8 <print_formatted>
		if (i < length) {
 1002022:	45d8      	cmp	r8, fp
 1002024:	465a      	mov	r2, fp
 1002026:	d8e5      	bhi.n	1001ff4 <log_output_process+0x1cc>
			print_formatted(output, " ");
 1002028:	4649      	mov	r1, r9
 100202a:	4620      	mov	r0, r4
 100202c:	f7ff fedc 	bl	1001de8 <print_formatted>
 1002030:	e7eb      	b.n	100200a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
 1002032:	481f      	ldr	r0, [pc, #124]	; (10020b0 <log_output_process+0x288>)
		prefix_offset = 0;
 1002034:	9d04      	ldr	r5, [sp, #16]
 1002036:	e7a1      	b.n	1001f7c <log_output_process+0x154>
		print_formatted(output, " ");
 1002038:	4649      	mov	r1, r9
 100203a:	4620      	mov	r0, r4
 100203c:	f7ff fed4 	bl	1001de8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 1002040:	f10b 0b01 	add.w	fp, fp, #1
 1002044:	e7b0      	b.n	1001fa8 <log_output_process+0x180>
			print_formatted(output, "   ");
 1002046:	4620      	mov	r0, r4
 1002048:	491f      	ldr	r1, [pc, #124]	; (10020c8 <log_output_process+0x2a0>)
 100204a:	f7ff fecd 	bl	1001de8 <print_formatted>
 100204e:	e7c5      	b.n	1001fdc <log_output_process+0x1b4>
		data += length;
 1002050:	9b05      	ldr	r3, [sp, #20]
	} while (len);
 1002052:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
 1002056:	4443      	add	r3, r8
 1002058:	9305      	str	r3, [sp, #20]
	} while (len);
 100205a:	d19a      	bne.n	1001f92 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
 100205c:	9b04      	ldr	r3, [sp, #16]
 100205e:	2b00      	cmp	r3, #0
 1002060:	f47f af43 	bne.w	1001eea <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 1002064:	4620      	mov	r0, r4
}
 1002066:	b009      	add	sp, #36	; 0x24
 1002068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
 100206c:	f004 ba19 	b.w	10064a2 <log_output_flush>
		print_formatted(output, "%s", log_color);
 1002070:	4620      	mov	r0, r4
 1002072:	4a05      	ldr	r2, [pc, #20]	; (1002088 <log_output_process+0x260>)
 1002074:	4905      	ldr	r1, [pc, #20]	; (100208c <log_output_process+0x264>)
 1002076:	f7ff feb7 	bl	1001de8 <print_formatted>
}
 100207a:	e739      	b.n	1001ef0 <log_output_process+0xc8>
 100207c:	010072e7 	.word	0x010072e7
 1002080:	010072eb 	.word	0x010072eb
 1002084:	01006f6c 	.word	0x01006f6c
 1002088:	010072e2 	.word	0x010072e2
 100208c:	010071c7 	.word	0x010071c7
 1002090:	01006f80 	.word	0x01006f80
 1002094:	01007310 	.word	0x01007310
 1002098:	01007316 	.word	0x01007316
 100209c:	0100731a 	.word	0x0100731a
 10020a0:	21000728 	.word	0x21000728
 10020a4:	21000724 	.word	0x21000724
 10020a8:	010072f4 	.word	0x010072f4
 10020ac:	010064eb 	.word	0x010064eb
 10020b0:	010064bd 	.word	0x010064bd
 10020b4:	01006495 	.word	0x01006495
 10020b8:	01007327 	.word	0x01007327
 10020bc:	0100731f 	.word	0x0100731f
 10020c0:	01007329 	.word	0x01007329
 10020c4:	01007163 	.word	0x01007163
 10020c8:	01007325 	.word	0x01007325

010020cc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
 10020cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
 10020d0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
 10020d2:	684b      	ldr	r3, [r1, #4]
 10020d4:	4605      	mov	r5, r0
 10020d6:	460c      	mov	r4, r1
 10020d8:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
 10020da:	688e      	ldr	r6, [r1, #8]
 10020dc:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
 10020de:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
 10020e2:	b15b      	cbz	r3, 10020fc <log_output_msg_process+0x30>
 10020e4:	4a13      	ldr	r2, [pc, #76]	; (1002134 <log_output_msg_process+0x68>)
 10020e6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
 10020e8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 10020ec:	2900      	cmp	r1, #0
 10020ee:	db1f      	blt.n	1002130 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
 10020f0:	7820      	ldrb	r0, [r4, #0]
 10020f2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
 10020f6:	f7ff fdb7 	bl	1001c68 <log_source_name_get>
 10020fa:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 10020fc:	4621      	mov	r1, r4
 10020fe:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
 1002102:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
 1002104:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
 1002108:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
 100210a:	eb01 0402 	add.w	r4, r1, r2
 100210e:	bf08      	it	eq
 1002110:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
 1002112:	f3c0 00cb 	ubfx	r0, r0, #3, #12
 1002116:	e9cd 0803 	strd	r0, r8, [sp, #12]
 100211a:	e9cd 1401 	strd	r1, r4, [sp, #4]
 100211e:	2200      	movs	r2, #0
 1002120:	4631      	mov	r1, r6
 1002122:	4628      	mov	r0, r5
 1002124:	9700      	str	r7, [sp, #0]
 1002126:	f7ff fe7f 	bl	1001e28 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
 100212a:	b006      	add	sp, #24
 100212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
 1002130:	2300      	movs	r3, #0
 1002132:	e7e3      	b.n	10020fc <log_output_msg_process+0x30>
 1002134:	01006eb0 	.word	0x01006eb0

01002138 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 1002138:	f242 730f 	movw	r3, #9999	; 0x270f
{
 100213c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 100213e:	428b      	cmp	r3, r1
 1002140:	bf28      	it	cs
 1002142:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
 1002144:	6805      	ldr	r5, [r0, #0]
{
 1002146:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 1002148:	2105      	movs	r1, #5
 100214a:	4668      	mov	r0, sp
 100214c:	4a0d      	ldr	r2, [pc, #52]	; (1002184 <log_output_dropped_process+0x4c>)
 100214e:	f003 fdeb 	bl	1005d28 <snprintk>
 1002152:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 1002154:	6863      	ldr	r3, [r4, #4]
 1002156:	4628      	mov	r0, r5
 1002158:	220b      	movs	r2, #11
 100215a:	685b      	ldr	r3, [r3, #4]
 100215c:	490a      	ldr	r1, [pc, #40]	; (1002188 <log_output_dropped_process+0x50>)
 100215e:	f004 f98c 	bl	100647a <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
 1002162:	6863      	ldr	r3, [r4, #4]
 1002164:	4632      	mov	r2, r6
 1002166:	4669      	mov	r1, sp
 1002168:	4628      	mov	r0, r5
 100216a:	685b      	ldr	r3, [r3, #4]
 100216c:	f004 f985 	bl	100647a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 1002170:	6863      	ldr	r3, [r4, #4]
 1002172:	221b      	movs	r2, #27
 1002174:	4628      	mov	r0, r5
 1002176:	685b      	ldr	r3, [r3, #4]
 1002178:	4904      	ldr	r1, [pc, #16]	; (100218c <log_output_dropped_process+0x54>)
 100217a:	f004 f97e 	bl	100647a <buffer_write>
		     output->control_block->ctx);
}
 100217e:	b002      	add	sp, #8
 1002180:	bd70      	pop	{r4, r5, r6, pc}
 1002182:	bf00      	nop
 1002184:	01007903 	.word	0x01007903
 1002188:	01007347 	.word	0x01007347
 100218c:	0100732b 	.word	0x0100732b

01002190 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 1002190:	2100      	movs	r1, #0
 1002192:	2301      	movs	r3, #1
 1002194:	4a06      	ldr	r2, [pc, #24]	; (10021b0 <log_output_timestamp_freq_set+0x20>)
 1002196:	4290      	cmp	r0, r2
 1002198:	d806      	bhi.n	10021a8 <log_output_timestamp_freq_set+0x18>
 100219a:	4a06      	ldr	r2, [pc, #24]	; (10021b4 <log_output_timestamp_freq_set+0x24>)
 100219c:	b901      	cbnz	r1, 10021a0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
 100219e:	2301      	movs	r3, #1
 10021a0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 10021a2:	4b05      	ldr	r3, [pc, #20]	; (10021b8 <log_output_timestamp_freq_set+0x28>)
 10021a4:	6018      	str	r0, [r3, #0]
}
 10021a6:	4770      	bx	lr
		timestamp_div *= 2U;
 10021a8:	2101      	movs	r1, #1
		frequency /= 2U;
 10021aa:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 10021ac:	005b      	lsls	r3, r3, #1
 10021ae:	e7f2      	b.n	1002196 <log_output_timestamp_freq_set+0x6>
 10021b0:	000f4240 	.word	0x000f4240
 10021b4:	21000724 	.word	0x21000724
 10021b8:	21000728 	.word	0x21000728

010021bc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
 10021bc:	2201      	movs	r2, #1
 10021be:	4b01      	ldr	r3, [pc, #4]	; (10021c4 <log_backend_rtt_init+0x8>)
 10021c0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
 10021c2:	4770      	bx	lr
 10021c4:	210008ef 	.word	0x210008ef

010021c8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 10021c8:	4b01      	ldr	r3, [pc, #4]	; (10021d0 <format_set+0x8>)
	return 0;
}
 10021ca:	2000      	movs	r0, #0
	log_format_current = log_type;
 10021cc:	6019      	str	r1, [r3, #0]
}
 10021ce:	4770      	bx	lr
 10021d0:	21000740 	.word	0x21000740

010021d4 <panic>:
	panic_mode = true;
 10021d4:	2201      	movs	r2, #1
 10021d6:	4b02      	ldr	r3, [pc, #8]	; (10021e0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 10021d8:	4802      	ldr	r0, [pc, #8]	; (10021e4 <panic+0x10>)
 10021da:	701a      	strb	r2, [r3, #0]
 10021dc:	f004 b961 	b.w	10064a2 <log_output_flush>
 10021e0:	210008f0 	.word	0x210008f0
 10021e4:	01006fb0 	.word	0x01006fb0

010021e8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 10021e8:	4801      	ldr	r0, [pc, #4]	; (10021f0 <dropped+0x8>)
 10021ea:	f7ff bfa5 	b.w	1002138 <log_output_dropped_process>
 10021ee:	bf00      	nop
 10021f0:	01006fb0 	.word	0x01006fb0

010021f4 <process>:
{
 10021f4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 10021f6:	4b06      	ldr	r3, [pc, #24]	; (1002210 <process+0x1c>)
{
 10021f8:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 10021fa:	6818      	ldr	r0, [r3, #0]
 10021fc:	f7ff fb7e 	bl	10018fc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
 1002200:	4621      	mov	r1, r4
}
 1002202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 1002206:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
 1002208:	220f      	movs	r2, #15
 100220a:	4802      	ldr	r0, [pc, #8]	; (1002214 <process+0x20>)
 100220c:	4718      	bx	r3
 100220e:	bf00      	nop
 1002210:	21000740 	.word	0x21000740
 1002214:	01006fb0 	.word	0x01006fb0

01002218 <on_failed_write>:
	if (retry_cnt == 0) {
 1002218:	b910      	cbnz	r0, 1002220 <on_failed_write+0x8>
		host_present = false;
 100221a:	4b07      	ldr	r3, [pc, #28]	; (1002238 <on_failed_write+0x20>)
 100221c:	7018      	strb	r0, [r3, #0]
}
 100221e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
 1002220:	4b06      	ldr	r3, [pc, #24]	; (100223c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
 1002222:	781b      	ldrb	r3, [r3, #0]
 1002224:	b11b      	cbz	r3, 100222e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
 1002226:	f241 3088 	movw	r0, #5000	; 0x1388
 100222a:	f004 bd32 	b.w	1006c92 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
 100222e:	20a4      	movs	r0, #164	; 0xa4
 1002230:	2100      	movs	r1, #0
 1002232:	f003 ba69 	b.w	1005708 <z_impl_k_sleep>
 1002236:	bf00      	nop
 1002238:	210008ef 	.word	0x210008ef
 100223c:	210008f0 	.word	0x210008f0

01002240 <data_out_block_mode>:
{
 1002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 1002244:	4680      	mov	r8, r0
 1002246:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
 1002248:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
 100224a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 10022bc <data_out_block_mode+0x7c>
 100224e:	4f1c      	ldr	r7, [pc, #112]	; (10022c0 <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
 1002250:	f899 5000 	ldrb.w	r5, [r9]
 1002254:	b995      	cbnz	r5, 100227c <data_out_block_mode+0x3c>
			RTT_LOCK();
 1002256:	f002 fc5f 	bl	1004b18 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
 100225a:	4628      	mov	r0, r5
 100225c:	4632      	mov	r2, r6
 100225e:	4641      	mov	r1, r8
 1002260:	f002 fbdc 	bl	1004a1c <SEGGER_RTT_WriteSkipNoLock>
 1002264:	4605      	mov	r5, r0
			RTT_UNLOCK();
 1002266:	f002 fc61 	bl	1004b2c <zephyr_rtt_mutex_unlock>
		if (ret) {
 100226a:	b1e5      	cbz	r5, 10022a6 <data_out_block_mode+0x66>
	host_present = true;
 100226c:	2301      	movs	r3, #1
 100226e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
 1002270:	f899 3000 	ldrb.w	r3, [r9]
 1002274:	b973      	cbnz	r3, 1002294 <data_out_block_mode+0x54>
}
 1002276:	4630      	mov	r0, r6
 1002278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
 100227c:	4632      	mov	r2, r6
 100227e:	4641      	mov	r1, r8
 1002280:	2000      	movs	r0, #0
 1002282:	f002 fbcb 	bl	1004a1c <SEGGER_RTT_WriteSkipNoLock>
 1002286:	4605      	mov	r5, r0
 1002288:	e7ef      	b.n	100226a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
 100228a:	4620      	mov	r0, r4
 100228c:	1e65      	subs	r5, r4, #1
 100228e:	f7ff ffc3 	bl	1002218 <on_failed_write>
 1002292:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
 1002294:	2000      	movs	r0, #0
 1002296:	f002 fc35 	bl	1004b04 <SEGGER_RTT_HasDataUp>
 100229a:	2800      	cmp	r0, #0
 100229c:	d0eb      	beq.n	1002276 <data_out_block_mode+0x36>
 100229e:	783b      	ldrb	r3, [r7, #0]
 10022a0:	2b00      	cmp	r3, #0
 10022a2:	d1f2      	bne.n	100228a <data_out_block_mode+0x4a>
 10022a4:	e7e7      	b.n	1002276 <data_out_block_mode+0x36>
		} else if (host_present) {
 10022a6:	783b      	ldrb	r3, [r7, #0]
 10022a8:	2b00      	cmp	r3, #0
 10022aa:	d0e4      	beq.n	1002276 <data_out_block_mode+0x36>
			retry_cnt--;
 10022ac:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
 10022ae:	4620      	mov	r0, r4
 10022b0:	f7ff ffb2 	bl	1002218 <on_failed_write>
	} while ((ret == 0) && host_present);
 10022b4:	783b      	ldrb	r3, [r7, #0]
 10022b6:	2b00      	cmp	r3, #0
 10022b8:	d1ca      	bne.n	1002250 <data_out_block_mode+0x10>
 10022ba:	e7dc      	b.n	1002276 <data_out_block_mode+0x36>
 10022bc:	210008f0 	.word	0x210008f0
 10022c0:	210008ef 	.word	0x210008ef

010022c4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
 10022c4:	4b01      	ldr	r3, [pc, #4]	; (10022cc <format_set+0x8>)
	return 0;
}
 10022c6:	2000      	movs	r0, #0
	log_format_current = log_type;
 10022c8:	6019      	str	r1, [r3, #0]
}
 10022ca:	4770      	bx	lr
 10022cc:	21000758 	.word	0x21000758

010022d0 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
 10022d0:	2201      	movs	r2, #1
 10022d2:	4b02      	ldr	r3, [pc, #8]	; (10022dc <panic+0xc>)
	log_output_flush(output);
 10022d4:	4802      	ldr	r0, [pc, #8]	; (10022e0 <panic+0x10>)
 10022d6:	701a      	strb	r2, [r3, #0]
 10022d8:	f004 b8e3 	b.w	10064a2 <log_output_flush>
 10022dc:	21000902 	.word	0x21000902
 10022e0:	01006fdc 	.word	0x01006fdc

010022e4 <dropped>:
	log_output_dropped_process(output, cnt);
 10022e4:	4801      	ldr	r0, [pc, #4]	; (10022ec <dropped+0x8>)
 10022e6:	f7ff bf27 	b.w	1002138 <log_output_dropped_process>
 10022ea:	bf00      	nop
 10022ec:	01006fdc 	.word	0x01006fdc

010022f0 <process>:
{
 10022f0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 10022f2:	4b06      	ldr	r3, [pc, #24]	; (100230c <process+0x1c>)
{
 10022f4:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 10022f6:	6818      	ldr	r0, [r3, #0]
 10022f8:	f7ff fb00 	bl	10018fc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
 10022fc:	4621      	mov	r1, r4
}
 10022fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
 1002302:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
 1002304:	220f      	movs	r2, #15
 1002306:	4802      	ldr	r0, [pc, #8]	; (1002310 <process+0x20>)
 1002308:	4718      	bx	r3
 100230a:	bf00      	nop
 100230c:	21000758 	.word	0x21000758
 1002310:	01006fdc 	.word	0x01006fdc

01002314 <char_out>:
{
 1002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1002316:	460d      	mov	r5, r1
 1002318:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 100231a:	4f06      	ldr	r7, [pc, #24]	; (1002334 <char_out+0x20>)
 100231c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
 100231e:	42b4      	cmp	r4, r6
 1002320:	d101      	bne.n	1002326 <char_out+0x12>
}
 1002322:	4628      	mov	r0, r5
 1002324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
 1002326:	f814 1b01 	ldrb.w	r1, [r4], #1
 100232a:	68bb      	ldr	r3, [r7, #8]
 100232c:	4801      	ldr	r0, [pc, #4]	; (1002334 <char_out+0x20>)
 100232e:	685b      	ldr	r3, [r3, #4]
 1002330:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 1002332:	e7f4      	b.n	100231e <char_out+0xa>
 1002334:	01006d90 	.word	0x01006d90

01002338 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 1002338:	4901      	ldr	r1, [pc, #4]	; (1002340 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 100233a:	2210      	movs	r2, #16
	str	r2, [r1]
 100233c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 100233e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 1002340:	e000ed10 	.word	0xe000ed10

01002344 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 1002344:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 1002346:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 1002348:	f380 8811 	msr	BASEPRI, r0
	isb
 100234c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 1002350:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 1002354:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 1002356:	b662      	cpsie	i
	isb
 1002358:	f3bf 8f6f 	isb	sy

	bx	lr
 100235c:	4770      	bx	lr
 100235e:	bf00      	nop

01002360 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
 1002360:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
 1002362:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
 1002364:	f381 8811 	msr	BASEPRI, r1

	wfe
 1002368:	bf20      	wfe

	msr	BASEPRI, r0
 100236a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
 100236e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
 1002370:	4770      	bx	lr
 1002372:	bf00      	nop

01002374 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 1002374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1002378:	4681      	mov	r9, r0

	if (esf != NULL) {
 100237a:	460c      	mov	r4, r1
{
 100237c:	af00      	add	r7, sp, #0
	if (esf != NULL) {
 100237e:	2900      	cmp	r1, #0
 1002380:	d04c      	beq.n	100241c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 1002382:	e9d1 1200 	ldrd	r1, r2, [r1]
 1002386:	466e      	mov	r6, sp
 1002388:	b08a      	sub	sp, #40	; 0x28
 100238a:	68a3      	ldr	r3, [r4, #8]
 100238c:	466d      	mov	r5, sp
 100238e:	f04f 0a05 	mov.w	sl, #5
 1002392:	46a8      	mov	r8, r5
 1002394:	4825      	ldr	r0, [pc, #148]	; (100242c <z_arm_fatal_error+0xb8>)
 1002396:	e9c5 2307 	strd	r2, r3, [r5, #28]
 100239a:	e9c5 0105 	strd	r0, r1, [r5, #20]
 100239e:	f848 af10 	str.w	sl, [r8, #16]!
 10023a2:	2300      	movs	r3, #0
 10023a4:	4642      	mov	r2, r8
 10023a6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 10023aa:	4821      	ldr	r0, [pc, #132]	; (1002430 <z_arm_fatal_error+0xbc>)
 10023ac:	f7ff fc7e 	bl	1001cac <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 10023b0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 10023b4:	46b5      	mov	sp, r6
 10023b6:	6963      	ldr	r3, [r4, #20]
 10023b8:	46ad      	mov	sp, r5
 10023ba:	481e      	ldr	r0, [pc, #120]	; (1002434 <z_arm_fatal_error+0xc0>)
 10023bc:	e9c5 2307 	strd	r2, r3, [r5, #28]
 10023c0:	e9c5 0105 	strd	r0, r1, [r5, #20]
 10023c4:	f8c5 a010 	str.w	sl, [r5, #16]
 10023c8:	2300      	movs	r3, #0
 10023ca:	4642      	mov	r2, r8
 10023cc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
 10023d0:	4817      	ldr	r0, [pc, #92]	; (1002430 <z_arm_fatal_error+0xbc>)
 10023d2:	f7ff fc6b 	bl	1001cac <z_impl_z_log_msg_static_create>
 10023d6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 10023d8:	b088      	sub	sp, #32
 10023da:	69e3      	ldr	r3, [r4, #28]
 10023dc:	466d      	mov	r5, sp
 10023de:	f04f 0a03 	mov.w	sl, #3
 10023e2:	46a8      	mov	r8, r5
 10023e4:	4a14      	ldr	r2, [pc, #80]	; (1002438 <z_arm_fatal_error+0xc4>)
 10023e6:	e9c5 2305 	strd	r2, r3, [r5, #20]
 10023ea:	f848 af10 	str.w	sl, [r8, #16]!
 10023ee:	2300      	movs	r3, #0
 10023f0:	4642      	mov	r2, r8
 10023f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 10023f6:	480e      	ldr	r0, [pc, #56]	; (1002430 <z_arm_fatal_error+0xbc>)
 10023f8:	f7ff fc58 	bl	1001cac <z_impl_z_log_msg_static_create>
 10023fc:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 10023fe:	69a3      	ldr	r3, [r4, #24]
 1002400:	46ad      	mov	sp, r5
 1002402:	4a0e      	ldr	r2, [pc, #56]	; (100243c <z_arm_fatal_error+0xc8>)
 1002404:	f8c5 a010 	str.w	sl, [r5, #16]
 1002408:	e9c5 2305 	strd	r2, r3, [r5, #20]
 100240c:	2300      	movs	r3, #0
 100240e:	4642      	mov	r2, r8
 1002410:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 1002414:	4806      	ldr	r0, [pc, #24]	; (1002430 <z_arm_fatal_error+0xbc>)
 1002416:	f7ff fc49 	bl	1001cac <z_impl_z_log_msg_static_create>
 100241a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 100241c:	4621      	mov	r1, r4
 100241e:	4648      	mov	r0, r9
 1002420:	f002 fb8a 	bl	1004b38 <z_fatal_error>
}
 1002424:	46bd      	mov	sp, r7
 1002426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 100242a:	bf00      	nop
 100242c:	0100739d 	.word	0x0100739d
 1002430:	01006f08 	.word	0x01006f08
 1002434:	010073cc 	.word	0x010073cc
 1002438:	010073fb 	.word	0x010073fb
 100243c:	0100740a 	.word	0x0100740a

01002440 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 1002440:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 1002442:	2800      	cmp	r0, #0
 1002444:	db07      	blt.n	1002456 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1002446:	2301      	movs	r3, #1
 1002448:	0941      	lsrs	r1, r0, #5
 100244a:	4a03      	ldr	r2, [pc, #12]	; (1002458 <arch_irq_enable+0x18>)
 100244c:	f000 001f 	and.w	r0, r0, #31
 1002450:	4083      	lsls	r3, r0
 1002452:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 1002456:	4770      	bx	lr
 1002458:	e000e100 	.word	0xe000e100

0100245c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 100245c:	4b05      	ldr	r3, [pc, #20]	; (1002474 <arch_irq_is_enabled+0x18>)
 100245e:	0942      	lsrs	r2, r0, #5
 1002460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 1002464:	2301      	movs	r3, #1
 1002466:	f000 001f 	and.w	r0, r0, #31
 100246a:	fa03 f000 	lsl.w	r0, r3, r0
}
 100246e:	4010      	ands	r0, r2
 1002470:	4770      	bx	lr
 1002472:	bf00      	nop
 1002474:	e000e100 	.word	0xe000e100

01002478 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 1002478:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 100247a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
 100247c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002480:	bfac      	ite	ge
 1002482:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002486:	4b06      	ldrlt	r3, [pc, #24]	; (10024a0 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002488:	ea4f 1141 	mov.w	r1, r1, lsl #5
 100248c:	b2c9      	uxtb	r1, r1
 100248e:	bfab      	itete	ge
 1002490:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002494:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002498:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 100249c:	5419      	strblt	r1, [r3, r0]
}
 100249e:	4770      	bx	lr
 10024a0:	e000ed14 	.word	0xe000ed14

010024a4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 10024a4:	bf30      	wfi
    b z_SysNmiOnReset
 10024a6:	f7ff bffd 	b.w	10024a4 <z_SysNmiOnReset>
 10024aa:	bf00      	nop

010024ac <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 10024ac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 10024ae:	4b08      	ldr	r3, [pc, #32]	; (10024d0 <z_arm_prep_c+0x24>)
 10024b0:	4a08      	ldr	r2, [pc, #32]	; (10024d4 <z_arm_prep_c+0x28>)
 10024b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 10024b6:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 10024b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 10024bc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 10024c0:	f002 fbf4 	bl	1004cac <z_bss_zero>
	z_data_copy();
 10024c4:	f003 f9a0 	bl	1005808 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 10024c8:	f000 fb6e 	bl	1002ba8 <z_arm_interrupt_init>
	z_cstart();
 10024cc:	f002 fc2e 	bl	1004d2c <z_cstart>
 10024d0:	01000000 	.word	0x01000000
 10024d4:	e000ed00 	.word	0xe000ed00

010024d8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 10024d8:	4a09      	ldr	r2, [pc, #36]	; (1002500 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 10024da:	490a      	ldr	r1, [pc, #40]	; (1002504 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 10024dc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 10024de:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
 10024e0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 10024e2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 10024e4:	4908      	ldr	r1, [pc, #32]	; (1002508 <arch_swap+0x30>)
 10024e6:	684b      	ldr	r3, [r1, #4]
 10024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 10024ec:	604b      	str	r3, [r1, #4]
 10024ee:	2300      	movs	r3, #0
 10024f0:	f383 8811 	msr	BASEPRI, r3
 10024f4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 10024f8:	6893      	ldr	r3, [r2, #8]
}
 10024fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 10024fc:	4770      	bx	lr
 10024fe:	bf00      	nop
 1002500:	210008b8 	.word	0x210008b8
 1002504:	010070ec 	.word	0x010070ec
 1002508:	e000ed00 	.word	0xe000ed00

0100250c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 100250c:	4913      	ldr	r1, [pc, #76]	; (100255c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
 100250e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 1002510:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 1002514:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 1002516:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 100251a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 100251e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
 1002520:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 1002524:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 1002528:	4f0d      	ldr	r7, [pc, #52]	; (1002560 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 100252a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 100252e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 1002530:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 1002532:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 1002534:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 1002536:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 1002538:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 100253a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 100253e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 1002542:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 1002546:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
 100254a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
 100254e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
 1002550:	f003 ffe9 	bl	1006526 <configure_builtin_stack_guard>
    pop {r2, lr}
 1002554:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 1002558:	4770      	bx	lr
 100255a:	0000      	.short	0x0000
    ldr r1, =_kernel
 100255c:	210008b8 	.word	0x210008b8
    ldr v4, =_SCS_ICSR
 1002560:	e000ed04 	.word	0xe000ed04

01002564 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 1002564:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 1002568:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 100256a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 100256e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 1002572:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 1002574:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 1002578:	2902      	cmp	r1, #2
    beq _oops
 100257a:	d0ff      	beq.n	100257c <_oops>

0100257c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 100257c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
 100257e:	f003 ffc3 	bl	1006508 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
 1002582:	bd01      	pop	{r0, pc}

01002584 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 1002584:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 1002588:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
 100258a:	490b      	ldr	r1, [pc, #44]	; (10025b8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
 100258c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 1002590:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
 1002592:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
 1002596:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 100259a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
 100259c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 10025a0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 10025a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 10025a8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 10025ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 10025ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 10025b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 10025b2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 10025b4:	4770      	bx	lr
 10025b6:	bf00      	nop
 10025b8:	01005d43 	.word	0x01005d43

010025bc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 10025bc:	4b08      	ldr	r3, [pc, #32]	; (10025e0 <arch_switch_to_main_thread+0x24>)
 10025be:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 10025c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 10025c2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 10025c6:	4610      	mov	r0, r2
 10025c8:	f381 8809 	msr	PSP, r1
 10025cc:	2100      	movs	r1, #0
 10025ce:	b663      	cpsie	if
 10025d0:	f381 8811 	msr	BASEPRI, r1
 10025d4:	f3bf 8f6f 	isb	sy
 10025d8:	2200      	movs	r2, #0
 10025da:	2300      	movs	r3, #0
 10025dc:	f003 fbb1 	bl	1005d42 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 10025e0:	210008b8 	.word	0x210008b8

010025e4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 10025e4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 10025e6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 10025ea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 10025ee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 10025f2:	4904      	ldr	r1, [pc, #16]	; (1002604 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 10025f4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 10025f6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 10025f8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 10025fa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 10025fe:	4902      	ldr	r1, [pc, #8]	; (1002608 <_isr_wrapper+0x24>)
	bx r1
 1002600:	4708      	bx	r1
 1002602:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 1002604:	01006da8 	.word	0x01006da8
	ldr r1, =z_arm_int_exit
 1002608:	0100260d 	.word	0x0100260d

0100260c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 100260c:	4b04      	ldr	r3, [pc, #16]	; (1002620 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 100260e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 1002610:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 1002612:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 1002614:	d003      	beq.n	100261e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 1002616:	4903      	ldr	r1, [pc, #12]	; (1002624 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 1002618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 100261c:	600a      	str	r2, [r1, #0]

0100261e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 100261e:	4770      	bx	lr
	ldr r3, =_kernel
 1002620:	210008b8 	.word	0x210008b8
	ldr r1, =_SCS_ICSR
 1002624:	e000ed04 	.word	0xe000ed04

01002628 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
 1002628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100262c:	b086      	sub	sp, #24
 100262e:	4606      	mov	r6, r0
 1002630:	460d      	mov	r5, r1
 1002632:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
 1002634:	2402      	movs	r4, #2
 1002636:	4b36      	ldr	r3, [pc, #216]	; (1002710 <mem_manage_fault.constprop.0+0xe8>)
 1002638:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100263c:	617b      	str	r3, [r7, #20]
 100263e:	4835      	ldr	r0, [pc, #212]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 1002640:	613c      	str	r4, [r7, #16]
 1002642:	f107 0210 	add.w	r2, r7, #16
 1002646:	f003 ff72 	bl	100652e <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 100264a:	4b33      	ldr	r3, [pc, #204]	; (1002718 <mem_manage_fault.constprop.0+0xf0>)
 100264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 100264e:	06d9      	lsls	r1, r3, #27
 1002650:	d509      	bpl.n	1002666 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
 1002652:	4b32      	ldr	r3, [pc, #200]	; (100271c <mem_manage_fault.constprop.0+0xf4>)
 1002654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002658:	e9c7 4304 	strd	r4, r3, [r7, #16]
 100265c:	482d      	ldr	r0, [pc, #180]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 100265e:	f107 0210 	add.w	r2, r7, #16
 1002662:	f003 ff64 	bl	100652e <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 1002666:	4b2c      	ldr	r3, [pc, #176]	; (1002718 <mem_manage_fault.constprop.0+0xf0>)
 1002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 100266a:	071a      	lsls	r2, r3, #28
 100266c:	d50a      	bpl.n	1002684 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
 100266e:	4b2c      	ldr	r3, [pc, #176]	; (1002720 <mem_manage_fault.constprop.0+0xf8>)
 1002670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002674:	617b      	str	r3, [r7, #20]
 1002676:	2302      	movs	r3, #2
 1002678:	4826      	ldr	r0, [pc, #152]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 100267a:	613b      	str	r3, [r7, #16]
 100267c:	f107 0210 	add.w	r2, r7, #16
 1002680:	f003 ff55 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 1002684:	4c24      	ldr	r4, [pc, #144]	; (1002718 <mem_manage_fault.constprop.0+0xf0>)
 1002686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1002688:	079b      	lsls	r3, r3, #30
 100268a:	d522      	bpl.n	10026d2 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
 100268c:	46e8      	mov	r8, sp
 100268e:	4b25      	ldr	r3, [pc, #148]	; (1002724 <mem_manage_fault.constprop.0+0xfc>)
 1002690:	4820      	ldr	r0, [pc, #128]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 1002692:	617b      	str	r3, [r7, #20]
 1002694:	2302      	movs	r3, #2
 1002696:	f107 0210 	add.w	r2, r7, #16
 100269a:	613b      	str	r3, [r7, #16]
 100269c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10026a0:	f003 ff45 	bl	100652e <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 10026a4:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 10026a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 10026a8:	0610      	lsls	r0, r2, #24
 10026aa:	d512      	bpl.n	10026d2 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 10026ac:	b088      	sub	sp, #32
 10026ae:	466a      	mov	r2, sp
 10026b0:	491d      	ldr	r1, [pc, #116]	; (1002728 <mem_manage_fault.constprop.0+0x100>)
 10026b2:	4818      	ldr	r0, [pc, #96]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 10026b4:	e9c2 1305 	strd	r1, r3, [r2, #20]
 10026b8:	2303      	movs	r3, #3
 10026ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 10026be:	f842 3f10 	str.w	r3, [r2, #16]!
 10026c2:	f003 ff34 	bl	100652e <z_log_msg_static_create.constprop.0>
 10026c6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 10026c8:	b11e      	cbz	r6, 10026d2 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 10026ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10026cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 10026d0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 10026d2:	4b11      	ldr	r3, [pc, #68]	; (1002718 <mem_manage_fault.constprop.0+0xf0>)
 10026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10026d6:	07d9      	lsls	r1, r3, #31
 10026d8:	d50a      	bpl.n	10026f0 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
 10026da:	4b14      	ldr	r3, [pc, #80]	; (100272c <mem_manage_fault.constprop.0+0x104>)
 10026dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10026e0:	617b      	str	r3, [r7, #20]
 10026e2:	2302      	movs	r3, #2
 10026e4:	480b      	ldr	r0, [pc, #44]	; (1002714 <mem_manage_fault.constprop.0+0xec>)
 10026e6:	613b      	str	r3, [r7, #16]
 10026e8:	f107 0210 	add.w	r2, r7, #16
 10026ec:	f003 ff1f 	bl	100652e <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 10026f0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 10026f2:	4b09      	ldr	r3, [pc, #36]	; (1002718 <mem_manage_fault.constprop.0+0xf0>)

	return reason;
}
 10026f4:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 10026f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 10026f8:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 10026fa:	bf58      	it	pl
 10026fc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 10026fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 1002700:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 1002704:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1002706:	7028      	strb	r0, [r5, #0]
}
 1002708:	46bd      	mov	sp, r7
 100270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100270e:	bf00      	nop
 1002710:	01007438 	.word	0x01007438
 1002714:	01006f08 	.word	0x01006f08
 1002718:	e000ed00 	.word	0xe000ed00
 100271c:	0100744e 	.word	0x0100744e
 1002720:	01007481 	.word	0x01007481
 1002724:	01007494 	.word	0x01007494
 1002728:	010074ac 	.word	0x010074ac
 100272c:	010074c2 	.word	0x010074c2

01002730 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 1002730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1002734:	b086      	sub	sp, #24
 1002736:	4606      	mov	r6, r0
 1002738:	460d      	mov	r5, r1
 100273a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 100273c:	2402      	movs	r4, #2
 100273e:	4b3b      	ldr	r3, [pc, #236]	; (100282c <bus_fault.constprop.0+0xfc>)
 1002740:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002744:	617b      	str	r3, [r7, #20]
 1002746:	483a      	ldr	r0, [pc, #232]	; (1002830 <bus_fault.constprop.0+0x100>)
 1002748:	613c      	str	r4, [r7, #16]
 100274a:	f107 0210 	add.w	r2, r7, #16
 100274e:	f003 feee 	bl	100652e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 1002752:	4b38      	ldr	r3, [pc, #224]	; (1002834 <bus_fault.constprop.0+0x104>)
 1002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1002756:	04db      	lsls	r3, r3, #19
 1002758:	d509      	bpl.n	100276e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
 100275a:	4b37      	ldr	r3, [pc, #220]	; (1002838 <bus_fault.constprop.0+0x108>)
 100275c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002760:	e9c7 4304 	strd	r4, r3, [r7, #16]
 1002764:	4832      	ldr	r0, [pc, #200]	; (1002830 <bus_fault.constprop.0+0x100>)
 1002766:	f107 0210 	add.w	r2, r7, #16
 100276a:	f003 fee0 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 100276e:	4b31      	ldr	r3, [pc, #196]	; (1002834 <bus_fault.constprop.0+0x104>)
 1002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1002772:	051c      	lsls	r4, r3, #20
 1002774:	d50a      	bpl.n	100278c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
 1002776:	4b31      	ldr	r3, [pc, #196]	; (100283c <bus_fault.constprop.0+0x10c>)
 1002778:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100277c:	617b      	str	r3, [r7, #20]
 100277e:	2302      	movs	r3, #2
 1002780:	482b      	ldr	r0, [pc, #172]	; (1002830 <bus_fault.constprop.0+0x100>)
 1002782:	613b      	str	r3, [r7, #16]
 1002784:	f107 0210 	add.w	r2, r7, #16
 1002788:	f003 fed1 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 100278c:	4c29      	ldr	r4, [pc, #164]	; (1002834 <bus_fault.constprop.0+0x104>)
 100278e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1002790:	0598      	lsls	r0, r3, #22
 1002792:	d522      	bpl.n	10027da <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
 1002794:	46e8      	mov	r8, sp
 1002796:	4b2a      	ldr	r3, [pc, #168]	; (1002840 <bus_fault.constprop.0+0x110>)
 1002798:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100279c:	617b      	str	r3, [r7, #20]
 100279e:	2302      	movs	r3, #2
 10027a0:	f107 0210 	add.w	r2, r7, #16
 10027a4:	613b      	str	r3, [r7, #16]
 10027a6:	4822      	ldr	r0, [pc, #136]	; (1002830 <bus_fault.constprop.0+0x100>)
 10027a8:	f003 fec1 	bl	100652e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 10027ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 10027ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 10027b0:	0411      	lsls	r1, r2, #16
 10027b2:	d512      	bpl.n	10027da <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 10027b4:	b088      	sub	sp, #32
 10027b6:	466a      	mov	r2, sp
 10027b8:	4922      	ldr	r1, [pc, #136]	; (1002844 <bus_fault.constprop.0+0x114>)
 10027ba:	481d      	ldr	r0, [pc, #116]	; (1002830 <bus_fault.constprop.0+0x100>)
 10027bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 10027c0:	2303      	movs	r3, #3
 10027c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 10027c6:	f842 3f10 	str.w	r3, [r2, #16]!
 10027ca:	f003 feb0 	bl	100652e <z_log_msg_static_create.constprop.0>
 10027ce:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
 10027d0:	b11e      	cbz	r6, 10027da <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 10027d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 10027d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 10027d8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 10027da:	4b16      	ldr	r3, [pc, #88]	; (1002834 <bus_fault.constprop.0+0x104>)
 10027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10027de:	055a      	lsls	r2, r3, #21
 10027e0:	d50a      	bpl.n	10027f8 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
 10027e2:	4b19      	ldr	r3, [pc, #100]	; (1002848 <bus_fault.constprop.0+0x118>)
 10027e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10027e8:	617b      	str	r3, [r7, #20]
 10027ea:	2302      	movs	r3, #2
 10027ec:	4810      	ldr	r0, [pc, #64]	; (1002830 <bus_fault.constprop.0+0x100>)
 10027ee:	613b      	str	r3, [r7, #16]
 10027f0:	f107 0210 	add.w	r2, r7, #16
 10027f4:	f003 fe9b 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 10027f8:	4b0e      	ldr	r3, [pc, #56]	; (1002834 <bus_fault.constprop.0+0x104>)
 10027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10027fc:	05db      	lsls	r3, r3, #23
 10027fe:	d50a      	bpl.n	1002816 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
 1002800:	4b12      	ldr	r3, [pc, #72]	; (100284c <bus_fault.constprop.0+0x11c>)
 1002802:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002806:	617b      	str	r3, [r7, #20]
 1002808:	2302      	movs	r3, #2
 100280a:	4809      	ldr	r0, [pc, #36]	; (1002830 <bus_fault.constprop.0+0x100>)
 100280c:	613b      	str	r3, [r7, #16]
 100280e:	f107 0210 	add.w	r2, r7, #16
 1002812:	f003 fe8c 	bl	100652e <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
 1002816:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 1002818:	4a06      	ldr	r2, [pc, #24]	; (1002834 <bus_fault.constprop.0+0x104>)

	return reason;
}
 100281a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 100281c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 100281e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 1002822:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 1002824:	7028      	strb	r0, [r5, #0]
}
 1002826:	46bd      	mov	sp, r7
 1002828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 100282c:	010074e1 	.word	0x010074e1
 1002830:	01006f08 	.word	0x01006f08
 1002834:	e000ed00 	.word	0xe000ed00
 1002838:	010074f7 	.word	0x010074f7
 100283c:	01007481 	.word	0x01007481
 1002840:	01007508 	.word	0x01007508
 1002844:	01007521 	.word	0x01007521
 1002848:	01007536 	.word	0x01007536
 100284c:	01007551 	.word	0x01007551

01002850 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 1002850:	b510      	push	{r4, lr}
 1002852:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 1002854:	2402      	movs	r4, #2
 1002856:	4b3a      	ldr	r3, [pc, #232]	; (1002940 <usage_fault.constprop.0+0xf0>)
 1002858:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100285c:	4839      	ldr	r0, [pc, #228]	; (1002944 <usage_fault.constprop.0+0xf4>)
 100285e:	aa04      	add	r2, sp, #16
 1002860:	9305      	str	r3, [sp, #20]
 1002862:	9404      	str	r4, [sp, #16]
 1002864:	f003 fe63 	bl	100652e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 1002868:	4b37      	ldr	r3, [pc, #220]	; (1002948 <usage_fault.constprop.0+0xf8>)
 100286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 100286c:	019b      	lsls	r3, r3, #6
 100286e:	d508      	bpl.n	1002882 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
 1002870:	4b36      	ldr	r3, [pc, #216]	; (100294c <usage_fault.constprop.0+0xfc>)
 1002872:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002876:	4833      	ldr	r0, [pc, #204]	; (1002944 <usage_fault.constprop.0+0xf4>)
 1002878:	aa04      	add	r2, sp, #16
 100287a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 100287e:	f003 fe56 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 1002882:	4b31      	ldr	r3, [pc, #196]	; (1002948 <usage_fault.constprop.0+0xf8>)
 1002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1002886:	01dc      	lsls	r4, r3, #7
 1002888:	d509      	bpl.n	100289e <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
 100288a:	4b31      	ldr	r3, [pc, #196]	; (1002950 <usage_fault.constprop.0+0x100>)
 100288c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002890:	9305      	str	r3, [sp, #20]
 1002892:	2302      	movs	r3, #2
 1002894:	482b      	ldr	r0, [pc, #172]	; (1002944 <usage_fault.constprop.0+0xf4>)
 1002896:	aa04      	add	r2, sp, #16
 1002898:	9304      	str	r3, [sp, #16]
 100289a:	f003 fe48 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
 100289e:	4b2a      	ldr	r3, [pc, #168]	; (1002948 <usage_fault.constprop.0+0xf8>)
 10028a0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 10028a2:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
 10028a6:	d009      	beq.n	10028bc <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
 10028a8:	2402      	movs	r4, #2
 10028aa:	4b2a      	ldr	r3, [pc, #168]	; (1002954 <usage_fault.constprop.0+0x104>)
 10028ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10028b0:	4824      	ldr	r0, [pc, #144]	; (1002944 <usage_fault.constprop.0+0xf4>)
 10028b2:	aa04      	add	r2, sp, #16
 10028b4:	9305      	str	r3, [sp, #20]
 10028b6:	9404      	str	r4, [sp, #16]
 10028b8:	f003 fe39 	bl	100652e <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 10028bc:	4b22      	ldr	r3, [pc, #136]	; (1002948 <usage_fault.constprop.0+0xf8>)
 10028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10028c0:	0318      	lsls	r0, r3, #12
 10028c2:	d509      	bpl.n	10028d8 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
 10028c4:	4b24      	ldr	r3, [pc, #144]	; (1002958 <usage_fault.constprop.0+0x108>)
 10028c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10028ca:	9305      	str	r3, [sp, #20]
 10028cc:	2302      	movs	r3, #2
 10028ce:	481d      	ldr	r0, [pc, #116]	; (1002944 <usage_fault.constprop.0+0xf4>)
 10028d0:	aa04      	add	r2, sp, #16
 10028d2:	9304      	str	r3, [sp, #16]
 10028d4:	f003 fe2b 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 10028d8:	4b1b      	ldr	r3, [pc, #108]	; (1002948 <usage_fault.constprop.0+0xf8>)
 10028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10028dc:	0359      	lsls	r1, r3, #13
 10028de:	d509      	bpl.n	10028f4 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 10028e0:	4b1e      	ldr	r3, [pc, #120]	; (100295c <usage_fault.constprop.0+0x10c>)
 10028e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10028e6:	9305      	str	r3, [sp, #20]
 10028e8:	2302      	movs	r3, #2
 10028ea:	4816      	ldr	r0, [pc, #88]	; (1002944 <usage_fault.constprop.0+0xf4>)
 10028ec:	aa04      	add	r2, sp, #16
 10028ee:	9304      	str	r3, [sp, #16]
 10028f0:	f003 fe1d 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 10028f4:	4b14      	ldr	r3, [pc, #80]	; (1002948 <usage_fault.constprop.0+0xf8>)
 10028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 10028f8:	039a      	lsls	r2, r3, #14
 10028fa:	d509      	bpl.n	1002910 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 10028fc:	4b18      	ldr	r3, [pc, #96]	; (1002960 <usage_fault.constprop.0+0x110>)
 10028fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002902:	9305      	str	r3, [sp, #20]
 1002904:	2302      	movs	r3, #2
 1002906:	480f      	ldr	r0, [pc, #60]	; (1002944 <usage_fault.constprop.0+0xf4>)
 1002908:	aa04      	add	r2, sp, #16
 100290a:	9304      	str	r3, [sp, #16]
 100290c:	f003 fe0f 	bl	100652e <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 1002910:	4b0d      	ldr	r3, [pc, #52]	; (1002948 <usage_fault.constprop.0+0xf8>)
 1002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 1002914:	03db      	lsls	r3, r3, #15
 1002916:	d509      	bpl.n	100292c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 1002918:	4b12      	ldr	r3, [pc, #72]	; (1002964 <usage_fault.constprop.0+0x114>)
 100291a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100291e:	9305      	str	r3, [sp, #20]
 1002920:	2302      	movs	r3, #2
 1002922:	4808      	ldr	r0, [pc, #32]	; (1002944 <usage_fault.constprop.0+0xf4>)
 1002924:	aa04      	add	r2, sp, #16
 1002926:	9304      	str	r3, [sp, #16]
 1002928:	f003 fe01 	bl	100652e <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 100292c:	4a06      	ldr	r2, [pc, #24]	; (1002948 <usage_fault.constprop.0+0xf8>)

	return reason;
}
 100292e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 1002930:	6a93      	ldr	r3, [r2, #40]	; 0x28
 1002932:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 1002936:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 100293a:	6293      	str	r3, [r2, #40]	; 0x28
}
 100293c:	b006      	add	sp, #24
 100293e:	bd10      	pop	{r4, pc}
 1002940:	01007569 	.word	0x01007569
 1002944:	01006f08 	.word	0x01006f08
 1002948:	e000ed00 	.word	0xe000ed00
 100294c:	01007581 	.word	0x01007581
 1002950:	01007594 	.word	0x01007594
 1002954:	010075ae 	.word	0x010075ae
 1002958:	010075d8 	.word	0x010075d8
 100295c:	010075f6 	.word	0x010075f6
 1002960:	0100761b 	.word	0x0100761b
 1002964:	01007635 	.word	0x01007635

01002968 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 1002968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 100296c:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 100296e:	4b76      	ldr	r3, [pc, #472]	; (1002b48 <z_arm_fault+0x1e0>)
{
 1002970:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 1002972:	f8d3 8004 	ldr.w	r8, [r3, #4]
 1002976:	2600      	movs	r6, #0
{
 1002978:	af00      	add	r7, sp, #0
 100297a:	f3c8 0408 	ubfx	r4, r8, #0, #9
 100297e:	f386 8811 	msr	BASEPRI, r6
 1002982:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 1002986:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 100298a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 100298e:	d10e      	bne.n	10029ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 1002990:	f002 030c 	and.w	r3, r2, #12
 1002994:	2b08      	cmp	r3, #8
 1002996:	d119      	bne.n	10029cc <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 1002998:	4b6c      	ldr	r3, [pc, #432]	; (1002b4c <z_arm_fault+0x1e4>)
 100299a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 100299e:	61fb      	str	r3, [r7, #28]
 10029a0:	2302      	movs	r3, #2
 10029a2:	486b      	ldr	r0, [pc, #428]	; (1002b50 <z_arm_fault+0x1e8>)
 10029a4:	61bb      	str	r3, [r7, #24]
 10029a6:	f107 0218 	add.w	r2, r7, #24
 10029aa:	f003 fdc0 	bl	100652e <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
 10029ae:	2600      	movs	r6, #0
		return NULL;
 10029b0:	4635      	mov	r5, r6
	*recoverable = false;
 10029b2:	2300      	movs	r3, #0
 10029b4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
 10029b6:	1ee3      	subs	r3, r4, #3
 10029b8:	2b09      	cmp	r3, #9
 10029ba:	f200 80a5 	bhi.w	1002b08 <z_arm_fault+0x1a0>
 10029be:	e8df f003 	tbb	[pc, r3]
 10029c2:	980a      	.short	0x980a
 10029c4:	a3a3949b 	.word	0xa3a3949b
 10029c8:	9ea3a3a3 	.word	0x9ea3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 10029cc:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 10029ce:	bf4c      	ite	mi
 10029d0:	460d      	movmi	r5, r1
			*nested_exc = true;
 10029d2:	2601      	movpl	r6, #1
 10029d4:	e7ed      	b.n	10029b2 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
 10029d6:	46e9      	mov	r9, sp
 10029d8:	f04f 0802 	mov.w	r8, #2
 10029dc:	4b5d      	ldr	r3, [pc, #372]	; (1002b54 <z_arm_fault+0x1ec>)
 10029de:	f107 0218 	add.w	r2, r7, #24
 10029e2:	61fb      	str	r3, [r7, #28]
 10029e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10029e8:	4859      	ldr	r0, [pc, #356]	; (1002b50 <z_arm_fault+0x1e8>)
 10029ea:	f8c7 8018 	str.w	r8, [r7, #24]
 10029ee:	f003 fd9e 	bl	100652e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
 10029f2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 10029f4:	4c54      	ldr	r4, [pc, #336]	; (1002b48 <z_arm_fault+0x1e0>)
	*recoverable = false;
 10029f6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 10029f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 10029fa:	079a      	lsls	r2, r3, #30
 10029fc:	d50b      	bpl.n	1002a16 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
 10029fe:	4b56      	ldr	r3, [pc, #344]	; (1002b58 <z_arm_fault+0x1f0>)
		PR_EXC("  Debug event");
 1002a00:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
 1002a04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002a08:	4851      	ldr	r0, [pc, #324]	; (1002b50 <z_arm_fault+0x1e8>)
 1002a0a:	f107 0218 	add.w	r2, r7, #24
 1002a0e:	f003 fd8e 	bl	100652e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 1002a12:	2400      	movs	r4, #0
 1002a14:	e040      	b.n	1002a98 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 1002a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1002a18:	2b00      	cmp	r3, #0
 1002a1a:	da01      	bge.n	1002a20 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
 1002a1c:	4b4f      	ldr	r3, [pc, #316]	; (1002b5c <z_arm_fault+0x1f4>)
 1002a1e:	e7ef      	b.n	1002a00 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 1002a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 1002a22:	005b      	lsls	r3, r3, #1
 1002a24:	d5f5      	bpl.n	1002a12 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
 1002a26:	4b4e      	ldr	r3, [pc, #312]	; (1002b60 <z_arm_fault+0x1f8>)
 1002a28:	f107 0218 	add.w	r2, r7, #24
 1002a2c:	e9c7 8306 	strd	r8, r3, [r7, #24]
 1002a30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1002a34:	4846      	ldr	r0, [pc, #280]	; (1002b50 <z_arm_fault+0x1e8>)
 1002a36:	f003 fd7a 	bl	100652e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1002a3a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 1002a3c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
 1002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 1002a42:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1002a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002a48:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1002a4c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
 1002a4e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
 1002a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 1002a56:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 1002a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002a5c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 1002a60:	f64d 7302 	movw	r3, #57090	; 0xdf02
 1002a64:	429a      	cmp	r2, r3
 1002a66:	d007      	beq.n	1002a78 <z_arm_fault+0x110>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
 1002a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1002a6a:	b2db      	uxtb	r3, r3
 1002a6c:	b383      	cbz	r3, 1002ad0 <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
 1002a6e:	2001      	movs	r0, #1
 1002a70:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
 1002a72:	f7ff fdd9 	bl	1002628 <mem_manage_fault.constprop.0>
 1002a76:	e03a      	b.n	1002aee <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 1002a78:	b088      	sub	sp, #32
 1002a7a:	682b      	ldr	r3, [r5, #0]
 1002a7c:	466a      	mov	r2, sp
 1002a7e:	4939      	ldr	r1, [pc, #228]	; (1002b64 <z_arm_fault+0x1fc>)
 1002a80:	4833      	ldr	r0, [pc, #204]	; (1002b50 <z_arm_fault+0x1e8>)
 1002a82:	e9c2 1305 	strd	r1, r3, [r2, #20]
 1002a86:	2303      	movs	r3, #3
 1002a88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 1002a8c:	f842 3f10 	str.w	r3, [r2, #16]!
 1002a90:	f003 fd4d 	bl	100652e <z_log_msg_static_create.constprop.0>
 1002a94:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
 1002a96:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 1002a98:	79fb      	ldrb	r3, [r7, #7]
 1002a9a:	b9ab      	cbnz	r3, 1002ac8 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 1002a9c:	2220      	movs	r2, #32
 1002a9e:	4629      	mov	r1, r5
 1002aa0:	f107 0008 	add.w	r0, r7, #8
 1002aa4:	f003 fd89 	bl	10065ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 1002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 1002aaa:	2e00      	cmp	r6, #0
 1002aac:	d047      	beq.n	1002b3e <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 1002aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 1002ab2:	b922      	cbnz	r2, 1002abe <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 1002ab4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 1002ab8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1002abc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 1002abe:	4620      	mov	r0, r4
 1002ac0:	f107 0108 	add.w	r1, r7, #8
 1002ac4:	f7ff fc56 	bl	1002374 <z_arm_fatal_error>
}
 1002ac8:	372c      	adds	r7, #44	; 0x2c
 1002aca:	46bd      	mov	sp, r7
 1002acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
 1002ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1002ad2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 1002ad6:	d004      	beq.n	1002ae2 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
 1002ad8:	2001      	movs	r0, #1
 1002ada:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
 1002adc:	f7ff fe28 	bl	1002730 <bus_fault.constprop.0>
 1002ae0:	e005      	b.n	1002aee <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
 1002ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 1002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 1002ae8:	d393      	bcc.n	1002a12 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
 1002aea:	f7ff feb1 	bl	1002850 <usage_fault.constprop.0>
 1002aee:	4604      	mov	r4, r0
 1002af0:	e7d2      	b.n	1002a98 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
 1002af2:	2000      	movs	r0, #0
 1002af4:	1df9      	adds	r1, r7, #7
 1002af6:	e7bc      	b.n	1002a72 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
 1002af8:	2000      	movs	r0, #0
 1002afa:	1df9      	adds	r1, r7, #7
 1002afc:	e7ee      	b.n	1002adc <z_arm_fault+0x174>
	PR_FAULT_INFO(
 1002afe:	4b1a      	ldr	r3, [pc, #104]	; (1002b68 <z_arm_fault+0x200>)
 1002b00:	61fb      	str	r3, [r7, #28]
 1002b02:	2302      	movs	r3, #2
 1002b04:	61bb      	str	r3, [r7, #24]
 1002b06:	e77d      	b.n	1002a04 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
 1002b08:	4a18      	ldr	r2, [pc, #96]	; (1002b6c <z_arm_fault+0x204>)
 1002b0a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
 1002b0e:	46e8      	mov	r8, sp
 1002b10:	b08a      	sub	sp, #40	; 0x28
 1002b12:	4b17      	ldr	r3, [pc, #92]	; (1002b70 <z_arm_fault+0x208>)
 1002b14:	bf18      	it	ne
 1002b16:	4613      	movne	r3, r2
 1002b18:	466a      	mov	r2, sp
 1002b1a:	4916      	ldr	r1, [pc, #88]	; (1002b74 <z_arm_fault+0x20c>)
 1002b1c:	3c10      	subs	r4, #16
 1002b1e:	e9c2 1305 	strd	r1, r3, [r2, #20]
 1002b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 1002b26:	8413      	strh	r3, [r2, #32]
 1002b28:	4b13      	ldr	r3, [pc, #76]	; (1002b78 <z_arm_fault+0x210>)
 1002b2a:	61d4      	str	r4, [r2, #28]
 1002b2c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 1002b30:	4807      	ldr	r0, [pc, #28]	; (1002b50 <z_arm_fault+0x1e8>)
 1002b32:	f842 3f10 	str.w	r3, [r2, #16]!
 1002b36:	f003 fcfa 	bl	100652e <z_log_msg_static_create.constprop.0>
 1002b3a:	46c5      	mov	sp, r8
}
 1002b3c:	e769      	b.n	1002a12 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 1002b3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 1002b42:	f023 0301 	bic.w	r3, r3, #1
 1002b46:	e7b9      	b.n	1002abc <z_arm_fault+0x154>
 1002b48:	e000ed00 	.word	0xe000ed00
 1002b4c:	0100768e 	.word	0x0100768e
 1002b50:	01006f08 	.word	0x01006f08
 1002b54:	010076b9 	.word	0x010076b9
 1002b58:	010076d0 	.word	0x010076d0
 1002b5c:	010076f1 	.word	0x010076f1
 1002b60:	010076ff 	.word	0x010076ff
 1002b64:	0100771e 	.word	0x0100771e
 1002b68:	0100773a 	.word	0x0100773a
 1002b6c:	01007675 	.word	0x01007675
 1002b70:	01007660 	.word	0x01007660
 1002b74:	0100775e 	.word	0x0100775e
 1002b78:	01000004 	.word	0x01000004

01002b7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 1002b7c:	4b04      	ldr	r3, [pc, #16]	; (1002b90 <z_arm_fault_init+0x14>)
 1002b7e:	695a      	ldr	r2, [r3, #20]
 1002b80:	f042 0210 	orr.w	r2, r2, #16
 1002b84:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
 1002b86:	695a      	ldr	r2, [r3, #20]
 1002b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 1002b8c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
 1002b8e:	4770      	bx	lr
 1002b90:	e000ed00 	.word	0xe000ed00

01002b94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 1002b94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 1002b98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 1002b9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 1002b9e:	4672      	mov	r2, lr
	bl z_arm_fault
 1002ba0:	f7ff fee2 	bl	1002968 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 1002ba4:	bd01      	pop	{r0, pc}
 1002ba6:	bf00      	nop

01002ba8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 1002ba8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1002baa:	2120      	movs	r1, #32
 1002bac:	4803      	ldr	r0, [pc, #12]	; (1002bbc <z_arm_interrupt_init+0x14>)
 1002bae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 1002bb0:	3301      	adds	r3, #1
 1002bb2:	2b1e      	cmp	r3, #30
 1002bb4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 1002bb8:	d1f9      	bne.n	1002bae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 1002bba:	4770      	bx	lr
 1002bbc:	e000e100 	.word	0xe000e100

01002bc0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
 1002bc0:	2000      	movs	r0, #0
    msr CONTROL, r0
 1002bc2:	f380 8814 	msr	CONTROL, r0
    isb
 1002bc6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
 1002bca:	2000      	movs	r0, #0
    msr MSPLIM, r0
 1002bcc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
 1002bd0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 1002bd4:	f7fe fde2 	bl	100179c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
 1002bd8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
 1002bda:	490e      	ldr	r1, [pc, #56]	; (1002c14 <__start+0x54>)
    str r0, [r1]
 1002bdc:	6008      	str	r0, [r1, #0]
    dsb
 1002bde:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1002be2:	480d      	ldr	r0, [pc, #52]	; (1002c18 <__start+0x58>)
    msr msp, r0
 1002be4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
 1002be8:	f000 f83e 	bl	1002c68 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 1002bec:	2020      	movs	r0, #32
    msr BASEPRI, r0
 1002bee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 1002bf2:	480a      	ldr	r0, [pc, #40]	; (1002c1c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 1002bf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 1002bf8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 1002bfa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 1002bfe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 1002c02:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 1002c04:	4308      	orrs	r0, r1
    msr CONTROL, r0
 1002c06:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 1002c0a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 1002c0e:	f7ff fc4d 	bl	10024ac <z_arm_prep_c>
 1002c12:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
 1002c14:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
 1002c18:	21001d18 	.word	0x21001d18
    ldr r0, =z_interrupt_stacks
 1002c1c:	21001018 	.word	0x21001018

01002c20 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
 1002c20:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 1002c24:	4905      	ldr	r1, [pc, #20]	; (1002c3c <sys_arch_reboot+0x1c>)
 1002c26:	4b06      	ldr	r3, [pc, #24]	; (1002c40 <sys_arch_reboot+0x20>)
 1002c28:	68ca      	ldr	r2, [r1, #12]
 1002c2a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 1002c2e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 1002c30:	60cb      	str	r3, [r1, #12]
 1002c32:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 1002c36:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 1002c38:	e7fd      	b.n	1002c36 <sys_arch_reboot+0x16>
 1002c3a:	bf00      	nop
 1002c3c:	e000ed00 	.word	0xe000ed00
 1002c40:	05fa0004 	.word	0x05fa0004

01002c44 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
 1002c44:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
 1002c46:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
 1002c48:	4906      	ldr	r1, [pc, #24]	; (1002c64 <z_arm_clear_arm_mpu_config+0x20>)
 1002c4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
 1002c4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
 1002c52:	4293      	cmp	r3, r2
 1002c54:	db00      	blt.n	1002c58 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
 1002c56:	4770      	bx	lr
  mpu->RNR = rnr;
 1002c58:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
 1002c5c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
 1002c60:	3301      	adds	r3, #1
 1002c62:	e7f6      	b.n	1002c52 <z_arm_clear_arm_mpu_config+0xe>
 1002c64:	e000ed00 	.word	0xe000ed00

01002c68 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
 1002c68:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 1002c6a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 1002c6c:	2400      	movs	r4, #0
 1002c6e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
 1002c72:	f7ff ffe7 	bl	1002c44 <z_arm_clear_arm_mpu_config>
 1002c76:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
 1002c78:	f04f 30ff 	mov.w	r0, #4294967295
 1002c7c:	4a0c      	ldr	r2, [pc, #48]	; (1002cb0 <z_arm_init_arch_hw_at_boot+0x48>)
 1002c7e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1002c82:	3301      	adds	r3, #1
 1002c84:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
 1002c86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
 1002c8a:	d1f8      	bne.n	1002c7e <z_arm_init_arch_hw_at_boot+0x16>
 1002c8c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 1002c92:	4a07      	ldr	r2, [pc, #28]	; (1002cb0 <z_arm_init_arch_hw_at_boot+0x48>)
 1002c94:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1002c98:	3301      	adds	r3, #1
 1002c9a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
 1002c9c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
 1002ca0:	d1f8      	bne.n	1002c94 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 1002ca2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 1002ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002ca8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
 1002cac:	bd10      	pop	{r4, pc}
 1002cae:	bf00      	nop
 1002cb0:	e000e100 	.word	0xe000e100

01002cb4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 1002cb4:	4b08      	ldr	r3, [pc, #32]	; (1002cd8 <z_impl_k_thread_abort+0x24>)
 1002cb6:	689b      	ldr	r3, [r3, #8]
 1002cb8:	4283      	cmp	r3, r0
 1002cba:	d10b      	bne.n	1002cd4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1002cbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 1002cc0:	b143      	cbz	r3, 1002cd4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 1002cc2:	4b06      	ldr	r3, [pc, #24]	; (1002cdc <z_impl_k_thread_abort+0x28>)
 1002cc4:	685a      	ldr	r2, [r3, #4]
 1002cc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 1002cca:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
 1002ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 1002cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 1002cd2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
 1002cd4:	f002 bd38 	b.w	1005748 <z_thread_abort>
 1002cd8:	210008b8 	.word	0x210008b8
 1002cdc:	e000ed00 	.word	0xe000ed00

01002ce0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 1002ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 1002ce2:	4c09      	ldr	r4, [pc, #36]	; (1002d08 <z_arm_configure_static_mpu_regions+0x28>)
 1002ce4:	4a09      	ldr	r2, [pc, #36]	; (1002d0c <z_arm_configure_static_mpu_regions+0x2c>)
 1002ce6:	4623      	mov	r3, r4
 1002ce8:	2101      	movs	r1, #1
 1002cea:	4809      	ldr	r0, [pc, #36]	; (1002d10 <z_arm_configure_static_mpu_regions+0x30>)
 1002cec:	f000 f92a 	bl	1002f44 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1002cf0:	2300      	movs	r3, #0
 1002cf2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
 1002cf4:	4b07      	ldr	r3, [pc, #28]	; (1002d14 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1002cf6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
 1002cf8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1002cfa:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
 1002cfc:	9301      	str	r3, [sp, #4]
 1002cfe:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
 1002d00:	f000 f92a 	bl	1002f58 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 1002d04:	b004      	add	sp, #16
 1002d06:	bd10      	pop	{r4, pc}
 1002d08:	21010000 	.word	0x21010000
 1002d0c:	21000000 	.word	0x21000000
 1002d10:	01006fec 	.word	0x01006fec
 1002d14:	21000128 	.word	0x21000128

01002d18 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
 1002d18:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
 1002d1a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1002d1c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
 1002d1e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
 1002d22:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
 1002d26:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1002d28:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1002d2a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
 1002d2c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
 1002d30:	4905      	ldr	r1, [pc, #20]	; (1002d48 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
 1002d32:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
 1002d36:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
 1002d3a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
 1002d3e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
 1002d42:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
 1002d46:	bd10      	pop	{r4, pc}
 1002d48:	e000ed00 	.word	0xe000ed00

01002d4c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
 1002d4c:	b580      	push	{r7, lr}
 1002d4e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 1002d50:	b088      	sub	sp, #32
 1002d52:	466a      	mov	r2, sp
 1002d54:	4b07      	ldr	r3, [pc, #28]	; (1002d74 <region_allocate_and_init.part.0+0x28>)
 1002d56:	e9c2 3005 	strd	r3, r0, [r2, #20]
 1002d5a:	2303      	movs	r3, #3
 1002d5c:	f842 3f10 	str.w	r3, [r2, #16]!
 1002d60:	2300      	movs	r3, #0
 1002d62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 1002d66:	4804      	ldr	r0, [pc, #16]	; (1002d78 <region_allocate_and_init.part.0+0x2c>)
 1002d68:	f7fe ffa0 	bl	1001cac <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
 1002d6c:	f06f 0015 	mvn.w	r0, #21
 1002d70:	46bd      	mov	sp, r7
 1002d72:	bd80      	pop	{r7, pc}
 1002d74:	01007775 	.word	0x01007775
 1002d78:	01006f00 	.word	0x01006f00

01002d7c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1002d80:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 1002d82:	4606      	mov	r6, r0
 1002d84:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1002d88:	b087      	sub	sp, #28
	MPU->RNR = rnr;
 1002d8a:	4d5f      	ldr	r5, [pc, #380]	; (1002f08 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
 1002d8c:	af00      	add	r7, sp, #0
 1002d8e:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
 1002d90:	687b      	ldr	r3, [r7, #4]
 1002d92:	4599      	cmp	r9, r3
 1002d94:	da35      	bge.n	1002e02 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
 1002d96:	f8d6 8004 	ldr.w	r8, [r6, #4]
 1002d9a:	f1b8 0f00 	cmp.w	r8, #0
 1002d9e:	d054      	beq.n	1002e4a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
 1002da0:	f1b8 0f1f 	cmp.w	r8, #31
 1002da4:	d91b      	bls.n	1002dde <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
 1002da6:	f018 0f1f 	tst.w	r8, #31
 1002daa:	d118      	bne.n	1002dde <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
 1002dac:	f8d6 b000 	ldr.w	fp, [r6]
		&&
 1002db0:	f01b 0f1f 	tst.w	fp, #31
 1002db4:	d113      	bne.n	1002dde <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1002db6:	4658      	mov	r0, fp
 1002db8:	f003 fbbc 	bl	1006534 <arm_cmse_mpu_region_get>
 1002dbc:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1002dbe:	eb08 000b 	add.w	r0, r8, fp
 1002dc2:	3801      	subs	r0, #1
 1002dc4:	f003 fbb6 	bl	1006534 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1002dc8:	4582      	cmp	sl, r0
 1002dca:	d01f      	beq.n	1002e0c <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
 1002dcc:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
 1002dd0:	466c      	mov	r4, sp
 1002dd2:	b088      	sub	sp, #32
 1002dd4:	466a      	mov	r2, sp
 1002dd6:	494d      	ldr	r1, [pc, #308]	; (1002f0c <mpu_configure_regions_and_partition.constprop.0+0x190>)
 1002dd8:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 1002ddc:	e005      	b.n	1002dea <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
 1002dde:	466c      	mov	r4, sp
 1002de0:	b088      	sub	sp, #32
 1002de2:	466a      	mov	r2, sp
 1002de4:	4b4a      	ldr	r3, [pc, #296]	; (1002f10 <mpu_configure_regions_and_partition.constprop.0+0x194>)
 1002de6:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
 1002dea:	2303      	movs	r3, #3
 1002dec:	f842 3f10 	str.w	r3, [r2, #16]!
 1002df0:	2300      	movs	r3, #0
 1002df2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 1002df6:	4847      	ldr	r0, [pc, #284]	; (1002f14 <mpu_configure_regions_and_partition.constprop.0+0x198>)
 1002df8:	f7fe ff58 	bl	1001cac <z_impl_z_log_msg_static_create>
 1002dfc:	46a5      	mov	sp, r4
			return -EINVAL;
 1002dfe:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
 1002e02:	4620      	mov	r0, r4
 1002e04:	371c      	adds	r7, #28
 1002e06:	46bd      	mov	sp, r7
 1002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
 1002e0c:	f11a 0f16 	cmn.w	sl, #22
 1002e10:	d0de      	beq.n	1002dd0 <mpu_configure_regions_and_partition.constprop.0+0x54>
 1002e12:	4554      	cmp	r4, sl
 1002e14:	dddc      	ble.n	1002dd0 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
 1002e16:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
 1002e1a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
 1002e1e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
 1002e22:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 1002e26:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
 1002e2a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1002e2e:	e9d6 2100 	ldrd	r2, r1, [r6]
 1002e32:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
 1002e34:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
 1002e36:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
 1002e3a:	d11e      	bne.n	1002e7a <mpu_configure_regions_and_partition.constprop.0+0xfe>
 1002e3c:	45d8      	cmp	r8, fp
 1002e3e:	d108      	bne.n	1002e52 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
 1002e40:	4631      	mov	r1, r6
 1002e42:	fa5f f08a 	uxtb.w	r0, sl
 1002e46:	f003 fb7e 	bl	1006546 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
 1002e4a:	f109 0901 	add.w	r9, r9, #1
 1002e4e:	360c      	adds	r6, #12
 1002e50:	e79e      	b.n	1002d90 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
 1002e52:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
 1002e56:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
 1002e5a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
 1002e5e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
 1002e62:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
 1002e64:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
 1002e66:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
 1002e6a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
 1002e6c:	f003 fb6b 	bl	1006546 <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1002e70:	f110 0f16 	cmn.w	r0, #22
 1002e74:	d0c3      	beq.n	1002dfe <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
 1002e76:	1c44      	adds	r4, r0, #1
 1002e78:	e7e7      	b.n	1002e4a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
 1002e7a:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
 1002e7c:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
 1002e7e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
 1002e80:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
 1002e84:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
 1002e88:	d108      	bne.n	1002e9c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
 1002e8a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1002e8e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
 1002e90:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
 1002e94:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
 1002e96:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
 1002e9a:	e7e7      	b.n	1002e6c <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
 1002e9c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
 1002ea0:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
 1002ea4:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
 1002ea6:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
 1002eaa:	4631      	mov	r1, r6
 1002eac:	f003 fb4b 	bl	1006546 <mpu_configure_region>
			if (reg_index == -EINVAL) {
 1002eb0:	f110 0f16 	cmn.w	r0, #22
 1002eb4:	d0a3      	beq.n	1002dfe <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
 1002eb6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
 1002eba:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 1002ebe:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
 1002ec0:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
 1002ec4:	f362 0304 	bfi	r3, r2, #0, #5
 1002ec8:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
 1002eca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 1002ece:	7c3a      	ldrb	r2, [r7, #16]
 1002ed0:	085b      	lsrs	r3, r3, #1
 1002ed2:	f363 1247 	bfi	r2, r3, #5, #3
 1002ed6:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
 1002ed8:	e9d6 3200 	ldrd	r3, r2, [r6]
 1002edc:	4413      	add	r3, r2
 1002ede:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
 1002ee0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
 1002ee4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
 1002ee6:	4443      	add	r3, r8
 1002ee8:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
 1002eec:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
 1002eee:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 1002ef2:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
 1002ef4:	617b      	str	r3, [r7, #20]
 1002ef6:	d902      	bls.n	1002efe <mpu_configure_regions_and_partition.constprop.0+0x182>
 1002ef8:	f7ff ff28 	bl	1002d4c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
 1002efc:	e7b8      	b.n	1002e70 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
 1002efe:	f107 0108 	add.w	r1, r7, #8
 1002f02:	f7ff ff09 	bl	1002d18 <region_init>
 1002f06:	e7b6      	b.n	1002e76 <mpu_configure_regions_and_partition.constprop.0+0xfa>
 1002f08:	e000ed00 	.word	0xe000ed00
 1002f0c:	010077be 	.word	0x010077be
 1002f10:	0100779b 	.word	0x0100779b
 1002f14:	01006f00 	.word	0x01006f00

01002f18 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 1002f18:	2205      	movs	r2, #5
 1002f1a:	4b04      	ldr	r3, [pc, #16]	; (1002f2c <arm_core_mpu_enable+0x14>)
 1002f1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 1002f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1002f24:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 1002f28:	4770      	bx	lr
 1002f2a:	bf00      	nop
 1002f2c:	e000ed00 	.word	0xe000ed00

01002f30 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 1002f30:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 1002f34:	2200      	movs	r2, #0
 1002f36:	4b02      	ldr	r3, [pc, #8]	; (1002f40 <arm_core_mpu_disable+0x10>)
 1002f38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 1002f3c:	4770      	bx	lr
 1002f3e:	bf00      	nop
 1002f40:	e000ed00 	.word	0xe000ed00

01002f44 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 1002f44:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 1002f46:	4c03      	ldr	r4, [pc, #12]	; (1002f54 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
 1002f48:	7822      	ldrb	r2, [r4, #0]
 1002f4a:	f7ff ff17 	bl	1002d7c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 1002f4e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 1002f50:	bd10      	pop	{r4, pc}
 1002f52:	bf00      	nop
 1002f54:	21000903 	.word	0x21000903

01002f58 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
 1002f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1002f5c:	4d29      	ldr	r5, [pc, #164]	; (1003004 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
 1002f5e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
 1002f60:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1002f62:	f04f 0800 	mov.w	r8, #0
 1002f66:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
 1002f68:	4f27      	ldr	r7, [pc, #156]	; (1003008 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1002f6a:	45d0      	cmp	r8, sl
 1002f6c:	da1b      	bge.n	1002fa6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
 1002f6e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 1002f72:	f1b9 0f00 	cmp.w	r9, #0
 1002f76:	d03f      	beq.n	1002ff8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
 1002f78:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1002f7a:	4608      	mov	r0, r1
 1002f7c:	9101      	str	r1, [sp, #4]
 1002f7e:	f003 fad9 	bl	1006534 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1002f82:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
 1002f84:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
 1002f86:	eb09 0001 	add.w	r0, r9, r1
 1002f8a:	3801      	subs	r0, #1
 1002f8c:	f003 fad2 	bl	1006534 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
 1002f90:	4284      	cmp	r4, r0
 1002f92:	f04f 0214 	mov.w	r2, #20
 1002f96:	4b1d      	ldr	r3, [pc, #116]	; (100300c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
 1002f98:	d008      	beq.n	1002fac <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
 1002f9a:	fb02 f308 	mul.w	r3, r2, r8
 1002f9e:	f06f 0215 	mvn.w	r2, #21
 1002fa2:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
 1002fa6:	b003      	add	sp, #12
 1002fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
 1002fac:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
 1002fb0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
 1002fb2:	d0f8      	beq.n	1002fa6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
 1002fb4:	7819      	ldrb	r1, [r3, #0]
 1002fb6:	42a1      	cmp	r1, r4
 1002fb8:	ddf5      	ble.n	1002fa6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
 1002fba:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
 1002fbe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 1002fc2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
 1002fc6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
 1002fca:	f100 0108 	add.w	r1, r0, #8
 1002fce:	7b00      	ldrb	r0, [r0, #12]
 1002fd0:	f364 0004 	bfi	r0, r4, #0, #5
 1002fd4:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
 1002fd6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
 1002fda:	790c      	ldrb	r4, [r1, #4]
 1002fdc:	0840      	lsrs	r0, r0, #1
 1002fde:	f360 1447 	bfi	r4, r0, #5, #3
 1002fe2:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
 1002fe4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
 1002fe8:	f021 011f 	bic.w	r1, r1, #31
 1002fec:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
 1002fee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
 1002ff2:	f021 011f 	bic.w	r1, r1, #31
 1002ff6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
 1002ff8:	f108 0801 	add.w	r8, r8, #1
 1002ffc:	3514      	adds	r5, #20
 1002ffe:	360c      	adds	r6, #12
 1003000:	e7b3      	b.n	1002f6a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
 1003002:	bf00      	nop
 1003004:	2100075c 	.word	0x2100075c
 1003008:	e000ed00 	.word	0xe000ed00
 100300c:	21000903 	.word	0x21000903

01003010 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 1003010:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 1003012:	4d0e      	ldr	r5, [pc, #56]	; (100304c <z_arm_mpu_init+0x3c>)
 1003014:	682c      	ldr	r4, [r5, #0]
 1003016:	2c08      	cmp	r4, #8
 1003018:	d815      	bhi.n	1003046 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 100301a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
 100301c:	f7ff ff88 	bl	1002f30 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
 1003020:	4b0b      	ldr	r3, [pc, #44]	; (1003050 <z_arm_mpu_init+0x40>)
 1003022:	4a0c      	ldr	r2, [pc, #48]	; (1003054 <z_arm_mpu_init+0x44>)
 1003024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1003028:	4284      	cmp	r4, r0
 100302a:	d105      	bne.n	1003038 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 100302c:	4b0a      	ldr	r3, [pc, #40]	; (1003058 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 100302e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
 1003030:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
 1003032:	f7ff ff71 	bl	1002f18 <arm_core_mpu_enable>
}
 1003036:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 1003038:	6869      	ldr	r1, [r5, #4]
 100303a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 100303e:	f7ff fe6b 	bl	1002d18 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 1003042:	3001      	adds	r0, #1
 1003044:	e7f0      	b.n	1003028 <z_arm_mpu_init+0x18>
		return -1;
 1003046:	f04f 30ff 	mov.w	r0, #4294967295
 100304a:	e7f4      	b.n	1003036 <z_arm_mpu_init+0x26>
 100304c:	01006ff8 	.word	0x01006ff8
 1003050:	e000ed00 	.word	0xe000ed00
 1003054:	0044ffaa 	.word	0x0044ffaa
 1003058:	21000903 	.word	0x21000903

0100305c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
 100305c:	4b01      	ldr	r3, [pc, #4]	; (1003064 <__stdout_hook_install+0x8>)
 100305e:	6018      	str	r0, [r3, #0]
}
 1003060:	4770      	bx	lr
 1003062:	bf00      	nop
 1003064:	21000010 	.word	0x21000010

01003068 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
 1003068:	b40c      	push	{r2, r3}
 100306a:	b510      	push	{r4, lr}
 100306c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
 100306e:	b909      	cbnz	r1, 1003074 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
 1003070:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 1003074:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
 1003076:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
 100307a:	ab09      	add	r3, sp, #36	; 0x24
 100307c:	9a08      	ldr	r2, [sp, #32]
 100307e:	9400      	str	r4, [sp, #0]
 1003080:	a904      	add	r1, sp, #16
 1003082:	4805      	ldr	r0, [pc, #20]	; (1003098 <snprintf+0x30>)
 1003084:	9303      	str	r3, [sp, #12]
 1003086:	f7fd ffb9 	bl	1000ffc <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
 100308a:	9b04      	ldr	r3, [sp, #16]
 100308c:	701c      	strb	r4, [r3, #0]
	return r;
}
 100308e:	b006      	add	sp, #24
 1003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1003094:	b002      	add	sp, #8
 1003096:	4770      	bx	lr
 1003098:	010065e9 	.word	0x010065e9

0100309c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
 100309c:	4b08      	ldr	r3, [pc, #32]	; (10030c0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
 100309e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 10030a0:	1ac3      	subs	r3, r0, r3
{
 10030a2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10030a4:	4907      	ldr	r1, [pc, #28]	; (10030c4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
 10030a6:	109b      	asrs	r3, r3, #2
{
 10030a8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10030aa:	4359      	muls	r1, r3
 10030ac:	2240      	movs	r2, #64	; 0x40
 10030ae:	4806      	ldr	r0, [pc, #24]	; (10030c8 <onoff_stop+0x2c>)
 10030b0:	f003 fac3 	bl	100663a <stop>
	notify(mgr, res);
 10030b4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
 10030b6:	4601      	mov	r1, r0
	notify(mgr, res);
 10030b8:	4620      	mov	r0, r4
}
 10030ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
 10030be:	4718      	bx	r3
 10030c0:	21000784 	.word	0x21000784
 10030c4:	b6db6db7 	.word	0xb6db6db7
 10030c8:	01006d48 	.word	0x01006d48

010030cc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030cc:	2340      	movs	r3, #64	; 0x40
{
 10030ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
 10030d0:	4c0b      	ldr	r4, [pc, #44]	; (1003100 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030d2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
 10030d4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030d6:	460b      	mov	r3, r1
{
 10030d8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030da:	490a      	ldr	r1, [pc, #40]	; (1003104 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
 10030dc:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030de:	4361      	muls	r1, r4
{
 10030e0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
 10030e2:	4a09      	ldr	r2, [pc, #36]	; (1003108 <onoff_start+0x3c>)
 10030e4:	4809      	ldr	r0, [pc, #36]	; (100310c <onoff_start+0x40>)
 10030e6:	f003 fad4 	bl	1006692 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
 10030ea:	1e01      	subs	r1, r0, #0
 10030ec:	da05      	bge.n	10030fa <onoff_start+0x2e>
		notify(mgr, err);
 10030ee:	4630      	mov	r0, r6
 10030f0:	462b      	mov	r3, r5
	}
}
 10030f2:	b002      	add	sp, #8
 10030f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
 10030f8:	4718      	bx	r3
}
 10030fa:	b002      	add	sp, #8
 10030fc:	bd70      	pop	{r4, r5, r6, pc}
 10030fe:	bf00      	nop
 1003100:	21000784 	.word	0x21000784
 1003104:	b6db6db7 	.word	0xb6db6db7
 1003108:	010066fd 	.word	0x010066fd
 100310c:	01006d48 	.word	0x01006d48

01003110 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
 1003110:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1003112:	2200      	movs	r2, #0
 1003114:	2101      	movs	r1, #1
{
 1003116:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
 1003118:	2005      	movs	r0, #5
 100311a:	f7ff f9ad 	bl	1002478 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
 100311e:	480f      	ldr	r0, [pc, #60]	; (100315c <clk_init+0x4c>)
 1003120:	f001 f808 	bl	1004134 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
 1003124:	4b0e      	ldr	r3, [pc, #56]	; (1003160 <clk_init+0x50>)
 1003126:	4298      	cmp	r0, r3
 1003128:	d115      	bne.n	1003156 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
 100312a:	f001 f813 	bl	1004154 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
 100312e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
 1003130:	490c      	ldr	r1, [pc, #48]	; (1003164 <clk_init+0x54>)
 1003132:	4630      	mov	r0, r6
 1003134:	f002 fe5f 	bl	1005df6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
 1003138:	2800      	cmp	r0, #0
 100313a:	db0b      	blt.n	1003154 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 100313c:	2501      	movs	r5, #1
 100313e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
 1003140:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
 1003142:	4908      	ldr	r1, [pc, #32]	; (1003164 <clk_init+0x54>)
 1003144:	f104 001c 	add.w	r0, r4, #28
 1003148:	f002 fe55 	bl	1005df6 <onoff_manager_init>
		if (err < 0) {
 100314c:	2800      	cmp	r0, #0
 100314e:	db01      	blt.n	1003154 <clk_init+0x44>
	}

	return 0;
 1003150:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
 1003152:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 1003154:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 1003156:	f06f 0004 	mvn.w	r0, #4
 100315a:	e7fb      	b.n	1003154 <clk_init+0x44>
 100315c:	0100319d 	.word	0x0100319d
 1003160:	0bad0000 	.word	0x0bad0000
 1003164:	01007020 	.word	0x01007020

01003168 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
 1003168:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
 100316a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
 100316c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
 100316e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
 1003170:	434b      	muls	r3, r1
 1003172:	4808      	ldr	r0, [pc, #32]	; (1003194 <clkstarted_handle.constprop.0+0x2c>)
 1003174:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
 1003176:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
 1003178:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 100317c:	4418      	add	r0, r3
	sub_data->cb = NULL;
 100317e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
 1003180:	f003 fa48 	bl	1006614 <set_on_state>
	if (callback) {
 1003184:	b12d      	cbz	r5, 1003192 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
 1003186:	4632      	mov	r2, r6
 1003188:	462b      	mov	r3, r5
}
 100318a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
 100318e:	4802      	ldr	r0, [pc, #8]	; (1003198 <clkstarted_handle.constprop.0+0x30>)
 1003190:	4718      	bx	r3
}
 1003192:	bd70      	pop	{r4, r5, r6, pc}
 1003194:	21000784 	.word	0x21000784
 1003198:	01006d48 	.word	0x01006d48

0100319c <clock_event_handler>:
	switch (event) {
 100319c:	b110      	cbz	r0, 10031a4 <clock_event_handler+0x8>
 100319e:	2801      	cmp	r0, #1
 10031a0:	d004      	beq.n	10031ac <clock_event_handler+0x10>
 10031a2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
 10031a4:	4b03      	ldr	r3, [pc, #12]	; (10031b4 <clock_event_handler+0x18>)
 10031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 10031a8:	075b      	lsls	r3, r3, #29
 10031aa:	d101      	bne.n	10031b0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
 10031ac:	f7ff bfdc 	b.w	1003168 <clkstarted_handle.constprop.0>
}
 10031b0:	4770      	bx	lr
 10031b2:	bf00      	nop
 10031b4:	21000784 	.word	0x21000784

010031b8 <generic_hfclk_start>:
{
 10031b8:	b508      	push	{r3, lr}
	__asm__ volatile(
 10031ba:	f04f 0320 	mov.w	r3, #32
 10031be:	f3ef 8111 	mrs	r1, BASEPRI
 10031c2:	f383 8812 	msr	BASEPRI_MAX, r3
 10031c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
 10031ca:	4a11      	ldr	r2, [pc, #68]	; (1003210 <generic_hfclk_start+0x58>)
 10031cc:	6813      	ldr	r3, [r2, #0]
 10031ce:	f043 0002 	orr.w	r0, r3, #2
 10031d2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
 10031d4:	07da      	lsls	r2, r3, #31
 10031d6:	d408      	bmi.n	10031ea <generic_hfclk_start+0x32>
	__asm__ volatile(
 10031d8:	f381 8811 	msr	BASEPRI, r1
 10031dc:	f3bf 8f6f 	isb	sy
}
 10031e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
 10031e4:	2001      	movs	r0, #1
 10031e6:	f000 bfc7 	b.w	1004178 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 10031ea:	4b0a      	ldr	r3, [pc, #40]	; (1003214 <generic_hfclk_start+0x5c>)
 10031ec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 10031f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
 10031f4:	07d3      	lsls	r3, r2, #31
 10031f6:	d5ef      	bpl.n	10031d8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
 10031f8:	4807      	ldr	r0, [pc, #28]	; (1003218 <generic_hfclk_start+0x60>)
 10031fa:	f003 fa0b 	bl	1006614 <set_on_state>
 10031fe:	f381 8811 	msr	BASEPRI, r1
 1003202:	f3bf 8f6f 	isb	sy
}
 1003206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
 100320a:	2000      	movs	r0, #0
 100320c:	f7ff bfac 	b.w	1003168 <clkstarted_handle.constprop.0>
 1003210:	210007d4 	.word	0x210007d4
 1003214:	41005000 	.word	0x41005000
 1003218:	210007c4 	.word	0x210007c4

0100321c <api_blocking_start>:
{
 100321c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 100321e:	2200      	movs	r2, #0
 1003220:	2301      	movs	r3, #1
 1003222:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 1003226:	466b      	mov	r3, sp
 1003228:	4a08      	ldr	r2, [pc, #32]	; (100324c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
 100322a:	f8cd d000 	str.w	sp, [sp]
 100322e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
 1003232:	f003 fa5c 	bl	10066ee <api_start>
	if (err < 0) {
 1003236:	2800      	cmp	r0, #0
 1003238:	db05      	blt.n	1003246 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
 100323a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 100323e:	2300      	movs	r3, #0
 1003240:	4668      	mov	r0, sp
 1003242:	f001 ff71 	bl	1005128 <z_impl_k_sem_take>
}
 1003246:	b005      	add	sp, #20
 1003248:	f85d fb04 	ldr.w	pc, [sp], #4
 100324c:	0100671b 	.word	0x0100671b

01003250 <generic_hfclk_stop>:
{
 1003250:	b510      	push	{r4, lr}
	__asm__ volatile(
 1003252:	f04f 0320 	mov.w	r3, #32
 1003256:	f3ef 8411 	mrs	r4, BASEPRI
 100325a:	f383 8812 	msr	BASEPRI_MAX, r3
 100325e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
 1003262:	4a07      	ldr	r2, [pc, #28]	; (1003280 <generic_hfclk_stop+0x30>)
 1003264:	6813      	ldr	r3, [r2, #0]
 1003266:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
 100326a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
 100326c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
 100326e:	d402      	bmi.n	1003276 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
 1003270:	2001      	movs	r0, #1
 1003272:	f003 fb28 	bl	10068c6 <nrfx_clock_stop>
	__asm__ volatile(
 1003276:	f384 8811 	msr	BASEPRI, r4
 100327a:	f3bf 8f6f 	isb	sy
}
 100327e:	bd10      	pop	{r4, pc}
 1003280:	210007d4 	.word	0x210007d4

01003284 <z_nrf_clock_control_lf_on>:
{
 1003284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 1003288:	2201      	movs	r2, #1
 100328a:	4607      	mov	r7, r0
 100328c:	4935      	ldr	r1, [pc, #212]	; (1003364 <z_nrf_clock_control_lf_on+0xe0>)
 100328e:	e8d1 3fef 	ldaex	r3, [r1]
 1003292:	e8c1 2fe0 	stlex	r0, r2, [r1]
 1003296:	2800      	cmp	r0, #0
 1003298:	d1f9      	bne.n	100328e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
 100329a:	b933      	cbnz	r3, 10032aa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
 100329c:	4932      	ldr	r1, [pc, #200]	; (1003368 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
 100329e:	4833      	ldr	r0, [pc, #204]	; (100336c <z_nrf_clock_control_lf_on+0xe8>)
 10032a0:	604b      	str	r3, [r1, #4]
 10032a2:	60cb      	str	r3, [r1, #12]
 10032a4:	608a      	str	r2, [r1, #8]
 10032a6:	f002 fdb9 	bl	1005e1c <onoff_request>
	switch (start_mode) {
 10032aa:	1e7b      	subs	r3, r7, #1
 10032ac:	2b01      	cmp	r3, #1
 10032ae:	d828      	bhi.n	1003302 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
 10032b0:	2f01      	cmp	r7, #1
 10032b2:	d106      	bne.n	10032c2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 10032b4:	4b2e      	ldr	r3, [pc, #184]	; (1003370 <z_nrf_clock_control_lf_on+0xec>)
 10032b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
 10032ba:	f003 0303 	and.w	r3, r3, #3
 10032be:	2b02      	cmp	r3, #2
 10032c0:	d01f      	beq.n	1003302 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 10032c2:	f003 fbbe 	bl	1006a42 <k_is_in_isr>
 10032c6:	4605      	mov	r5, r0
 10032c8:	b9e8      	cbnz	r0, 1003306 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
 10032ca:	4b2a      	ldr	r3, [pc, #168]	; (1003374 <z_nrf_clock_control_lf_on+0xf0>)
 10032cc:	781b      	ldrb	r3, [r3, #0]
 10032ce:	b1d3      	cbz	r3, 1003306 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
 10032d0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
 10032d2:	4606      	mov	r6, r0
 10032d4:	4b26      	ldr	r3, [pc, #152]	; (1003370 <z_nrf_clock_control_lf_on+0xec>)
 10032d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10032da:	4c25      	ldr	r4, [pc, #148]	; (1003370 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 10032dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1003378 <z_nrf_clock_control_lf_on+0xf4>
 10032e0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10032e4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
 10032e8:	03d2      	lsls	r2, r2, #15
 10032ea:	d516      	bpl.n	100331a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
 10032ec:	f003 0303 	and.w	r3, r3, #3
 10032f0:	2b02      	cmp	r3, #2
 10032f2:	d001      	beq.n	10032f8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
 10032f4:	2f01      	cmp	r7, #1
 10032f6:	d110      	bne.n	100331a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
 10032f8:	b375      	cbz	r5, 1003358 <z_nrf_clock_control_lf_on+0xd4>
 10032fa:	f386 8811 	msr	BASEPRI, r6
 10032fe:	f3bf 8f6f 	isb	sy
}
 1003302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
 1003306:	f04f 0320 	mov.w	r3, #32
 100330a:	f3ef 8611 	mrs	r6, BASEPRI
 100330e:	f383 8812 	msr	BASEPRI_MAX, r3
 1003312:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 1003316:	2501      	movs	r5, #1
 1003318:	e7df      	b.n	10032da <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
 100331a:	b1c5      	cbz	r5, 100334e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
 100331c:	4630      	mov	r0, r6
 100331e:	f7ff f81f 	bl	1002360 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
 1003322:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
 1003326:	b2db      	uxtb	r3, r3
 1003328:	2b01      	cmp	r3, #1
 100332a:	d1d9      	bne.n	10032e0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 100332c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
 1003330:	2a00      	cmp	r2, #0
 1003332:	d0d5      	beq.n	10032e0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1003334:	2200      	movs	r2, #0
 1003336:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
 100333a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
 100333e:	2202      	movs	r2, #2
 1003340:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 1003344:	2220      	movs	r2, #32
 1003346:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 100334a:	60a3      	str	r3, [r4, #8]
}
 100334c:	e7c8      	b.n	10032e0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
 100334e:	2100      	movs	r1, #0
 1003350:	2021      	movs	r0, #33	; 0x21
 1003352:	f002 f9d9 	bl	1005708 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 1003356:	e7e4      	b.n	1003322 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
 1003358:	2202      	movs	r2, #2
 100335a:	4b05      	ldr	r3, [pc, #20]	; (1003370 <z_nrf_clock_control_lf_on+0xec>)
 100335c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
 1003360:	e7cf      	b.n	1003302 <z_nrf_clock_control_lf_on+0x7e>
 1003362:	bf00      	nop
 1003364:	21000780 	.word	0x21000780
 1003368:	21000770 	.word	0x21000770
 100336c:	210007a0 	.word	0x210007a0
 1003370:	41005000 	.word	0x41005000
 1003374:	21000d17 	.word	0x21000d17
 1003378:	e000e100 	.word	0xe000e100

0100337c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
 100337c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
 100337e:	4c04      	ldr	r4, [pc, #16]	; (1003390 <rtt_console_init+0x14>)
 1003380:	4620      	mov	r0, r4
 1003382:	f7fd fd11 	bl	1000da8 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
 1003386:	4620      	mov	r0, r4
 1003388:	f7ff fe68 	bl	100305c <__stdout_hook_install>

	return 0;
}
 100338c:	2000      	movs	r0, #0
 100338e:	bd10      	pop	{r4, pc}
 1003390:	01003395 	.word	0x01003395

01003394 <rtt_console_out>:
{
 1003394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1003396:	4604      	mov	r4, r0
	char c = (char)character;
 1003398:	2503      	movs	r5, #3
 100339a:	4e12      	ldr	r6, [pc, #72]	; (10033e4 <rtt_console_out+0x50>)
 100339c:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
 10033a0:	f001 fbba 	bl	1004b18 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
 10033a4:	2201      	movs	r2, #1
 10033a6:	2000      	movs	r0, #0
 10033a8:	f10d 0107 	add.w	r1, sp, #7
 10033ac:	f001 fb7e 	bl	1004aac <SEGGER_RTT_WriteNoLock>
 10033b0:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
 10033b2:	f001 fbbb 	bl	1004b2c <zephyr_rtt_mutex_unlock>
		if (cnt) {
 10033b6:	b127      	cbz	r7, 10033c2 <rtt_console_out+0x2e>
			host_present = true;
 10033b8:	2301      	movs	r3, #1
 10033ba:	7033      	strb	r3, [r6, #0]
}
 10033bc:	4620      	mov	r0, r4
 10033be:	b003      	add	sp, #12
 10033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
 10033c2:	7833      	ldrb	r3, [r6, #0]
 10033c4:	2b00      	cmp	r3, #0
 10033c6:	d0f9      	beq.n	10033bc <rtt_console_out+0x28>
			if (max_cnt) {
 10033c8:	3d01      	subs	r5, #1
 10033ca:	d008      	beq.n	10033de <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
 10033cc:	f003 fb39 	bl	1006a42 <k_is_in_isr>
 10033d0:	2800      	cmp	r0, #0
 10033d2:	d1e5      	bne.n	10033a0 <rtt_console_out+0xc>
 10033d4:	2100      	movs	r1, #0
 10033d6:	2042      	movs	r0, #66	; 0x42
 10033d8:	f002 f996 	bl	1005708 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
 10033dc:	e7e0      	b.n	10033a0 <rtt_console_out+0xc>
				host_present = false;
 10033de:	7035      	strb	r5, [r6, #0]
 10033e0:	e7ec      	b.n	10033bc <rtt_console_out+0x28>
 10033e2:	bf00      	nop
 10033e4:	21000904 	.word	0x21000904

010033e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 10033e8:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 10033ea:	4807      	ldr	r0, [pc, #28]	; (1003408 <uart_console_init+0x20>)
 10033ec:	f003 fb1a 	bl	1006a24 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
 10033f0:	b138      	cbz	r0, 1003402 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
 10033f2:	4806      	ldr	r0, [pc, #24]	; (100340c <uart_console_init+0x24>)
 10033f4:	f7ff fe32 	bl	100305c <__stdout_hook_install>
	__printk_hook_install(console_out);
 10033f8:	4804      	ldr	r0, [pc, #16]	; (100340c <uart_console_init+0x24>)
 10033fa:	f7fd fcd5 	bl	1000da8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
 10033fe:	2000      	movs	r0, #0
}
 1003400:	bd08      	pop	{r3, pc}
		return -ENODEV;
 1003402:	f06f 0012 	mvn.w	r0, #18
 1003406:	e7fb      	b.n	1003400 <uart_console_init+0x18>
 1003408:	01006d90 	.word	0x01006d90
 100340c:	01003411 	.word	0x01003411

01003410 <console_out>:
	if ('\n' == c) {
 1003410:	280a      	cmp	r0, #10
{
 1003412:	b538      	push	{r3, r4, r5, lr}
 1003414:	4604      	mov	r4, r0
 1003416:	4d07      	ldr	r5, [pc, #28]	; (1003434 <console_out+0x24>)
	if ('\n' == c) {
 1003418:	d104      	bne.n	1003424 <console_out+0x14>
 100341a:	68ab      	ldr	r3, [r5, #8]
 100341c:	210d      	movs	r1, #13
 100341e:	4628      	mov	r0, r5
 1003420:	685b      	ldr	r3, [r3, #4]
 1003422:	4798      	blx	r3
 1003424:	68ab      	ldr	r3, [r5, #8]
 1003426:	4803      	ldr	r0, [pc, #12]	; (1003434 <console_out+0x24>)
 1003428:	685b      	ldr	r3, [r3, #4]
 100342a:	b2e1      	uxtb	r1, r4
 100342c:	4798      	blx	r3
}
 100342e:	4620      	mov	r0, r4
 1003430:	bd38      	pop	{r3, r4, r5, pc}
 1003432:	bf00      	nop
 1003434:	01006d90 	.word	0x01006d90

01003438 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
 1003438:	b530      	push	{r4, r5, lr}
	return port->config;
 100343a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 100343c:	f001 041f 	and.w	r4, r1, #31
 1003440:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
 1003442:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
 1003446:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
 1003448:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
 100344c:	d105      	bne.n	100345a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
 100344e:	4620      	mov	r0, r4
 1003450:	f001 f950 	bl	10046f4 <nrfx_gpiote_trigger_disable>

		return 0;
 1003454:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
 1003456:	b005      	add	sp, #20
 1003458:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
 100345a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
 100345c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
 1003460:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
 1003464:	d114      	bne.n	1003490 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
 1003466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
 100346a:	bf0c      	ite	eq
 100346c:	2304      	moveq	r3, #4
 100346e:	2305      	movne	r3, #5
 1003470:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 1003474:	2300      	movs	r3, #0
 1003476:	4620      	mov	r0, r4
 1003478:	4619      	mov	r1, r3
 100347a:	aa02      	add	r2, sp, #8
 100347c:	f000 ff76 	bl	100436c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 1003480:	4b1f      	ldr	r3, [pc, #124]	; (1003500 <gpio_nrfx_pin_interrupt_configure+0xc8>)
 1003482:	4298      	cmp	r0, r3
 1003484:	d138      	bne.n	10034f8 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
 1003486:	2101      	movs	r1, #1
 1003488:	4620      	mov	r0, r4
 100348a:	f001 f8ed 	bl	1004668 <nrfx_gpiote_trigger_enable>
	return 0;
 100348e:	e7e1      	b.n	1003454 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 1003490:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 1003494:	d025      	beq.n	10034e2 <gpio_nrfx_pin_interrupt_configure+0xaa>
 1003496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 100349a:	bf14      	ite	ne
 100349c:	2301      	movne	r3, #1
 100349e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
 10034a0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
 10034a4:	6883      	ldr	r3, [r0, #8]
 10034a6:	40cb      	lsrs	r3, r1
 10034a8:	07d9      	lsls	r1, r3, #31
 10034aa:	d4e3      	bmi.n	1003474 <gpio_nrfx_pin_interrupt_configure+0x3c>
 10034ac:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
 10034b0:	d1e0      	bne.n	1003474 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
 10034b2:	4a14      	ldr	r2, [pc, #80]	; (1003504 <gpio_nrfx_pin_interrupt_configure+0xcc>)
 10034b4:	4814      	ldr	r0, [pc, #80]	; (1003508 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
 10034b6:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
 10034b8:	2901      	cmp	r1, #1
 10034ba:	bf08      	it	eq
 10034bc:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
 10034be:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
 10034c2:	3380      	adds	r3, #128	; 0x80
 10034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
 10034c8:	07db      	lsls	r3, r3, #31
 10034ca:	d4d3      	bmi.n	1003474 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10034cc:	f10d 0507 	add.w	r5, sp, #7
 10034d0:	4629      	mov	r1, r5
 10034d2:	4620      	mov	r0, r4
 10034d4:	f001 f874 	bl	10045c0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
 10034d8:	4b0c      	ldr	r3, [pc, #48]	; (100350c <gpio_nrfx_pin_interrupt_configure+0xd4>)
 10034da:	4298      	cmp	r0, r3
 10034dc:	d003      	beq.n	10034e6 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
 10034de:	9503      	str	r5, [sp, #12]
 10034e0:	e7c8      	b.n	1003474 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
 10034e2:	2303      	movs	r3, #3
 10034e4:	e7dc      	b.n	10034a0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
 10034e6:	4628      	mov	r0, r5
 10034e8:	f001 f8b8 	bl	100465c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
 10034ec:	4b04      	ldr	r3, [pc, #16]	; (1003500 <gpio_nrfx_pin_interrupt_configure+0xc8>)
 10034ee:	4298      	cmp	r0, r3
 10034f0:	d0f5      	beq.n	10034de <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
 10034f2:	f06f 000b 	mvn.w	r0, #11
 10034f6:	e7ae      	b.n	1003456 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
 10034f8:	f06f 0015 	mvn.w	r0, #21
 10034fc:	e7ab      	b.n	1003456 <gpio_nrfx_pin_interrupt_configure+0x1e>
 10034fe:	bf00      	nop
 1003500:	0bad0000 	.word	0x0bad0000
 1003504:	418c0500 	.word	0x418c0500
 1003508:	418c0800 	.word	0x418c0800
 100350c:	0bad0004 	.word	0x0bad0004

01003510 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
 1003510:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
 1003512:	f001 f893 	bl	100463c <nrfx_gpiote_is_init>
 1003516:	4604      	mov	r4, r0
 1003518:	b968      	cbnz	r0, 1003536 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
 100351a:	f001 f867 	bl	10045ec <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
 100351e:	4b08      	ldr	r3, [pc, #32]	; (1003540 <gpio_nrfx_init+0x30>)
 1003520:	4298      	cmp	r0, r3
 1003522:	d10a      	bne.n	100353a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
 1003524:	4621      	mov	r1, r4
 1003526:	4807      	ldr	r0, [pc, #28]	; (1003544 <gpio_nrfx_init+0x34>)
 1003528:	f001 f844 	bl	10045b4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
 100352c:	4622      	mov	r2, r4
 100352e:	2105      	movs	r1, #5
 1003530:	200a      	movs	r0, #10
 1003532:	f7fe ffa1 	bl	1002478 <z_arm_irq_priority_set>
		return 0;
 1003536:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
 1003538:	bd10      	pop	{r4, pc}
		return -EIO;
 100353a:	f06f 0004 	mvn.w	r0, #4
 100353e:	e7fb      	b.n	1003538 <gpio_nrfx_init+0x28>
 1003540:	0bad0000 	.word	0x0bad0000
 1003544:	01003549 	.word	0x01003549

01003548 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1003548:	0942      	lsrs	r2, r0, #5
{
 100354a:	4603      	mov	r3, r0
 100354c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 100354e:	d002      	beq.n	1003556 <nrfx_gpio_handler+0xe>
 1003550:	2a01      	cmp	r2, #1
 1003552:	d017      	beq.n	1003584 <nrfx_gpio_handler+0x3c>
}
 1003554:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1003556:	4e0d      	ldr	r6, [pc, #52]	; (100358c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
 1003558:	6932      	ldr	r2, [r6, #16]
 100355a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 100355c:	2900      	cmp	r1, #0
 100355e:	d0f9      	beq.n	1003554 <nrfx_gpio_handler+0xc>
 1003560:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
 1003562:	f003 031f 	and.w	r3, r3, #31
	return node->next;
 1003566:	680c      	ldr	r4, [r1, #0]
 1003568:	409d      	lsls	r5, r3
 100356a:	2900      	cmp	r1, #0
 100356c:	d0f2      	beq.n	1003554 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
 100356e:	688a      	ldr	r2, [r1, #8]
 1003570:	402a      	ands	r2, r5
 1003572:	d002      	beq.n	100357a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 1003574:	4630      	mov	r0, r6
 1003576:	684b      	ldr	r3, [r1, #4]
 1003578:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 100357a:	b12c      	cbz	r4, 1003588 <nrfx_gpio_handler+0x40>
 100357c:	6823      	ldr	r3, [r4, #0]
 100357e:	4621      	mov	r1, r4
 1003580:	461c      	mov	r4, r3
 1003582:	e7f2      	b.n	100356a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
 1003584:	4e02      	ldr	r6, [pc, #8]	; (1003590 <nrfx_gpio_handler+0x48>)
 1003586:	e7e7      	b.n	1003558 <nrfx_gpio_handler+0x10>
 1003588:	4623      	mov	r3, r4
 100358a:	e7f8      	b.n	100357e <nrfx_gpio_handler+0x36>
 100358c:	01006d78 	.word	0x01006d78
 1003590:	01006d60 	.word	0x01006d60

01003594 <gpio_nrfx_pin_configure>:
{
 1003594:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
 1003598:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 100359a:	f001 051f 	and.w	r5, r1, #31
 100359e:	7b3b      	ldrb	r3, [r7, #12]
{
 10035a0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
 10035a2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
 10035a6:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10035a8:	4628      	mov	r0, r5
 10035aa:	f10d 0103 	add.w	r1, sp, #3
 10035ae:	f001 f807 	bl	10045c0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 10035b2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
 10035b6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
 10035b8:	d10b      	bne.n	10035d2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
 10035ba:	4628      	mov	r0, r5
 10035bc:	f001 f8c2 	bl	1004744 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
 10035c0:	4b3c      	ldr	r3, [pc, #240]	; (10036b4 <gpio_nrfx_pin_configure+0x120>)
 10035c2:	4598      	cmp	r8, r3
 10035c4:	d103      	bne.n	10035ce <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
 10035c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10035ca:	f001 f841 	bl	1004650 <nrfx_gpiote_channel_free>
		return 0;
 10035ce:	2000      	movs	r0, #0
 10035d0:	e00c      	b.n	10035ec <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
 10035d2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 10035d4:	4628      	mov	r0, r5
 10035d6:	4619      	mov	r1, r3
 10035d8:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
 10035da:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
 10035de:	f000 fec5 	bl	100436c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
 10035e2:	4b34      	ldr	r3, [pc, #208]	; (10036b4 <gpio_nrfx_pin_configure+0x120>)
 10035e4:	4298      	cmp	r0, r3
 10035e6:	d004      	beq.n	10035f2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
 10035e8:	f06f 0015 	mvn.w	r0, #21
}
 10035ec:	b004      	add	sp, #16
 10035ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
 10035f2:	4580      	cmp	r8, r0
 10035f4:	d103      	bne.n	10035fe <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
 10035f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 10035fa:	f001 f829 	bl	1004650 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
 10035fe:	03a3      	lsls	r3, r4, #14
 1003600:	d549      	bpl.n	1003696 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1003602:	f240 3306 	movw	r3, #774	; 0x306
 1003606:	4023      	ands	r3, r4
 1003608:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 100360c:	d019      	beq.n	1003642 <gpio_nrfx_pin_configure+0xae>
 100360e:	d80c      	bhi.n	100362a <gpio_nrfx_pin_configure+0x96>
 1003610:	2b06      	cmp	r3, #6
 1003612:	d017      	beq.n	1003644 <gpio_nrfx_pin_configure+0xb0>
 1003614:	d804      	bhi.n	1003620 <gpio_nrfx_pin_configure+0x8c>
 1003616:	b1ab      	cbz	r3, 1003644 <gpio_nrfx_pin_configure+0xb0>
 1003618:	2b02      	cmp	r3, #2
 100361a:	d1e5      	bne.n	10035e8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
 100361c:	2304      	movs	r3, #4
 100361e:	e011      	b.n	1003644 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1003620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 1003624:	d1e0      	bne.n	10035e8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
 1003626:	2301      	movs	r3, #1
 1003628:	e00c      	b.n	1003644 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 100362a:	f240 2202 	movw	r2, #514	; 0x202
 100362e:	4293      	cmp	r3, r2
 1003630:	d026      	beq.n	1003680 <gpio_nrfx_pin_configure+0xec>
 1003632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 1003636:	d025      	beq.n	1003684 <gpio_nrfx_pin_configure+0xf0>
 1003638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 100363c:	d1d4      	bne.n	10035e8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
 100363e:	2302      	movs	r3, #2
 1003640:	e000      	b.n	1003644 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
 1003642:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
 1003644:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
 1003648:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
 100364c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
 1003650:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
 1003652:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
 1003656:	bf4c      	ite	mi
 1003658:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
 100365a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 100365e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
 1003660:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
 1003664:	d510      	bpl.n	1003688 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
 1003666:	2301      	movs	r3, #1
 1003668:	687a      	ldr	r2, [r7, #4]
 100366a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
 100366c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
 100366e:	2200      	movs	r2, #0
 1003670:	4628      	mov	r0, r5
 1003672:	a901      	add	r1, sp, #4
 1003674:	f000 ff2a 	bl	10044cc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
 1003678:	4b0e      	ldr	r3, [pc, #56]	; (10036b4 <gpio_nrfx_pin_configure+0x120>)
 100367a:	4298      	cmp	r0, r3
 100367c:	d0a7      	beq.n	10035ce <gpio_nrfx_pin_configure+0x3a>
 100367e:	e7b3      	b.n	10035e8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
 1003680:	2305      	movs	r3, #5
 1003682:	e7df      	b.n	1003644 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
 1003684:	2303      	movs	r3, #3
 1003686:	e7dd      	b.n	1003644 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
 1003688:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
 100368a:	bf41      	itttt	mi
 100368c:	2301      	movmi	r3, #1
 100368e:	687a      	ldrmi	r2, [r7, #4]
 1003690:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
 1003692:	60d3      	strmi	r3, [r2, #12]
}
 1003694:	e7eb      	b.n	100366e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
 1003696:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 1003698:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
 100369c:	bf4c      	ite	mi
 100369e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
 10036a0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10036a4:	461a      	mov	r2, r3
 10036a6:	4628      	mov	r0, r5
 10036a8:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
 10036aa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
 10036ae:	f000 fe5d 	bl	100436c <nrfx_gpiote_input_configure>
 10036b2:	e7e1      	b.n	1003678 <gpio_nrfx_pin_configure+0xe4>
 10036b4:	0bad0000 	.word	0x0bad0000

010036b8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 10036b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
 10036ba:	794b      	ldrb	r3, [r1, #5]
 10036bc:	2b01      	cmp	r3, #1
 10036be:	d029      	beq.n	1003714 <uarte_nrfx_configure+0x5c>
 10036c0:	2b03      	cmp	r3, #3
 10036c2:	d124      	bne.n	100370e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
 10036c4:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
 10036c6:	798b      	ldrb	r3, [r1, #6]
 10036c8:	2b03      	cmp	r3, #3
 10036ca:	d120      	bne.n	100370e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
 10036cc:	79ce      	ldrb	r6, [r1, #7]
 10036ce:	b10e      	cbz	r6, 10036d4 <uarte_nrfx_configure+0x1c>
 10036d0:	2e01      	cmp	r6, #1
 10036d2:	d11c      	bne.n	100370e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
 10036d4:	790a      	ldrb	r2, [r1, #4]
 10036d6:	2a01      	cmp	r2, #1
 10036d8:	d01e      	beq.n	1003718 <uarte_nrfx_configure+0x60>
 10036da:	2a02      	cmp	r2, #2
 10036dc:	d020      	beq.n	1003720 <uarte_nrfx_configure+0x68>
 10036de:	b9b2      	cbnz	r2, 100370e <uarte_nrfx_configure+0x56>
 10036e0:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
 10036e2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
 10036e4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
 10036e6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
 10036ea:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
 10036ee:	d06e      	beq.n	10037ce <uarte_nrfx_configure+0x116>
 10036f0:	d833      	bhi.n	100375a <uarte_nrfx_configure+0xa2>
 10036f2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 10036f6:	d06d      	beq.n	10037d4 <uarte_nrfx_configure+0x11c>
 10036f8:	d81c      	bhi.n	1003734 <uarte_nrfx_configure+0x7c>
 10036fa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 10036fe:	d06b      	beq.n	10037d8 <uarte_nrfx_configure+0x120>
 1003700:	d810      	bhi.n	1003724 <uarte_nrfx_configure+0x6c>
 1003702:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 1003706:	d06a      	beq.n	10037de <uarte_nrfx_configure+0x126>
 1003708:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 100370c:	d06a      	beq.n	10037e4 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
 100370e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1003712:	e05b      	b.n	10037cc <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
 1003714:	2700      	movs	r7, #0
 1003716:	e7d6      	b.n	10036c6 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
 1003718:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
 100371c:	220e      	movs	r2, #14
 100371e:	e7e0      	b.n	10036e2 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
 1003720:	2400      	movs	r4, #0
 1003722:	e7fb      	b.n	100371c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
 1003724:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 1003728:	d05f      	beq.n	10037ea <uarte_nrfx_configure+0x132>
 100372a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 100372e:	d1ee      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
 1003730:	4b38      	ldr	r3, [pc, #224]	; (1003814 <uarte_nrfx_configure+0x15c>)
 1003732:	e03c      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 1003734:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
 1003738:	d05a      	beq.n	10037f0 <uarte_nrfx_configure+0x138>
 100373a:	d807      	bhi.n	100374c <uarte_nrfx_configure+0x94>
 100373c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 1003740:	d058      	beq.n	10037f4 <uarte_nrfx_configure+0x13c>
 1003742:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 1003746:	d1e2      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
 1003748:	4b33      	ldr	r3, [pc, #204]	; (1003818 <uarte_nrfx_configure+0x160>)
 100374a:	e030      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 100374c:	f647 2512 	movw	r5, #31250	; 0x7a12
 1003750:	42ab      	cmp	r3, r5
 1003752:	d1dc      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
 1003754:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 1003758:	e029      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 100375a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 100375e:	d04b      	beq.n	10037f8 <uarte_nrfx_configure+0x140>
 1003760:	d813      	bhi.n	100378a <uarte_nrfx_configure+0xd2>
 1003762:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 1003766:	d04a      	beq.n	10037fe <uarte_nrfx_configure+0x146>
 1003768:	d809      	bhi.n	100377e <uarte_nrfx_configure+0xc6>
 100376a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
 100376e:	42ab      	cmp	r3, r5
 1003770:	d047      	beq.n	1003802 <uarte_nrfx_configure+0x14a>
 1003772:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 1003776:	d1ca      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
 1003778:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
 100377c:	e017      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 100377e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 1003782:	d1c4      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
 1003784:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
 1003788:	e011      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 100378a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 100378e:	d03b      	beq.n	1003808 <uarte_nrfx_configure+0x150>
 1003790:	d808      	bhi.n	10037a4 <uarte_nrfx_configure+0xec>
 1003792:	4d22      	ldr	r5, [pc, #136]	; (100381c <uarte_nrfx_configure+0x164>)
 1003794:	42ab      	cmp	r3, r5
 1003796:	d03a      	beq.n	100380e <uarte_nrfx_configure+0x156>
 1003798:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
 100379c:	d1b7      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
 100379e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
 10037a2:	e004      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 10037a4:	4d1e      	ldr	r5, [pc, #120]	; (1003820 <uarte_nrfx_configure+0x168>)
 10037a6:	42ab      	cmp	r3, r5
 10037a8:	d1b1      	bne.n	100370e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
 10037aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
 10037ae:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
 10037b0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
 10037b4:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
 10037b6:	433a      	orrs	r2, r7
 10037b8:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
 10037ba:	4334      	orrs	r4, r6
 10037bc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
 10037be:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
 10037c2:	1d2b      	adds	r3, r5, #4
 10037c4:	c903      	ldmia	r1, {r0, r1}
 10037c6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
 10037ca:	2000      	movs	r0, #0
}
 10037cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
 10037ce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
 10037d2:	e7ec      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
 10037d4:	4b13      	ldr	r3, [pc, #76]	; (1003824 <uarte_nrfx_configure+0x16c>)
 10037d6:	e7ea      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
 10037d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
 10037dc:	e7e7      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
 10037de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 10037e2:	e7e4      	b.n	10037ae <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
 10037e4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
 10037e8:	e7e1      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
 10037ea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
 10037ee:	e7de      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
 10037f0:	4b0d      	ldr	r3, [pc, #52]	; (1003828 <uarte_nrfx_configure+0x170>)
 10037f2:	e7dc      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
 10037f4:	4b0d      	ldr	r3, [pc, #52]	; (100382c <uarte_nrfx_configure+0x174>)
 10037f6:	e7da      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
 10037f8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
 10037fc:	e7d7      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
 10037fe:	4b0c      	ldr	r3, [pc, #48]	; (1003830 <uarte_nrfx_configure+0x178>)
 1003800:	e7d5      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
 1003802:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
 1003806:	e7d2      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
 1003808:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 100380c:	e7cf      	b.n	10037ae <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
 100380e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 1003812:	e7cc      	b.n	10037ae <uarte_nrfx_configure+0xf6>
 1003814:	0013b000 	.word	0x0013b000
 1003818:	004ea000 	.word	0x004ea000
 100381c:	0003d090 	.word	0x0003d090
 1003820:	000f4240 	.word	0x000f4240
 1003824:	00275000 	.word	0x00275000
 1003828:	0075c000 	.word	0x0075c000
 100382c:	003af000 	.word	0x003af000
 1003830:	013a9000 	.word	0x013a9000

01003834 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
 1003834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1003838:	4680      	mov	r8, r0
 100383a:	b087      	sub	sp, #28
 100383c:	2200      	movs	r2, #0
 100383e:	2101      	movs	r1, #1
 1003840:	2013      	movs	r0, #19
 1003842:	f7fe fe19 	bl	1002478 <z_arm_irq_priority_set>
 1003846:	2013      	movs	r0, #19
 1003848:	f7fe fdfa 	bl	1002440 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 100384c:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
 100384e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
 1003852:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
 1003856:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 1003858:	466a      	mov	r2, sp
 100385a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
 100385e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
 1003862:	f8d7 900c 	ldr.w	r9, [r7, #12]
 1003866:	4648      	mov	r0, r9
 1003868:	f003 f817 	bl	100689a <pinctrl_lookup_state>
	if (ret < 0) {
 100386c:	1e05      	subs	r5, r0, #0
 100386e:	db25      	blt.n	10038bc <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 1003870:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 1003872:	f8d9 2000 	ldr.w	r2, [r9]
 1003876:	7919      	ldrb	r1, [r3, #4]
 1003878:	6818      	ldr	r0, [r3, #0]
 100387a:	f000 fb03 	bl	1003e84 <pinctrl_configure_pins>
	if (err < 0) {
 100387e:	1e05      	subs	r5, r0, #0
 1003880:	db1c      	blt.n	10038bc <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
 1003882:	4640      	mov	r0, r8
 1003884:	1d31      	adds	r1, r6, #4
 1003886:	f7ff ff17 	bl	10036b8 <uarte_nrfx_configure>
	if (err) {
 100388a:	4605      	mov	r5, r0
 100388c:	b9b0      	cbnz	r0, 10038bc <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
 100388e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
 1003890:	0799      	lsls	r1, r3, #30
 1003892:	d524      	bpl.n	10038de <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
 1003894:	f106 0018 	add.w	r0, r6, #24
 1003898:	f000 fce2 	bl	1004260 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
 100389c:	4b24      	ldr	r3, [pc, #144]	; (1003930 <uarte_0_init+0xfc>)
 100389e:	4298      	cmp	r0, r3
 10038a0:	d010      	beq.n	10038c4 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
 10038a2:	4b24      	ldr	r3, [pc, #144]	; (1003934 <uarte_0_init+0x100>)
 10038a4:	9305      	str	r3, [sp, #20]
 10038a6:	2302      	movs	r3, #2
 10038a8:	9304      	str	r3, [sp, #16]
 10038aa:	462b      	mov	r3, r5
		return -EIO;
 10038ac:	f06f 0504 	mvn.w	r5, #4
 10038b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 10038b4:	4820      	ldr	r0, [pc, #128]	; (1003938 <uarte_0_init+0x104>)
 10038b6:	aa04      	add	r2, sp, #16
 10038b8:	f7fe f9f8 	bl	1001cac <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
 10038bc:	4628      	mov	r0, r5
 10038be:	b007      	add	sp, #28
 10038c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 10038c4:	7e33      	ldrb	r3, [r6, #24]
 10038c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 10038ca:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
 10038ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
 10038d2:	2301      	movs	r3, #1
 10038d4:	7e32      	ldrb	r2, [r6, #24]
 10038d6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
 10038d8:	4a18      	ldr	r2, [pc, #96]	; (100393c <uarte_0_init+0x108>)
 10038da:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 10038de:	2308      	movs	r3, #8
 10038e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
 10038e4:	7a3b      	ldrb	r3, [r7, #8]
 10038e6:	b953      	cbnz	r3, 10038fe <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10038e8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 10038ec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
 10038f0:	6973      	ldr	r3, [r6, #20]
 10038f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
 10038f6:	2301      	movs	r3, #1
 10038f8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10038fc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
 10038fe:	687b      	ldr	r3, [r7, #4]
 1003900:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
 1003902:	bf5c      	itt	pl
 1003904:	f44f 7380 	movpl.w	r3, #256	; 0x100
 1003908:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
 100390c:	687b      	ldr	r3, [r7, #4]
 100390e:	06db      	lsls	r3, r3, #27
 1003910:	bf44      	itt	mi
 1003912:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
 1003916:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 100391a:	6933      	ldr	r3, [r6, #16]
 100391c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 1003920:	2300      	movs	r3, #0
 1003922:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1003926:	2301      	movs	r3, #1
 1003928:	60a3      	str	r3, [r4, #8]
 100392a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
 100392c:	e7c6      	b.n	10038bc <uarte_0_init+0x88>
 100392e:	bf00      	nop
 1003930:	0bad0000 	.word	0x0bad0000
 1003934:	01007835 	.word	0x01007835
 1003938:	01006f18 	.word	0x01006f18
 100393c:	4100f000 	.word	0x4100f000

01003940 <uarte_nrfx_poll_out>:
{
 1003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1003942:	4604      	mov	r4, r0
 1003944:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
 1003946:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
 1003948:	f003 f87b 	bl	1006a42 <k_is_in_isr>
 100394c:	b9b0      	cbnz	r0, 100397c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
 100394e:	4b2e      	ldr	r3, [pc, #184]	; (1003a08 <uarte_nrfx_poll_out+0xc8>)
 1003950:	781b      	ldrb	r3, [r3, #0]
 1003952:	b19b      	cbz	r3, 100397c <uarte_nrfx_poll_out+0x3c>
{
 1003954:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
 1003956:	6860      	ldr	r0, [r4, #4]
 1003958:	f002 ff52 	bl	1006800 <is_tx_ready.isra.0>
 100395c:	bb00      	cbnz	r0, 10039a0 <uarte_nrfx_poll_out+0x60>
 100395e:	2001      	movs	r0, #1
 1003960:	f002 ffaf 	bl	10068c2 <nrfx_busy_wait>
 1003964:	3e01      	subs	r6, #1
 1003966:	d1f6      	bne.n	1003956 <uarte_nrfx_poll_out+0x16>
 1003968:	2100      	movs	r1, #0
 100396a:	2021      	movs	r0, #33	; 0x21
 100396c:	f001 fecc 	bl	1005708 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
 1003970:	e7f0      	b.n	1003954 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
 1003972:	f386 8811 	msr	BASEPRI, r6
 1003976:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 100397a:	e7f5      	b.n	1003968 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
 100397c:	f04f 0320 	mov.w	r3, #32
 1003980:	f3ef 8611 	mrs	r6, BASEPRI
 1003984:	f383 8812 	msr	BASEPRI_MAX, r3
 1003988:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 100398c:	6860      	ldr	r0, [r4, #4]
 100398e:	4631      	mov	r1, r6
 1003990:	f002 ff36 	bl	1006800 <is_tx_ready.isra.0>
 1003994:	b990      	cbnz	r0, 10039bc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
 1003996:	f386 8811 	msr	BASEPRI, r6
 100399a:	f3bf 8f6f 	isb	sy
}
 100399e:	e7ed      	b.n	100397c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
 10039a0:	f04f 0320 	mov.w	r3, #32
 10039a4:	f3ef 8611 	mrs	r6, BASEPRI
 10039a8:	f383 8812 	msr	BASEPRI_MAX, r3
 10039ac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
 10039b0:	6860      	ldr	r0, [r4, #4]
 10039b2:	4631      	mov	r1, r6
 10039b4:	f002 ff24 	bl	1006800 <is_tx_ready.isra.0>
 10039b8:	2800      	cmp	r0, #0
 10039ba:	d0da      	beq.n	1003972 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
 10039bc:	693b      	ldr	r3, [r7, #16]
 10039be:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
 10039c0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
 10039c2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
 10039c4:	6813      	ldr	r3, [r2, #0]
 10039c6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
 10039ca:	2001      	movs	r0, #1
 10039cc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10039d0:	2000      	movs	r0, #0
 10039d2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 10039d6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 10039da:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 10039de:	6852      	ldr	r2, [r2, #4]
 10039e0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 10039e4:	06d2      	lsls	r2, r2, #27
 10039e6:	d508      	bpl.n	10039fa <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
 10039e8:	2008      	movs	r0, #8
	return config->uarte_regs;
 10039ea:	6862      	ldr	r2, [r4, #4]
 10039ec:	6812      	ldr	r2, [r2, #0]
 10039ee:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
 10039f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 10039f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10039fa:	2201      	movs	r2, #1
 10039fc:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 10039fe:	f381 8811 	msr	BASEPRI, r1
 1003a02:	f3bf 8f6f 	isb	sy
}
 1003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1003a08:	21000d17 	.word	0x21000d17

01003a0c <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1003a0c:	2301      	movs	r3, #1
 1003a0e:	4083      	lsls	r3, r0
{
 1003a10:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
 1003a12:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1003a14:	4a0b      	ldr	r2, [pc, #44]	; (1003a44 <compare_int_lock+0x38>)
 1003a16:	e8d2 1fef 	ldaex	r1, [r2]
 1003a1a:	ea01 0504 	and.w	r5, r1, r4
 1003a1e:	e8c2 5fe6 	stlex	r6, r5, [r2]
 1003a22:	2e00      	cmp	r6, #0
 1003a24:	d1f7      	bne.n	1003a16 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1003a26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 1003a2a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
 1003a2c:	4806      	ldr	r0, [pc, #24]	; (1003a48 <compare_int_lock+0x3c>)
 1003a2e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
 1003a32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
 1003a36:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
 1003a3a:	420b      	tst	r3, r1
}
 1003a3c:	bf14      	ite	ne
 1003a3e:	2001      	movne	r0, #1
 1003a40:	2000      	moveq	r0, #0
 1003a42:	bd70      	pop	{r4, r5, r6, pc}
 1003a44:	210007f4 	.word	0x210007f4
 1003a48:	41016000 	.word	0x41016000

01003a4c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
 1003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1003a4e:	491b      	ldr	r1, [pc, #108]	; (1003abc <sys_clock_timeout_handler+0x70>)
{
 1003a50:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
 1003a52:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1003a56:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
 1003a58:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
 1003a5c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
 1003a60:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
 1003a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 1003a66:	d30f      	bcc.n	1003a88 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
 1003a68:	f001 ffb4 	bl	10059d4 <sys_clock_announce>
    return p_reg->CC[ch];
 1003a6c:	00a3      	lsls	r3, r4, #2
 1003a6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1003a72:	f503 33b0 	add.w	r3, r3, #90112	; 0x16000
 1003a76:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
 1003a7a:	4295      	cmp	r5, r2
 1003a7c:	d11d      	bne.n	1003aba <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
 1003a7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 1003a82:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
 1003a86:	e012      	b.n	1003aae <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
 1003a88:	4b0d      	ldr	r3, [pc, #52]	; (1003ac0 <sys_clock_timeout_handler+0x74>)
 1003a8a:	681b      	ldr	r3, [r3, #0]
 1003a8c:	0a1a      	lsrs	r2, r3, #8
 1003a8e:	061b      	lsls	r3, r3, #24
 1003a90:	195e      	adds	r6, r3, r5
 1003a92:	4b0c      	ldr	r3, [pc, #48]	; (1003ac4 <sys_clock_timeout_handler+0x78>)
 1003a94:	f142 0700 	adc.w	r7, r2, #0
 1003a98:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
 1003a9c:	f001 ff9a 	bl	10059d4 <sys_clock_announce>
    return p_reg->CC[ch];
 1003aa0:	4a09      	ldr	r2, [pc, #36]	; (1003ac8 <sys_clock_timeout_handler+0x7c>)
 1003aa2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 1003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
 1003aaa:	429d      	cmp	r5, r3
 1003aac:	d105      	bne.n	1003aba <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1003aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
 1003ab2:	4a05      	ldr	r2, [pc, #20]	; (1003ac8 <sys_clock_timeout_handler+0x7c>)
 1003ab4:	40a3      	lsls	r3, r4
 1003ab6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
 1003aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 1003abc:	210005f8 	.word	0x210005f8
 1003ac0:	210007f8 	.word	0x210007f8
 1003ac4:	21000600 	.word	0x21000600
 1003ac8:	41016000 	.word	0x41016000

01003acc <compare_int_unlock>:
	if (key) {
 1003acc:	b1d9      	cbz	r1, 1003b06 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
 1003ace:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1003ad0:	4a0d      	ldr	r2, [pc, #52]	; (1003b08 <compare_int_unlock+0x3c>)
 1003ad2:	4083      	lsls	r3, r0
 1003ad4:	e8d2 cfef 	ldaex	ip, [r2]
 1003ad8:	ea4c 0c03 	orr.w	ip, ip, r3
 1003adc:	e8c2 cfe1 	stlex	r1, ip, [r2]
 1003ae0:	2900      	cmp	r1, #0
 1003ae2:	d1f7      	bne.n	1003ad4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1003ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
 1003ae8:	4a08      	ldr	r2, [pc, #32]	; (1003b0c <compare_int_unlock+0x40>)
 1003aea:	4083      	lsls	r3, r0
 1003aec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 1003af0:	4b07      	ldr	r3, [pc, #28]	; (1003b10 <compare_int_unlock+0x44>)
 1003af2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
 1003af6:	40c3      	lsrs	r3, r0
 1003af8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1003afa:	bf42      	ittt	mi
 1003afc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
 1003b00:	4b04      	ldrmi	r3, [pc, #16]	; (1003b14 <compare_int_unlock+0x48>)
 1003b02:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
 1003b06:	4770      	bx	lr
 1003b08:	210007f4 	.word	0x210007f4
 1003b0c:	41016000 	.word	0x41016000
 1003b10:	210007f0 	.word	0x210007f0
 1003b14:	e000e100 	.word	0xe000e100

01003b18 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
 1003b18:	4b0d      	ldr	r3, [pc, #52]	; (1003b50 <z_nrf_rtc_timer_read+0x38>)
 1003b1a:	6818      	ldr	r0, [r3, #0]
 1003b1c:	0a01      	lsrs	r1, r0, #8
 1003b1e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
 1003b20:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
 1003b24:	4b0b      	ldr	r3, [pc, #44]	; (1003b54 <z_nrf_rtc_timer_read+0x3c>)
 1003b26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
 1003b2a:	1818      	adds	r0, r3, r0
 1003b2c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
 1003b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 1003b34:	d20a      	bcs.n	1003b4c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
 1003b36:	4b08      	ldr	r3, [pc, #32]	; (1003b58 <z_nrf_rtc_timer_read+0x40>)
 1003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 1003b3c:	4290      	cmp	r0, r2
 1003b3e:	eb71 0303 	sbcs.w	r3, r1, r3
 1003b42:	d203      	bcs.n	1003b4c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
 1003b44:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
 1003b48:	f141 0100 	adc.w	r1, r1, #0
}
 1003b4c:	4770      	bx	lr
 1003b4e:	bf00      	nop
 1003b50:	210007f8 	.word	0x210007f8
 1003b54:	41016000 	.word	0x41016000
 1003b58:	21000600 	.word	0x21000600

01003b5c <compare_set>:
{
 1003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1003b60:	b085      	sub	sp, #20
 1003b62:	4614      	mov	r4, r2
 1003b64:	461d      	mov	r5, r3
 1003b66:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
 1003b68:	f7ff ff50 	bl	1003a0c <compare_int_lock>
 1003b6c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
 1003b6e:	f7ff ffd3 	bl	1003b18 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
 1003b72:	42a0      	cmp	r0, r4
 1003b74:	eb71 0305 	sbcs.w	r3, r1, r5
 1003b78:	f080 8086 	bcs.w	1003c88 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
 1003b7c:	4b49      	ldr	r3, [pc, #292]	; (1003ca4 <compare_set+0x148>)
 1003b7e:	1a20      	subs	r0, r4, r0
 1003b80:	eb65 0101 	sbc.w	r1, r5, r1
 1003b84:	4298      	cmp	r0, r3
 1003b86:	f171 0100 	sbcs.w	r1, r1, #0
 1003b8a:	f080 8088 	bcs.w	1003c9e <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
 1003b8e:	4b46      	ldr	r3, [pc, #280]	; (1003ca8 <compare_set+0x14c>)
 1003b90:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 1003b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 1003b98:	429d      	cmp	r5, r3
 1003b9a:	bf08      	it	eq
 1003b9c:	4294      	cmpeq	r4, r2
 1003b9e:	d05e      	beq.n	1003c5e <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1003ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
 1003ba4:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
 1003ba8:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
 1003baa:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
 1003bae:	f06f 0101 	mvn.w	r1, #1
 1003bb2:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
 1003bb6:	f107 0850 	add.w	r8, r7, #80	; 0x50
 1003bba:	f109 4982 	add.w	r9, r9, #1090519040	; 0x41000000
 1003bbe:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
 1003bc2:	40bb      	lsls	r3, r7
 1003bc4:	f509 39b0 	add.w	r9, r9, #90112	; 0x16000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1003bc8:	fa1f f888 	uxth.w	r8, r8
 1003bcc:	f108 4882 	add.w	r8, r8, #1090519040	; 0x41000000
 1003bd0:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
 1003bd2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1003bd6:	4b35      	ldr	r3, [pc, #212]	; (1003cac <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1003bd8:	f508 38b0 	add.w	r8, r8, #90112	; 0x16000
     return p_reg->COUNTER;
 1003bdc:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
 1003be0:	eba0 000a 	sub.w	r0, r0, sl
 1003be4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1003be8:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
 1003bec:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
 1003bee:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
 1003bf2:	d107      	bne.n	1003c04 <compare_set+0xa8>
 1003bf4:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
 1003bf6:	2013      	movs	r0, #19
 1003bf8:	f003 f84b 	bl	1006c92 <z_impl_k_busy_wait>
 1003bfc:	f06f 0101 	mvn.w	r1, #1
 1003c00:	4b2a      	ldr	r3, [pc, #168]	; (1003cac <compare_set+0x150>)
 1003c02:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
 1003c04:	eba1 000a 	sub.w	r0, r1, sl
 1003c08:	4430      	add	r0, r6
 1003c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
 1003c0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1003c12:	f04f 0000 	mov.w	r0, #0
 1003c16:	f8c8 0000 	str.w	r0, [r8]
 1003c1a:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
 1003c1e:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
 1003c20:	bf88      	it	hi
 1003c22:	eb0a 060b 	addhi.w	r6, sl, fp
 1003c26:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
 1003c2a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
 1003c2e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
 1003c32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
 1003c36:	bf88      	it	hi
 1003c38:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
 1003c3c:	4582      	cmp	sl, r0
 1003c3e:	d006      	beq.n	1003c4e <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
 1003c40:	1a08      	subs	r0, r1, r0
 1003c42:	4430      	add	r0, r6
 1003c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
 1003c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1003c4c:	d81a      	bhi.n	1003c84 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
 1003c4e:	1ab6      	subs	r6, r6, r2
 1003c50:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
 1003c54:	1936      	adds	r6, r6, r4
 1003c56:	f145 0300 	adc.w	r3, r5, #0
 1003c5a:	4634      	mov	r4, r6
 1003c5c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
 1003c5e:	4912      	ldr	r1, [pc, #72]	; (1003ca8 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
 1003c60:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
 1003c62:	eb01 1207 	add.w	r2, r1, r7, lsl #4
 1003c66:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
 1003c6a:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
 1003c6c:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
 1003c6e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
 1003c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 1003c72:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
 1003c74:	4638      	mov	r0, r7
 1003c76:	9901      	ldr	r1, [sp, #4]
 1003c78:	f7ff ff28 	bl	1003acc <compare_int_unlock>
}
 1003c7c:	4620      	mov	r0, r4
 1003c7e:	b005      	add	sp, #20
 1003c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1003c84:	4630      	mov	r0, r6
 1003c86:	e7a9      	b.n	1003bdc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
 1003c88:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 1003c8a:	4a09      	ldr	r2, [pc, #36]	; (1003cb0 <compare_set+0x154>)
 1003c8c:	40bb      	lsls	r3, r7
 1003c8e:	e8d2 0fef 	ldaex	r0, [r2]
 1003c92:	4318      	orrs	r0, r3
 1003c94:	e8c2 0fe1 	stlex	r1, r0, [r2]
 1003c98:	2900      	cmp	r1, #0
 1003c9a:	d0e0      	beq.n	1003c5e <compare_set+0x102>
 1003c9c:	e7f7      	b.n	1003c8e <compare_set+0x132>
			return -EINVAL;
 1003c9e:	f06f 0415 	mvn.w	r4, #21
 1003ca2:	e7e7      	b.n	1003c74 <compare_set+0x118>
 1003ca4:	01000001 	.word	0x01000001
 1003ca8:	210005e8 	.word	0x210005e8
 1003cac:	41016000 	.word	0x41016000
 1003cb0:	210007f0 	.word	0x210007f0

01003cb4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
 1003cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
 1003cb6:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
 1003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 1003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 1003cc0:	4d16      	ldr	r5, [pc, #88]	; (1003d1c <sys_clock_driver_init+0x68>)
 1003cc2:	4b17      	ldr	r3, [pc, #92]	; (1003d20 <sys_clock_driver_init+0x6c>)
 1003cc4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
 1003cc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
 1003ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 1003cd0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1003cd2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 1003cd6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
 1003cda:	4b12      	ldr	r3, [pc, #72]	; (1003d24 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
 1003cdc:	2101      	movs	r1, #1
 1003cde:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
 1003ce2:	2016      	movs	r0, #22
 1003ce4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 1003ce8:	4622      	mov	r2, r4
 1003cea:	f7fe fbc5 	bl	1002478 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
 1003cee:	2016      	movs	r0, #22
 1003cf0:	f7fe fba6 	bl	1002440 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
 1003cf4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
 1003cf6:	4a0c      	ldr	r2, [pc, #48]	; (1003d28 <sys_clock_driver_init+0x74>)
 1003cf8:	60ab      	str	r3, [r5, #8]
 1003cfa:	602b      	str	r3, [r5, #0]
 1003cfc:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
 1003cfe:	4b0b      	ldr	r3, [pc, #44]	; (1003d2c <sys_clock_driver_init+0x78>)
 1003d00:	4a0b      	ldr	r2, [pc, #44]	; (1003d30 <sys_clock_driver_init+0x7c>)
 1003d02:	9300      	str	r3, [sp, #0]
 1003d04:	4620      	mov	r0, r4
 1003d06:	2300      	movs	r3, #0
 1003d08:	9401      	str	r4, [sp, #4]
 1003d0a:	f7ff ff27 	bl	1003b5c <compare_set>

	z_nrf_clock_control_lf_on(mode);
 1003d0e:	4630      	mov	r0, r6
 1003d10:	f7ff fab8 	bl	1003284 <z_nrf_clock_control_lf_on>

	return 0;
}
 1003d14:	4620      	mov	r0, r4
 1003d16:	b002      	add	sp, #8
 1003d18:	bd70      	pop	{r4, r5, r6, pc}
 1003d1a:	bf00      	nop
 1003d1c:	41016000 	.word	0x41016000
 1003d20:	210005e8 	.word	0x210005e8
 1003d24:	e000e100 	.word	0xe000e100
 1003d28:	210007f4 	.word	0x210007f4
 1003d2c:	01003a4d 	.word	0x01003a4d
 1003d30:	007fffff 	.word	0x007fffff

01003d34 <rtc_nrf_isr>:
{
 1003d34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
 1003d38:	4b31      	ldr	r3, [pc, #196]	; (1003e00 <rtc_nrf_isr+0xcc>)
 1003d3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
 1003d3e:	0792      	lsls	r2, r2, #30
 1003d40:	d50b      	bpl.n	1003d5a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1003d42:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 1003d46:	b142      	cbz	r2, 1003d5a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1003d48:	2200      	movs	r2, #0
 1003d4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
 1003d4e:	4a2d      	ldr	r2, [pc, #180]	; (1003e04 <rtc_nrf_isr+0xd0>)
 1003d50:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 1003d54:	6813      	ldr	r3, [r2, #0]
 1003d56:	3301      	adds	r3, #1
 1003d58:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
 1003d5a:	f04f 0320 	mov.w	r3, #32
 1003d5e:	f3ef 8211 	mrs	r2, BASEPRI
 1003d62:	f383 8812 	msr	BASEPRI_MAX, r3
 1003d66:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
 1003d6a:	4c25      	ldr	r4, [pc, #148]	; (1003e00 <rtc_nrf_isr+0xcc>)
 1003d6c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
 1003d70:	03db      	lsls	r3, r3, #15
 1003d72:	d525      	bpl.n	1003dc0 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 1003d74:	4b24      	ldr	r3, [pc, #144]	; (1003e08 <rtc_nrf_isr+0xd4>)
 1003d76:	e8d3 1fef 	ldaex	r1, [r3]
 1003d7a:	f021 0001 	bic.w	r0, r1, #1
 1003d7e:	e8c3 0fe5 	stlex	r5, r0, [r3]
 1003d82:	2d00      	cmp	r5, #0
 1003d84:	d1f7      	bne.n	1003d76 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
 1003d86:	b911      	cbnz	r1, 1003d8e <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1003d88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 1003d8c:	b1c3      	cbz	r3, 1003dc0 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
 1003d8e:	2500      	movs	r5, #0
 1003d90:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 1003d94:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
 1003d98:	f382 8811 	msr	BASEPRI, r2
 1003d9c:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
 1003da0:	f7ff feba 	bl	1003b18 <z_nrf_rtc_timer_read>
	__asm__ volatile(
 1003da4:	f04f 0320 	mov.w	r3, #32
 1003da8:	f3ef 8211 	mrs	r2, BASEPRI
 1003dac:	f383 8812 	msr	BASEPRI_MAX, r3
 1003db0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
 1003db4:	4b15      	ldr	r3, [pc, #84]	; (1003e0c <rtc_nrf_isr+0xd8>)
 1003db6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
 1003dba:	42b0      	cmp	r0, r6
 1003dbc:	41b9      	sbcs	r1, r7
 1003dbe:	d206      	bcs.n	1003dce <rtc_nrf_isr+0x9a>
	__asm__ volatile(
 1003dc0:	f382 8811 	msr	BASEPRI, r2
 1003dc4:	f3bf 8f6f 	isb	sy
}
 1003dc8:	b003      	add	sp, #12
 1003dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1003dce:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
 1003dd2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1003dd6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
 1003dda:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
 1003ddc:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
 1003de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 1003de4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
 1003de8:	f382 8811 	msr	BASEPRI, r2
 1003dec:	f3bf 8f6f 	isb	sy
		if (handler) {
 1003df0:	2900      	cmp	r1, #0
 1003df2:	d0e9      	beq.n	1003dc8 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
 1003df4:	9000      	str	r0, [sp, #0]
 1003df6:	4632      	mov	r2, r6
 1003df8:	463b      	mov	r3, r7
 1003dfa:	4628      	mov	r0, r5
 1003dfc:	4788      	blx	r1
}
 1003dfe:	e7e3      	b.n	1003dc8 <rtc_nrf_isr+0x94>
 1003e00:	41016000 	.word	0x41016000
 1003e04:	210007f8 	.word	0x210007f8
 1003e08:	210007f0 	.word	0x210007f0
 1003e0c:	210005e8 	.word	0x210005e8

01003e10 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1003e10:	1c43      	adds	r3, r0, #1
{
 1003e12:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1003e14:	d020      	beq.n	1003e58 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1003e16:	2801      	cmp	r0, #1
 1003e18:	dd20      	ble.n	1003e5c <sys_clock_set_timeout+0x4c>
 1003e1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 1003e1e:	da1f      	bge.n	1003e60 <sys_clock_set_timeout+0x50>
 1003e20:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
 1003e22:	f7ff fe79 	bl	1003b18 <z_nrf_rtc_timer_read>
 1003e26:	4b0f      	ldr	r3, [pc, #60]	; (1003e64 <sys_clock_set_timeout+0x54>)
 1003e28:	e9d3 1300 	ldrd	r1, r3, [r3]
 1003e2c:	1a42      	subs	r2, r0, r1
		ticks = 0;
 1003e2e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 1003e32:	bf28      	it	cs
 1003e34:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
 1003e36:	480c      	ldr	r0, [pc, #48]	; (1003e68 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
 1003e38:	3201      	adds	r2, #1
 1003e3a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
 1003e3c:	4282      	cmp	r2, r0
 1003e3e:	bf28      	it	cs
 1003e40:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
 1003e42:	2000      	movs	r0, #0
 1003e44:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
 1003e46:	4909      	ldr	r1, [pc, #36]	; (1003e6c <sys_clock_set_timeout+0x5c>)
 1003e48:	9001      	str	r0, [sp, #4]
 1003e4a:	9100      	str	r1, [sp, #0]
 1003e4c:	f143 0300 	adc.w	r3, r3, #0
 1003e50:	f7ff fe84 	bl	1003b5c <compare_set>
}
 1003e54:	b002      	add	sp, #8
 1003e56:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 1003e58:	4803      	ldr	r0, [pc, #12]	; (1003e68 <sys_clock_set_timeout+0x58>)
 1003e5a:	e7e1      	b.n	1003e20 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 1003e5c:	2400      	movs	r4, #0
 1003e5e:	e7e0      	b.n	1003e22 <sys_clock_set_timeout+0x12>
 1003e60:	4c01      	ldr	r4, [pc, #4]	; (1003e68 <sys_clock_set_timeout+0x58>)
 1003e62:	e7de      	b.n	1003e22 <sys_clock_set_timeout+0x12>
 1003e64:	210005f8 	.word	0x210005f8
 1003e68:	007fffff 	.word	0x007fffff
 1003e6c:	01003a4d 	.word	0x01003a4d

01003e70 <sys_clock_elapsed>:
{
 1003e70:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
 1003e72:	f7ff fe51 	bl	1003b18 <z_nrf_rtc_timer_read>
 1003e76:	4b02      	ldr	r3, [pc, #8]	; (1003e80 <sys_clock_elapsed+0x10>)
 1003e78:	681b      	ldr	r3, [r3, #0]
}
 1003e7a:	1ac0      	subs	r0, r0, r3
 1003e7c:	bd08      	pop	{r3, pc}
 1003e7e:	bf00      	nop
 1003e80:	210005f8 	.word	0x210005f8

01003e84 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 1003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
 1003e88:	2701      	movs	r7, #1
        case 1: return NRF_P1;
 1003e8a:	4d2f      	ldr	r5, [pc, #188]	; (1003f48 <pinctrl_configure_pins+0xc4>)
 1003e8c:	4e2f      	ldr	r6, [pc, #188]	; (1003f4c <pinctrl_configure_pins+0xc8>)
 1003e8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 1003e92:	4281      	cmp	r1, r0
 1003e94:	d102      	bne.n	1003e9c <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
 1003e96:	2000      	movs	r0, #0
}
 1003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
 1003e9c:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
 1003e9e:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
 1003ea2:	f3c4 2a43 	ubfx	sl, r4, #9, #4
			pin = 0xFFFFFFFFU;
 1003ea6:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
 1003ea8:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
 1003eac:	bf08      	it	eq
 1003eae:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
 1003eb2:	2c03      	cmp	r4, #3
 1003eb4:	d844      	bhi.n	1003f40 <pinctrl_configure_pins+0xbc>
 1003eb6:	e8df f004 	tbb	[pc, r4]
 1003eba:	1302      	.short	0x1302
 1003ebc:	403d      	.short	0x403d
			NRF_PSEL_UART(reg, TXD) = pin;
 1003ebe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
 1003ec2:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
 1003ec6:	f1be 0f01 	cmp.w	lr, #1
 1003eca:	bf14      	ite	ne
 1003ecc:	46ac      	movne	ip, r5
 1003ece:	46b4      	moveq	ip, r6
    *p_pin = pin_number & 0x1F;
 1003ed0:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
 1003ed4:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
 1003ed8:	f8cc 4008 	str.w	r4, [ip, #8]
 1003edc:	2401      	movs	r4, #1
 1003ede:	e002      	b.n	1003ee6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_UART(reg, RXD) = pin;
 1003ee0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			dir = NRF_GPIO_PIN_DIR_INPUT;
 1003ee4:	2400      	movs	r4, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
 1003ee6:	f850 9b04 	ldr.w	r9, [r0], #4
    *p_pin = pin_number & 0x1F;
 1003eea:	f003 081f 	and.w	r8, r3, #31
 1003eee:	f409 5c00 	and.w	ip, r9, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
 1003ef2:	f1bc 0f00 	cmp.w	ip, #0
    return pin_number >> 5;
 1003ef6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 1003efa:	bf0e      	itee	eq
 1003efc:	46a6      	moveq	lr, r4
 1003efe:	f04f 0e01 	movne.w	lr, #1
 1003f02:	2400      	movne	r4, #0
        case 0: return NRF_P0;
 1003f04:	2b01      	cmp	r3, #1
 1003f06:	bf0c      	ite	eq
 1003f08:	46b4      	moveq	ip, r6
 1003f0a:	46ac      	movne	ip, r5
 1003f0c:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1003f10:	f8dc 3200 	ldr.w	r3, [ip, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
 1003f14:	f3c9 19c1 	ubfx	r9, r9, #7, #2
 1003f18:	f003 48e0 	and.w	r8, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
 1003f1c:	ea4f 230a 	mov.w	r3, sl, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
 1003f20:	ea43 0389 	orr.w	r3, r3, r9, lsl #2
 1003f24:	4323      	orrs	r3, r4
 1003f26:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 1003f2a:	ea43 0308 	orr.w	r3, r3, r8
    reg->PIN_CNF[pin_number] = cnf;
 1003f2e:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 1003f32:	e7ae      	b.n	1003e92 <pinctrl_configure_pins+0xe>
			NRF_PSEL_UART(reg, RTS) = pin;
 1003f34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
 1003f38:	e7c3      	b.n	1003ec2 <pinctrl_configure_pins+0x3e>
			NRF_PSEL_UART(reg, CTS) = pin;
 1003f3a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
 1003f3e:	e7d1      	b.n	1003ee4 <pinctrl_configure_pins+0x60>
		switch (NRF_GET_FUN(pins[i])) {
 1003f40:	f06f 0085 	mvn.w	r0, #133	; 0x85
 1003f44:	e7a8      	b.n	1003e98 <pinctrl_configure_pins+0x14>
 1003f46:	bf00      	nop
 1003f48:	418c0500 	.word	0x418c0500
 1003f4c:	418c0800 	.word	0x418c0800

01003f50 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
 1003f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
 1003f52:	f7fd fdcb 	bl	1001aec <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
 1003f56:	4b07      	ldr	r3, [pc, #28]	; (1003f74 <k_sys_fatal_error_handler+0x24>)
 1003f58:	9305      	str	r3, [sp, #20]
 1003f5a:	2302      	movs	r3, #2
 1003f5c:	9304      	str	r3, [sp, #16]
 1003f5e:	4806      	ldr	r0, [pc, #24]	; (1003f78 <k_sys_fatal_error_handler+0x28>)
 1003f60:	2300      	movs	r3, #0
 1003f62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1003f66:	aa04      	add	r2, sp, #16
 1003f68:	f7fd fea0 	bl	1001cac <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
 1003f6c:	2000      	movs	r0, #0
 1003f6e:	f7fe fe57 	bl	1002c20 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
 1003f72:	bf00      	nop
 1003f74:	01007872 	.word	0x01007872
 1003f78:	01006ed8 	.word	0x01006ed8

01003f7c <SystemInit>:
void SystemInit(void)
{
    /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
     until one ADDR is not initialized. */
    uint32_t index = 0;
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003f7c:	2200      	movs	r2, #0
 1003f7e:	00d3      	lsls	r3, r2, #3
 1003f80:	f103 73ff 	add.w	r3, r3, #33423360	; 0x1fe0000
 1003f84:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 1003f88:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
 1003f8c:	3101      	adds	r1, #1
 1003f8e:	d007      	beq.n	1003fa0 <SystemInit+0x24>
        #if defined ( __ICCARM__ )
            /* IAR will complain about the order of volatile pointer accesses. */
            #pragma diag_suppress=Pa082
        #endif
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003f90:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003f94:	3201      	adds	r2, #1
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003f96:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003f9a:	2a20      	cmp	r2, #32
        *((volatile uint32_t *)NRF_FICR_NS->TRIMCNF[index].ADDR) = NRF_FICR_NS->TRIMCNF[index].DATA;
 1003f9c:	600b      	str	r3, [r1, #0]
    for (index = 0; index < 32ul && NRF_FICR_NS->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
 1003f9e:	d1ee      	bne.n	1003f7e <SystemInit+0x2>
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
                #endif
            #elif defined(NRF_NETWORK)
                uint32_t var1 = *(uint32_t *)0x01FF0130ul;
                uint32_t var2 = *(uint32_t *)0x01FF0134ul;
 1003fa0:	4b14      	ldr	r3, [pc, #80]	; (1003ff4 <SystemInit+0x78>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1003fa2:	e9d3 324c 	ldrd	r3, r2, [r3, #304]	; 0x130
 1003fa6:	2b07      	cmp	r3, #7
 1003fa8:	d107      	bne.n	1003fba <SystemInit+0x3e>
                {
                    switch(var2)
 1003faa:	3a02      	subs	r2, #2
 1003fac:	2a03      	cmp	r2, #3
 1003fae:	4b12      	ldr	r3, [pc, #72]	; (1003ff8 <SystemInit+0x7c>)
 1003fb0:	d90c      	bls.n	1003fcc <SystemInit+0x50>

    /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf53_errata_55())
    {
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
 1003fb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1003fb6:	07d1      	lsls	r1, r2, #31
 1003fb8:	d416      	bmi.n	1003fe8 <SystemInit+0x6c>
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_NS->APPROTECT.DISABLE = NRF_UICR_NS->APPROTECT;
 1003fba:	4b10      	ldr	r3, [pc, #64]	; (1003ffc <SystemInit+0x80>)
 1003fbc:	681a      	ldr	r2, [r3, #0]
 1003fbe:	4b10      	ldr	r3, [pc, #64]	; (1004000 <SystemInit+0x84>)
 1003fc0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    SystemCoreClock = __SYSTEM_CLOCK;
 1003fc4:	4b0f      	ldr	r3, [pc, #60]	; (1004004 <SystemInit+0x88>)
 1003fc6:	4a10      	ldr	r2, [pc, #64]	; (1004008 <SystemInit+0x8c>)
 1003fc8:	601a      	str	r2, [r3, #0]

    /* Handle fw-branch APPROTECT setup. */
    nrf53_handle_approtect();

    SystemCoreClockUpdate();
}
 1003fca:	4770      	bx	lr
    if (nrf53_errata_49())
 1003fcc:	490f      	ldr	r1, [pc, #60]	; (100400c <SystemInit+0x90>)
 1003fce:	5c8a      	ldrb	r2, [r1, r2]
 1003fd0:	2a00      	cmp	r2, #0
 1003fd2:	d0ee      	beq.n	1003fb2 <SystemInit+0x36>
        if (NRF_RESET_NS->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
 1003fd4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 1003fd8:	07d2      	lsls	r2, r2, #31
 1003fda:	d5ea      	bpl.n	1003fb2 <SystemInit+0x36>
            NRF_POWER_NS->EVENTS_SLEEPENTER = 0;
 1003fdc:	2200      	movs	r2, #0
 1003fde:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_NS->EVENTS_SLEEPEXIT = 0;
 1003fe2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
 1003fe6:	e7e4      	b.n	1003fb2 <SystemInit+0x36>
            NRF_RESET_NS->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
 1003fe8:	f06f 0201 	mvn.w	r2, #1
 1003fec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 1003ff0:	e7e3      	b.n	1003fba <SystemInit+0x3e>
 1003ff2:	bf00      	nop
 1003ff4:	01ff0000 	.word	0x01ff0000
 1003ff8:	41005000 	.word	0x41005000
 1003ffc:	01ff8000 	.word	0x01ff8000
 1004000:	41006000 	.word	0x41006000
 1004004:	21000030 	.word	0x21000030
 1004008:	03d09000 	.word	0x03d09000
 100400c:	0100788f 	.word	0x0100788f

01004010 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
 1004010:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
 1004012:	2501      	movs	r5, #1
        prev_mask = *p_mask;
 1004014:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
 1004016:	fab2 f382 	clz	r3, r2
 100401a:	f1c3 031f 	rsb	r3, r3, #31
 100401e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
 1004020:	fa05 f403 	lsl.w	r4, r5, r3
 1004024:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 1004028:	e8d0 6fef 	ldaex	r6, [r0]
 100402c:	4296      	cmp	r6, r2
 100402e:	d104      	bne.n	100403a <nrfx_flag32_alloc+0x2a>
 1004030:	e8c0 4fec 	stlex	ip, r4, [r0]
 1004034:	f1bc 0f00 	cmp.w	ip, #0
 1004038:	d1f6      	bne.n	1004028 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 100403a:	d1eb      	bne.n	1004014 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
 100403c:	4801      	ldr	r0, [pc, #4]	; (1004044 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
 100403e:	700b      	strb	r3, [r1, #0]
}
 1004040:	bd70      	pop	{r4, r5, r6, pc}
 1004042:	bf00      	nop
 1004044:	0bad0000 	.word	0x0bad0000

01004048 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
 1004048:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
 100404a:	6803      	ldr	r3, [r0, #0]
 100404c:	40cb      	lsrs	r3, r1
 100404e:	07db      	lsls	r3, r3, #31
 1004050:	d410      	bmi.n	1004074 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
 1004052:	2301      	movs	r3, #1
 1004054:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
 1004056:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
 1004058:	ea43 0102 	orr.w	r1, r3, r2
 100405c:	e8d0 4fef 	ldaex	r4, [r0]
 1004060:	4294      	cmp	r4, r2
 1004062:	d104      	bne.n	100406e <nrfx_flag32_free+0x26>
 1004064:	e8c0 1fec 	stlex	ip, r1, [r0]
 1004068:	f1bc 0f00 	cmp.w	ip, #0
 100406c:	d1f6      	bne.n	100405c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
 100406e:	d1f2      	bne.n	1004056 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
 1004070:	4801      	ldr	r0, [pc, #4]	; (1004078 <nrfx_flag32_free+0x30>)
}
 1004072:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1004074:	4801      	ldr	r0, [pc, #4]	; (100407c <nrfx_flag32_free+0x34>)
 1004076:	e7fc      	b.n	1004072 <nrfx_flag32_free+0x2a>
 1004078:	0bad0000 	.word	0x0bad0000
 100407c:	0bad0004 	.word	0x0bad0004

01004080 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
 1004080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
 1004082:	4604      	mov	r4, r0
 1004084:	b118      	cbz	r0, 100408e <clock_stop+0xe>
 1004086:	2801      	cmp	r0, #1
 1004088:	d01e      	beq.n	10040c8 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
 100408a:	b003      	add	sp, #12
 100408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
 100408e:	2202      	movs	r2, #2
 1004090:	4b27      	ldr	r3, [pc, #156]	; (1004130 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 1004092:	4607      	mov	r7, r0
 1004094:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004098:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
 100409c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10040a0:	2201      	movs	r2, #1
 10040a2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
 10040a4:	2301      	movs	r3, #1
 10040a6:	f242 7510 	movw	r5, #10000	; 0x2710
 10040aa:	4e21      	ldr	r6, [pc, #132]	; (1004130 <clock_stop+0xb0>)
 10040ac:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
 10040b0:	b1b4      	cbz	r4, 10040e0 <clock_stop+0x60>
 10040b2:	2c01      	cmp	r4, #1
 10040b4:	d1e9      	bne.n	100408a <clock_stop+0xa>
            if (p_clk_src != NULL)
 10040b6:	b387      	cbz	r7, 100411a <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
 10040b8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 10040bc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
 10040c0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 10040c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 10040c6:	e013      	b.n	10040f0 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10040c8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
 10040ca:	4b19      	ldr	r3, [pc, #100]	; (1004130 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
 10040cc:	f10d 0707 	add.w	r7, sp, #7
 10040d0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10040d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 10040d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10040dc:	6058      	str	r0, [r3, #4]
 10040de:	e7e1      	b.n	10040a4 <clock_stop+0x24>
            if (p_clk_src != NULL)
 10040e0:	b18f      	cbz	r7, 1004106 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10040e2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 10040e6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
 10040ea:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 10040ec:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 10040f0:	03da      	lsls	r2, r3, #15
 10040f2:	d5ca      	bpl.n	100408a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
 10040f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 10040f8:	2801      	cmp	r0, #1
 10040fa:	d1c6      	bne.n	100408a <clock_stop+0xa>
 10040fc:	f002 fbe1 	bl	10068c2 <nrfx_busy_wait>
 1004100:	3d01      	subs	r5, #1
 1004102:	d1d5      	bne.n	10040b0 <clock_stop+0x30>
 1004104:	e7c1      	b.n	100408a <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1004106:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
 100410a:	03d9      	lsls	r1, r3, #15
 100410c:	d5bd      	bpl.n	100408a <clock_stop+0xa>
 100410e:	2001      	movs	r0, #1
 1004110:	f002 fbd7 	bl	10068c2 <nrfx_busy_wait>
 1004114:	3d01      	subs	r5, #1
 1004116:	d1f6      	bne.n	1004106 <clock_stop+0x86>
 1004118:	e7b7      	b.n	100408a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
 100411a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
 100411e:	03db      	lsls	r3, r3, #15
 1004120:	d5b3      	bpl.n	100408a <clock_stop+0xa>
 1004122:	2001      	movs	r0, #1
 1004124:	f002 fbcd 	bl	10068c2 <nrfx_busy_wait>
 1004128:	3d01      	subs	r5, #1
 100412a:	d1f6      	bne.n	100411a <clock_stop+0x9a>
 100412c:	e7ad      	b.n	100408a <clock_stop+0xa>
 100412e:	bf00      	nop
 1004130:	41005000 	.word	0x41005000

01004134 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
 1004134:	4b04      	ldr	r3, [pc, #16]	; (1004148 <nrfx_clock_init+0x14>)
 1004136:	791a      	ldrb	r2, [r3, #4]
 1004138:	b922      	cbnz	r2, 1004144 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
 100413a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
 100413c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
 100413e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
 1004140:	4802      	ldr	r0, [pc, #8]	; (100414c <nrfx_clock_init+0x18>)
 1004142:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
 1004144:	4802      	ldr	r0, [pc, #8]	; (1004150 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
 1004146:	4770      	bx	lr
 1004148:	210007fc 	.word	0x210007fc
 100414c:	0bad0000 	.word	0x0bad0000
 1004150:	0bad000c 	.word	0x0bad000c

01004154 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
 1004154:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
 1004156:	2005      	movs	r0, #5
 1004158:	f7fe f980 	bl	100245c <arch_irq_is_enabled>
 100415c:	b910      	cbnz	r0, 1004164 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
 100415e:	2005      	movs	r0, #5
 1004160:	f7fe f96e 	bl	1002440 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
 1004164:	2201      	movs	r2, #1
 1004166:	4b03      	ldr	r3, [pc, #12]	; (1004174 <nrfx_clock_enable+0x20>)
 1004168:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
 100416c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
 1004170:	bd08      	pop	{r3, pc}
 1004172:	bf00      	nop
 1004174:	41005000 	.word	0x41005000

01004178 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
 1004178:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
 100417a:	b110      	cbz	r0, 1004182 <nrfx_clock_start+0xa>
 100417c:	2801      	cmp	r0, #1
 100417e:	d02e      	beq.n	10041de <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
 1004180:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 1004182:	4a1c      	ldr	r2, [pc, #112]	; (10041f4 <nrfx_clock_start+0x7c>)
 1004184:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 1004188:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
 100418c:	03c9      	lsls	r1, r1, #15
 100418e:	d40e      	bmi.n	10041ae <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
 1004190:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
 1004194:	07db      	lsls	r3, r3, #31
 1004196:	d513      	bpl.n	10041c0 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
 1004198:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 100419c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 10041a0:	3b01      	subs	r3, #1
 10041a2:	2b01      	cmp	r3, #1
 10041a4:	d809      	bhi.n	10041ba <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
 10041a6:	2302      	movs	r3, #2
 10041a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
 10041ac:	e7e8      	b.n	1004180 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 10041ae:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
 10041b2:	2b02      	cmp	r3, #2
 10041b4:	d005      	beq.n	10041c2 <nrfx_clock_start+0x4a>
 10041b6:	2b01      	cmp	r3, #1
 10041b8:	d002      	beq.n	10041c0 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 10041ba:	2000      	movs	r0, #0
 10041bc:	f7ff ff60 	bl	1004080 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
 10041c0:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
 10041c2:	4a0c      	ldr	r2, [pc, #48]	; (10041f4 <nrfx_clock_start+0x7c>)
 10041c4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10041c8:	2300      	movs	r3, #0
 10041ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 10041ce:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
 10041d2:	2302      	movs	r3, #2
 10041d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10041d8:	2301      	movs	r3, #1
 10041da:	6093      	str	r3, [r2, #8]
}
 10041dc:	e7d0      	b.n	1004180 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10041de:	2200      	movs	r2, #0
 10041e0:	4b04      	ldr	r3, [pc, #16]	; (10041f4 <nrfx_clock_start+0x7c>)
 10041e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 10041e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
 10041ea:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10041ee:	6018      	str	r0, [r3, #0]
}
 10041f0:	e7c6      	b.n	1004180 <nrfx_clock_start+0x8>
 10041f2:	bf00      	nop
 10041f4:	41005000 	.word	0x41005000

010041f8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
 10041f8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 10041fa:	4b17      	ldr	r3, [pc, #92]	; (1004258 <nrfx_power_clock_irq_handler+0x60>)
 10041fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
 1004200:	b152      	cbz	r2, 1004218 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004202:	2000      	movs	r0, #0
 1004204:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 1004208:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
 100420c:	2201      	movs	r2, #1
 100420e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
 1004212:	4b12      	ldr	r3, [pc, #72]	; (100425c <nrfx_power_clock_irq_handler+0x64>)
 1004214:	681b      	ldr	r3, [r3, #0]
 1004216:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
 1004218:	4b0f      	ldr	r3, [pc, #60]	; (1004258 <nrfx_power_clock_irq_handler+0x60>)
 100421a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
 100421e:	b18a      	cbz	r2, 1004244 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004220:	2200      	movs	r2, #0
 1004222:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 1004226:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
 100422a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
 100422e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
 1004232:	f002 0203 	and.w	r2, r2, #3
 1004236:	2a01      	cmp	r2, #1
 1004238:	f04f 0102 	mov.w	r1, #2
 100423c:	d103      	bne.n	1004246 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
 100423e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1004242:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
 1004244:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
 1004246:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 100424a:	4b04      	ldr	r3, [pc, #16]	; (100425c <nrfx_power_clock_irq_handler+0x64>)
 100424c:	2001      	movs	r0, #1
}
 100424e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
 1004252:	681b      	ldr	r3, [r3, #0]
 1004254:	4718      	bx	r3
 1004256:	bf00      	nop
 1004258:	41005000 	.word	0x41005000
 100425c:	210007fc 	.word	0x210007fc

01004260 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
 1004260:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
 1004262:	4801      	ldr	r0, [pc, #4]	; (1004268 <nrfx_dppi_channel_alloc+0x8>)
 1004264:	f7ff bed4 	b.w	1004010 <nrfx_flag32_alloc>
 1004268:	21000034 	.word	0x21000034

0100426c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
 100426c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
 100426e:	f003 021f 	and.w	r2, r3, #31
 1004272:	6002      	str	r2, [r0, #0]
}
 1004274:	4a03      	ldr	r2, [pc, #12]	; (1004284 <nrf_gpio_pin_port_decode+0x18>)
 1004276:	4804      	ldr	r0, [pc, #16]	; (1004288 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
 1004278:	095b      	lsrs	r3, r3, #5
}
 100427a:	2b01      	cmp	r3, #1
 100427c:	bf18      	it	ne
 100427e:	4610      	movne	r0, r2
 1004280:	4770      	bx	lr
 1004282:	bf00      	nop
 1004284:	418c0500 	.word	0x418c0500
 1004288:	418c0800 	.word	0x418c0800

0100428c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
 100428c:	4b03      	ldr	r3, [pc, #12]	; (100429c <pin_in_use_by_te+0x10>)
 100428e:	3008      	adds	r0, #8
 1004290:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 1004294:	f3c0 1040 	ubfx	r0, r0, #5, #1
 1004298:	4770      	bx	lr
 100429a:	bf00      	nop
 100429c:	21000038 	.word	0x21000038

010042a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
 10042a0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042a2:	4c0d      	ldr	r4, [pc, #52]	; (10042d8 <call_handler+0x38>)
 10042a4:	f100 0308 	add.w	r3, r0, #8
 10042a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
 10042ac:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042ae:	05da      	lsls	r2, r3, #23
{
 10042b0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042b2:	d507      	bpl.n	10042c4 <call_handler+0x24>
 10042b4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
 10042b8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 10042bc:	6852      	ldr	r2, [r2, #4]
 10042be:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 10042c2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
 10042c4:	68a3      	ldr	r3, [r4, #8]
 10042c6:	b12b      	cbz	r3, 10042d4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 10042c8:	4631      	mov	r1, r6
 10042ca:	4628      	mov	r0, r5
 10042cc:	68e2      	ldr	r2, [r4, #12]
    }
}
 10042ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
 10042d2:	4718      	bx	r3
}
 10042d4:	bd70      	pop	{r4, r5, r6, pc}
 10042d6:	bf00      	nop
 10042d8:	21000038 	.word	0x21000038

010042dc <release_handler>:
{
 10042dc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
 10042de:	4a12      	ldr	r2, [pc, #72]	; (1004328 <release_handler+0x4c>)
 10042e0:	3008      	adds	r0, #8
 10042e2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 10042e6:	05d9      	lsls	r1, r3, #23
 10042e8:	d51b      	bpl.n	1004322 <release_handler+0x46>
 10042ea:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
 10042ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 10042f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 10042f6:	2000      	movs	r0, #0
 10042f8:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
 10042fc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 1004300:	f413 7f80 	tst.w	r3, #256	; 0x100
 1004304:	d003      	beq.n	100430e <release_handler+0x32>
 1004306:	f3c3 2343 	ubfx	r3, r3, #9, #4
 100430a:	4299      	cmp	r1, r3
 100430c:	d009      	beq.n	1004322 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
 100430e:	3001      	adds	r0, #1
 1004310:	2830      	cmp	r0, #48	; 0x30
 1004312:	d1f3      	bne.n	10042fc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
 1004314:	2300      	movs	r3, #0
 1004316:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 100431a:	4804      	ldr	r0, [pc, #16]	; (100432c <release_handler+0x50>)
}
 100431c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
 100431e:	f7ff be93 	b.w	1004048 <nrfx_flag32_free>
}
 1004322:	bc10      	pop	{r4}
 1004324:	4770      	bx	lr
 1004326:	bf00      	nop
 1004328:	21000038 	.word	0x21000038
 100432c:	210000ac 	.word	0x210000ac

01004330 <pin_handler_trigger_uninit>:
{
 1004330:	b538      	push	{r3, r4, r5, lr}
 1004332:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 1004334:	f7ff ffaa 	bl	100428c <pin_in_use_by_te>
 1004338:	4c0b      	ldr	r4, [pc, #44]	; (1004368 <pin_handler_trigger_uninit+0x38>)
 100433a:	f102 0508 	add.w	r5, r2, #8
 100433e:	b160      	cbz	r0, 100435a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
 1004340:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1004342:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
 1004346:	0b5b      	lsrs	r3, r3, #13
 1004348:	009b      	lsls	r3, r3, #2
 100434a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100434e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004352:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
 1004356:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
 100435a:	4610      	mov	r0, r2
 100435c:	f7ff ffbe 	bl	10042dc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
 1004360:	2300      	movs	r3, #0
 1004362:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
 1004366:	bd38      	pop	{r3, r4, r5, pc}
 1004368:	21000038 	.word	0x21000038

0100436c <nrfx_gpiote_input_configure>:
{
 100436c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1004370:	4604      	mov	r4, r0
 1004372:	4690      	mov	r8, r2
 1004374:	461d      	mov	r5, r3
    if (p_input_config)
 1004376:	b301      	cbz	r1, 10043ba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1004378:	4e50      	ldr	r6, [pc, #320]	; (10044bc <nrfx_gpiote_input_configure+0x150>)
 100437a:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
 100437e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 1004382:	079b      	lsls	r3, r3, #30
 1004384:	d502      	bpl.n	100438c <nrfx_gpiote_input_configure+0x20>
 1004386:	f7ff ff81 	bl	100428c <pin_in_use_by_te>
 100438a:	bb28      	cbnz	r0, 10043d8 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 100438c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 100438e:	4620      	mov	r0, r4
 1004390:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
 1004394:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
 1004398:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
 100439c:	f10d 020f 	add.w	r2, sp, #15
 10043a0:	460b      	mov	r3, r1
 10043a2:	f10d 010e 	add.w	r1, sp, #14
 10043a6:	f002 fa90 	bl	10068ca <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
 10043aa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 10043ae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
 10043b2:	f043 0301 	orr.w	r3, r3, #1
 10043b6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
 10043ba:	f1b8 0f00 	cmp.w	r8, #0
 10043be:	d02d      	beq.n	100441c <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 10043c0:	4e3e      	ldr	r6, [pc, #248]	; (10044bc <nrfx_gpiote_input_configure+0x150>)
 10043c2:	f104 0708 	add.w	r7, r4, #8
 10043c6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
 10043ca:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
 10043ce:	0799      	lsls	r1, r3, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
 10043d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
        if (pin_is_output(pin))
 10043d4:	d502      	bpl.n	10043dc <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
 10043d6:	b1ca      	cbz	r2, 100440c <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
 10043d8:	4839      	ldr	r0, [pc, #228]	; (10044c0 <nrfx_gpiote_input_configure+0x154>)
 10043da:	e021      	b.n	1004420 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
 10043dc:	f023 0320 	bic.w	r3, r3, #32
 10043e0:	04db      	lsls	r3, r3, #19
 10043e2:	0cdb      	lsrs	r3, r3, #19
 10043e4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
            if (use_evt)
 10043e8:	b182      	cbz	r2, 100440c <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
 10043ea:	2803      	cmp	r0, #3
 10043ec:	d8f4      	bhi.n	10043d8 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
 10043ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 10043f2:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
 10043f6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 10043fa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
 10043fe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 1004402:	b980      	cbnz	r0, 1004426 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
 1004404:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
 1004408:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
 100440c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
 1004410:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
 1004414:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 1004418:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
 100441c:	bb1d      	cbnz	r5, 1004466 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
 100441e:	4829      	ldr	r0, [pc, #164]	; (10044c4 <nrfx_gpiote_input_configure+0x158>)
}
 1004420:	b004      	add	sp, #16
 1004422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 1004426:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 100442a:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
 100442e:	f021 0103 	bic.w	r1, r1, #3
 1004432:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
 1004436:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
 100443a:	f043 0320 	orr.w	r3, r3, #32
 100443e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
 1004442:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 1004446:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100444a:	0221      	lsls	r1, r4, #8
 100444c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
 1004450:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
 1004454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 1004458:	ea41 010e 	orr.w	r1, r1, lr
 100445c:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
 1004460:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
 1004464:	e7d2      	b.n	100440c <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
 1004466:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
 1004468:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
 100446c:	f7ff ff36 	bl	10042dc <release_handler>
    if (!handler)
 1004470:	2e00      	cmp	r6, #0
 1004472:	d0d4      	beq.n	100441e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 1004474:	4d11      	ldr	r5, [pc, #68]	; (10044bc <nrfx_gpiote_input_configure+0x150>)
 1004476:	e9d5 2300 	ldrd	r2, r3, [r5]
 100447a:	4296      	cmp	r6, r2
 100447c:	d101      	bne.n	1004482 <nrfx_gpiote_input_configure+0x116>
 100447e:	429f      	cmp	r7, r3
 1004480:	d019      	beq.n	10044b6 <nrfx_gpiote_input_configure+0x14a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
 1004482:	4811      	ldr	r0, [pc, #68]	; (10044c8 <nrfx_gpiote_input_configure+0x15c>)
 1004484:	f10d 010f 	add.w	r1, sp, #15
 1004488:	f7ff fdc2 	bl	1004010 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
 100448c:	4b0d      	ldr	r3, [pc, #52]	; (10044c4 <nrfx_gpiote_input_configure+0x158>)
 100448e:	4298      	cmp	r0, r3
 1004490:	d1c6      	bne.n	1004420 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
 1004492:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
 1004496:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 100449a:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
 100449e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 10044a0:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
 10044a4:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
 10044a8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 10044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 10044b0:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
 10044b4:	e7b3      	b.n	100441e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
 10044b6:	2200      	movs	r2, #0
 10044b8:	e7ed      	b.n	1004496 <nrfx_gpiote_input_configure+0x12a>
 10044ba:	bf00      	nop
 10044bc:	21000038 	.word	0x21000038
 10044c0:	0bad0004 	.word	0x0bad0004
 10044c4:	0bad0000 	.word	0x0bad0000
 10044c8:	210000ac 	.word	0x210000ac

010044cc <nrfx_gpiote_output_configure>:
{
 10044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 10044ce:	4604      	mov	r4, r0
 10044d0:	4616      	mov	r6, r2
 10044d2:	b085      	sub	sp, #20
    if (p_config)
 10044d4:	b319      	cbz	r1, 100451e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 10044d6:	4d34      	ldr	r5, [pc, #208]	; (10045a8 <nrfx_gpiote_output_configure+0xdc>)
 10044d8:	f100 0708 	add.w	r7, r0, #8
 10044dc:	f835 2017 	ldrh.w	r2, [r5, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
 10044e0:	0793      	lsls	r3, r2, #30
 10044e2:	d403      	bmi.n	10044ec <nrfx_gpiote_output_configure+0x20>
 10044e4:	f7ff fed2 	bl	100428c <pin_in_use_by_te>
 10044e8:	2800      	cmp	r0, #0
 10044ea:	d15a      	bne.n	10045a2 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
 10044ec:	f012 0f1c 	tst.w	r2, #28
 10044f0:	d002      	beq.n	10044f8 <nrfx_gpiote_output_configure+0x2c>
 10044f2:	784b      	ldrb	r3, [r1, #1]
 10044f4:	2b01      	cmp	r3, #1
 10044f6:	d054      	beq.n	10045a2 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
 10044f8:	2301      	movs	r3, #1
 10044fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
 10044fe:	2300      	movs	r3, #0
 1004500:	1c4a      	adds	r2, r1, #1
 1004502:	e9cd 1300 	strd	r1, r3, [sp]
 1004506:	4620      	mov	r0, r4
 1004508:	1c8b      	adds	r3, r1, #2
 100450a:	f10d 010f 	add.w	r1, sp, #15
 100450e:	f002 f9dc 	bl	10068ca <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
 1004512:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 1004516:	f043 0303 	orr.w	r3, r3, #3
 100451a:	f825 3017 	strh.w	r3, [r5, r7, lsl #1]
    if (p_task_config)
 100451e:	b916      	cbnz	r6, 1004526 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
 1004520:	4822      	ldr	r0, [pc, #136]	; (10045ac <nrfx_gpiote_output_configure+0xe0>)
}
 1004522:	b005      	add	sp, #20
 1004524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1004526:	4a20      	ldr	r2, [pc, #128]	; (10045a8 <nrfx_gpiote_output_configure+0xdc>)
 1004528:	f104 0708 	add.w	r7, r4, #8
 100452c:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
        if (pin_is_input(pin))
 1004530:	0783      	lsls	r3, r0, #30
 1004532:	d536      	bpl.n	10045a2 <nrfx_gpiote_output_configure+0xd6>
    p_reg->CONFIG[idx] = 0;
 1004534:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
 1004536:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
 100453a:	f020 0020 	bic.w	r0, r0, #32
 100453e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 1004542:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
 1004546:	04c0      	lsls	r0, r0, #19
 1004548:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
 100454c:	0cc0      	lsrs	r0, r0, #19
 100454e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 1004552:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
 1004556:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
 100455a:	7875      	ldrb	r5, [r6, #1]
 100455c:	2d00      	cmp	r5, #0
 100455e:	d0df      	beq.n	1004520 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
 1004560:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
 1004564:	78b6      	ldrb	r6, [r6, #2]
 1004566:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
 100456a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 100456e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1004572:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
 1004576:	0223      	lsls	r3, r4, #8
 1004578:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 100457c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 100457e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
 1004582:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 1004586:	0534      	lsls	r4, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1004588:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
 100458a:	f404 1480 	and.w	r4, r4, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
 100458e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
 1004592:	4323      	orrs	r3, r4
 1004594:	f040 0020 	orr.w	r0, r0, #32
 1004598:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
 100459c:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
 10045a0:	e7be      	b.n	1004520 <nrfx_gpiote_output_configure+0x54>
{
 10045a2:	4803      	ldr	r0, [pc, #12]	; (10045b0 <nrfx_gpiote_output_configure+0xe4>)
 10045a4:	e7bd      	b.n	1004522 <nrfx_gpiote_output_configure+0x56>
 10045a6:	bf00      	nop
 10045a8:	21000038 	.word	0x21000038
 10045ac:	0bad0000 	.word	0x0bad0000
 10045b0:	0bad0004 	.word	0x0bad0004

010045b4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
 10045b4:	4b01      	ldr	r3, [pc, #4]	; (10045bc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
 10045b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
 10045ba:	4770      	bx	lr
 10045bc:	21000038 	.word	0x21000038

010045c0 <nrfx_gpiote_channel_get>:
{
 10045c0:	b508      	push	{r3, lr}
 10045c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
 10045c4:	f7ff fe62 	bl	100428c <pin_in_use_by_te>
 10045c8:	b138      	cbz	r0, 10045da <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 10045ca:	4b05      	ldr	r3, [pc, #20]	; (10045e0 <nrfx_gpiote_channel_get+0x20>)
 10045cc:	3208      	adds	r2, #8
 10045ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
 10045d2:	4804      	ldr	r0, [pc, #16]	; (10045e4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 10045d4:	0b5b      	lsrs	r3, r3, #13
 10045d6:	700b      	strb	r3, [r1, #0]
}
 10045d8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
 10045da:	4803      	ldr	r0, [pc, #12]	; (10045e8 <nrfx_gpiote_channel_get+0x28>)
 10045dc:	e7fc      	b.n	10045d8 <nrfx_gpiote_channel_get+0x18>
 10045de:	bf00      	nop
 10045e0:	21000038 	.word	0x21000038
 10045e4:	0bad0000 	.word	0x0bad0000
 10045e8:	0bad0004 	.word	0x0bad0004

010045ec <nrfx_gpiote_init>:
{
 10045ec:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 10045ee:	4c0f      	ldr	r4, [pc, #60]	; (100462c <nrfx_gpiote_init+0x40>)
 10045f0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 10045f4:	b9bd      	cbnz	r5, 1004626 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
 10045f6:	2260      	movs	r2, #96	; 0x60
 10045f8:	4629      	mov	r1, r5
 10045fa:	f104 0010 	add.w	r0, r4, #16
 10045fe:	f001 ffe7 	bl	10065d0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
 1004602:	200a      	movs	r0, #10
 1004604:	f7fd ff1c 	bl	1002440 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1004608:	4b09      	ldr	r3, [pc, #36]	; (1004630 <nrfx_gpiote_init+0x44>)
    return err_code;
 100460a:	480a      	ldr	r0, [pc, #40]	; (1004634 <nrfx_gpiote_init+0x48>)
 100460c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
 1004610:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
 1004614:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 1004618:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100461c:	2301      	movs	r3, #1
 100461e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
 1004622:	6763      	str	r3, [r4, #116]	; 0x74
}
 1004624:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
 1004626:	4804      	ldr	r0, [pc, #16]	; (1004638 <nrfx_gpiote_init+0x4c>)
 1004628:	e7fc      	b.n	1004624 <nrfx_gpiote_init+0x38>
 100462a:	bf00      	nop
 100462c:	21000038 	.word	0x21000038
 1004630:	4100a000 	.word	0x4100a000
 1004634:	0bad0000 	.word	0x0bad0000
 1004638:	0bad0005 	.word	0x0bad0005

0100463c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
 100463c:	4b03      	ldr	r3, [pc, #12]	; (100464c <nrfx_gpiote_is_init+0x10>)
 100463e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
 1004642:	3800      	subs	r0, #0
 1004644:	bf18      	it	ne
 1004646:	2001      	movne	r0, #1
 1004648:	4770      	bx	lr
 100464a:	bf00      	nop
 100464c:	21000038 	.word	0x21000038

01004650 <nrfx_gpiote_channel_free>:
{
 1004650:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
 1004652:	4801      	ldr	r0, [pc, #4]	; (1004658 <nrfx_gpiote_channel_free+0x8>)
 1004654:	f7ff bcf8 	b.w	1004048 <nrfx_flag32_free>
 1004658:	210000a8 	.word	0x210000a8

0100465c <nrfx_gpiote_channel_alloc>:
{
 100465c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
 100465e:	4801      	ldr	r0, [pc, #4]	; (1004664 <nrfx_gpiote_channel_alloc+0x8>)
 1004660:	f7ff bcd6 	b.w	1004010 <nrfx_flag32_alloc>
 1004664:	210000a8 	.word	0x210000a8

01004668 <nrfx_gpiote_trigger_enable>:
{
 1004668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 100466a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100466c:	f7ff fe0e 	bl	100428c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 1004670:	4b1e      	ldr	r3, [pc, #120]	; (10046ec <nrfx_gpiote_trigger_enable+0x84>)
 1004672:	f104 0208 	add.w	r2, r4, #8
 1004676:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 100467a:	b1e8      	cbz	r0, 10046b8 <nrfx_gpiote_trigger_enable+0x50>
 100467c:	f013 0502 	ands.w	r5, r3, #2
 1004680:	d11a      	bne.n	10046b8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 1004682:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
 1004684:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
 1004686:	f102 4082 	add.w	r0, r2, #1090519040	; 0x41000000
 100468a:	f500 4021 	add.w	r0, r0, #41216	; 0xa100
 100468e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 1004692:	6005      	str	r5, [r0, #0]
 1004694:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
 1004698:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
 100469a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
 100469e:	f040 0001 	orr.w	r0, r0, #1
 10046a2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
 10046a6:	b129      	cbz	r1, 10046b4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
 10046a8:	2201      	movs	r2, #1
 10046aa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
 10046ae:	4a10      	ldr	r2, [pc, #64]	; (10046f0 <nrfx_gpiote_trigger_enable+0x88>)
 10046b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
 10046b4:	b003      	add	sp, #12
 10046b6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 10046b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
 10046bc:	2b04      	cmp	r3, #4
 10046be:	d011      	beq.n	10046e4 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
 10046c0:	2b05      	cmp	r3, #5
 10046c2:	d011      	beq.n	10046e8 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10046c4:	a801      	add	r0, sp, #4
 10046c6:	9401      	str	r4, [sp, #4]
 10046c8:	f7ff fdd0 	bl	100426c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 10046cc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
 10046ce:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
 10046d0:	40d9      	lsrs	r1, r3
 10046d2:	f001 0101 	and.w	r1, r1, #1
 10046d6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 10046d8:	4620      	mov	r0, r4
}
 10046da:	b003      	add	sp, #12
 10046dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
 10046e0:	f002 b93c 	b.w	100695c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
 10046e4:	2103      	movs	r1, #3
 10046e6:	e7f7      	b.n	10046d8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
 10046e8:	2102      	movs	r1, #2
 10046ea:	e7f5      	b.n	10046d8 <nrfx_gpiote_trigger_enable+0x70>
 10046ec:	21000038 	.word	0x21000038
 10046f0:	4100a000 	.word	0x4100a000

010046f4 <nrfx_gpiote_trigger_disable>:
{
 10046f4:	b508      	push	{r3, lr}
 10046f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 10046f8:	f7ff fdc8 	bl	100428c <pin_in_use_by_te>
 10046fc:	b1c0      	cbz	r0, 1004730 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
 10046fe:	4b0f      	ldr	r3, [pc, #60]	; (100473c <nrfx_gpiote_trigger_disable+0x48>)
 1004700:	f102 0108 	add.w	r1, r2, #8
 1004704:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
 1004708:	0799      	lsls	r1, r3, #30
 100470a:	d411      	bmi.n	1004730 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 100470c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
 100470e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
 1004710:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
 1004712:	490b      	ldr	r1, [pc, #44]	; (1004740 <nrfx_gpiote_trigger_disable+0x4c>)
 1004714:	009b      	lsls	r3, r3, #2
 1004716:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 100471a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
 100471e:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 1004722:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 1004726:	f022 0203 	bic.w	r2, r2, #3
 100472a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
 100472e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1004730:	2100      	movs	r1, #0
}
 1004732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 1004736:	4610      	mov	r0, r2
 1004738:	f002 b910 	b.w	100695c <nrf_gpio_cfg_sense_set>
 100473c:	21000038 	.word	0x21000038
 1004740:	4100a000 	.word	0x4100a000

01004744 <nrfx_gpiote_pin_uninit>:
{
 1004744:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
 1004746:	4b10      	ldr	r3, [pc, #64]	; (1004788 <nrfx_gpiote_pin_uninit+0x44>)
 1004748:	f100 0208 	add.w	r2, r0, #8
 100474c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
 1004750:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
 1004752:	07db      	lsls	r3, r3, #31
 1004754:	d516      	bpl.n	1004784 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
 1004756:	f7ff ffcd 	bl	10046f4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
 100475a:	4620      	mov	r0, r4
 100475c:	f7ff fde8 	bl	1004330 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1004760:	a801      	add	r0, sp, #4
 1004762:	9401      	str	r4, [sp, #4]
 1004764:	f7ff fd82 	bl	100426c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
 1004768:	9b01      	ldr	r3, [sp, #4]
 100476a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 100476e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 1004772:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
 1004776:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
 100477a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
 100477e:	4803      	ldr	r0, [pc, #12]	; (100478c <nrfx_gpiote_pin_uninit+0x48>)
}
 1004780:	b002      	add	sp, #8
 1004782:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
 1004784:	4802      	ldr	r0, [pc, #8]	; (1004790 <nrfx_gpiote_pin_uninit+0x4c>)
 1004786:	e7fb      	b.n	1004780 <nrfx_gpiote_pin_uninit+0x3c>
 1004788:	21000038 	.word	0x21000038
 100478c:	0bad0000 	.word	0x0bad0000
 1004790:	0bad0004 	.word	0x0bad0004

01004794 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
 1004794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
 1004798:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
 100479a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 100479c:	4634      	mov	r4, r6
{
 100479e:	4b65      	ldr	r3, [pc, #404]	; (1004934 <nrfx_gpiote_irq_handler+0x1a0>)
    return p_reg->INTENSET & mask;
 10047a0:	4865      	ldr	r0, [pc, #404]	; (1004938 <nrfx_gpiote_irq_handler+0x1a4>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10047a2:	4966      	ldr	r1, [pc, #408]	; (100493c <nrfx_gpiote_irq_handler+0x1a8>)
{
 10047a4:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10047a6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
 10047a8:	b135      	cbz	r5, 10047b8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
 10047aa:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
 10047ae:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10047b0:	bf1e      	ittt	ne
 10047b2:	601c      	strne	r4, [r3, #0]
 10047b4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
 10047b6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10047b8:	3304      	adds	r3, #4
 10047ba:	428b      	cmp	r3, r1
        }
        mask <<= 1;
 10047bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
 10047c0:	d1f1      	bne.n	10047a6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10047c2:	4b5d      	ldr	r3, [pc, #372]	; (1004938 <nrfx_gpiote_irq_handler+0x1a4>)
 10047c4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
 10047c8:	2b00      	cmp	r3, #0
 10047ca:	f000 8096 	beq.w	10048fa <nrfx_gpiote_irq_handler+0x166>
        *p_masks = gpio_regs[i]->LATCH;
 10047ce:	f8df 9170 	ldr.w	r9, [pc, #368]	; 1004940 <nrfx_gpiote_irq_handler+0x1ac>
 10047d2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 1004944 <nrfx_gpiote_irq_handler+0x1b0>
 10047d6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 10047da:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 10047dc:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
 10047e0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 10047e4:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 10047e6:	f8c8 3020 	str.w	r3, [r8, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 10047ea:	f04f 0a00 	mov.w	sl, #0
            while (latch[i])
 10047ee:	f10d 0b10 	add.w	fp, sp, #16
 10047f2:	ea4f 134a 	mov.w	r3, sl, lsl #5
 10047f6:	9300      	str	r3, [sp, #0]
 10047f8:	e048      	b.n	100488c <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
 10047fa:	fa94 f4a4 	rbit	r4, r4
 10047fe:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
 1004802:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 1004804:	4a50      	ldr	r2, [pc, #320]	; (1004948 <nrfx_gpiote_irq_handler+0x1b4>)
                pin += 32 * i;
 1004806:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 1004808:	f104 0308 	add.w	r3, r4, #8
 100480c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
 1004810:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
 1004812:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
 1004814:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
 1004818:	fa03 f202 	lsl.w	r2, r3, r2
 100481c:	f81b 3000 	ldrb.w	r3, [fp, r0]
 1004820:	9403      	str	r4, [sp, #12]
 1004822:	ea23 0302 	bic.w	r3, r3, r2
 1004826:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100482a:	a803      	add	r0, sp, #12
 100482c:	f7ff fd1e 	bl	100426c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 1004830:	9b03      	ldr	r3, [sp, #12]
 1004832:	08b9      	lsrs	r1, r7, #2
 1004834:	3380      	adds	r3, #128	; 0x80
 1004836:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 100483a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
 100483e:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
 1004840:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
 1004842:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
 1004846:	d52b      	bpl.n	10048a0 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
 1004848:	4620      	mov	r0, r4
 100484a:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100484c:	b2dd      	uxtb	r5, r3
 100484e:	f7ff fd27 	bl	10042a0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 1004852:	a803      	add	r0, sp, #12
 1004854:	9403      	str	r4, [sp, #12]
 1004856:	f7ff fd09 	bl	100426c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
 100485a:	9b03      	ldr	r3, [sp, #12]
 100485c:	3380      	adds	r3, #128	; 0x80
 100485e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
 1004862:	f3c3 4301 	ubfx	r3, r3, #16, #2
 1004866:	429d      	cmp	r5, r3
 1004868:	d107      	bne.n	100487a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
 100486a:	2100      	movs	r1, #0
 100486c:	4620      	mov	r0, r4
 100486e:	f002 f875 	bl	100695c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
 1004872:	4629      	mov	r1, r5
 1004874:	4620      	mov	r0, r4
 1004876:	f002 f871 	bl	100695c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 100487a:	a803      	add	r0, sp, #12
 100487c:	9403      	str	r4, [sp, #12]
 100487e:	f7ff fcf5 	bl	100426c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
 1004882:	2201      	movs	r2, #1
 1004884:	9b03      	ldr	r3, [sp, #12]
 1004886:	fa02 f303 	lsl.w	r3, r2, r3
 100488a:	6203      	str	r3, [r0, #32]
            while (latch[i])
 100488c:	f85b 402a 	ldr.w	r4, [fp, sl, lsl #2]
 1004890:	2c00      	cmp	r4, #0
 1004892:	d1b2      	bne.n	10047fa <nrfx_gpiote_irq_handler+0x66>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
 1004894:	f1ba 0f00 	cmp.w	sl, #0
 1004898:	d11d      	bne.n	10048d6 <nrfx_gpiote_irq_handler+0x142>
 100489a:	f04f 0a01 	mov.w	sl, #1
 100489e:	e7a8      	b.n	10047f2 <nrfx_gpiote_irq_handler+0x5e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
 10048a0:	2b02      	cmp	r3, #2
 10048a2:	d10c      	bne.n	10048be <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
 10048a4:	2103      	movs	r1, #3
 10048a6:	4620      	mov	r0, r4
 10048a8:	f002 f858 	bl	100695c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 10048ac:	f005 0305 	and.w	r3, r5, #5
 10048b0:	2b01      	cmp	r3, #1
 10048b2:	d1e2      	bne.n	100487a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
 10048b4:	4639      	mov	r1, r7
 10048b6:	4620      	mov	r0, r4
 10048b8:	f7ff fcf2 	bl	10042a0 <call_handler>
 10048bc:	e7dd      	b.n	100487a <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
 10048be:	2102      	movs	r1, #2
 10048c0:	4620      	mov	r0, r4
 10048c2:	9301      	str	r3, [sp, #4]
 10048c4:	f002 f84a 	bl	100695c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
 10048c8:	2d03      	cmp	r5, #3
 10048ca:	d0f3      	beq.n	10048b4 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
 10048cc:	9b01      	ldr	r3, [sp, #4]
 10048ce:	2b03      	cmp	r3, #3
 10048d0:	d1d3      	bne.n	100487a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
 10048d2:	2d02      	cmp	r5, #2
 10048d4:	e7ed      	b.n	10048b2 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
 10048d6:	4b18      	ldr	r3, [pc, #96]	; (1004938 <nrfx_gpiote_irq_handler+0x1a4>)
 10048d8:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
 10048dc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
 10048e0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 10048e4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
 10048e6:	f8c9 3020 	str.w	r3, [r9, #32]
        *p_masks = gpio_regs[i]->LATCH;
 10048ea:	f8d8 2020 	ldr.w	r2, [r8, #32]
        if (latch[port_idx])
 10048ee:	4313      	orrs	r3, r2
 10048f0:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
 10048f2:	f8c8 2020 	str.w	r2, [r8, #32]
 10048f6:	f47f af78 	bne.w	10047ea <nrfx_gpiote_irq_handler+0x56>
        mask &= ~NRFX_BIT(ch);
 10048fa:	2401      	movs	r4, #1
    while (mask)
 10048fc:	b916      	cbnz	r6, 1004904 <nrfx_gpiote_irq_handler+0x170>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
 10048fe:	b007      	add	sp, #28
 1004900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
 1004904:	fa96 f3a6 	rbit	r3, r6
 1004908:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
 100490c:	fa04 f203 	lsl.w	r2, r4, r3
 1004910:	009b      	lsls	r3, r3, #2
 1004912:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
 1004916:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
 100491a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
 100491e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 1004922:	f3c0 2005 	ubfx	r0, r0, #8, #6
 1004926:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
 100492a:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
 100492e:	f7ff fcb7 	bl	10042a0 <call_handler>
 1004932:	e7e3      	b.n	10048fc <nrfx_gpiote_irq_handler+0x168>
 1004934:	4100a100 	.word	0x4100a100
 1004938:	4100a000 	.word	0x4100a000
 100493c:	4100a120 	.word	0x4100a120
 1004940:	418c0500 	.word	0x418c0500
 1004944:	418c0800 	.word	0x418c0800
 1004948:	21000038 	.word	0x21000038

0100494c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
 100494c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 100494e:	4c08      	ldr	r4, [pc, #32]	; (1004970 <nrfx_ipc_init+0x24>)
{
 1004950:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 1004952:	7923      	ldrb	r3, [r4, #4]
{
 1004954:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
 1004956:	b943      	cbnz	r3, 100496a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
 1004958:	2012      	movs	r0, #18
 100495a:	f7fd fd71 	bl	1002440 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 100495e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
 1004960:	4804      	ldr	r0, [pc, #16]	; (1004974 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
 1004962:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
 1004964:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
 1004966:	60a5      	str	r5, [r4, #8]
}
 1004968:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
 100496a:	4803      	ldr	r0, [pc, #12]	; (1004978 <nrfx_ipc_init+0x2c>)
 100496c:	e7fc      	b.n	1004968 <nrfx_ipc_init+0x1c>
 100496e:	bf00      	nop
 1004970:	21000804 	.word	0x21000804
 1004974:	0bad0000 	.word	0x0bad0000
 1004978:	0bad000c 	.word	0x0bad000c

0100497c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
 100497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
 100497e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1004980:	2700      	movs	r7, #0
    return p_reg->INTPEND;
 1004982:	4b0b      	ldr	r3, [pc, #44]	; (10049b0 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
 1004984:	4d0b      	ldr	r5, [pc, #44]	; (10049b4 <nrfx_ipc_irq_handler+0x38>)
 1004986:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
 100498a:	b904      	cbnz	r4, 100498e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
 100498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
 100498e:	fa94 f0a4 	rbit	r0, r4
 1004992:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
 1004996:	fa06 f300 	lsl.w	r3, r6, r0
 100499a:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 100499e:	4b06      	ldr	r3, [pc, #24]	; (10049b8 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
 10049a0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10049a2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
 10049a4:	682b      	ldr	r3, [r5, #0]
 10049a6:	2b00      	cmp	r3, #0
 10049a8:	d0ef      	beq.n	100498a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
 10049aa:	68a9      	ldr	r1, [r5, #8]
 10049ac:	4798      	blx	r3
 10049ae:	e7ec      	b.n	100498a <nrfx_ipc_irq_handler+0xe>
 10049b0:	41012000 	.word	0x41012000
 10049b4:	21000804 	.word	0x21000804
 10049b8:	41012100 	.word	0x41012100

010049bc <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 10049bc:	2303      	movs	r3, #3
static void _DoInit(void) {
 10049be:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 10049c0:	4c10      	ldr	r4, [pc, #64]	; (1004a04 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 10049c2:	4a11      	ldr	r2, [pc, #68]	; (1004a08 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 10049c4:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 10049c6:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
 10049c8:	4b10      	ldr	r3, [pc, #64]	; (1004a0c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
 10049ca:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 10049cc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 10049ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 10049d2:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
 10049d4:	2300      	movs	r3, #0
 10049d6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 10049d8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 10049da:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 10049dc:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 10049de:	4a0c      	ldr	r2, [pc, #48]	; (1004a10 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 10049e0:	490c      	ldr	r1, [pc, #48]	; (1004a14 <_DoInit+0x58>)
  p->aDown[0].pBuffer       = _acDownBuffer;
 10049e2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 10049e4:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
 10049e6:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 10049e8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 10049ea:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 10049ec:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 10049ee:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
 10049f0:	f001 fdc9 	bl	1006586 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 10049f4:	4620      	mov	r0, r4
 10049f6:	4908      	ldr	r1, [pc, #32]	; (1004a18 <_DoInit+0x5c>)
 10049f8:	f001 fdc5 	bl	1006586 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 10049fc:	2320      	movs	r3, #32
 10049fe:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 1004a00:	bd10      	pop	{r4, pc}
 1004a02:	bf00      	nop
 1004a04:	21000810 	.word	0x21000810
 1004a08:	010078b4 	.word	0x010078b4
 1004a0c:	21000917 	.word	0x21000917
 1004a10:	21000907 	.word	0x21000907
 1004a14:	010078bd 	.word	0x010078bd
 1004a18:	010078c1 	.word	0x010078c1

01004a1c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
 1004a20:	f04f 0b18 	mov.w	fp, #24
 1004a24:	4f20      	ldr	r7, [pc, #128]	; (1004aa8 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004a26:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
 1004a28:	fb0b 7200 	mla	r2, fp, r0, r7
 1004a2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
 1004a2e:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004a30:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 1004a32:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004a34:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 1004a36:	d831      	bhi.n	1004a9c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 1004a38:	f8d2 a020 	ldr.w	sl, [r2, #32]
 1004a3c:	ebaa 0905 	sub.w	r9, sl, r5
 1004a40:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
 1004a44:	4294      	cmp	r4, r2
 1004a46:	d811      	bhi.n	1004a6c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1004a48:	2318      	movs	r3, #24
 1004a4a:	fb06 3303 	mla	r3, r6, r3, r3
 1004a4e:	443b      	add	r3, r7
 1004a50:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
 1004a52:	4622      	mov	r2, r4
 1004a54:	4641      	mov	r1, r8
 1004a56:	4428      	add	r0, r5
 1004a58:	f001 fdaf 	bl	10065ba <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 1004a5c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
 1004a5e:	2318      	movs	r3, #24
      return 1;
 1004a60:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
 1004a62:	fb03 7306 	mla	r3, r3, r6, r7
 1004a66:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
 1004a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
 1004a6c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 1004a6e:	429c      	cmp	r4, r3
 1004a70:	d818      	bhi.n	1004aa4 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1004a72:	fb00 bb0b 	mla	fp, r0, fp, fp
 1004a76:	44bb      	add	fp, r7
 1004a78:	f8db 0004 	ldr.w	r0, [fp, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 1004a7c:	464a      	mov	r2, r9
 1004a7e:	4428      	add	r0, r5
 1004a80:	442c      	add	r4, r5
 1004a82:	f001 fd9a 	bl	10065ba <memcpy>
      if (NumBytes) {
 1004a86:	ebb4 040a 	subs.w	r4, r4, sl
 1004a8a:	d0e8      	beq.n	1004a5e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
 1004a8c:	4622      	mov	r2, r4
 1004a8e:	f8db 0004 	ldr.w	r0, [fp, #4]
 1004a92:	eb08 0109 	add.w	r1, r8, r9
 1004a96:	f001 fd90 	bl	10065ba <memcpy>
      return 1;
 1004a9a:	e7e0      	b.n	1004a5e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
 1004a9c:	3b01      	subs	r3, #1
 1004a9e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 1004aa0:	42a3      	cmp	r3, r4
 1004aa2:	d2d1      	bcs.n	1004a48 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
 1004aa4:	2000      	movs	r0, #0
 1004aa6:	e7df      	b.n	1004a68 <SEGGER_RTT_WriteSkipNoLock+0x4c>
 1004aa8:	21000810 	.word	0x21000810

01004aac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 1004aae:	2718      	movs	r7, #24
 1004ab0:	fb00 7507 	mla	r5, r0, r7, r7
 1004ab4:	4b12      	ldr	r3, [pc, #72]	; (1004b00 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004ab6:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 1004ab8:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 1004aba:	fb07 3300 	mla	r3, r7, r0, r3
 1004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1004ac0:	4614      	mov	r4, r2
  switch (pRing->Flags) {
 1004ac2:	2b01      	cmp	r3, #1
 1004ac4:	d00a      	beq.n	1004adc <SEGGER_RTT_WriteNoLock+0x30>
 1004ac6:	2b02      	cmp	r3, #2
 1004ac8:	d014      	beq.n	1004af4 <SEGGER_RTT_WriteNoLock+0x48>
 1004aca:	b923      	cbnz	r3, 1004ad6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 1004acc:	4628      	mov	r0, r5
 1004ace:	f001 ff54 	bl	100697a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 1004ad2:	4284      	cmp	r4, r0
 1004ad4:	d908      	bls.n	1004ae8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
 1004ad6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 1004ad8:	4620      	mov	r0, r4
 1004ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 1004adc:	4628      	mov	r0, r5
 1004ade:	f001 ff4c 	bl	100697a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 1004ae2:	4284      	cmp	r4, r0
 1004ae4:	bf28      	it	cs
 1004ae6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 1004ae8:	4622      	mov	r2, r4
 1004aea:	4631      	mov	r1, r6
 1004aec:	4628      	mov	r0, r5
 1004aee:	f001 ff4d 	bl	100698c <_WriteNoCheck>
    break;
 1004af2:	e7f1      	b.n	1004ad8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 1004af4:	4628      	mov	r0, r5
}
 1004af6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
 1004afa:	f001 bf62 	b.w	10069c2 <_WriteBlocking>
 1004afe:	bf00      	nop
 1004b00:	21000810 	.word	0x21000810

01004b04 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
 1004b04:	2218      	movs	r2, #24
 1004b06:	4b03      	ldr	r3, [pc, #12]	; (1004b14 <SEGGER_RTT_HasDataUp+0x10>)
 1004b08:	fb02 3300 	mla	r3, r2, r0, r3
 1004b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
 1004b0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 1004b10:	1a80      	subs	r0, r0, r2
 1004b12:	4770      	bx	lr
 1004b14:	21000810 	.word	0x21000810

01004b18 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
 1004b18:	f04f 32ff 	mov.w	r2, #4294967295
 1004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 1004b20:	4801      	ldr	r0, [pc, #4]	; (1004b28 <zephyr_rtt_mutex_lock+0x10>)
 1004b22:	f000 ba2b 	b.w	1004f7c <z_impl_k_mutex_lock>
 1004b26:	bf00      	nop
 1004b28:	21000100 	.word	0x21000100

01004b2c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
 1004b2c:	4801      	ldr	r0, [pc, #4]	; (1004b34 <zephyr_rtt_mutex_unlock+0x8>)
 1004b2e:	f000 ba9f 	b.w	1005070 <z_impl_k_mutex_unlock>
 1004b32:	bf00      	nop
 1004b34:	21000100 	.word	0x21000100

01004b38 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 1004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1004b3c:	b086      	sub	sp, #24
 1004b3e:	4605      	mov	r5, r0
 1004b40:	460e      	mov	r6, r1
 1004b42:	af00      	add	r7, sp, #0
	__asm__ volatile(
 1004b44:	f04f 0320 	mov.w	r3, #32
 1004b48:	f3ef 8811 	mrs	r8, BASEPRI
 1004b4c:	f383 8812 	msr	BASEPRI_MAX, r3
 1004b50:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 1004b54:	f000 fdf2 	bl	100573c <z_impl_z_current_get>
 1004b58:	2d04      	cmp	r5, #4
 1004b5a:	bf98      	it	ls
 1004b5c:	4b2c      	ldrls	r3, [pc, #176]	; (1004c10 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 1004b5e:	46e9      	mov	r9, sp
 1004b60:	b08a      	sub	sp, #40	; 0x28
 1004b62:	4604      	mov	r4, r0
 1004b64:	466a      	mov	r2, sp
 1004b66:	bf94      	ite	ls
 1004b68:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
 1004b6c:	4b29      	ldrhi	r3, [pc, #164]	; (1004c14 <z_fatal_error+0xdc>)
 1004b6e:	61d3      	str	r3, [r2, #28]
 1004b70:	f240 3301 	movw	r3, #769	; 0x301
 1004b74:	f04f 0a00 	mov.w	sl, #0
 1004b78:	8493      	strh	r3, [r2, #36]	; 0x24
 1004b7a:	4927      	ldr	r1, [pc, #156]	; (1004c18 <z_fatal_error+0xe0>)
 1004b7c:	4b27      	ldr	r3, [pc, #156]	; (1004c1c <z_fatal_error+0xe4>)
 1004b7e:	e9c2 1505 	strd	r1, r5, [r2, #20]
 1004b82:	f8c2 a020 	str.w	sl, [r2, #32]
 1004b86:	f842 3f10 	str.w	r3, [r2, #16]!
 1004b8a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 1004b8e:	4653      	mov	r3, sl
 1004b90:	4823      	ldr	r0, [pc, #140]	; (1004c20 <z_fatal_error+0xe8>)
 1004b92:	f7fd f88b 	bl	1001cac <z_impl_z_log_msg_static_create>
 1004b96:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 1004b98:	b17e      	cbz	r6, 1004bba <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 1004b9a:	69f3      	ldr	r3, [r6, #28]
 1004b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 1004ba0:	b15b      	cbz	r3, 1004bba <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
 1004ba2:	4b20      	ldr	r3, [pc, #128]	; (1004c24 <z_fatal_error+0xec>)
 1004ba4:	617b      	str	r3, [r7, #20]
 1004ba6:	2302      	movs	r3, #2
 1004ba8:	613b      	str	r3, [r7, #16]
 1004baa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 1004bae:	4653      	mov	r3, sl
 1004bb0:	481b      	ldr	r0, [pc, #108]	; (1004c20 <z_fatal_error+0xe8>)
 1004bb2:	f107 0210 	add.w	r2, r7, #16
 1004bb6:	f7fd f879 	bl	1001cac <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 1004bba:	b12c      	cbz	r4, 1004bc8 <z_fatal_error+0x90>
 1004bbc:	4620      	mov	r0, r4
 1004bbe:	f001 ff49 	bl	1006a54 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 1004bc2:	b108      	cbz	r0, 1004bc8 <z_fatal_error+0x90>
 1004bc4:	7803      	ldrb	r3, [r0, #0]
 1004bc6:	b903      	cbnz	r3, 1004bca <z_fatal_error+0x92>
		thread_name = "unknown";
 1004bc8:	4817      	ldr	r0, [pc, #92]	; (1004c28 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 1004bca:	46e9      	mov	r9, sp
 1004bcc:	b08a      	sub	sp, #40	; 0x28
 1004bce:	466a      	mov	r2, sp
 1004bd0:	4b16      	ldr	r3, [pc, #88]	; (1004c2c <z_fatal_error+0xf4>)
 1004bd2:	61d0      	str	r0, [r2, #28]
 1004bd4:	e9c2 3405 	strd	r3, r4, [r2, #20]
 1004bd8:	f240 3301 	movw	r3, #769	; 0x301
 1004bdc:	8413      	strh	r3, [r2, #32]
 1004bde:	4b14      	ldr	r3, [pc, #80]	; (1004c30 <z_fatal_error+0xf8>)
 1004be0:	f842 3f10 	str.w	r3, [r2, #16]!
 1004be4:	2300      	movs	r3, #0
 1004be6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 1004bea:	480d      	ldr	r0, [pc, #52]	; (1004c20 <z_fatal_error+0xe8>)
 1004bec:	f7fd f85e 	bl	1001cac <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
 1004bf0:	4631      	mov	r1, r6
 1004bf2:	46cd      	mov	sp, r9
 1004bf4:	4628      	mov	r0, r5
 1004bf6:	f7ff f9ab 	bl	1003f50 <k_sys_fatal_error_handler>
	__asm__ volatile(
 1004bfa:	f388 8811 	msr	BASEPRI, r8
 1004bfe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 1004c02:	4620      	mov	r0, r4
 1004c04:	f7fe f856 	bl	1002cb4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 1004c08:	3718      	adds	r7, #24
 1004c0a:	46bd      	mov	sp, r7
 1004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1004c10:	010070f0 	.word	0x010070f0
 1004c14:	010078c8 	.word	0x010078c8
 1004c18:	010078de 	.word	0x010078de
 1004c1c:	01000005 	.word	0x01000005
 1004c20:	01006f08 	.word	0x01006f08
 1004c24:	01007906 	.word	0x01007906
 1004c28:	010078d6 	.word	0x010078d6
 1004c2c:	01007927 	.word	0x01007927
 1004c30:	01000004 	.word	0x01000004

01004c34 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004c34:	4b0f      	ldr	r3, [pc, #60]	; (1004c74 <z_sys_init_run_level+0x40>)
{
 1004c36:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004c38:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 1004c3c:	3001      	adds	r0, #1
 1004c3e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 1004c42:	42a6      	cmp	r6, r4
 1004c44:	d800      	bhi.n	1004c48 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
 1004c46:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
 1004c48:	e9d4 3500 	ldrd	r3, r5, [r4]
 1004c4c:	4628      	mov	r0, r5
 1004c4e:	4798      	blx	r3
		if (dev != NULL) {
 1004c50:	b16d      	cbz	r5, 1004c6e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
 1004c52:	b138      	cbz	r0, 1004c64 <z_sys_init_run_level+0x30>
				if (rc < 0) {
 1004c54:	2800      	cmp	r0, #0
 1004c56:	bfb8      	it	lt
 1004c58:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
 1004c5a:	28ff      	cmp	r0, #255	; 0xff
 1004c5c:	bfa8      	it	ge
 1004c5e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
 1004c60:	68eb      	ldr	r3, [r5, #12]
 1004c62:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
 1004c64:	68ea      	ldr	r2, [r5, #12]
 1004c66:	7853      	ldrb	r3, [r2, #1]
 1004c68:	f043 0301 	orr.w	r3, r3, #1
 1004c6c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 1004c6e:	3408      	adds	r4, #8
 1004c70:	e7e7      	b.n	1004c42 <z_sys_init_run_level+0xe>
 1004c72:	bf00      	nop
 1004c74:	01007104 	.word	0x01007104

01004c78 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 1004c78:	2201      	movs	r2, #1
{
 1004c7a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 1004c7c:	4b09      	ldr	r3, [pc, #36]	; (1004ca4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 1004c7e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
 1004c80:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
 1004c82:	f7ff ffd7 	bl	1004c34 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 1004c86:	f000 ffd1 	bl	1005c2c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
 1004c8a:	2004      	movs	r0, #4
 1004c8c:	f7ff ffd2 	bl	1004c34 <z_sys_init_run_level>

	z_init_static_threads();
 1004c90:	f000 f918 	bl	1004ec4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
 1004c94:	f7fb fc56 	bl	1000544 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 1004c98:	4a03      	ldr	r2, [pc, #12]	; (1004ca8 <bg_thread_main+0x30>)
 1004c9a:	7b13      	ldrb	r3, [r2, #12]
 1004c9c:	f023 0301 	bic.w	r3, r3, #1
 1004ca0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 1004ca2:	bd08      	pop	{r3, pc}
 1004ca4:	21000d17 	.word	0x21000d17
 1004ca8:	21000688 	.word	0x21000688

01004cac <z_bss_zero>:
{
 1004cac:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
 1004cae:	4803      	ldr	r0, [pc, #12]	; (1004cbc <z_bss_zero+0x10>)
 1004cb0:	4a03      	ldr	r2, [pc, #12]	; (1004cc0 <z_bss_zero+0x14>)
 1004cb2:	2100      	movs	r1, #0
 1004cb4:	1a12      	subs	r2, r2, r0
 1004cb6:	f001 fec0 	bl	1006a3a <z_early_memset>
}
 1004cba:	bd08      	pop	{r3, pc}
 1004cbc:	21000128 	.word	0x21000128
 1004cc0:	21000d18 	.word	0x21000d18

01004cc4 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
 1004cc4:	2300      	movs	r3, #0
 1004cc6:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
 1004cc8:	b570      	push	{r4, r5, r6, lr}
 1004cca:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
 1004ccc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 1004cd0:	220f      	movs	r2, #15
 1004cd2:	9301      	str	r3, [sp, #4]
 1004cd4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 1004cd8:	2318      	movs	r3, #24
 1004cda:	4d0f      	ldr	r5, [pc, #60]	; (1004d18 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
 1004cdc:	4e0f      	ldr	r6, [pc, #60]	; (1004d1c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 1004cde:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
 1004ce2:	490f      	ldr	r1, [pc, #60]	; (1004d20 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
 1004ce4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
 1004ce8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
 1004cea:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 1004cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 1004cf2:	4630      	mov	r0, r6
 1004cf4:	4b0b      	ldr	r3, [pc, #44]	; (1004d24 <z_init_cpu+0x60>)
 1004cf6:	9500      	str	r5, [sp, #0]
 1004cf8:	f000 f888 	bl	1004e0c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 1004cfc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
 1004cfe:	752c      	strb	r4, [r5, #20]
 1004d00:	f023 0304 	bic.w	r3, r3, #4
 1004d04:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
 1004d06:	4b08      	ldr	r3, [pc, #32]	; (1004d28 <z_init_cpu+0x64>)
 1004d08:	3401      	adds	r4, #1
 1004d0a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
 1004d0e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
 1004d10:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
 1004d12:	b006      	add	sp, #24
 1004d14:	bd70      	pop	{r4, r5, r6, pc}
 1004d16:	bf00      	nop
 1004d18:	210008b8 	.word	0x210008b8
 1004d1c:	21000608 	.word	0x21000608
 1004d20:	21001818 	.word	0x21001818
 1004d24:	01006a59 	.word	0x01006a59
 1004d28:	21001018 	.word	0x21001018

01004d2c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 1004d2c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 1004d2e:	2000      	movs	r0, #0
{
 1004d30:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
 1004d32:	f7ff ff7f 	bl	1004c34 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
 1004d36:	4b2e      	ldr	r3, [pc, #184]	; (1004df0 <z_cstart+0xc4>)
	uint32_t msp =
 1004d38:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 1004d3c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 1004d40:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 1004d44:	2400      	movs	r4, #0
 1004d46:	23e0      	movs	r3, #224	; 0xe0
 1004d48:	4d2a      	ldr	r5, [pc, #168]	; (1004df4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
 1004d4a:	4e2b      	ldr	r6, [pc, #172]	; (1004df8 <z_cstart+0xcc>)
 1004d4c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 1004d50:	77ec      	strb	r4, [r5, #31]
 1004d52:	762c      	strb	r4, [r5, #24]
 1004d54:	766c      	strb	r4, [r5, #25]
 1004d56:	76ac      	strb	r4, [r5, #26]
 1004d58:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 1004d5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004d5e:	4f27      	ldr	r7, [pc, #156]	; (1004dfc <z_cstart+0xd0>)
 1004d60:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 1004d64:	626b      	str	r3, [r5, #36]	; 0x24
 1004d66:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 1004d6a:	f7fd ff07 	bl	1002b7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 1004d6e:	f7fd fae3 	bl	1002338 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 1004d72:	f04f 33ff 	mov.w	r3, #4294967295
 1004d76:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 1004d78:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 1004d7a:	f7fe f949 	bl	1003010 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 1004d7e:	f7fd ffaf 	bl	1002ce0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 1004d82:	f7fc fe27 	bl	10019d4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
 1004d86:	f240 1301 	movw	r3, #257	; 0x101
 1004d8a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 1004d8e:	ab06      	add	r3, sp, #24
 1004d90:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 1004d92:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
 1004d96:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 1004d98:	f001 fe43 	bl	1006a22 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
 1004d9c:	2001      	movs	r0, #1
 1004d9e:	f7ff ff49 	bl	1004c34 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 1004da2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
 1004da4:	4d16      	ldr	r5, [pc, #88]	; (1004e00 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
 1004da6:	f7ff ff45 	bl	1004c34 <z_sys_init_run_level>
	z_sched_init();
 1004daa:	f000 fc1f 	bl	10055ec <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004dae:	4b15      	ldr	r3, [pc, #84]	; (1004e04 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
 1004db0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 1004db2:	9305      	str	r3, [sp, #20]
 1004db4:	2301      	movs	r3, #1
 1004db6:	4914      	ldr	r1, [pc, #80]	; (1004e08 <z_cstart+0xdc>)
 1004db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 1004dbc:	e9cd 4303 	strd	r4, r3, [sp, #12]
 1004dc0:	4628      	mov	r0, r5
 1004dc2:	463b      	mov	r3, r7
 1004dc4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 1004dc8:	9400      	str	r4, [sp, #0]
 1004dca:	f000 f81f 	bl	1004e0c <z_setup_new_thread>
 1004dce:	4606      	mov	r6, r0
 1004dd0:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
 1004dd2:	4628      	mov	r0, r5
 1004dd4:	f022 0204 	bic.w	r2, r2, #4
 1004dd8:	736a      	strb	r2, [r5, #13]
 1004dda:	f001 feb9 	bl	1006b50 <z_ready_thread>
	z_init_cpu(0);
 1004dde:	4620      	mov	r0, r4
 1004de0:	f7ff ff70 	bl	1004cc4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 1004de4:	463a      	mov	r2, r7
 1004de6:	4631      	mov	r1, r6
 1004de8:	4628      	mov	r0, r5
 1004dea:	f7fd fbe7 	bl	10025bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 1004dee:	bf00      	nop
 1004df0:	21001018 	.word	0x21001018
 1004df4:	e000ed00 	.word	0xe000ed00
 1004df8:	210008b8 	.word	0x210008b8
 1004dfc:	01004c79 	.word	0x01004c79
 1004e00:	21000688 	.word	0x21000688
 1004e04:	01007989 	.word	0x01007989
 1004e08:	21001918 	.word	0x21001918

01004e0c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 1004e0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
 1004e10:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 1004e12:	f100 0558 	add.w	r5, r0, #88	; 0x58
 1004e16:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 1004e18:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 1004e1a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
 1004e1e:	2500      	movs	r5, #0
{
 1004e20:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
 1004e22:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
 1004e24:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 1004e26:	e9c0 5506 	strd	r5, r5, [r0, #24]
 1004e2a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1004e2c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 1004e30:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
 1004e34:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
 1004e38:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
 1004e3a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 1004e3c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004e3e:	9202      	str	r2, [sp, #8]
 1004e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
 1004e42:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 1004e46:	9201      	str	r2, [sp, #4]
 1004e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 1004e4a:	9200      	str	r2, [sp, #0]
 1004e4c:	4642      	mov	r2, r8
 1004e4e:	f7fd fb99 	bl	1002584 <arch_new_thread>
	if (!_current) {
 1004e52:	4b05      	ldr	r3, [pc, #20]	; (1004e68 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 1004e54:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 1004e56:	689b      	ldr	r3, [r3, #8]
 1004e58:	b103      	cbz	r3, 1004e5c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
 1004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 1004e5c:	4640      	mov	r0, r8
 1004e5e:	6723      	str	r3, [r4, #112]	; 0x70
 1004e60:	b004      	add	sp, #16
 1004e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 1004e66:	bf00      	nop
 1004e68:	210008b8 	.word	0x210008b8

01004e6c <z_impl_k_thread_create>:
{
 1004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1004e6e:	2500      	movs	r5, #0
{
 1004e70:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1004e72:	9505      	str	r5, [sp, #20]
 1004e74:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
 1004e76:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1004e7a:	9504      	str	r5, [sp, #16]
 1004e7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
 1004e7e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 1004e80:	9503      	str	r5, [sp, #12]
 1004e82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 1004e84:	9502      	str	r5, [sp, #8]
 1004e86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 1004e88:	9501      	str	r5, [sp, #4]
 1004e8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 1004e8c:	9500      	str	r5, [sp, #0]
 1004e8e:	f7ff ffbd 	bl	1004e0c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 1004e92:	f1b6 3fff 	cmp.w	r6, #4294967295
 1004e96:	bf08      	it	eq
 1004e98:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 1004e9c:	d005      	beq.n	1004eaa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1004e9e:	ea56 0307 	orrs.w	r3, r6, r7
 1004ea2:	d105      	bne.n	1004eb0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
 1004ea4:	4620      	mov	r0, r4
 1004ea6:	f000 fb21 	bl	10054ec <z_sched_start>
}
 1004eaa:	4620      	mov	r0, r4
 1004eac:	b007      	add	sp, #28
 1004eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 1004eb0:	463a      	mov	r2, r7
 1004eb2:	4633      	mov	r3, r6
 1004eb4:	4902      	ldr	r1, [pc, #8]	; (1004ec0 <z_impl_k_thread_create+0x54>)
 1004eb6:	f104 0018 	add.w	r0, r4, #24
 1004eba:	f000 fd0d 	bl	10058d8 <z_add_timeout>
 1004ebe:	e7f4      	b.n	1004eaa <z_impl_k_thread_create+0x3e>
 1004ec0:	01006abd 	.word	0x01006abd

01004ec4 <z_init_static_threads>:
{
 1004ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 1004ec8:	4c29      	ldr	r4, [pc, #164]	; (1004f70 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
 1004eca:	4d2a      	ldr	r5, [pc, #168]	; (1004f74 <z_init_static_threads+0xb0>)
{
 1004ecc:	b087      	sub	sp, #28
 1004ece:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
 1004ed0:	42ae      	cmp	r6, r5
 1004ed2:	f104 0430 	add.w	r4, r4, #48	; 0x30
 1004ed6:	d30f      	bcc.n	1004ef8 <z_init_static_threads+0x34>
	k_sched_lock();
 1004ed8:	f000 fb58 	bl	100558c <k_sched_lock>
 1004edc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 1004ee0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
 1004ee4:	4c22      	ldr	r4, [pc, #136]	; (1004f70 <z_init_static_threads+0xac>)
 1004ee6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1004f78 <z_init_static_threads+0xb4>
 1004eea:	42ac      	cmp	r4, r5
 1004eec:	d320      	bcc.n	1004f30 <z_init_static_threads+0x6c>
}
 1004eee:	b007      	add	sp, #28
 1004ef0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
 1004ef4:	f000 bb5e 	b.w	10055b4 <k_sched_unlock>
		z_setup_new_thread(
 1004ef8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 1004efc:	9305      	str	r3, [sp, #20]
 1004efe:	f854 3c10 	ldr.w	r3, [r4, #-16]
 1004f02:	9304      	str	r3, [sp, #16]
 1004f04:	f854 3c14 	ldr.w	r3, [r4, #-20]
 1004f08:	9303      	str	r3, [sp, #12]
 1004f0a:	f854 3c18 	ldr.w	r3, [r4, #-24]
 1004f0e:	9302      	str	r3, [sp, #8]
 1004f10:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 1004f14:	9301      	str	r3, [sp, #4]
 1004f16:	f854 3c20 	ldr.w	r3, [r4, #-32]
 1004f1a:	9300      	str	r3, [sp, #0]
 1004f1c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 1004f20:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 1004f24:	f7ff ff72 	bl	1004e0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 1004f28:	f854 3c30 	ldr.w	r3, [r4, #-48]
 1004f2c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 1004f2e:	e7ce      	b.n	1004ece <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 1004f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1004f32:	1c5a      	adds	r2, r3, #1
 1004f34:	d00d      	beq.n	1004f52 <z_init_static_threads+0x8e>
 1004f36:	2100      	movs	r1, #0
 1004f38:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
 1004f3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 1004f3e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1004f42:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
 1004f46:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 1004f4a:	d104      	bne.n	1004f56 <z_init_static_threads+0x92>
	z_sched_start(thread);
 1004f4c:	4640      	mov	r0, r8
 1004f4e:	f000 facd 	bl	10054ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 1004f52:	3430      	adds	r4, #48	; 0x30
 1004f54:	e7c9      	b.n	1004eea <z_init_static_threads+0x26>
 1004f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 1004f5a:	2300      	movs	r3, #0
 1004f5c:	f7fb f8ac 	bl	10000b8 <__aeabi_uldivmod>
 1004f60:	4602      	mov	r2, r0
 1004f62:	460b      	mov	r3, r1
 1004f64:	f108 0018 	add.w	r0, r8, #24
 1004f68:	4649      	mov	r1, r9
 1004f6a:	f000 fcb5 	bl	10058d8 <z_add_timeout>
 1004f6e:	e7f0      	b.n	1004f52 <z_init_static_threads+0x8e>
 1004f70:	01006e98 	.word	0x01006e98
 1004f74:	01006e98 	.word	0x01006e98
 1004f78:	01006abd 	.word	0x01006abd

01004f7c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 1004f7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 1004f80:	4604      	mov	r4, r0
 1004f82:	4617      	mov	r7, r2
 1004f84:	461e      	mov	r6, r3
	__asm__ volatile(
 1004f86:	f04f 0320 	mov.w	r3, #32
 1004f8a:	f3ef 8811 	mrs	r8, BASEPRI
 1004f8e:	f383 8812 	msr	BASEPRI_MAX, r3
 1004f92:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 1004f96:	68c3      	ldr	r3, [r0, #12]
 1004f98:	4a33      	ldr	r2, [pc, #204]	; (1005068 <z_impl_k_mutex_lock+0xec>)
 1004f9a:	b17b      	cbz	r3, 1004fbc <z_impl_k_mutex_lock+0x40>
 1004f9c:	6880      	ldr	r0, [r0, #8]
 1004f9e:	6891      	ldr	r1, [r2, #8]
 1004fa0:	4288      	cmp	r0, r1
 1004fa2:	d019      	beq.n	1004fd8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 1004fa4:	ea57 0306 	orrs.w	r3, r7, r6
 1004fa8:	d118      	bne.n	1004fdc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 1004faa:	f388 8811 	msr	BASEPRI, r8
 1004fae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
 1004fb2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 1004fb6:	b002      	add	sp, #8
 1004fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 1004fbc:	6891      	ldr	r1, [r2, #8]
 1004fbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
 1004fc2:	3301      	adds	r3, #1
 1004fc4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 1004fc6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 1004fc8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
 1004fca:	60a3      	str	r3, [r4, #8]
 1004fcc:	f388 8811 	msr	BASEPRI, r8
 1004fd0:	f3bf 8f6f 	isb	sy
		return 0;
 1004fd4:	2000      	movs	r0, #0
 1004fd6:	e7ee      	b.n	1004fb6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
 1004fd8:	6921      	ldr	r1, [r4, #16]
 1004fda:	e7f2      	b.n	1004fc2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 1004fdc:	f991 100e 	ldrsb.w	r1, [r1, #14]
 1004fe0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 1004fe4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
 1004fe8:	4299      	cmp	r1, r3
 1004fea:	bfa8      	it	ge
 1004fec:	4619      	movge	r1, r3
 1004fee:	4291      	cmp	r1, r2
 1004ff0:	bfb8      	it	lt
 1004ff2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 1004ff4:	428b      	cmp	r3, r1
 1004ff6:	dd2e      	ble.n	1005056 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
 1004ff8:	f001 fd3a 	bl	1006a70 <adjust_owner_prio.isra.0>
 1004ffc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 1004ffe:	4622      	mov	r2, r4
 1005000:	4641      	mov	r1, r8
 1005002:	e9cd 7600 	strd	r7, r6, [sp]
 1005006:	4819      	ldr	r0, [pc, #100]	; (100506c <z_impl_k_mutex_lock+0xf0>)
 1005008:	f000 f9fa 	bl	1005400 <z_pend_curr>
	if (got_mutex == 0) {
 100500c:	2800      	cmp	r0, #0
 100500e:	d0e1      	beq.n	1004fd4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
 1005010:	f04f 0320 	mov.w	r3, #32
 1005014:	f3ef 8611 	mrs	r6, BASEPRI
 1005018:	f383 8812 	msr	BASEPRI_MAX, r3
 100501c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
 1005020:	68a0      	ldr	r0, [r4, #8]
 1005022:	b1d0      	cbz	r0, 100505a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 1005024:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 1005026:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005028:	429c      	cmp	r4, r3
 100502a:	d00a      	beq.n	1005042 <z_impl_k_mutex_lock+0xc6>
 100502c:	b14b      	cbz	r3, 1005042 <z_impl_k_mutex_lock+0xc6>
 100502e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 1005032:	4299      	cmp	r1, r3
 1005034:	bfa8      	it	ge
 1005036:	4619      	movge	r1, r3
 1005038:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 100503c:	4299      	cmp	r1, r3
 100503e:	bfb8      	it	lt
 1005040:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
 1005042:	f001 fd15 	bl	1006a70 <adjust_owner_prio.isra.0>
 1005046:	b140      	cbz	r0, 100505a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 1005048:	4631      	mov	r1, r6
 100504a:	4808      	ldr	r0, [pc, #32]	; (100506c <z_impl_k_mutex_lock+0xf0>)
 100504c:	f000 fa3c 	bl	10054c8 <z_reschedule>
	return -EAGAIN;
 1005050:	f06f 000a 	mvn.w	r0, #10
 1005054:	e7af      	b.n	1004fb6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
 1005056:	2500      	movs	r5, #0
 1005058:	e7d1      	b.n	1004ffe <z_impl_k_mutex_lock+0x82>
	if (resched) {
 100505a:	2d00      	cmp	r5, #0
 100505c:	d1f4      	bne.n	1005048 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
 100505e:	f386 8811 	msr	BASEPRI, r6
 1005062:	f3bf 8f6f 	isb	sy
 1005066:	e7f3      	b.n	1005050 <z_impl_k_mutex_lock+0xd4>
 1005068:	210008b8 	.word	0x210008b8
 100506c:	21000d18 	.word	0x21000d18

01005070 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 1005070:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 1005072:	6883      	ldr	r3, [r0, #8]
{
 1005074:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 1005076:	b36b      	cbz	r3, 10050d4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 1005078:	4a19      	ldr	r2, [pc, #100]	; (10050e0 <z_impl_k_mutex_unlock+0x70>)
 100507a:	6892      	ldr	r2, [r2, #8]
 100507c:	4293      	cmp	r3, r2
 100507e:	d12c      	bne.n	10050da <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 1005080:	68c3      	ldr	r3, [r0, #12]
 1005082:	2b01      	cmp	r3, #1
 1005084:	d903      	bls.n	100508e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
 1005086:	3b01      	subs	r3, #1
 1005088:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
 100508a:	2000      	movs	r0, #0
}
 100508c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 100508e:	f04f 0320 	mov.w	r3, #32
 1005092:	f3ef 8511 	mrs	r5, BASEPRI
 1005096:	f383 8812 	msr	BASEPRI_MAX, r3
 100509a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 100509e:	6901      	ldr	r1, [r0, #16]
 10050a0:	6880      	ldr	r0, [r0, #8]
 10050a2:	f001 fce5 	bl	1006a70 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 10050a6:	4620      	mov	r0, r4
 10050a8:	f001 fd89 	bl	1006bbe <z_unpend_first_thread>
	mutex->owner = new_owner;
 10050ac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 10050ae:	b158      	cbz	r0, 10050c8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
 10050b0:	f990 200e 	ldrsb.w	r2, [r0, #14]
 10050b4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 10050b6:	2200      	movs	r2, #0
 10050b8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 10050ba:	f001 fd49 	bl	1006b50 <z_ready_thread>
		z_reschedule(&lock, key);
 10050be:	4629      	mov	r1, r5
 10050c0:	4808      	ldr	r0, [pc, #32]	; (10050e4 <z_impl_k_mutex_unlock+0x74>)
 10050c2:	f000 fa01 	bl	10054c8 <z_reschedule>
 10050c6:	e7e0      	b.n	100508a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
 10050c8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 10050ca:	f385 8811 	msr	BASEPRI, r5
 10050ce:	f3bf 8f6f 	isb	sy
 10050d2:	e7da      	b.n	100508a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
 10050d4:	f06f 0015 	mvn.w	r0, #21
 10050d8:	e7d8      	b.n	100508c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
 10050da:	f04f 30ff 	mov.w	r0, #4294967295
 10050de:	e7d5      	b.n	100508c <z_impl_k_mutex_unlock+0x1c>
 10050e0:	210008b8 	.word	0x210008b8
 10050e4:	21000d18 	.word	0x21000d18

010050e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 10050e8:	b538      	push	{r3, r4, r5, lr}
 10050ea:	4604      	mov	r4, r0
	__asm__ volatile(
 10050ec:	f04f 0320 	mov.w	r3, #32
 10050f0:	f3ef 8511 	mrs	r5, BASEPRI
 10050f4:	f383 8812 	msr	BASEPRI_MAX, r3
 10050f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 10050fc:	f001 fd5f 	bl	1006bbe <z_unpend_first_thread>

	if (thread != NULL) {
 1005100:	b148      	cbz	r0, 1005116 <z_impl_k_sem_give+0x2e>
 1005102:	2200      	movs	r2, #0
 1005104:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 1005106:	f001 fd23 	bl	1006b50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 100510a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 100510c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 1005110:	4804      	ldr	r0, [pc, #16]	; (1005124 <z_impl_k_sem_give+0x3c>)
 1005112:	f000 b9d9 	b.w	10054c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 1005116:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 100511a:	429a      	cmp	r2, r3
 100511c:	bf18      	it	ne
 100511e:	3301      	addne	r3, #1
 1005120:	60a3      	str	r3, [r4, #8]
}
 1005122:	e7f2      	b.n	100510a <z_impl_k_sem_give+0x22>
 1005124:	21000d18 	.word	0x21000d18

01005128 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 1005128:	b513      	push	{r0, r1, r4, lr}
 100512a:	f04f 0420 	mov.w	r4, #32
 100512e:	f3ef 8111 	mrs	r1, BASEPRI
 1005132:	f384 8812 	msr	BASEPRI_MAX, r4
 1005136:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 100513a:	6884      	ldr	r4, [r0, #8]
 100513c:	b144      	cbz	r4, 1005150 <z_impl_k_sem_take+0x28>
		sem->count--;
 100513e:	3c01      	subs	r4, #1
 1005140:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 1005142:	f381 8811 	msr	BASEPRI, r1
 1005146:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 100514a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 100514c:	b002      	add	sp, #8
 100514e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 1005150:	ea52 0403 	orrs.w	r4, r2, r3
 1005154:	d106      	bne.n	1005164 <z_impl_k_sem_take+0x3c>
 1005156:	f381 8811 	msr	BASEPRI, r1
 100515a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 100515e:	f06f 000f 	mvn.w	r0, #15
 1005162:	e7f3      	b.n	100514c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 1005164:	e9cd 2300 	strd	r2, r3, [sp]
 1005168:	4602      	mov	r2, r0
 100516a:	4802      	ldr	r0, [pc, #8]	; (1005174 <z_impl_k_sem_take+0x4c>)
 100516c:	f000 f948 	bl	1005400 <z_pend_curr>
	return ret;
 1005170:	e7ec      	b.n	100514c <z_impl_k_sem_take+0x24>
 1005172:	bf00      	nop
 1005174:	21000d18 	.word	0x21000d18

01005178 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
 1005178:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
 100517a:	4d07      	ldr	r5, [pc, #28]	; (1005198 <z_reset_time_slice+0x20>)
 100517c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
 100517e:	b154      	cbz	r4, 1005196 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
 1005180:	f7fe fe76 	bl	1003e70 <sys_clock_elapsed>
 1005184:	4b05      	ldr	r3, [pc, #20]	; (100519c <z_reset_time_slice+0x24>)
 1005186:	4404      	add	r4, r0
 1005188:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
 100518a:	6828      	ldr	r0, [r5, #0]
 100518c:	2100      	movs	r1, #0
	}
}
 100518e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
 1005192:	f001 bd5c 	b.w	1006c4e <z_set_timeout_expiry>
}
 1005196:	bd38      	pop	{r3, r4, r5, pc}
 1005198:	210008e4 	.word	0x210008e4
 100519c:	210008b8 	.word	0x210008b8

010051a0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 10051a0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 10051a2:	4d0d      	ldr	r5, [pc, #52]	; (10051d8 <update_cache+0x38>)
 10051a4:	462b      	mov	r3, r5
 10051a6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10051aa:	429c      	cmp	r4, r3
 10051ac:	d000      	beq.n	10051b0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 10051ae:	b904      	cbnz	r4, 10051b2 <update_cache+0x12>
 10051b0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
 10051b2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 10051b4:	b938      	cbnz	r0, 10051c6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
 10051b6:	7b5a      	ldrb	r2, [r3, #13]
 10051b8:	06d2      	lsls	r2, r2, #27
 10051ba:	d104      	bne.n	10051c6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 10051bc:	69a2      	ldr	r2, [r4, #24]
 10051be:	b912      	cbnz	r2, 10051c6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
 10051c0:	89da      	ldrh	r2, [r3, #14]
 10051c2:	2a7f      	cmp	r2, #127	; 0x7f
 10051c4:	d805      	bhi.n	10051d2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
 10051c6:	429c      	cmp	r4, r3
 10051c8:	d002      	beq.n	10051d0 <update_cache+0x30>
			z_reset_time_slice(thread);
 10051ca:	4620      	mov	r0, r4
 10051cc:	f7ff ffd4 	bl	1005178 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
 10051d0:	4623      	mov	r3, r4
 10051d2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
 10051d4:	bd38      	pop	{r3, r4, r5, pc}
 10051d6:	bf00      	nop
 10051d8:	210008b8 	.word	0x210008b8

010051dc <move_thread_to_end_of_prio_q>:
{
 10051dc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 10051de:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 10051e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 10051e4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 10051e6:	7b43      	ldrb	r3, [r0, #13]
 10051e8:	da04      	bge.n	10051f4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10051ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 10051ee:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
 10051f0:	f001 fc52 	bl	1006a98 <sys_dlist_remove>
	return list->head == list;
 10051f4:	4a15      	ldr	r2, [pc, #84]	; (100524c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
 10051f6:	7b4b      	ldrb	r3, [r1, #13]
 10051f8:	4610      	mov	r0, r2
 10051fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 10051fe:	734b      	strb	r3, [r1, #13]
 1005200:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 1005204:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005206:	4283      	cmp	r3, r0
 1005208:	bf08      	it	eq
 100520a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100520c:	b923      	cbnz	r3, 1005218 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 100520e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
 1005212:	6021      	str	r1, [r4, #0]
	list->tail = node;
 1005214:	6211      	str	r1, [r2, #32]
}
 1005216:	e00c      	b.n	1005232 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
 1005218:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
 100521c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 1005220:	42b5      	cmp	r5, r6
 1005222:	d00e      	beq.n	1005242 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005224:	42ae      	cmp	r6, r5
 1005226:	dd0c      	ble.n	1005242 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 1005228:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
 100522a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
 100522e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 1005230:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
 1005232:	6890      	ldr	r0, [r2, #8]
}
 1005234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 1005238:	1a43      	subs	r3, r0, r1
 100523a:	4258      	negs	r0, r3
 100523c:	4158      	adcs	r0, r3
 100523e:	f7ff bfaf 	b.w	10051a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 1005242:	429c      	cmp	r4, r3
 1005244:	d0e3      	beq.n	100520e <move_thread_to_end_of_prio_q+0x32>
 1005246:	681b      	ldr	r3, [r3, #0]
 1005248:	e7e0      	b.n	100520c <move_thread_to_end_of_prio_q+0x30>
 100524a:	bf00      	nop
 100524c:	210008b8 	.word	0x210008b8

01005250 <ready_thread>:
{
 1005250:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 1005252:	f990 300d 	ldrsb.w	r3, [r0, #13]
 1005256:	7b42      	ldrb	r2, [r0, #13]
 1005258:	2b00      	cmp	r3, #0
 100525a:	db29      	blt.n	10052b0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 100525c:	06d3      	lsls	r3, r2, #27
 100525e:	d127      	bne.n	10052b0 <ready_thread+0x60>
	return node->next != NULL;
 1005260:	6983      	ldr	r3, [r0, #24]
 1005262:	bb2b      	cbnz	r3, 10052b0 <ready_thread+0x60>
	return list->head == list;
 1005264:	4913      	ldr	r1, [pc, #76]	; (10052b4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
 1005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 100526a:	7342      	strb	r2, [r0, #13]
 100526c:	460a      	mov	r2, r1
 100526e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005272:	4294      	cmp	r4, r2
 1005274:	bf18      	it	ne
 1005276:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
 1005278:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100527a:	b923      	cbnz	r3, 1005286 <ready_thread+0x36>
	node->prev = tail;
 100527c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
 1005280:	6020      	str	r0, [r4, #0]
	list->tail = node;
 1005282:	6208      	str	r0, [r1, #32]
}
 1005284:	e00c      	b.n	10052a0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
 1005286:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 100528a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
 100528e:	42b5      	cmp	r5, r6
 1005290:	d00a      	beq.n	10052a8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005292:	42ae      	cmp	r6, r5
 1005294:	dd08      	ble.n	10052a8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
 1005296:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1005298:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 100529c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 100529e:	6058      	str	r0, [r3, #4]
		update_cache(0);
 10052a0:	2000      	movs	r0, #0
}
 10052a2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 10052a4:	f7ff bf7c 	b.w	10051a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
 10052a8:	42a3      	cmp	r3, r4
 10052aa:	d0e7      	beq.n	100527c <ready_thread+0x2c>
 10052ac:	681b      	ldr	r3, [r3, #0]
 10052ae:	e7e4      	b.n	100527a <ready_thread+0x2a>
}
 10052b0:	bc70      	pop	{r4, r5, r6}
 10052b2:	4770      	bx	lr
 10052b4:	210008b8 	.word	0x210008b8

010052b8 <unready_thread>:
{
 10052b8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 10052ba:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
 10052be:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 10052c0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
 10052c2:	7b43      	ldrb	r3, [r0, #13]
 10052c4:	da04      	bge.n	10052d0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10052c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 10052ca:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 10052cc:	f001 fbe4 	bl	1006a98 <sys_dlist_remove>
	update_cache(thread == _current);
 10052d0:	4b04      	ldr	r3, [pc, #16]	; (10052e4 <unready_thread+0x2c>)
 10052d2:	6898      	ldr	r0, [r3, #8]
 10052d4:	1a43      	subs	r3, r0, r1
 10052d6:	4258      	negs	r0, r3
 10052d8:	4158      	adcs	r0, r3
}
 10052da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 10052de:	f7ff bf5f 	b.w	10051a0 <update_cache>
 10052e2:	bf00      	nop
 10052e4:	210008b8 	.word	0x210008b8

010052e8 <pend_locked>:
{
 10052e8:	b570      	push	{r4, r5, r6, lr}
 10052ea:	4615      	mov	r5, r2
 10052ec:	461c      	mov	r4, r3
 10052ee:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
 10052f0:	f001 fc06 	bl	1006b00 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 10052f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 10052f8:	bf08      	it	eq
 10052fa:	f1b5 3fff 	cmpeq.w	r5, #4294967295
 10052fe:	d008      	beq.n	1005312 <pend_locked+0x2a>
 1005300:	462a      	mov	r2, r5
 1005302:	4623      	mov	r3, r4
 1005304:	f106 0018 	add.w	r0, r6, #24
 1005308:	4902      	ldr	r1, [pc, #8]	; (1005314 <pend_locked+0x2c>)
}
 100530a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100530e:	f000 bae3 	b.w	10058d8 <z_add_timeout>
 1005312:	bd70      	pop	{r4, r5, r6, pc}
 1005314:	01006abd 	.word	0x01006abd

01005318 <k_sched_time_slice_set>:
{
 1005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100531a:	4604      	mov	r4, r0
 100531c:	460d      	mov	r5, r1
	__asm__ volatile(
 100531e:	f04f 0320 	mov.w	r3, #32
 1005322:	f3ef 8711 	mrs	r7, BASEPRI
 1005326:	f383 8812 	msr	BASEPRI_MAX, r3
 100532a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
 100532e:	2600      	movs	r6, #0
 1005330:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 1005334:	f240 30e7 	movw	r0, #999	; 0x3e7
 1005338:	4631      	mov	r1, r6
 100533a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 100533e:	2300      	movs	r3, #0
 1005340:	fbe4 010c 	umlal	r0, r1, r4, ip
 1005344:	f7fa feb8 	bl	10000b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 1005348:	42b4      	cmp	r4, r6
 100534a:	dd02      	ble.n	1005352 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
 100534c:	2802      	cmp	r0, #2
 100534e:	bfb8      	it	lt
 1005350:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 1005352:	4a07      	ldr	r2, [pc, #28]	; (1005370 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
 1005354:	4b07      	ldr	r3, [pc, #28]	; (1005374 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
 1005356:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
 1005358:	4a07      	ldr	r2, [pc, #28]	; (1005378 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
 100535a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
 100535c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
 100535e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
 1005360:	f7ff ff0a 	bl	1005178 <z_reset_time_slice>
	__asm__ volatile(
 1005364:	f387 8811 	msr	BASEPRI, r7
 1005368:	f3bf 8f6f 	isb	sy
}
 100536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 100536e:	bf00      	nop
 1005370:	210008e4 	.word	0x210008e4
 1005374:	210008b8 	.word	0x210008b8
 1005378:	210008e0 	.word	0x210008e0

0100537c <z_time_slice>:
{
 100537c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 100537e:	f04f 0320 	mov.w	r3, #32
 1005382:	f3ef 8511 	mrs	r5, BASEPRI
 1005386:	f383 8812 	msr	BASEPRI_MAX, r3
 100538a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 100538e:	4b17      	ldr	r3, [pc, #92]	; (10053ec <z_time_slice+0x70>)
 1005390:	4a17      	ldr	r2, [pc, #92]	; (10053f0 <z_time_slice+0x74>)
 1005392:	689c      	ldr	r4, [r3, #8]
 1005394:	6811      	ldr	r1, [r2, #0]
 1005396:	428c      	cmp	r4, r1
 1005398:	d107      	bne.n	10053aa <z_time_slice+0x2e>
	z_reset_time_slice(curr);
 100539a:	4620      	mov	r0, r4
 100539c:	f7ff feec 	bl	1005178 <z_reset_time_slice>
	__asm__ volatile(
 10053a0:	f385 8811 	msr	BASEPRI, r5
 10053a4:	f3bf 8f6f 	isb	sy
}
 10053a8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
 10053aa:	2100      	movs	r1, #0
 10053ac:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
 10053ae:	4a11      	ldr	r2, [pc, #68]	; (10053f4 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
 10053b0:	6812      	ldr	r2, [r2, #0]
 10053b2:	b1c2      	cbz	r2, 10053e6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 10053b4:	89e2      	ldrh	r2, [r4, #14]
 10053b6:	2a7f      	cmp	r2, #127	; 0x7f
 10053b8:	d815      	bhi.n	10053e6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 10053ba:	7b62      	ldrb	r2, [r4, #13]
 10053bc:	06d2      	lsls	r2, r2, #27
 10053be:	d112      	bne.n	10053e6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 10053c0:	4a0d      	ldr	r2, [pc, #52]	; (10053f8 <z_time_slice+0x7c>)
 10053c2:	f994 100e 	ldrsb.w	r1, [r4, #14]
 10053c6:	6812      	ldr	r2, [r2, #0]
 10053c8:	4291      	cmp	r1, r2
 10053ca:	db0c      	blt.n	10053e6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 10053cc:	4a0b      	ldr	r2, [pc, #44]	; (10053fc <z_time_slice+0x80>)
 10053ce:	4294      	cmp	r4, r2
 10053d0:	d009      	beq.n	10053e6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 10053d2:	691a      	ldr	r2, [r3, #16]
 10053d4:	4282      	cmp	r2, r0
 10053d6:	dc03      	bgt.n	10053e0 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
 10053d8:	4620      	mov	r0, r4
 10053da:	f7ff feff 	bl	10051dc <move_thread_to_end_of_prio_q>
 10053de:	e7dc      	b.n	100539a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
 10053e0:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
 10053e2:	611a      	str	r2, [r3, #16]
 10053e4:	e7dc      	b.n	10053a0 <z_time_slice+0x24>
 10053e6:	2200      	movs	r2, #0
 10053e8:	e7fb      	b.n	10053e2 <z_time_slice+0x66>
 10053ea:	bf00      	nop
 10053ec:	210008b8 	.word	0x210008b8
 10053f0:	210008dc 	.word	0x210008dc
 10053f4:	210008e4 	.word	0x210008e4
 10053f8:	210008e0 	.word	0x210008e0
 10053fc:	21000608 	.word	0x21000608

01005400 <z_pend_curr>:
{
 1005400:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 1005402:	480c      	ldr	r0, [pc, #48]	; (1005434 <z_pend_curr+0x34>)
 1005404:	4d0c      	ldr	r5, [pc, #48]	; (1005438 <z_pend_curr+0x38>)
 1005406:	6886      	ldr	r6, [r0, #8]
{
 1005408:	460c      	mov	r4, r1
	pending_current = _current;
 100540a:	602e      	str	r6, [r5, #0]
{
 100540c:	4611      	mov	r1, r2
 100540e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
 1005412:	f04f 0620 	mov.w	r6, #32
 1005416:	f3ef 8511 	mrs	r5, BASEPRI
 100541a:	f386 8812 	msr	BASEPRI_MAX, r6
 100541e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
 1005422:	6880      	ldr	r0, [r0, #8]
 1005424:	f7ff ff60 	bl	10052e8 <pend_locked>
	ret = arch_swap(key);
 1005428:	4620      	mov	r0, r4
}
 100542a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 100542e:	f7fd b853 	b.w	10024d8 <arch_swap>
 1005432:	bf00      	nop
 1005434:	210008b8 	.word	0x210008b8
 1005438:	210008dc 	.word	0x210008dc

0100543c <z_set_prio>:
{
 100543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100543e:	4604      	mov	r4, r0
 1005440:	f04f 0320 	mov.w	r3, #32
 1005444:	f3ef 8611 	mrs	r6, BASEPRI
 1005448:	f383 8812 	msr	BASEPRI_MAX, r3
 100544c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 1005450:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
 1005452:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 1005454:	06da      	lsls	r2, r3, #27
 1005456:	d119      	bne.n	100548c <z_set_prio+0x50>
	return node->next != NULL;
 1005458:	6985      	ldr	r5, [r0, #24]
 100545a:	b9bd      	cbnz	r5, 100548c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1005460:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1005462:	f001 fb19 	bl	1006a98 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
 1005466:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
 1005468:	4a16      	ldr	r2, [pc, #88]	; (10054c4 <z_set_prio+0x88>)
 100546a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 100546e:	7343      	strb	r3, [r0, #13]
 1005470:	4613      	mov	r3, r2
				thread->base.prio = prio;
 1005472:	7381      	strb	r1, [r0, #14]
 1005474:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005478:	4298      	cmp	r0, r3
 100547a:	bf18      	it	ne
 100547c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
 100547e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1005480:	b95d      	cbnz	r5, 100549a <z_set_prio+0x5e>
	node->prev = tail;
 1005482:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
 1005486:	6004      	str	r4, [r0, #0]
	list->tail = node;
 1005488:	6214      	str	r4, [r2, #32]
}
 100548a:	e011      	b.n	10054b0 <z_set_prio+0x74>
 100548c:	2000      	movs	r0, #0
			thread->base.prio = prio;
 100548e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
 1005490:	f386 8811 	msr	BASEPRI, r6
 1005494:	f3bf 8f6f 	isb	sy
}
 1005498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
 100549a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
 100549e:	42b9      	cmp	r1, r7
 10054a0:	d00b      	beq.n	10054ba <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 10054a2:	428f      	cmp	r7, r1
 10054a4:	dd09      	ble.n	10054ba <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
 10054a6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
 10054a8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
 10054ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 10054ae:	606c      	str	r4, [r5, #4]
			update_cache(1);
 10054b0:	2001      	movs	r0, #1
 10054b2:	f7ff fe75 	bl	10051a0 <update_cache>
 10054b6:	2001      	movs	r0, #1
 10054b8:	e7ea      	b.n	1005490 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
 10054ba:	42a8      	cmp	r0, r5
 10054bc:	d0e1      	beq.n	1005482 <z_set_prio+0x46>
 10054be:	682d      	ldr	r5, [r5, #0]
 10054c0:	e7de      	b.n	1005480 <z_set_prio+0x44>
 10054c2:	bf00      	nop
 10054c4:	210008b8 	.word	0x210008b8

010054c8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 10054c8:	b949      	cbnz	r1, 10054de <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 10054ca:	f3ef 8005 	mrs	r0, IPSR
 10054ce:	b930      	cbnz	r0, 10054de <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 10054d0:	4b05      	ldr	r3, [pc, #20]	; (10054e8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 10054d2:	699a      	ldr	r2, [r3, #24]
 10054d4:	689b      	ldr	r3, [r3, #8]
 10054d6:	429a      	cmp	r2, r3
 10054d8:	d001      	beq.n	10054de <z_reschedule+0x16>
 10054da:	f7fc bffd 	b.w	10024d8 <arch_swap>
 10054de:	f381 8811 	msr	BASEPRI, r1
 10054e2:	f3bf 8f6f 	isb	sy
}
 10054e6:	4770      	bx	lr
 10054e8:	210008b8 	.word	0x210008b8

010054ec <z_sched_start>:
{
 10054ec:	b510      	push	{r4, lr}
	__asm__ volatile(
 10054ee:	f04f 0220 	mov.w	r2, #32
 10054f2:	f3ef 8411 	mrs	r4, BASEPRI
 10054f6:	f382 8812 	msr	BASEPRI_MAX, r2
 10054fa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 10054fe:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 1005500:	0751      	lsls	r1, r2, #29
 1005502:	d404      	bmi.n	100550e <z_sched_start+0x22>
	__asm__ volatile(
 1005504:	f384 8811 	msr	BASEPRI, r4
 1005508:	f3bf 8f6f 	isb	sy
}
 100550c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 100550e:	f022 0204 	bic.w	r2, r2, #4
 1005512:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 1005514:	f7ff fe9c 	bl	1005250 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 1005518:	4621      	mov	r1, r4
}
 100551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 100551e:	4801      	ldr	r0, [pc, #4]	; (1005524 <z_sched_start+0x38>)
 1005520:	f7ff bfd2 	b.w	10054c8 <z_reschedule>
 1005524:	21000d18 	.word	0x21000d18

01005528 <z_impl_k_thread_suspend>:
{
 1005528:	b570      	push	{r4, r5, r6, lr}
 100552a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 100552c:	3018      	adds	r0, #24
 100552e:	f001 fb78 	bl	1006c22 <z_abort_timeout>
	__asm__ volatile(
 1005532:	f04f 0320 	mov.w	r3, #32
 1005536:	f3ef 8611 	mrs	r6, BASEPRI
 100553a:	f383 8812 	msr	BASEPRI_MAX, r3
 100553e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 1005542:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 1005546:	7b63      	ldrb	r3, [r4, #13]
 1005548:	2a00      	cmp	r2, #0
 100554a:	da05      	bge.n	1005558 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100554c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
 1005550:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
 1005552:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1005554:	f001 faa0 	bl	1006a98 <sys_dlist_remove>
		update_cache(thread == _current);
 1005558:	4d0b      	ldr	r5, [pc, #44]	; (1005588 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 100555a:	7b63      	ldrb	r3, [r4, #13]
 100555c:	68a8      	ldr	r0, [r5, #8]
 100555e:	f043 0310 	orr.w	r3, r3, #16
 1005562:	7363      	strb	r3, [r4, #13]
 1005564:	1b03      	subs	r3, r0, r4
 1005566:	4258      	negs	r0, r3
 1005568:	4158      	adcs	r0, r3
 100556a:	f7ff fe19 	bl	10051a0 <update_cache>
	__asm__ volatile(
 100556e:	f386 8811 	msr	BASEPRI, r6
 1005572:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 1005576:	68ab      	ldr	r3, [r5, #8]
 1005578:	42a3      	cmp	r3, r4
 100557a:	d103      	bne.n	1005584 <z_impl_k_thread_suspend+0x5c>
}
 100557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 1005580:	f001 bb45 	b.w	1006c0e <z_reschedule_unlocked>
}
 1005584:	bd70      	pop	{r4, r5, r6, pc}
 1005586:	bf00      	nop
 1005588:	210008b8 	.word	0x210008b8

0100558c <k_sched_lock>:
	__asm__ volatile(
 100558c:	f04f 0320 	mov.w	r3, #32
 1005590:	f3ef 8111 	mrs	r1, BASEPRI
 1005594:	f383 8812 	msr	BASEPRI_MAX, r3
 1005598:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 100559c:	4b04      	ldr	r3, [pc, #16]	; (10055b0 <k_sched_lock+0x24>)
 100559e:	689a      	ldr	r2, [r3, #8]
 10055a0:	7bd3      	ldrb	r3, [r2, #15]
 10055a2:	3b01      	subs	r3, #1
 10055a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 10055a6:	f381 8811 	msr	BASEPRI, r1
 10055aa:	f3bf 8f6f 	isb	sy
}
 10055ae:	4770      	bx	lr
 10055b0:	210008b8 	.word	0x210008b8

010055b4 <k_sched_unlock>:
{
 10055b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 10055b6:	f04f 0320 	mov.w	r3, #32
 10055ba:	f3ef 8411 	mrs	r4, BASEPRI
 10055be:	f383 8812 	msr	BASEPRI_MAX, r3
 10055c2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 10055c6:	4b08      	ldr	r3, [pc, #32]	; (10055e8 <k_sched_unlock+0x34>)
		update_cache(0);
 10055c8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 10055ca:	689a      	ldr	r2, [r3, #8]
 10055cc:	7bd3      	ldrb	r3, [r2, #15]
 10055ce:	3301      	adds	r3, #1
 10055d0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 10055d2:	f7ff fde5 	bl	10051a0 <update_cache>
	__asm__ volatile(
 10055d6:	f384 8811 	msr	BASEPRI, r4
 10055da:	f3bf 8f6f 	isb	sy
}
 10055de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 10055e2:	f001 bb14 	b.w	1006c0e <z_reschedule_unlocked>
 10055e6:	bf00      	nop
 10055e8:	210008b8 	.word	0x210008b8

010055ec <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 10055ec:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
 10055ee:	4b04      	ldr	r3, [pc, #16]	; (1005600 <z_sched_init+0x14>)
 10055f0:	4608      	mov	r0, r1
 10055f2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
 10055f6:	e9c3 2207 	strd	r2, r2, [r3, #28]
 10055fa:	f7ff be8d 	b.w	1005318 <k_sched_time_slice_set>
 10055fe:	bf00      	nop
 1005600:	210008b8 	.word	0x210008b8

01005604 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
 1005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 1005606:	f04f 0320 	mov.w	r3, #32
 100560a:	f3ef 8511 	mrs	r5, BASEPRI
 100560e:	f383 8812 	msr	BASEPRI_MAX, r3
 1005612:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 1005616:	4919      	ldr	r1, [pc, #100]	; (100567c <z_impl_k_yield+0x78>)
 1005618:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 100561a:	7b43      	ldrb	r3, [r0, #13]
 100561c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 1005620:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 1005622:	f001 fa39 	bl	1006a98 <sys_dlist_remove>
	return list->head == list;
 1005626:	4608      	mov	r0, r1
	}
	queue_thread(_current);
 1005628:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 100562a:	7b5a      	ldrb	r2, [r3, #13]
 100562c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 1005630:	735a      	strb	r2, [r3, #13]
 1005632:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
 1005636:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005638:	4282      	cmp	r2, r0
 100563a:	bf08      	it	eq
 100563c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 100563e:	b922      	cbnz	r2, 100564a <z_impl_k_yield+0x46>
	node->prev = tail;
 1005640:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
 1005644:	6023      	str	r3, [r4, #0]
	list->tail = node;
 1005646:	620b      	str	r3, [r1, #32]
}
 1005648:	e00c      	b.n	1005664 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
 100564a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
 100564e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
 1005652:	42be      	cmp	r6, r7
 1005654:	d00e      	beq.n	1005674 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1005656:	42b7      	cmp	r7, r6
 1005658:	dd0c      	ble.n	1005674 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
 100565a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 100565c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
 1005660:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 1005662:	6053      	str	r3, [r2, #4]
	update_cache(1);
 1005664:	2001      	movs	r0, #1
 1005666:	f7ff fd9b 	bl	10051a0 <update_cache>
 100566a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
 100566c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 1005670:	f7fc bf32 	b.w	10024d8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 1005674:	42a2      	cmp	r2, r4
 1005676:	d0e3      	beq.n	1005640 <z_impl_k_yield+0x3c>
 1005678:	6812      	ldr	r2, [r2, #0]
 100567a:	e7e0      	b.n	100563e <z_impl_k_yield+0x3a>
 100567c:	210008b8 	.word	0x210008b8

01005680 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 1005680:	ea50 0301 	orrs.w	r3, r0, r1
{
 1005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005688:	4605      	mov	r5, r0
 100568a:	460e      	mov	r6, r1
	if (ticks == 0) {
 100568c:	d103      	bne.n	1005696 <z_tick_sleep+0x16>
	z_impl_k_yield();
 100568e:	f7ff ffb9 	bl	1005604 <z_impl_k_yield>
		k_yield();
		return 0;
 1005692:	2000      	movs	r0, #0
 1005694:	e02c      	b.n	10056f0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 1005696:	1c83      	adds	r3, r0, #2
 1005698:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 100569c:	db2a      	blt.n	10056f4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 100569e:	f001 faf2 	bl	1006c86 <sys_clock_tick_get_32>
 10056a2:	182c      	adds	r4, r5, r0
 10056a4:	f04f 0320 	mov.w	r3, #32
 10056a8:	f3ef 8811 	mrs	r8, BASEPRI
 10056ac:	f383 8812 	msr	BASEPRI_MAX, r3
 10056b0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 10056b4:	4f11      	ldr	r7, [pc, #68]	; (10056fc <z_tick_sleep+0x7c>)
 10056b6:	4b12      	ldr	r3, [pc, #72]	; (1005700 <z_tick_sleep+0x80>)
 10056b8:	68b8      	ldr	r0, [r7, #8]
 10056ba:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 10056bc:	f7ff fdfc 	bl	10052b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 10056c0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 10056c2:	4910      	ldr	r1, [pc, #64]	; (1005704 <z_tick_sleep+0x84>)
 10056c4:	462a      	mov	r2, r5
 10056c6:	4633      	mov	r3, r6
 10056c8:	3018      	adds	r0, #24
 10056ca:	f000 f905 	bl	10058d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 10056ce:	68ba      	ldr	r2, [r7, #8]
 10056d0:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
 10056d2:	7b53      	ldrb	r3, [r2, #13]
 10056d4:	f043 0310 	orr.w	r3, r3, #16
 10056d8:	7353      	strb	r3, [r2, #13]
 10056da:	f7fc fefd 	bl	10024d8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 10056de:	f001 fad2 	bl	1006c86 <sys_clock_tick_get_32>
 10056e2:	1a20      	subs	r0, r4, r0
 10056e4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 10056e8:	2801      	cmp	r0, #1
 10056ea:	f173 0300 	sbcs.w	r3, r3, #0
 10056ee:	dbd0      	blt.n	1005692 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
 10056f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 10056f4:	f06f 0401 	mvn.w	r4, #1
 10056f8:	1a24      	subs	r4, r4, r0
 10056fa:	e7d3      	b.n	10056a4 <z_tick_sleep+0x24>
 10056fc:	210008b8 	.word	0x210008b8
 1005700:	210008dc 	.word	0x210008dc
 1005704:	01006abd 	.word	0x01006abd

01005708 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1005708:	f1b1 3fff 	cmp.w	r1, #4294967295
 100570c:	bf08      	it	eq
 100570e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
 1005712:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 1005714:	d106      	bne.n	1005724 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 1005716:	4b08      	ldr	r3, [pc, #32]	; (1005738 <z_impl_k_sleep+0x30>)
 1005718:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 100571a:	f7ff ff05 	bl	1005528 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
 100571e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 1005722:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
 1005724:	f7ff ffac 	bl	1005680 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
 1005728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 100572c:	fb80 0303 	smull	r0, r3, r0, r3
 1005730:	0bc0      	lsrs	r0, r0, #15
 1005732:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
 1005736:	e7f4      	b.n	1005722 <z_impl_k_sleep+0x1a>
 1005738:	210008b8 	.word	0x210008b8

0100573c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 100573c:	4b01      	ldr	r3, [pc, #4]	; (1005744 <z_impl_z_current_get+0x8>)
 100573e:	6898      	ldr	r0, [r3, #8]
 1005740:	4770      	bx	lr
 1005742:	bf00      	nop
 1005744:	210008b8 	.word	0x210008b8

01005748 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 1005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 100574c:	4604      	mov	r4, r0
 100574e:	f04f 0320 	mov.w	r3, #32
 1005752:	f3ef 8611 	mrs	r6, BASEPRI
 1005756:	f383 8812 	msr	BASEPRI_MAX, r3
 100575a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
 100575e:	7b03      	ldrb	r3, [r0, #12]
 1005760:	07d9      	lsls	r1, r3, #31
 1005762:	d50b      	bpl.n	100577c <z_thread_abort+0x34>
	__asm__ volatile(
 1005764:	f386 8811 	msr	BASEPRI, r6
 1005768:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
 100576c:	4040      	eors	r0, r0
 100576e:	f380 8811 	msr	BASEPRI, r0
 1005772:	f04f 0004 	mov.w	r0, #4
 1005776:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 1005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 100577c:	7b43      	ldrb	r3, [r0, #13]
 100577e:	071a      	lsls	r2, r3, #28
 1005780:	d504      	bpl.n	100578c <z_thread_abort+0x44>
 1005782:	f386 8811 	msr	BASEPRI, r6
 1005786:	f3bf 8f6f 	isb	sy
 100578a:	e7f5      	b.n	1005778 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 100578c:	f023 0220 	bic.w	r2, r3, #32
 1005790:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
 1005794:	09d2      	lsrs	r2, r2, #7
 1005796:	d120      	bne.n	10057da <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 1005798:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
 100579a:	68a3      	ldr	r3, [r4, #8]
 100579c:	b113      	cbz	r3, 10057a4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
 100579e:	4620      	mov	r0, r4
 10057a0:	f001 f982 	bl	1006aa8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
 10057a4:	f104 0018 	add.w	r0, r4, #24
 10057a8:	f001 fa3b 	bl	1006c22 <z_abort_timeout>
 10057ac:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 10057b0:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
 10057b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10057b6:	42bd      	cmp	r5, r7
 10057b8:	d000      	beq.n	10057bc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 10057ba:	b9b5      	cbnz	r5, 10057ea <z_thread_abort+0xa2>
		update_cache(1);
 10057bc:	2001      	movs	r0, #1
 10057be:	f7ff fcef 	bl	10051a0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 10057c2:	4b10      	ldr	r3, [pc, #64]	; (1005804 <z_thread_abort+0xbc>)
 10057c4:	689b      	ldr	r3, [r3, #8]
 10057c6:	42a3      	cmp	r3, r4
 10057c8:	d1db      	bne.n	1005782 <z_thread_abort+0x3a>
 10057ca:	f3ef 8305 	mrs	r3, IPSR
 10057ce:	2b00      	cmp	r3, #0
 10057d0:	d1d7      	bne.n	1005782 <z_thread_abort+0x3a>
 10057d2:	4630      	mov	r0, r6
 10057d4:	f7fc fe80 	bl	10024d8 <arch_swap>
	return ret;
 10057d8:	e7d3      	b.n	1005782 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 10057da:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 10057de:	f043 0308 	orr.w	r3, r3, #8
 10057e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
 10057e4:	f001 f958 	bl	1006a98 <sys_dlist_remove>
}
 10057e8:	e7d7      	b.n	100579a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
 10057ea:	4628      	mov	r0, r5
 10057ec:	f001 f95c 	bl	1006aa8 <unpend_thread_no_timeout>
 10057f0:	f105 0018 	add.w	r0, r5, #24
 10057f4:	f001 fa15 	bl	1006c22 <z_abort_timeout>
		ready_thread(thread);
 10057f8:	4628      	mov	r0, r5
 10057fa:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 10057fe:	f7ff fd27 	bl	1005250 <ready_thread>
 1005802:	e7d7      	b.n	10057b4 <z_thread_abort+0x6c>
 1005804:	210008b8 	.word	0x210008b8

01005808 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 1005808:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
 100580a:	4806      	ldr	r0, [pc, #24]	; (1005824 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
 100580c:	4a06      	ldr	r2, [pc, #24]	; (1005828 <z_data_copy+0x20>)
 100580e:	4907      	ldr	r1, [pc, #28]	; (100582c <z_data_copy+0x24>)
 1005810:	1a12      	subs	r2, r2, r0
 1005812:	f001 f914 	bl	1006a3e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 1005816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
 100581a:	4a05      	ldr	r2, [pc, #20]	; (1005830 <z_data_copy+0x28>)
 100581c:	4905      	ldr	r1, [pc, #20]	; (1005834 <z_data_copy+0x2c>)
 100581e:	4806      	ldr	r0, [pc, #24]	; (1005838 <z_data_copy+0x30>)
 1005820:	f001 b90d 	b.w	1006a3e <z_early_memcpy>
 1005824:	21000000 	.word	0x21000000
 1005828:	21000124 	.word	0x21000124
 100582c:	010079d4 	.word	0x010079d4
 1005830:	00000000 	.word	0x00000000
 1005834:	010079d4 	.word	0x010079d4
 1005838:	21000000 	.word	0x21000000

0100583c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 100583c:	4b03      	ldr	r3, [pc, #12]	; (100584c <elapsed+0x10>)
 100583e:	681b      	ldr	r3, [r3, #0]
 1005840:	b90b      	cbnz	r3, 1005846 <elapsed+0xa>
 1005842:	f7fe bb15 	b.w	1003e70 <sys_clock_elapsed>
}
 1005846:	2000      	movs	r0, #0
 1005848:	4770      	bx	lr
 100584a:	bf00      	nop
 100584c:	210008e8 	.word	0x210008e8

01005850 <next_timeout>:

static int32_t next_timeout(void)
{
 1005850:	b510      	push	{r4, lr}
	return list->head == list;
 1005852:	4b11      	ldr	r3, [pc, #68]	; (1005898 <next_timeout+0x48>)
 1005854:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005856:	429c      	cmp	r4, r3
 1005858:	d10a      	bne.n	1005870 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 100585a:	f7ff ffef 	bl	100583c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
 100585e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 1005862:	4b0e      	ldr	r3, [pc, #56]	; (100589c <next_timeout+0x4c>)
 1005864:	691b      	ldr	r3, [r3, #16]
 1005866:	b113      	cbz	r3, 100586e <next_timeout+0x1e>
 1005868:	4298      	cmp	r0, r3
 100586a:	bfa8      	it	ge
 100586c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 100586e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
 1005870:	f7ff ffe4 	bl	100583c <elapsed>
	if ((to == NULL) ||
 1005874:	2c00      	cmp	r4, #0
 1005876:	d0f2      	beq.n	100585e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 1005878:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 100587c:	1a1b      	subs	r3, r3, r0
 100587e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
 1005882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 1005886:	f172 0100 	sbcs.w	r1, r2, #0
 100588a:	dae8      	bge.n	100585e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
 100588c:	2a00      	cmp	r2, #0
 100588e:	bfac      	ite	ge
 1005890:	4618      	movge	r0, r3
 1005892:	2000      	movlt	r0, #0
 1005894:	e7e5      	b.n	1005862 <next_timeout+0x12>
 1005896:	bf00      	nop
 1005898:	210000b4 	.word	0x210000b4
 100589c:	210008b8 	.word	0x210008b8

010058a0 <remove_timeout>:
{
 10058a0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 10058a2:	b170      	cbz	r0, 10058c2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 10058a4:	4b0b      	ldr	r3, [pc, #44]	; (10058d4 <remove_timeout+0x34>)
 10058a6:	685b      	ldr	r3, [r3, #4]
 10058a8:	4298      	cmp	r0, r3
 10058aa:	d00a      	beq.n	10058c2 <remove_timeout+0x22>
 10058ac:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
 10058ae:	b143      	cbz	r3, 10058c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 10058b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 10058b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 10058b8:	1912      	adds	r2, r2, r4
 10058ba:	eb41 0105 	adc.w	r1, r1, r5
 10058be:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 10058c2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
 10058c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 10058c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 10058ca:	2300      	movs	r3, #0
	node->prev = NULL;
 10058cc:	e9c0 3300 	strd	r3, r3, [r0]
}
 10058d0:	bd30      	pop	{r4, r5, pc}
 10058d2:	bf00      	nop
 10058d4:	210000b4 	.word	0x210000b4

010058d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 10058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 10058dc:	bf08      	it	eq
 10058de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 10058e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 10058e4:	4604      	mov	r4, r0
 10058e6:	461d      	mov	r5, r3
 10058e8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 10058ea:	d061      	beq.n	10059b0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 10058ec:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
 10058ee:	f04f 0320 	mov.w	r3, #32
 10058f2:	f3ef 8711 	mrs	r7, BASEPRI
 10058f6:	f383 8812 	msr	BASEPRI_MAX, r3
 10058fa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 10058fe:	3201      	adds	r2, #1
 1005900:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 1005904:	da24      	bge.n	1005950 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 1005906:	f06f 0301 	mvn.w	r3, #1
 100590a:	492f      	ldr	r1, [pc, #188]	; (10059c8 <z_add_timeout+0xf0>)
 100590c:	e9d1 2000 	ldrd	r2, r0, [r1]
 1005910:	1a9b      	subs	r3, r3, r2
 1005912:	f04f 32ff 	mov.w	r2, #4294967295
 1005916:	eb62 0000 	sbc.w	r0, r2, r0
 100591a:	1b9e      	subs	r6, r3, r6
 100591c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
 1005920:	2e01      	cmp	r6, #1
 1005922:	f170 0300 	sbcs.w	r3, r0, #0
 1005926:	da01      	bge.n	100592c <z_add_timeout+0x54>
 1005928:	2601      	movs	r6, #1
 100592a:	2000      	movs	r0, #0
 100592c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
 1005930:	4e26      	ldr	r6, [pc, #152]	; (10059cc <z_add_timeout+0xf4>)
 1005932:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
 1005936:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005938:	45b4      	cmp	ip, r6
 100593a:	bf08      	it	eq
 100593c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 1005940:	f1bc 0f00 	cmp.w	ip, #0
 1005944:	d10d      	bne.n	1005962 <z_add_timeout+0x8a>
	node->prev = tail;
 1005946:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
 100594a:	602c      	str	r4, [r5, #0]
	list->tail = node;
 100594c:	6074      	str	r4, [r6, #4]
}
 100594e:	e01c      	b.n	100598a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
 1005950:	f7ff ff74 	bl	100583c <elapsed>
 1005954:	3601      	adds	r6, #1
 1005956:	f145 0500 	adc.w	r5, r5, #0
 100595a:	1836      	adds	r6, r6, r0
 100595c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 1005960:	e7e4      	b.n	100592c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
 1005962:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
 1005966:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 100596a:	4293      	cmp	r3, r2
 100596c:	eb71 0e00 	sbcs.w	lr, r1, r0
 1005970:	da1f      	bge.n	10059b2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
 1005972:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
 1005974:	f8dc 3004 	ldr.w	r3, [ip, #4]
 1005978:	eb60 0001 	sbc.w	r0, r0, r1
 100597c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
 1005980:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
 1005984:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 1005986:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
 100598a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 100598c:	42b3      	cmp	r3, r6
 100598e:	d00b      	beq.n	10059a8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 1005990:	429c      	cmp	r4, r3
 1005992:	d109      	bne.n	10059a8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 1005994:	f7ff ff5c 	bl	1005850 <next_timeout>

			if (next_time == 0 ||
 1005998:	b118      	cbz	r0, 10059a2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
 100599a:	4b0d      	ldr	r3, [pc, #52]	; (10059d0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
 100599c:	691b      	ldr	r3, [r3, #16]
 100599e:	4283      	cmp	r3, r0
 10059a0:	d002      	beq.n	10059a8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
 10059a2:	2100      	movs	r1, #0
 10059a4:	f7fe fa34 	bl	1003e10 <sys_clock_set_timeout>
	__asm__ volatile(
 10059a8:	f387 8811 	msr	BASEPRI, r7
 10059ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 10059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
 10059b2:	1a9b      	subs	r3, r3, r2
 10059b4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 10059b8:	45ac      	cmp	ip, r5
 10059ba:	e9c4 3104 	strd	r3, r1, [r4, #16]
 10059be:	d0c2      	beq.n	1005946 <z_add_timeout+0x6e>
 10059c0:	f8dc c000 	ldr.w	ip, [ip]
 10059c4:	e7bc      	b.n	1005940 <z_add_timeout+0x68>
 10059c6:	bf00      	nop
 10059c8:	21000708 	.word	0x21000708
 10059cc:	210000b4 	.word	0x210000b4
 10059d0:	210008b8 	.word	0x210008b8

010059d4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 10059d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10059d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 10059da:	f7ff fccf 	bl	100537c <z_time_slice>
	__asm__ volatile(
 10059de:	f04f 0320 	mov.w	r3, #32
 10059e2:	f3ef 8611 	mrs	r6, BASEPRI
 10059e6:	f383 8812 	msr	BASEPRI_MAX, r3
 10059ea:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
 10059ee:	4f24      	ldr	r7, [pc, #144]	; (1005a80 <sys_clock_announce+0xac>)
	return list->head == list;
 10059f0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1005a84 <sys_clock_announce+0xb0>
 10059f4:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 10059f8:	4a23      	ldr	r2, [pc, #140]	; (1005a88 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
 10059fa:	4540      	cmp	r0, r8
	announce_remaining = ticks;
 10059fc:	603c      	str	r4, [r7, #0]
	return list->head == list;
 10059fe:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
 1005a02:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005a06:	d00b      	beq.n	1005a20 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
 1005a08:	b150      	cbz	r0, 1005a20 <sys_clock_announce+0x4c>
 1005a0a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
 1005a0e:	42ac      	cmp	r4, r5
 1005a10:	eb71 090c 	sbcs.w	r9, r1, ip
 1005a14:	da17      	bge.n	1005a46 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 1005a16:	1b2d      	subs	r5, r5, r4
 1005a18:	eb6c 0c01 	sbc.w	ip, ip, r1
 1005a1c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
 1005a20:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
 1005a22:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 1005a26:	eb4e 0101 	adc.w	r1, lr, r1
 1005a2a:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
 1005a2e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
 1005a30:	f7ff ff0e 	bl	1005850 <next_timeout>
 1005a34:	4621      	mov	r1, r4
 1005a36:	f7fe f9eb 	bl	1003e10 <sys_clock_set_timeout>
	__asm__ volatile(
 1005a3a:	f386 8811 	msr	BASEPRI, r6
 1005a3e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 1005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
 1005a46:	18eb      	adds	r3, r5, r3
 1005a48:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
 1005a4c:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
 1005a50:	2200      	movs	r2, #0
 1005a52:	2300      	movs	r3, #0
 1005a54:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
 1005a58:	f7ff ff22 	bl	10058a0 <remove_timeout>
 1005a5c:	f386 8811 	msr	BASEPRI, r6
 1005a60:	f3bf 8f6f 	isb	sy
		t->fn(t);
 1005a64:	6883      	ldr	r3, [r0, #8]
 1005a66:	4798      	blx	r3
	__asm__ volatile(
 1005a68:	f04f 0320 	mov.w	r3, #32
 1005a6c:	f3ef 8611 	mrs	r6, BASEPRI
 1005a70:	f383 8812 	msr	BASEPRI_MAX, r3
 1005a74:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
 1005a78:	683c      	ldr	r4, [r7, #0]
 1005a7a:	1b64      	subs	r4, r4, r5
 1005a7c:	e7ba      	b.n	10059f4 <sys_clock_announce+0x20>
 1005a7e:	bf00      	nop
 1005a80:	210008e8 	.word	0x210008e8
 1005a84:	210000b4 	.word	0x210000b4
 1005a88:	21000708 	.word	0x21000708

01005a8c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 1005a8c:	b510      	push	{r4, lr}
 1005a8e:	f04f 0320 	mov.w	r3, #32
 1005a92:	f3ef 8411 	mrs	r4, BASEPRI
 1005a96:	f383 8812 	msr	BASEPRI_MAX, r3
 1005a9a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
 1005a9e:	f7ff fecd 	bl	100583c <elapsed>
 1005aa2:	4603      	mov	r3, r0
 1005aa4:	4a05      	ldr	r2, [pc, #20]	; (1005abc <sys_clock_tick_get+0x30>)
 1005aa6:	e9d2 0100 	ldrd	r0, r1, [r2]
 1005aaa:	1818      	adds	r0, r3, r0
 1005aac:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
 1005ab0:	f384 8811 	msr	BASEPRI, r4
 1005ab4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 1005ab8:	bd10      	pop	{r4, pc}
 1005aba:	bf00      	nop
 1005abc:	21000708 	.word	0x21000708

01005ac0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 1005ac0:	b570      	push	{r4, r5, r6, lr}
 1005ac2:	4604      	mov	r4, r0
	__asm__ volatile(
 1005ac4:	f04f 0320 	mov.w	r3, #32
 1005ac8:	f3ef 8511 	mrs	r5, BASEPRI
 1005acc:	f383 8812 	msr	BASEPRI_MAX, r3
 1005ad0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 1005ad4:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 1005ad8:	3301      	adds	r3, #1
 1005ada:	f142 0200 	adc.w	r2, r2, #0
 1005ade:	2b02      	cmp	r3, #2
 1005ae0:	f172 0200 	sbcs.w	r2, r2, #0
 1005ae4:	d322      	bcc.n	1005b2c <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
 1005ae6:	f001 f8d2 	bl	1006c8e <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 1005aea:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 1005aee:	3001      	adds	r0, #1
 1005af0:	f141 0100 	adc.w	r1, r1, #0
 1005af4:	18c0      	adds	r0, r0, r3
 1005af6:	eb41 0102 	adc.w	r1, r1, r2
 1005afa:	2801      	cmp	r0, #1
 1005afc:	f171 0100 	sbcs.w	r1, r1, #0
 1005b00:	db32      	blt.n	1005b68 <z_timer_expiration_handler+0xa8>
 1005b02:	f001 f8c4 	bl	1006c8e <z_impl_k_uptime_ticks>
 1005b06:	3001      	adds	r0, #1
 1005b08:	f141 0300 	adc.w	r3, r1, #0
 1005b0c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 1005b10:	1880      	adds	r0, r0, r2
 1005b12:	f06f 0201 	mvn.w	r2, #1
 1005b16:	eb43 0301 	adc.w	r3, r3, r1
 1005b1a:	f04f 31ff 	mov.w	r1, #4294967295
 1005b1e:	1a12      	subs	r2, r2, r0
 1005b20:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1005b24:	4620      	mov	r0, r4
 1005b26:	491a      	ldr	r1, [pc, #104]	; (1005b90 <z_timer_expiration_handler+0xd0>)
 1005b28:	f7ff fed6 	bl	10058d8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
 1005b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 1005b2e:	3301      	adds	r3, #1
 1005b30:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 1005b32:	6a23      	ldr	r3, [r4, #32]
 1005b34:	b173      	cbz	r3, 1005b54 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
 1005b36:	f385 8811 	msr	BASEPRI, r5
 1005b3a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 1005b3e:	4620      	mov	r0, r4
 1005b40:	6a23      	ldr	r3, [r4, #32]
 1005b42:	4798      	blx	r3
	__asm__ volatile(
 1005b44:	f04f 0320 	mov.w	r3, #32
 1005b48:	f3ef 8511 	mrs	r5, BASEPRI
 1005b4c:	f383 8812 	msr	BASEPRI_MAX, r3
 1005b50:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1005b54:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1005b58:	42a6      	cmp	r6, r4
 1005b5a:	d000      	beq.n	1005b5e <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 1005b5c:	b94e      	cbnz	r6, 1005b72 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
 1005b5e:	f385 8811 	msr	BASEPRI, r5
 1005b62:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
 1005b66:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
 1005b68:	f06f 0201 	mvn.w	r2, #1
 1005b6c:	f04f 33ff 	mov.w	r3, #4294967295
 1005b70:	e7d8      	b.n	1005b24 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
 1005b72:	4630      	mov	r0, r6
 1005b74:	f000 fffc 	bl	1006b70 <z_unpend_thread_no_timeout>
 1005b78:	2300      	movs	r3, #0
 1005b7a:	67b3      	str	r3, [r6, #120]	; 0x78
 1005b7c:	f385 8811 	msr	BASEPRI, r5
 1005b80:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
 1005b84:	4630      	mov	r0, r6
}
 1005b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 1005b8a:	f000 bfe1 	b.w	1006b50 <z_ready_thread>
 1005b8e:	bf00      	nop
 1005b90:	01005ac1 	.word	0x01005ac1

01005b94 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 1005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 1005b98:	bf08      	it	eq
 1005b9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
 1005b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1005ba2:	4619      	mov	r1, r3
 1005ba4:	4605      	mov	r5, r0
 1005ba6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
 1005baa:	4614      	mov	r4, r2
 1005bac:	4691      	mov	r9, r2
 1005bae:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 1005bb0:	d037      	beq.n	1005c22 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 1005bb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 1005bb6:	bf08      	it	eq
 1005bb8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
 1005bbc:	4637      	mov	r7, r6
 1005bbe:	4682      	mov	sl, r0
 1005bc0:	d011      	beq.n	1005be6 <z_impl_k_timer_start+0x52>
 1005bc2:	ea50 0306 	orrs.w	r3, r0, r6
 1005bc6:	d00e      	beq.n	1005be6 <z_impl_k_timer_start+0x52>
 1005bc8:	1c72      	adds	r2, r6, #1
 1005bca:	f170 33ff 	sbcs.w	r3, r0, #4294967295
 1005bce:	db0a      	blt.n	1005be6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
 1005bd0:	2e02      	cmp	r6, #2
 1005bd2:	4684      	mov	ip, r0
 1005bd4:	f170 0000 	sbcs.w	r0, r0, #0
 1005bd8:	bfbc      	itt	lt
 1005bda:	2702      	movlt	r7, #2
 1005bdc:	f04f 0c00 	movlt.w	ip, #0
 1005be0:	3f01      	subs	r7, #1
 1005be2:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 1005be6:	1c63      	adds	r3, r4, #1
 1005be8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
 1005bec:	db0a      	blt.n	1005c04 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
 1005bee:	2c01      	cmp	r4, #1
 1005bf0:	f171 0300 	sbcs.w	r3, r1, #0
 1005bf4:	4622      	mov	r2, r4
 1005bf6:	bfbc      	itt	lt
 1005bf8:	2201      	movlt	r2, #1
 1005bfa:	2100      	movlt	r1, #0
 1005bfc:	f112 39ff 	adds.w	r9, r2, #4294967295
 1005c00:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
 1005c04:	4628      	mov	r0, r5
 1005c06:	f001 f80c 	bl	1006c22 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 1005c0a:	2300      	movs	r3, #0
	timer->period = period;
 1005c0c:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
 1005c10:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1005c12:	464a      	mov	r2, r9
 1005c14:	4643      	mov	r3, r8
 1005c16:	4628      	mov	r0, r5
		     duration);
}
 1005c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 1005c1c:	4902      	ldr	r1, [pc, #8]	; (1005c28 <z_impl_k_timer_start+0x94>)
 1005c1e:	f7ff be5b 	b.w	10058d8 <z_add_timeout>
}
 1005c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 1005c26:	bf00      	nop
 1005c28:	01005ac1 	.word	0x01005ac1

01005c2c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
 1005c2c:	4801      	ldr	r0, [pc, #4]	; (1005c34 <boot_banner+0x8>)
 1005c2e:	f000 b86e 	b.w	1005d0e <printk>
 1005c32:	bf00      	nop
 1005c34:	01007991 	.word	0x01007991

01005c38 <cbpprintf_external>:
{
 1005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 1005c3c:	4606      	mov	r6, r0
 1005c3e:	460d      	mov	r5, r1
 1005c40:	4617      	mov	r7, r2
	if (buf == NULL) {
 1005c42:	4698      	mov	r8, r3
 1005c44:	b32b      	cbz	r3, 1005c92 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
 1005c46:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
 1005c4a:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
 1005c4e:	f893 9001 	ldrb.w	r9, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
 1005c52:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
 1005c54:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 1005c56:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
 1005c5a:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
 1005c5e:	441c      	add	r4, r3
 1005c60:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
 1005c62:	45ca      	cmp	sl, r9
 1005c64:	d309      	bcc.n	1005c7a <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
 1005c66:	4639      	mov	r1, r7
 1005c68:	4630      	mov	r0, r6
 1005c6a:	46ac      	mov	ip, r5
 1005c6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 1005c70:	f108 0308 	add.w	r3, r8, #8
}
 1005c74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
 1005c78:	4760      	bx	ip
		s_idx = *(uint8_t *)s++;
 1005c7a:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
 1005c7e:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
 1005c82:	4620      	mov	r0, r4
		*ps = s;
 1005c84:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
 1005c88:	f000 fc87 	bl	100659a <strlen>
 1005c8c:	3001      	adds	r0, #1
 1005c8e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 1005c90:	e7e7      	b.n	1005c62 <cbpprintf_external+0x2a>
}
 1005c92:	f06f 0015 	mvn.w	r0, #21
 1005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

01005c9a <is_ptr>:
{
 1005c9a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
 1005c9c:	2500      	movs	r5, #0
{
 1005c9e:	4602      	mov	r2, r0
	bool mod = false;
 1005ca0:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
 1005ca2:	4614      	mov	r4, r2
 1005ca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 1005ca8:	b90b      	cbnz	r3, 1005cae <is_ptr+0x14>
					return false;
 1005caa:	4618      	mov	r0, r3
 1005cac:	e009      	b.n	1005cc2 <is_ptr+0x28>
		if (mod) {
 1005cae:	b198      	cbz	r0, 1005cd8 <is_ptr+0x3e>
			if (cnt == n) {
 1005cb0:	428d      	cmp	r5, r1
 1005cb2:	d107      	bne.n	1005cc4 <is_ptr+0x2a>
				if (c == 'p') {
 1005cb4:	2b70      	cmp	r3, #112	; 0x70
 1005cb6:	d004      	beq.n	1005cc2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
 1005cb8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 1005cbc:	2a3a      	cmp	r2, #58	; 0x3a
 1005cbe:	d80b      	bhi.n	1005cd8 <is_ptr+0x3e>
					return false;
 1005cc0:	2000      	movs	r0, #0
}
 1005cc2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
 1005cc4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
 1005cc8:	2e3a      	cmp	r6, #58	; 0x3a
 1005cca:	d805      	bhi.n	1005cd8 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
 1005ccc:	7853      	ldrb	r3, [r2, #1]
				cnt++;
 1005cce:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
 1005cd0:	1c94      	adds	r4, r2, #2
 1005cd2:	2b00      	cmp	r3, #0
 1005cd4:	d0e9      	beq.n	1005caa <is_ptr+0x10>
 1005cd6:	2000      	movs	r0, #0
		if (c == '%') {
 1005cd8:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
 1005cda:	4622      	mov	r2, r4
			mod = !mod;
 1005cdc:	bf08      	it	eq
 1005cde:	f080 0001 	eoreq.w	r0, r0, #1
 1005ce2:	e7de      	b.n	1005ca2 <is_ptr+0x8>

01005ce4 <arch_printk_char_out>:
}
 1005ce4:	2000      	movs	r0, #0
 1005ce6:	4770      	bx	lr

01005ce8 <str_out>:
{
 1005ce8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 1005cea:	688a      	ldr	r2, [r1, #8]
 1005cec:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
 1005cee:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 1005cf0:	b114      	cbz	r4, 1005cf8 <str_out+0x10>
 1005cf2:	684b      	ldr	r3, [r1, #4]
 1005cf4:	4293      	cmp	r3, r2
 1005cf6:	dc01      	bgt.n	1005cfc <str_out+0x14>
		ctx->count++;
 1005cf8:	608d      	str	r5, [r1, #8]
}
 1005cfa:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
 1005cfc:	3b01      	subs	r3, #1
 1005cfe:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
 1005d00:	bf08      	it	eq
 1005d02:	2200      	moveq	r2, #0
 1005d04:	608d      	str	r5, [r1, #8]
 1005d06:	bf0c      	ite	eq
 1005d08:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
 1005d0a:	54a0      	strbne	r0, [r4, r2]
 1005d0c:	e7f5      	b.n	1005cfa <str_out+0x12>

01005d0e <printk>:
{
 1005d0e:	b40f      	push	{r0, r1, r2, r3}
 1005d10:	b507      	push	{r0, r1, r2, lr}
 1005d12:	a904      	add	r1, sp, #16
 1005d14:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 1005d18:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
 1005d1a:	f000 fb6b 	bl	10063f4 <z_log_vprintk>
}
 1005d1e:	b003      	add	sp, #12
 1005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 1005d24:	b004      	add	sp, #16
 1005d26:	4770      	bx	lr

01005d28 <snprintk>:
{
 1005d28:	b40c      	push	{r2, r3}
 1005d2a:	b507      	push	{r0, r1, r2, lr}
 1005d2c:	ab04      	add	r3, sp, #16
 1005d2e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 1005d32:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 1005d34:	f7fb f83e 	bl	1000db4 <vsnprintk>
}
 1005d38:	b003      	add	sp, #12
 1005d3a:	f85d eb04 	ldr.w	lr, [sp], #4
 1005d3e:	b002      	add	sp, #8
 1005d40:	4770      	bx	lr

01005d42 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 1005d42:	4604      	mov	r4, r0
 1005d44:	b508      	push	{r3, lr}
 1005d46:	4608      	mov	r0, r1
 1005d48:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 1005d4a:	461a      	mov	r2, r3
 1005d4c:	47a0      	blx	r4
	return z_impl_z_current_get();
 1005d4e:	f7ff fcf5 	bl	100573c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 1005d52:	f7fc ffaf 	bl	1002cb4 <z_impl_k_thread_abort>

01005d56 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
 1005d56:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
 1005d58:	f013 0307 	ands.w	r3, r3, #7
 1005d5c:	d105      	bne.n	1005d6a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
 1005d5e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
 1005d60:	2b00      	cmp	r3, #0
 1005d62:	bf0c      	ite	eq
 1005d64:	2000      	moveq	r0, #0
 1005d66:	2003      	movne	r0, #3
 1005d68:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
 1005d6a:	2b02      	cmp	r3, #2
 1005d6c:	d105      	bne.n	1005d7a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
 1005d6e:	8b40      	ldrh	r0, [r0, #26]
 1005d70:	fab0 f080 	clz	r0, r0
 1005d74:	0940      	lsrs	r0, r0, #5
 1005d76:	0080      	lsls	r0, r0, #2
 1005d78:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
 1005d7a:	2b01      	cmp	r3, #1
 1005d7c:	d105      	bne.n	1005d8a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
 1005d7e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
 1005d80:	2b00      	cmp	r3, #0
 1005d82:	bf0c      	ite	eq
 1005d84:	2000      	moveq	r0, #0
 1005d86:	2005      	movne	r0, #5
 1005d88:	4770      	bx	lr
	int evt = EVT_NOP;
 1005d8a:	2000      	movs	r0, #0
}
 1005d8c:	4770      	bx	lr

01005d8e <validate_args>:
{
 1005d8e:	b510      	push	{r4, lr}
 1005d90:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
 1005d92:	b100      	cbz	r0, 1005d96 <validate_args+0x8>
 1005d94:	b911      	cbnz	r1, 1005d9c <validate_args+0xe>
		return -EINVAL;
 1005d96:	f06f 0015 	mvn.w	r0, #21
}
 1005d9a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
 1005d9c:	1d08      	adds	r0, r1, #4
 1005d9e:	f000 f895 	bl	1005ecc <sys_notify_validate>
	if ((rv == 0)
 1005da2:	2800      	cmp	r0, #0
 1005da4:	d1f9      	bne.n	1005d9a <validate_args+0xc>
	    && ((cli->notify.flags
 1005da6:	68a3      	ldr	r3, [r4, #8]
 1005da8:	2b03      	cmp	r3, #3
 1005daa:	d9f6      	bls.n	1005d9a <validate_args+0xc>
 1005dac:	e7f3      	b.n	1005d96 <validate_args+0x8>

01005dae <notify_one>:
{
 1005dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005db2:	460d      	mov	r5, r1
 1005db4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1005db6:	4619      	mov	r1, r3
 1005db8:	1d28      	adds	r0, r5, #4
{
 1005dba:	4690      	mov	r8, r2
 1005dbc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
 1005dbe:	f000 f896 	bl	1005eee <sys_notify_finalize>
	if (cb) {
 1005dc2:	4604      	mov	r4, r0
 1005dc4:	b138      	cbz	r0, 1005dd6 <notify_one+0x28>
		cb(mgr, cli, state, res);
 1005dc6:	4633      	mov	r3, r6
 1005dc8:	4642      	mov	r2, r8
 1005dca:	4629      	mov	r1, r5
 1005dcc:	4638      	mov	r0, r7
 1005dce:	46a4      	mov	ip, r4
}
 1005dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
 1005dd4:	4760      	bx	ip
}
 1005dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01005dda <transition_complete>:
{
 1005dda:	b410      	push	{r4}
	__asm__ volatile(
 1005ddc:	f04f 0420 	mov.w	r4, #32
 1005de0:	f3ef 8211 	mrs	r2, BASEPRI
 1005de4:	f384 8812 	msr	BASEPRI_MAX, r4
 1005de8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
 1005dec:	6141      	str	r1, [r0, #20]
}
 1005dee:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
 1005df0:	2101      	movs	r1, #1
 1005df2:	f7fa bff5 	b.w	1000de0 <process_event>

01005df6 <onoff_manager_init>:
{
 1005df6:	b538      	push	{r3, r4, r5, lr}
 1005df8:	460c      	mov	r4, r1
	if ((mgr == NULL)
 1005dfa:	4605      	mov	r5, r0
 1005dfc:	b158      	cbz	r0, 1005e16 <onoff_manager_init+0x20>
	    || (transitions == NULL)
 1005dfe:	b151      	cbz	r1, 1005e16 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
 1005e00:	680b      	ldr	r3, [r1, #0]
 1005e02:	b143      	cbz	r3, 1005e16 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
 1005e04:	684b      	ldr	r3, [r1, #4]
 1005e06:	b133      	cbz	r3, 1005e16 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1005e08:	221c      	movs	r2, #28
 1005e0a:	2100      	movs	r1, #0
 1005e0c:	f000 fbe0 	bl	10065d0 <memset>
	return 0;
 1005e10:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
 1005e12:	612c      	str	r4, [r5, #16]
}
 1005e14:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 1005e16:	f06f 0015 	mvn.w	r0, #21
 1005e1a:	e7fb      	b.n	1005e14 <onoff_manager_init+0x1e>

01005e1c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
 1005e1c:	b570      	push	{r4, r5, r6, lr}
 1005e1e:	4605      	mov	r5, r0
 1005e20:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
 1005e22:	f7ff ffb4 	bl	1005d8e <validate_args>

	if (rv < 0) {
 1005e26:	1e04      	subs	r4, r0, #0
 1005e28:	db15      	blt.n	1005e56 <onoff_request+0x3a>
 1005e2a:	f04f 0320 	mov.w	r3, #32
 1005e2e:	f3ef 8211 	mrs	r2, BASEPRI
 1005e32:	f383 8812 	msr	BASEPRI_MAX, r3
 1005e36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
 1005e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 1005e3e:	8b6b      	ldrh	r3, [r5, #26]
 1005e40:	8b2c      	ldrh	r4, [r5, #24]
 1005e42:	428b      	cmp	r3, r1
 1005e44:	f004 0407 	and.w	r4, r4, #7
 1005e48:	d107      	bne.n	1005e5a <onoff_request+0x3e>
	__asm__ volatile(
 1005e4a:	f382 8811 	msr	BASEPRI, r2
 1005e4e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
 1005e52:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
 1005e56:	4620      	mov	r0, r4
 1005e58:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
 1005e5a:	2c02      	cmp	r4, #2
 1005e5c:	d10c      	bne.n	1005e78 <onoff_request+0x5c>
		mgr->refs += 1U;
 1005e5e:	3301      	adds	r3, #1
 1005e60:	836b      	strh	r3, [r5, #26]
 1005e62:	f382 8811 	msr	BASEPRI, r2
 1005e66:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
 1005e6a:	2300      	movs	r3, #0
 1005e6c:	4622      	mov	r2, r4
 1005e6e:	4631      	mov	r1, r6
 1005e70:	4628      	mov	r0, r5
 1005e72:	f7ff ff9c 	bl	1005dae <notify_one>
 1005e76:	e7ee      	b.n	1005e56 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
 1005e78:	2c06      	cmp	r4, #6
 1005e7a:	d814      	bhi.n	1005ea6 <onoff_request+0x8a>
 1005e7c:	e8df f004 	tbb	[pc, r4]
 1005e80:	13131304 	.word	0x13131304
 1005e84:	1a04      	.short	0x1a04
 1005e86:	04          	.byte	0x04
 1005e87:	00          	.byte	0x00
	parent->next = child;
 1005e88:	2300      	movs	r3, #0
 1005e8a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 1005e8c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 1005e8e:	b93b      	cbnz	r3, 1005ea0 <onoff_request+0x84>
	list->head = node;
 1005e90:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
 1005e94:	b9ac      	cbnz	r4, 1005ec2 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
 1005e96:	2102      	movs	r1, #2
 1005e98:	4628      	mov	r0, r5
 1005e9a:	f7fa ffa1 	bl	1000de0 <process_event>
 1005e9e:	e7da      	b.n	1005e56 <onoff_request+0x3a>
	parent->next = child;
 1005ea0:	601e      	str	r6, [r3, #0]
	list->tail = node;
 1005ea2:	606e      	str	r6, [r5, #4]
}
 1005ea4:	e7f6      	b.n	1005e94 <onoff_request+0x78>
 1005ea6:	f382 8811 	msr	BASEPRI, r2
 1005eaa:	f3bf 8f6f 	isb	sy
		rv = -EIO;
 1005eae:	f06f 0404 	mvn.w	r4, #4
 1005eb2:	e7d0      	b.n	1005e56 <onoff_request+0x3a>
 1005eb4:	f382 8811 	msr	BASEPRI, r2
 1005eb8:	f3bf 8f6f 	isb	sy
 1005ebc:	f06f 0485 	mvn.w	r4, #133	; 0x85
 1005ec0:	e7c9      	b.n	1005e56 <onoff_request+0x3a>
 1005ec2:	f382 8811 	msr	BASEPRI, r2
 1005ec6:	f3bf 8f6f 	isb	sy
		if (notify) {
 1005eca:	e7c4      	b.n	1005e56 <onoff_request+0x3a>

01005ecc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
 1005ecc:	4603      	mov	r3, r0
 1005ece:	b158      	cbz	r0, 1005ee8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 1005ed0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
 1005ed2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
 1005ed6:	2a01      	cmp	r2, #1
 1005ed8:	d003      	beq.n	1005ee2 <sys_notify_validate+0x16>
 1005eda:	2a03      	cmp	r2, #3
 1005edc:	d104      	bne.n	1005ee8 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
 1005ede:	6802      	ldr	r2, [r0, #0]
 1005ee0:	b112      	cbz	r2, 1005ee8 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
 1005ee2:	2000      	movs	r0, #0
 1005ee4:	6098      	str	r0, [r3, #8]
 1005ee6:	4770      	bx	lr
 1005ee8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
 1005eec:	4770      	bx	lr

01005eee <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
 1005eee:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
 1005ef0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
 1005ef2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
 1005ef6:	2a03      	cmp	r2, #3
 1005ef8:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
 1005efc:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
 1005efe:	bf14      	ite	ne
 1005f00:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
 1005f02:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
 1005f04:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
 1005f06:	4770      	bx	lr

01005f08 <encode_uint>:
{
 1005f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1005f0c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
 1005f0e:	78d3      	ldrb	r3, [r2, #3]
{
 1005f10:	4680      	mov	r8, r0
	switch (specifier) {
 1005f12:	2b6f      	cmp	r3, #111	; 0x6f
{
 1005f14:	460f      	mov	r7, r1
 1005f16:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 1005f18:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
 1005f1c:	d029      	beq.n	1005f72 <encode_uint+0x6a>
 1005f1e:	d824      	bhi.n	1005f6a <encode_uint+0x62>
		return 10;
 1005f20:	2b58      	cmp	r3, #88	; 0x58
 1005f22:	bf0c      	ite	eq
 1005f24:	2610      	moveq	r6, #16
 1005f26:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
 1005f28:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
 1005f2c:	4632      	mov	r2, r6
 1005f2e:	2300      	movs	r3, #0
 1005f30:	4640      	mov	r0, r8
 1005f32:	4639      	mov	r1, r7
 1005f34:	f7fa f8c0 	bl	10000b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1005f38:	2a09      	cmp	r2, #9
 1005f3a:	b2d4      	uxtb	r4, r2
 1005f3c:	d81e      	bhi.n	1005f7c <encode_uint+0x74>
 1005f3e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 1005f40:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1005f42:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
 1005f44:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1005f48:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
 1005f4c:	d301      	bcc.n	1005f52 <encode_uint+0x4a>
 1005f4e:	45d1      	cmp	r9, sl
 1005f50:	d811      	bhi.n	1005f76 <encode_uint+0x6e>
	if (conv->flag_hash) {
 1005f52:	782b      	ldrb	r3, [r5, #0]
 1005f54:	069b      	lsls	r3, r3, #26
 1005f56:	d505      	bpl.n	1005f64 <encode_uint+0x5c>
		if (radix == 8) {
 1005f58:	2e08      	cmp	r6, #8
 1005f5a:	d115      	bne.n	1005f88 <encode_uint+0x80>
			conv->altform_0 = true;
 1005f5c:	78ab      	ldrb	r3, [r5, #2]
 1005f5e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 1005f62:	70ab      	strb	r3, [r5, #2]
}
 1005f64:	4648      	mov	r0, r9
 1005f66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 1005f6a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
 1005f6e:	2b70      	cmp	r3, #112	; 0x70
 1005f70:	e7d7      	b.n	1005f22 <encode_uint+0x1a>
	switch (specifier) {
 1005f72:	2608      	movs	r6, #8
 1005f74:	e7d8      	b.n	1005f28 <encode_uint+0x20>
		value /= radix;
 1005f76:	4680      	mov	r8, r0
 1005f78:	460f      	mov	r7, r1
 1005f7a:	e7d7      	b.n	1005f2c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 1005f7c:	f1bb 0f19 	cmp.w	fp, #25
 1005f80:	bf94      	ite	ls
 1005f82:	3437      	addls	r4, #55	; 0x37
 1005f84:	3457      	addhi	r4, #87	; 0x57
 1005f86:	e7db      	b.n	1005f40 <encode_uint+0x38>
		} else if (radix == 16) {
 1005f88:	2e10      	cmp	r6, #16
 1005f8a:	d1eb      	bne.n	1005f64 <encode_uint+0x5c>
			conv->altform_0c = true;
 1005f8c:	78ab      	ldrb	r3, [r5, #2]
 1005f8e:	f043 0310 	orr.w	r3, r3, #16
 1005f92:	e7e6      	b.n	1005f62 <encode_uint+0x5a>

01005f94 <outs>:
{
 1005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1005f98:	4607      	mov	r7, r0
 1005f9a:	4688      	mov	r8, r1
 1005f9c:	4615      	mov	r5, r2
 1005f9e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1005fa0:	4614      	mov	r4, r2
 1005fa2:	42b4      	cmp	r4, r6
 1005fa4:	d305      	bcc.n	1005fb2 <outs+0x1e>
 1005fa6:	b10e      	cbz	r6, 1005fac <outs+0x18>
	return (int)count;
 1005fa8:	1b60      	subs	r0, r4, r5
 1005faa:	e008      	b.n	1005fbe <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 1005fac:	7823      	ldrb	r3, [r4, #0]
 1005fae:	2b00      	cmp	r3, #0
 1005fb0:	d0fa      	beq.n	1005fa8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
 1005fb2:	4641      	mov	r1, r8
 1005fb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 1005fb8:	47b8      	blx	r7
		if (rc < 0) {
 1005fba:	2800      	cmp	r0, #0
 1005fbc:	daf1      	bge.n	1005fa2 <outs+0xe>
}
 1005fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

01005fc2 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 1005fc2:	68c3      	ldr	r3, [r0, #12]
 1005fc4:	6802      	ldr	r2, [r0, #0]
 1005fc6:	4293      	cmp	r3, r2
 1005fc8:	d904      	bls.n	1005fd4 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 1005fca:	3b01      	subs	r3, #1
 1005fcc:	1a9a      	subs	r2, r3, r2

		return false;
 1005fce:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 1005fd0:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
 1005fd2:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 1005fd4:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
 1005fd6:	b913      	cbnz	r3, 1005fde <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 1005fd8:	3801      	subs	r0, #1
 1005fda:	1a82      	subs	r2, r0, r2
		return false;
 1005fdc:	e7f7      	b.n	1005fce <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
 1005fde:	1a82      	subs	r2, r0, r2
	return true;
 1005fe0:	2001      	movs	r0, #1
 1005fe2:	e7f5      	b.n	1005fd0 <free_space+0xe>

01005fe4 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
 1005fe4:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
 1005fe6:	a901      	add	r1, sp, #4
{
 1005fe8:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
 1005fea:	f7ff ffea 	bl	1005fc2 <free_space>
 1005fee:	b120      	cbz	r0, 1005ffa <get_usage+0x16>
		f += (buffer->rd_idx - 1);
 1005ff0:	9b01      	ldr	r3, [sp, #4]
 1005ff2:	68e2      	ldr	r2, [r4, #12]
 1005ff4:	3b01      	subs	r3, #1
 1005ff6:	4413      	add	r3, r2
 1005ff8:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
 1005ffa:	6a20      	ldr	r0, [r4, #32]
 1005ffc:	9b01      	ldr	r3, [sp, #4]
 1005ffe:	1ac0      	subs	r0, r0, r3
}
 1006000:	3801      	subs	r0, #1
 1006002:	b002      	add	sp, #8
 1006004:	bd10      	pop	{r4, pc}

01006006 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
 1006006:	b510      	push	{r4, lr}
 1006008:	4604      	mov	r4, r0
	uint32_t i = idx + val;
 100600a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 100600c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
 100600e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 1006010:	07d2      	lsls	r2, r2, #31
 1006012:	d502      	bpl.n	100601a <idx_inc+0x14>
		return i & (buffer->size - 1);
 1006014:	3b01      	subs	r3, #1
 1006016:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
 1006018:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
 100601a:	4298      	cmp	r0, r3
 100601c:	bf28      	it	cs
 100601e:	1ac0      	subcs	r0, r0, r3
 1006020:	e7fa      	b.n	1006018 <idx_inc+0x12>

01006022 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 1006022:	b538      	push	{r3, r4, r5, lr}
 1006024:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 1006026:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
 1006028:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 100602a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
 100602c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 1006030:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 1006034:	6801      	ldr	r1, [r0, #0]
 1006036:	462a      	mov	r2, r5
{
 1006038:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 100603a:	f7ff ffe4 	bl	1006006 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 100603e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 1006040:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 1006042:	462a      	mov	r2, r5
 1006044:	4620      	mov	r0, r4
 1006046:	f7ff ffde 	bl	1006006 <idx_inc>
 100604a:	6060      	str	r0, [r4, #4]
}
 100604c:	bd38      	pop	{r3, r4, r5, pc}

0100604e <max_utilization_update>:
{
 100604e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 1006050:	6903      	ldr	r3, [r0, #16]
{
 1006052:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
 1006054:	075b      	lsls	r3, r3, #29
 1006056:	d506      	bpl.n	1006066 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
 1006058:	6a45      	ldr	r5, [r0, #36]	; 0x24
 100605a:	f7ff ffc3 	bl	1005fe4 <get_usage>
 100605e:	4285      	cmp	r5, r0
 1006060:	bf2c      	ite	cs
 1006062:	6265      	strcs	r5, [r4, #36]	; 0x24
 1006064:	6260      	strcc	r0, [r4, #36]	; 0x24
}
 1006066:	bd38      	pop	{r3, r4, r5, pc}

01006068 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 1006068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 100606c:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 100606e:	2300      	movs	r3, #0
 1006070:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 1006072:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 1006076:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
 100607a:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
 100607c:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
 1006080:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
 1006082:	f003 0303 	and.w	r3, r3, #3
 1006086:	2b02      	cmp	r3, #2
{
 1006088:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 100608a:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 100608e:	d103      	bne.n	1006098 <drop_item_locked+0x30>
		return item->skip.len;
 1006090:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 1006094:	08ad      	lsrs	r5, r5, #2
 1006096:	d12e      	bne.n	10060f6 <drop_item_locked+0x8e>
 1006098:	4630      	mov	r0, r6
 100609a:	69a3      	ldr	r3, [r4, #24]
 100609c:	4798      	blx	r3
 100609e:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
 10060a0:	f1b8 0f00 	cmp.w	r8, #0
 10060a4:	d038      	beq.n	1006118 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
 10060a6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
 10060aa:	079b      	lsls	r3, r3, #30
 10060ac:	d531      	bpl.n	1006112 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
 10060ae:	4620      	mov	r0, r4
 10060b0:	f10b 0101 	add.w	r1, fp, #1
 10060b4:	f7ff ffb5 	bl	1006022 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 10060b8:	6861      	ldr	r1, [r4, #4]
 10060ba:	462a      	mov	r2, r5
 10060bc:	4620      	mov	r0, r4
 10060be:	f7ff ffa2 	bl	1006006 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 10060c2:	6821      	ldr	r1, [r4, #0]
 10060c4:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 10060c6:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 10060c8:	4620      	mov	r0, r4
 10060ca:	f7ff ff9c 	bl	1006006 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 10060ce:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 10060d0:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 10060d2:	68e1      	ldr	r1, [r4, #12]
 10060d4:	4620      	mov	r0, r4
 10060d6:	f7ff ff96 	bl	1006006 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 10060da:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
 10060dc:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 10060e0:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 10060e4:	f002 0203 	and.w	r2, r2, #3
 10060e8:	2a02      	cmp	r2, #2
 10060ea:	d10e      	bne.n	100610a <drop_item_locked+0xa2>
		return item->skip.len;
 10060ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
 10060f0:	089b      	lsrs	r3, r3, #2
 10060f2:	d00a      	beq.n	100610a <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
 10060f4:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 10060f6:	68e1      	ldr	r1, [r4, #12]
 10060f8:	462a      	mov	r2, r5
 10060fa:	4620      	mov	r0, r4
 10060fc:	f7ff ff83 	bl	1006006 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
 1006100:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
 1006104:	4630      	mov	r0, r6
 1006106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
 100610a:	4630      	mov	r0, r6
 100610c:	69a3      	ldr	r3, [r4, #24]
 100610e:	4798      	blx	r3
 1006110:	4405      	add	r5, r0
			*user_packet = true;
 1006112:	2301      	movs	r3, #1
 1006114:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
 1006116:	e7ee      	b.n	10060f6 <drop_item_locked+0x8e>
		item = NULL;
 1006118:	4646      	mov	r6, r8
	return item;
 100611a:	e7f3      	b.n	1006104 <drop_item_locked+0x9c>

0100611c <mpsc_pbuf_init>:
{
 100611c:	b538      	push	{r3, r4, r5, lr}
 100611e:	460d      	mov	r5, r1
 1006120:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
 1006122:	221c      	movs	r2, #28
 1006124:	2100      	movs	r1, #0
 1006126:	f000 fa53 	bl	10065d0 <memset>
	buffer->max_usage = 0;
 100612a:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
 100612c:	68eb      	ldr	r3, [r5, #12]
 100612e:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
 1006130:	68ab      	ldr	r3, [r5, #8]
 1006132:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
 1006134:	682b      	ldr	r3, [r5, #0]
 1006136:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
 1006138:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
 100613a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
 100613c:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
 100613e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 1006140:	b123      	cbz	r3, 100614c <mpsc_pbuf_init+0x30>
 1006142:	1e59      	subs	r1, r3, #1
 1006144:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 1006146:	bf08      	it	eq
 1006148:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
 100614c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
 100614e:	2201      	movs	r2, #1
 1006150:	f104 0028 	add.w	r0, r4, #40	; 0x28
 1006154:	2100      	movs	r1, #0
}
 1006156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 100615a:	f000 bc91 	b.w	1006a80 <z_impl_k_sem_init>

0100615e <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 100615e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 1006162:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 1006164:	6a03      	ldr	r3, [r0, #32]
{
 1006166:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
 1006168:	3b01      	subs	r3, #1
 100616a:	428b      	cmp	r3, r1
{
 100616c:	460e      	mov	r6, r1
 100616e:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
 1006170:	d351      	bcc.n	1006216 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
 1006172:	2500      	movs	r5, #0
	__asm__ volatile(
 1006174:	f04f 0320 	mov.w	r3, #32
 1006178:	f3ef 8911 	mrs	r9, BASEPRI
 100617c:	f383 8812 	msr	BASEPRI_MAX, r3
 1006180:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
 1006184:	4620      	mov	r0, r4
 1006186:	a901      	add	r1, sp, #4
 1006188:	f7ff ff1b 	bl	1005fc2 <free_space>

		if (free_wlen >= wlen) {
 100618c:	f8dd a004 	ldr.w	sl, [sp, #4]
 1006190:	45b2      	cmp	sl, r6
 1006192:	d317      	bcc.n	10061c4 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 1006194:	6822      	ldr	r2, [r4, #0]
			item =
 1006196:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 1006198:	4620      	mov	r0, r4
			item->hdr.valid = 0;
 100619a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
 100619e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
 10061a2:	f021 0103 	bic.w	r1, r1, #3
 10061a6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 10061aa:	6821      	ldr	r1, [r4, #0]
 10061ac:	4632      	mov	r2, r6
 10061ae:	f7ff ff2a 	bl	1006006 <idx_inc>
 10061b2:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
 10061b4:	f389 8811 	msr	BASEPRI, r9
 10061b8:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 10061bc:	4628      	mov	r0, r5
 10061be:	b002      	add	sp, #8
 10061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
 10061c4:	b150      	cbz	r0, 10061dc <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
 10061c6:	4651      	mov	r1, sl
 10061c8:	4620      	mov	r0, r4
 10061ca:	f7ff ff2a 	bl	1006022 <add_skip_item>
 10061ce:	f389 8811 	msr	BASEPRI, r9
 10061d2:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 10061d6:	2d00      	cmp	r5, #0
 10061d8:	d0cb      	beq.n	1006172 <mpsc_pbuf_alloc+0x14>
 10061da:	e033      	b.n	1006244 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 10061dc:	ea57 0308 	orrs.w	r3, r7, r8
 10061e0:	d020      	beq.n	1006224 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
 10061e2:	f000 fc2e 	bl	1006a42 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 10061e6:	b9e8      	cbnz	r0, 1006224 <mpsc_pbuf_alloc+0xc6>
 10061e8:	f389 8811 	msr	BASEPRI, r9
 10061ec:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
 10061f0:	463a      	mov	r2, r7
 10061f2:	4643      	mov	r3, r8
 10061f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 10061f8:	f7fe ff96 	bl	1005128 <z_impl_k_sem_take>
	__asm__ volatile(
 10061fc:	f04f 0220 	mov.w	r2, #32
 1006200:	f3ef 8311 	mrs	r3, BASEPRI
 1006204:	f382 8812 	msr	BASEPRI_MAX, r2
 1006208:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 100620c:	b128      	cbz	r0, 100621a <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
 100620e:	f383 8811 	msr	BASEPRI, r3
 1006212:	f3bf 8f6f 	isb	sy
		return NULL;
 1006216:	2500      	movs	r5, #0
 1006218:	e7d0      	b.n	10061bc <mpsc_pbuf_alloc+0x5e>
 100621a:	f383 8811 	msr	BASEPRI, r3
 100621e:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 1006222:	e7d8      	b.n	10061d6 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 1006224:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 1006226:	4651      	mov	r1, sl
 1006228:	4620      	mov	r0, r4
 100622a:	f10d 0303 	add.w	r3, sp, #3
 100622e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 1006232:	f7ff ff19 	bl	1006068 <drop_item_locked>
 1006236:	4605      	mov	r5, r0
 1006238:	f389 8811 	msr	BASEPRI, r9
 100623c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
 1006240:	2800      	cmp	r0, #0
 1006242:	d0e8      	beq.n	1006216 <mpsc_pbuf_alloc+0xb8>
 1006244:	f89d 3003 	ldrb.w	r3, [sp, #3]
 1006248:	2b00      	cmp	r3, #0
 100624a:	d093      	beq.n	1006174 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
 100624c:	6963      	ldr	r3, [r4, #20]
 100624e:	2b00      	cmp	r3, #0
 1006250:	d08f      	beq.n	1006172 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
 1006252:	4629      	mov	r1, r5
 1006254:	4620      	mov	r0, r4
 1006256:	4798      	blx	r3
 1006258:	e78b      	b.n	1006172 <mpsc_pbuf_alloc+0x14>

0100625a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 100625a:	b570      	push	{r4, r5, r6, lr}
 100625c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 100625e:	6983      	ldr	r3, [r0, #24]
 1006260:	4608      	mov	r0, r1
{
 1006262:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 1006264:	4798      	blx	r3
 1006266:	4602      	mov	r2, r0
	__asm__ volatile(
 1006268:	f04f 0320 	mov.w	r3, #32
 100626c:	f3ef 8611 	mrs	r6, BASEPRI
 1006270:	f383 8812 	msr	BASEPRI_MAX, r3
 1006274:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 1006278:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 100627a:	4620      	mov	r0, r4
	item->hdr.valid = 1;
 100627c:	f043 0301 	orr.w	r3, r3, #1
 1006280:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 1006282:	6861      	ldr	r1, [r4, #4]
 1006284:	f7ff febf 	bl	1006006 <idx_inc>
 1006288:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
 100628a:	4620      	mov	r0, r4
 100628c:	f7ff fedf 	bl	100604e <max_utilization_update>
	__asm__ volatile(
 1006290:	f386 8811 	msr	BASEPRI, r6
 1006294:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 1006298:	bd70      	pop	{r4, r5, r6, pc}

0100629a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 100629a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100629c:	4604      	mov	r4, r0
	__asm__ volatile(
 100629e:	f04f 0320 	mov.w	r3, #32
 10062a2:	f3ef 8611 	mrs	r6, BASEPRI
 10062a6:	f383 8812 	msr	BASEPRI_MAX, r3
 10062aa:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 10062ae:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 10062b2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 10062b4:	bf88      	it	hi
 10062b6:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
 10062b8:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
 10062ba:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
 10062bc:	b132      	cbz	r2, 10062cc <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
 10062be:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
 10062c2:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
 10062c6:	f012 0003 	ands.w	r0, r2, #3
 10062ca:	d105      	bne.n	10062d8 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
 10062cc:	f386 8811 	msr	BASEPRI, r6
 10062d0:	f3bf 8f6f 	isb	sy
			item = NULL;
 10062d4:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
 10062d6:	e02e      	b.n	1006336 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
 10062d8:	2802      	cmp	r0, #2
 10062da:	d103      	bne.n	10062e4 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
 10062dc:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
 10062e0:	08ad      	lsrs	r5, r5, #2
 10062e2:	d105      	bne.n	10062f0 <mpsc_pbuf_claim+0x56>
 10062e4:	07d0      	lsls	r0, r2, #31
 10062e6:	d414      	bmi.n	1006312 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
 10062e8:	4638      	mov	r0, r7
 10062ea:	69a3      	ldr	r3, [r4, #24]
 10062ec:	4798      	blx	r3
 10062ee:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 10062f0:	68a1      	ldr	r1, [r4, #8]
 10062f2:	462a      	mov	r2, r5
 10062f4:	4620      	mov	r0, r4
 10062f6:	f7ff fe86 	bl	1006006 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
 10062fa:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
 10062fc:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
 10062fe:	462a      	mov	r2, r5
 1006300:	4620      	mov	r0, r4
 1006302:	f7ff fe80 	bl	1006006 <idx_inc>
				buffer->rd_idx =
 1006306:	60e0      	str	r0, [r4, #12]
 1006308:	f386 8811 	msr	BASEPRI, r6
 100630c:	f3bf 8f6f 	isb	sy
	} while (cont);
 1006310:	e7c5      	b.n	100629e <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
 1006312:	f042 0202 	orr.w	r2, r2, #2
 1006316:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
 100631a:	69a3      	ldr	r3, [r4, #24]
 100631c:	4638      	mov	r0, r7
 100631e:	68a5      	ldr	r5, [r4, #8]
 1006320:	4798      	blx	r3
 1006322:	4629      	mov	r1, r5
 1006324:	4602      	mov	r2, r0
 1006326:	4620      	mov	r0, r4
 1006328:	f7ff fe6d 	bl	1006006 <idx_inc>
				buffer->tmp_rd_idx =
 100632c:	60a0      	str	r0, [r4, #8]
 100632e:	f386 8811 	msr	BASEPRI, r6
 1006332:	f3bf 8f6f 	isb	sy
}
 1006336:	4638      	mov	r0, r7
 1006338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0100633a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 100633a:	b570      	push	{r4, r5, r6, lr}
 100633c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
 100633e:	6983      	ldr	r3, [r0, #24]
 1006340:	4608      	mov	r0, r1
{
 1006342:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 1006344:	4798      	blx	r3
 1006346:	4602      	mov	r2, r0
	__asm__ volatile(
 1006348:	f04f 0320 	mov.w	r3, #32
 100634c:	f3ef 8611 	mrs	r6, BASEPRI
 1006350:	f383 8812 	msr	BASEPRI_MAX, r3
 1006354:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 1006358:	782b      	ldrb	r3, [r5, #0]
 100635a:	f36f 0300 	bfc	r3, #0, #1
 100635e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 1006360:	6923      	ldr	r3, [r4, #16]
 1006362:	079b      	lsls	r3, r3, #30
 1006364:	d505      	bpl.n	1006372 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 1006366:	68e1      	ldr	r1, [r4, #12]
 1006368:	69e3      	ldr	r3, [r4, #28]
 100636a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 100636e:	429d      	cmp	r5, r3
 1006370:	d112      	bne.n	1006398 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
 1006372:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 1006374:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
 1006376:	f36f 0341 	bfc	r3, #1, #1
 100637a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 100637c:	68e1      	ldr	r1, [r4, #12]
 100637e:	f7ff fe42 	bl	1006006 <idx_inc>
 1006382:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 1006384:	f386 8811 	msr	BASEPRI, r6
 1006388:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
 100638c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
 1006390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 1006394:	f7fe bea8 	b.w	10050e8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
 1006398:	682b      	ldr	r3, [r5, #0]
 100639a:	f360 039f 	bfi	r3, r0, #2, #30
 100639e:	602b      	str	r3, [r5, #0]
 10063a0:	e7f0      	b.n	1006384 <mpsc_pbuf_free+0x4a>

010063a2 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 10063a2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 10063a6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
 10063a8:	bf88      	it	hi
 10063aa:	6a02      	ldrhi	r2, [r0, #32]
 10063ac:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 10063ae:	1e18      	subs	r0, r3, #0
 10063b0:	bf18      	it	ne
 10063b2:	2001      	movne	r0, #1
 10063b4:	4770      	bx	lr

010063b6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 10063b6:	4770      	bx	lr

010063b8 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 10063b8:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 10063ba:	075b      	lsls	r3, r3, #29
 10063bc:	d40b      	bmi.n	10063d6 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 10063be:	6803      	ldr	r3, [r0, #0]
 10063c0:	8842      	ldrh	r2, [r0, #2]
 10063c2:	f3c3 2349 	ubfx	r3, r3, #9, #10
 10063c6:	f3c2 02cb 	ubfx	r2, r2, #3, #12
 10063ca:	1898      	adds	r0, r3, r2
 10063cc:	3017      	adds	r0, #23
 10063ce:	f020 0007 	bic.w	r0, r0, #7
 10063d2:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
 10063d4:	4770      	bx	lr
	return 0;
 10063d6:	2000      	movs	r0, #0
}
 10063d8:	4770      	bx	lr

010063da <dummy_timestamp>:
}
 10063da:	2000      	movs	r0, #0
 10063dc:	4770      	bx	lr

010063de <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 10063de:	f000 ba58 	b.w	1006892 <sys_clock_cycle_get_32>

010063e2 <atomic_inc>:
{
 10063e2:	4603      	mov	r3, r0
}
 10063e4:	e8d3 0fef 	ldaex	r0, [r3]
 10063e8:	1c42      	adds	r2, r0, #1
 10063ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
 10063ee:	2900      	cmp	r1, #0
 10063f0:	d1f8      	bne.n	10063e4 <atomic_inc+0x2>
 10063f2:	4770      	bx	lr

010063f4 <z_log_vprintk>:
{
 10063f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
 10063f6:	2300      	movs	r3, #0
 10063f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 10063fc:	461a      	mov	r2, r3
 10063fe:	4619      	mov	r1, r3
 1006400:	4618      	mov	r0, r3
 1006402:	e9cd 3300 	strd	r3, r3, [sp]
 1006406:	f7fb fca5 	bl	1001d54 <z_impl_z_log_msg_runtime_vcreate>
}
 100640a:	b005      	add	sp, #20
 100640c:	f85d fb04 	ldr.w	pc, [sp], #4

01006410 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
 1006410:	2001      	movs	r0, #1
 1006412:	f7fb ba97 	b.w	1001944 <z_log_dropped>

01006416 <z_log_get_tag>:
}
 1006416:	2000      	movs	r0, #0
 1006418:	4770      	bx	lr

0100641a <z_cbprintf_cpy>:
{
 100641a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
 100641c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
 1006420:	1b9b      	subs	r3, r3, r6
 1006422:	428b      	cmp	r3, r1
{
 1006424:	460c      	mov	r4, r1
 1006426:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
 1006428:	d30a      	bcc.n	1006440 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
 100642a:	6813      	ldr	r3, [r2, #0]
 100642c:	460a      	mov	r2, r1
 100642e:	4601      	mov	r1, r0
 1006430:	1998      	adds	r0, r3, r6
 1006432:	f000 f8c2 	bl	10065ba <memcpy>
	return len;
 1006436:	4620      	mov	r0, r4
	desc->off += len;
 1006438:	68ab      	ldr	r3, [r5, #8]
 100643a:	4423      	add	r3, r4
 100643c:	60ab      	str	r3, [r5, #8]
}
 100643e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
 1006440:	f06f 001b 	mvn.w	r0, #27
 1006444:	e7fb      	b.n	100643e <z_cbprintf_cpy+0x24>

01006446 <z_log_msg_finalize>:
{
 1006446:	b570      	push	{r4, r5, r6, lr}
 1006448:	460e      	mov	r6, r1
 100644a:	4615      	mov	r5, r2
 100644c:	4619      	mov	r1, r3
	if (!msg) {
 100644e:	4604      	mov	r4, r0
 1006450:	b918      	cbnz	r0, 100645a <z_log_msg_finalize+0x14>
}
 1006452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
 1006456:	f7fb ba75 	b.w	1001944 <z_log_dropped>
	if (data) {
 100645a:	b13b      	cbz	r3, 100646c <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
 100645c:	f3c2 2349 	ubfx	r3, r2, #9, #10
 1006460:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
 1006462:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 1006466:	4418      	add	r0, r3
 1006468:	f000 f8a7 	bl	10065ba <memcpy>
	msg->hdr.source = source;
 100646c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
 1006470:	4620      	mov	r0, r4
}
 1006472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
 1006476:	f7fb bbe5 	b.w	1001c44 <z_log_msg_commit>

0100647a <buffer_write>:
{
 100647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 100647c:	4606      	mov	r6, r0
 100647e:	460d      	mov	r5, r1
 1006480:	4614      	mov	r4, r2
 1006482:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 1006484:	4621      	mov	r1, r4
 1006486:	4628      	mov	r0, r5
 1006488:	463a      	mov	r2, r7
 100648a:	47b0      	blx	r6
	} while (len != 0);
 100648c:	1a24      	subs	r4, r4, r0
		buf += processed;
 100648e:	4405      	add	r5, r0
	} while (len != 0);
 1006490:	d1f8      	bne.n	1006484 <buffer_write+0xa>
}
 1006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

01006494 <cbvprintf>:
{
 1006494:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
 1006496:	2400      	movs	r4, #0
 1006498:	9400      	str	r4, [sp, #0]
 100649a:	f7fa fdaf 	bl	1000ffc <z_cbvprintf_impl>
}
 100649e:	b002      	add	sp, #8
 10064a0:	bd10      	pop	{r4, pc}

010064a2 <log_output_flush>:
{
 10064a2:	b510      	push	{r4, lr}
		     output->control_block->offset,
 10064a4:	6842      	ldr	r2, [r0, #4]
{
 10064a6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
 10064a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 10064ac:	6881      	ldr	r1, [r0, #8]
 10064ae:	6800      	ldr	r0, [r0, #0]
 10064b0:	f7ff ffe3 	bl	100647a <buffer_write>
	output->control_block->offset = 0;
 10064b4:	2200      	movs	r2, #0
 10064b6:	6863      	ldr	r3, [r4, #4]
 10064b8:	601a      	str	r2, [r3, #0]
}
 10064ba:	bd10      	pop	{r4, pc}

010064bc <out_func>:
{
 10064bc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
 10064be:	684b      	ldr	r3, [r1, #4]
{
 10064c0:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
 10064c2:	681a      	ldr	r2, [r3, #0]
 10064c4:	68cb      	ldr	r3, [r1, #12]
{
 10064c6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 10064c8:	429a      	cmp	r2, r3
 10064ca:	d102      	bne.n	10064d2 <out_func+0x16>
		log_output_flush(out_ctx);
 10064cc:	4608      	mov	r0, r1
 10064ce:	f7ff ffe8 	bl	10064a2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 10064d2:	6863      	ldr	r3, [r4, #4]
 10064d4:	e8d3 2fef 	ldaex	r2, [r3]
 10064d8:	1c51      	adds	r1, r2, #1
 10064da:	e8c3 1fe0 	stlex	r0, r1, [r3]
 10064de:	2800      	cmp	r0, #0
 10064e0:	d1f8      	bne.n	10064d4 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
 10064e2:	68a3      	ldr	r3, [r4, #8]
}
 10064e4:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
 10064e6:	549d      	strb	r5, [r3, r2]
}
 10064e8:	bd38      	pop	{r3, r4, r5, pc}

010064ea <cr_out_func>:
	if (c == '\n') {
 10064ea:	280a      	cmp	r0, #10
{
 10064ec:	b538      	push	{r3, r4, r5, lr}
 10064ee:	4604      	mov	r4, r0
 10064f0:	460d      	mov	r5, r1
	if (c == '\n') {
 10064f2:	d102      	bne.n	10064fa <cr_out_func+0x10>
		out_func((int)'\r', ctx);
 10064f4:	200d      	movs	r0, #13
 10064f6:	f7ff ffe1 	bl	10064bc <out_func>
	out_func(c, ctx);
 10064fa:	4629      	mov	r1, r5
 10064fc:	4620      	mov	r0, r4
 10064fe:	f7ff ffdd 	bl	10064bc <out_func>
}
 1006502:	2000      	movs	r0, #0
 1006504:	bd38      	pop	{r3, r4, r5, pc}

01006506 <log_backend_uart_init>:
}
 1006506:	4770      	bx	lr

01006508 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
 1006508:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 100650a:	6800      	ldr	r0, [r0, #0]
 100650c:	f7fb bf32 	b.w	1002374 <z_arm_fatal_error>

01006510 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 1006510:	2100      	movs	r1, #0
 1006512:	2001      	movs	r0, #1
 1006514:	f7fb bf2e 	b.w	1002374 <z_arm_fatal_error>

01006518 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 1006518:	b508      	push	{r3, lr}
	handler();
 100651a:	f7fb ffc3 	bl	10024a4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 100651e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 1006522:	f7fc b873 	b.w	100260c <z_arm_exc_exit>

01006526 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 1006526:	6e43      	ldr	r3, [r0, #100]	; 0x64
 1006528:	f383 880b 	msr	PSPLIM, r3
}
 100652c:	4770      	bx	lr

0100652e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
 100652e:	2300      	movs	r3, #0
 1006530:	f7fb bbbc 	b.w	1001cac <z_impl_z_log_msg_static_create>

01006534 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
 1006534:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
 1006538:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 100653c:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
 100653e:	bf08      	it	eq
 1006540:	f06f 0015 	mvneq.w	r0, #21
 1006544:	4770      	bx	lr

01006546 <mpu_configure_region>:
{
 1006546:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
 1006548:	890a      	ldrh	r2, [r1, #8]
 100654a:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
 100654c:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
 100654e:	684c      	ldr	r4, [r1, #4]
 1006550:	f002 021f 	and.w	r2, r2, #31
{
 1006554:	b085      	sub	sp, #20
 1006556:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
 100655a:	9300      	str	r3, [sp, #0]
 100655c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
 1006560:	f023 031f 	bic.w	r3, r3, #31
 1006564:	1e62      	subs	r2, r4, #1
 1006566:	4413      	add	r3, r2
 1006568:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
 100656c:	2807      	cmp	r0, #7
 100656e:	9303      	str	r3, [sp, #12]
 1006570:	d904      	bls.n	100657c <mpu_configure_region+0x36>
}
 1006572:	b005      	add	sp, #20
 1006574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 1006578:	f7fc bbe8 	b.w	1002d4c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
 100657c:	4669      	mov	r1, sp
 100657e:	f7fc fbcb 	bl	1002d18 <region_init>
}
 1006582:	b005      	add	sp, #20
 1006584:	bd30      	pop	{r4, r5, pc}

01006586 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 1006586:	4603      	mov	r3, r0
 1006588:	3901      	subs	r1, #1
 100658a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 100658e:	b90a      	cbnz	r2, 1006594 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 1006590:	701a      	strb	r2, [r3, #0]

	return dest;
}
 1006592:	4770      	bx	lr
		*d = *s;
 1006594:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 1006598:	e7f7      	b.n	100658a <strcpy+0x4>

0100659a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 100659a:	4603      	mov	r3, r0
	size_t n = 0;
 100659c:	2000      	movs	r0, #0

	while (*s != '\0') {
 100659e:	5c1a      	ldrb	r2, [r3, r0]
 10065a0:	b902      	cbnz	r2, 10065a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 10065a2:	4770      	bx	lr
		n++;
 10065a4:	3001      	adds	r0, #1
 10065a6:	e7fa      	b.n	100659e <strlen+0x4>

010065a8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
 10065a8:	4603      	mov	r3, r0
	size_t n = 0;
 10065aa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
 10065ac:	5c1a      	ldrb	r2, [r3, r0]
 10065ae:	b10a      	cbz	r2, 10065b4 <strnlen+0xc>
 10065b0:	4288      	cmp	r0, r1
 10065b2:	d100      	bne.n	10065b6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
 10065b4:	4770      	bx	lr
		n++;
 10065b6:	3001      	adds	r0, #1
 10065b8:	e7f8      	b.n	10065ac <strnlen+0x4>

010065ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
 10065ba:	b510      	push	{r4, lr}
 10065bc:	1e43      	subs	r3, r0, #1
 10065be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
 10065c0:	4291      	cmp	r1, r2
 10065c2:	d100      	bne.n	10065c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 10065c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
 10065c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 10065ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 10065ce:	e7f7      	b.n	10065c0 <memcpy+0x6>

010065d0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
 10065d0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
 10065d2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
 10065d4:	4402      	add	r2, r0
 10065d6:	4293      	cmp	r3, r2
 10065d8:	d100      	bne.n	10065dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 10065da:	4770      	bx	lr
		*(d_byte++) = c_byte;
 10065dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 10065e0:	e7f9      	b.n	10065d6 <memset+0x6>

010065e2 <_stdout_hook_default>:
}
 10065e2:	f04f 30ff 	mov.w	r0, #4294967295
 10065e6:	4770      	bx	lr

010065e8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
 10065e8:	684b      	ldr	r3, [r1, #4]
 10065ea:	2b01      	cmp	r3, #1
 10065ec:	dd07      	ble.n	10065fe <sprintf_out+0x16>
		*(p->ptr) = c;
 10065ee:	680b      	ldr	r3, [r1, #0]
 10065f0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
 10065f2:	680b      	ldr	r3, [r1, #0]
 10065f4:	3301      	adds	r3, #1
 10065f6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
 10065f8:	684b      	ldr	r3, [r1, #4]
 10065fa:	3b01      	subs	r3, #1
 10065fc:	604b      	str	r3, [r1, #4]
}
 10065fe:	2000      	movs	r0, #0
 1006600:	4770      	bx	lr

01006602 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
 1006602:	220c      	movs	r2, #12
 1006604:	6903      	ldr	r3, [r0, #16]
 1006606:	b2c9      	uxtb	r1, r1
 1006608:	fb01 3302 	mla	r3, r1, r2, r3
 100660c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 100660e:	f000 0007 	and.w	r0, r0, #7
 1006612:	4770      	bx	lr

01006614 <set_on_state>:
	__asm__ volatile(
 1006614:	f04f 0320 	mov.w	r3, #32
 1006618:	f3ef 8211 	mrs	r2, BASEPRI
 100661c:	f383 8812 	msr	BASEPRI_MAX, r3
 1006620:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
 1006624:	6803      	ldr	r3, [r0, #0]
 1006626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 100662a:	f043 0302 	orr.w	r3, r3, #2
 100662e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
 1006630:	f382 8811 	msr	BASEPRI, r2
 1006634:	f3bf 8f6f 	isb	sy
}
 1006638:	4770      	bx	lr

0100663a <stop>:
{
 100663a:	b570      	push	{r4, r5, r6, lr}
 100663c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
 100663e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
 1006640:	f04f 0420 	mov.w	r4, #32
 1006644:	f3ef 8511 	mrs	r5, BASEPRI
 1006648:	f384 8812 	msr	BASEPRI_MAX, r4
 100664c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 1006650:	260c      	movs	r6, #12
 1006652:	fb06 3401 	mla	r4, r6, r1, r3
 1006656:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
 1006658:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 100665c:	d008      	beq.n	1006670 <stop+0x36>
 100665e:	42a2      	cmp	r2, r4
 1006660:	d006      	beq.n	1006670 <stop+0x36>
	__asm__ volatile(
 1006662:	f385 8811 	msr	BASEPRI, r5
 1006666:	f3bf 8f6f 	isb	sy
		err = -EPERM;
 100666a:	f04f 30ff 	mov.w	r0, #4294967295
}
 100666e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
 1006670:	2201      	movs	r2, #1
 1006672:	4371      	muls	r1, r6
 1006674:	440b      	add	r3, r1
 1006676:	641a      	str	r2, [r3, #64]	; 0x40
 1006678:	f385 8811 	msr	BASEPRI, r5
 100667c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
 1006680:	6843      	ldr	r3, [r0, #4]
 1006682:	440b      	add	r3, r1
 1006684:	685b      	ldr	r3, [r3, #4]
 1006686:	4798      	blx	r3
	return 0;
 1006688:	2000      	movs	r0, #0
 100668a:	e7f0      	b.n	100666e <stop+0x34>

0100668c <api_stop>:
	return stop(dev, subsys, CTX_API);
 100668c:	2280      	movs	r2, #128	; 0x80
 100668e:	f7ff bfd4 	b.w	100663a <stop>

01006692 <async_start>:
{
 1006692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1006694:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
 1006696:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
 1006698:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
 100669a:	f04f 0520 	mov.w	r5, #32
 100669e:	f3ef 8611 	mrs	r6, BASEPRI
 10066a2:	f385 8812 	msr	BASEPRI_MAX, r5
 10066a6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
 10066aa:	250c      	movs	r5, #12
 10066ac:	4369      	muls	r1, r5
 10066ae:	440c      	add	r4, r1
 10066b0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
 10066b2:	f005 0c07 	and.w	ip, r5, #7
 10066b6:	f1bc 0f01 	cmp.w	ip, #1
 10066ba:	d10b      	bne.n	10066d4 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
 10066bc:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
 10066be:	f386 8811 	msr	BASEPRI, r6
 10066c2:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
 10066c6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
 10066ca:	6843      	ldr	r3, [r0, #4]
 10066cc:	585b      	ldr	r3, [r3, r1]
 10066ce:	4798      	blx	r3
	return 0;
 10066d0:	2000      	movs	r0, #0
}
 10066d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
 10066d4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
 10066d8:	42af      	cmp	r7, r5
 10066da:	f386 8811 	msr	BASEPRI, r6
 10066de:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
 10066e2:	bf0c      	ite	eq
 10066e4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
 10066e8:	f04f 30ff 	movne.w	r0, #4294967295
 10066ec:	e7f1      	b.n	10066d2 <async_start+0x40>

010066ee <api_start>:
{
 10066ee:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
 10066f0:	2480      	movs	r4, #128	; 0x80
 10066f2:	9400      	str	r4, [sp, #0]
 10066f4:	f7ff ffcd 	bl	1006692 <async_start>
}
 10066f8:	b002      	add	sp, #8
 10066fa:	bd10      	pop	{r4, pc}

010066fc <onoff_started_callback>:
{
 10066fc:	b410      	push	{r4}
	notify(mgr, 0);
 10066fe:	241c      	movs	r4, #28
	return &data->mgr[type];
 1006700:	6900      	ldr	r0, [r0, #16]
 1006702:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
 1006704:	fb03 0004 	mla	r0, r3, r4, r0
 1006708:	2100      	movs	r1, #0
}
 100670a:	bc10      	pop	{r4}
	notify(mgr, 0);
 100670c:	4710      	bx	r2

0100670e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
 100670e:	2000      	movs	r0, #0
 1006710:	f7fd bd32 	b.w	1004178 <nrfx_clock_start>

01006714 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
 1006714:	2000      	movs	r0, #0
 1006716:	f000 b8d6 	b.w	10068c6 <nrfx_clock_stop>

0100671a <blocking_start_callback>:
{
 100671a:	4610      	mov	r0, r2
 100671c:	f7fe bce4 	b.w	10050e8 <z_impl_k_sem_give>

01006720 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006720:	6843      	ldr	r3, [r0, #4]
}
 1006722:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006724:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
 1006726:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
 1006728:	600b      	str	r3, [r1, #0]
}
 100672a:	4770      	bx	lr

0100672c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100672c:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
 100672e:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006732:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
 1006734:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
 1006738:	6098      	str	r0, [r3, #8]
}
 100673a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 100673c:	60d9      	str	r1, [r3, #12]
 100673e:	4770      	bx	lr

01006740 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006740:	6843      	ldr	r3, [r0, #4]
}
 1006742:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006744:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
 1006746:	6099      	str	r1, [r3, #8]
}
 1006748:	4770      	bx	lr

0100674a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100674a:	6843      	ldr	r3, [r0, #4]
}
 100674c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 100674e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
 1006750:	60d9      	str	r1, [r3, #12]
}
 1006752:	4770      	bx	lr

01006754 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
 1006754:	6843      	ldr	r3, [r0, #4]
 1006756:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
 1006758:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
 100675a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
 100675e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
 1006760:	6090      	str	r0, [r2, #8]
}
 1006762:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
 1006764:	60d3      	str	r3, [r2, #12]
 1006766:	4770      	bx	lr

01006768 <gpio_nrfx_manage_callback>:
{
 1006768:	b510      	push	{r4, lr}
	return port->data;
 100676a:	6903      	ldr	r3, [r0, #16]
	return list->head;
 100676c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
 100676e:	b1f8      	cbz	r0, 10067b0 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1006770:	4288      	cmp	r0, r1
 1006772:	d119      	bne.n	10067a8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 1006774:	689c      	ldr	r4, [r3, #8]
	return node->next;
 1006776:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
 1006778:	42a1      	cmp	r1, r4
	list->head = node;
 100677a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 100677c:	d100      	bne.n	1006780 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
 100677e:	6098      	str	r0, [r3, #8]
	parent->next = child;
 1006780:	2000      	movs	r0, #0
 1006782:	6008      	str	r0, [r1, #0]
	if (set) {
 1006784:	b12a      	cbz	r2, 1006792 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
 1006786:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 1006788:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 100678a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 100678c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 100678e:	b902      	cbnz	r2, 1006792 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
 1006790:	6099      	str	r1, [r3, #8]
	return 0;
 1006792:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 1006794:	e010      	b.n	10067b8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 1006796:	4281      	cmp	r1, r0
 1006798:	d106      	bne.n	10067a8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
 100679a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
 100679c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 100679e:	6898      	ldr	r0, [r3, #8]
 10067a0:	4281      	cmp	r1, r0
 10067a2:	d1ed      	bne.n	1006780 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
 10067a4:	609c      	str	r4, [r3, #8]
}
 10067a6:	e7eb      	b.n	1006780 <gpio_nrfx_manage_callback+0x18>
	return node->next;
 10067a8:	4604      	mov	r4, r0
 10067aa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 10067ac:	2800      	cmp	r0, #0
 10067ae:	d1f2      	bne.n	1006796 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
 10067b0:	2a00      	cmp	r2, #0
 10067b2:	d1e8      	bne.n	1006786 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
 10067b4:	f06f 0015 	mvn.w	r0, #21
}
 10067b8:	bd10      	pop	{r4, pc}

010067ba <uarte_nrfx_config_get>:
{
 10067ba:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
 10067bc:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
 10067be:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
 10067c2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 10067c6:	2000      	movs	r0, #0
 10067c8:	4770      	bx	lr

010067ca <uarte_nrfx_err_check>:
	return config->uarte_regs;
 10067ca:	6843      	ldr	r3, [r0, #4]
 10067cc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
 10067ce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
 10067d2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
 10067d6:	4770      	bx	lr

010067d8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
 10067d8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
 10067da:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
 10067dc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 10067de:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
 10067e2:	b150      	cbz	r0, 10067fa <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 10067e4:	2000      	movs	r0, #0
	*c = *data->rx_data;
 10067e6:	6952      	ldr	r2, [r2, #20]
 10067e8:	7812      	ldrb	r2, [r2, #0]
 10067ea:	700a      	strb	r2, [r1, #0]
 10067ec:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
 10067f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 10067f4:	2201      	movs	r2, #1
 10067f6:	601a      	str	r2, [r3, #0]
	return 0;
 10067f8:	4770      	bx	lr
		return -1;
 10067fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 10067fe:	4770      	bx	lr

01006800 <is_tx_ready.isra.0>:
	return config->uarte_regs;
 1006800:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
 1006802:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1006804:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 1006808:	b940      	cbnz	r0, 100681c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
 100680a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
 100680c:	079b      	lsls	r3, r3, #30
 100680e:	d406      	bmi.n	100681e <is_tx_ready.isra.0+0x1e>
 1006810:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
 1006814:	3800      	subs	r0, #0
 1006816:	bf18      	it	ne
 1006818:	2001      	movne	r0, #1
 100681a:	4770      	bx	lr
 100681c:	2001      	movs	r0, #1
}
 100681e:	4770      	bx	lr

01006820 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
 1006820:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
 1006822:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
 1006824:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
 1006828:	05c9      	lsls	r1, r1, #23
 100682a:	d518      	bpl.n	100685e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 100682c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 1006830:	b1a9      	cbz	r1, 100685e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
 1006832:	f04f 0020 	mov.w	r0, #32
 1006836:	f3ef 8111 	mrs	r1, BASEPRI
 100683a:	f380 8812 	msr	BASEPRI_MAX, r0
 100683e:	f3bf 8f6f 	isb	sy
 1006842:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
 1006846:	b130      	cbz	r0, 1006856 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
 1006848:	2000      	movs	r0, #0
 100684a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
 100684e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
 1006852:	2001      	movs	r0, #1
 1006854:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
 1006856:	f381 8811 	msr	BASEPRI, r1
 100685a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
 100685e:	6852      	ldr	r2, [r2, #4]
 1006860:	06d2      	lsls	r2, r2, #27
 1006862:	d515      	bpl.n	1006890 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
 1006864:	f04f 0120 	mov.w	r1, #32
 1006868:	f3ef 8211 	mrs	r2, BASEPRI
 100686c:	f381 8812 	msr	BASEPRI_MAX, r1
 1006870:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
 1006874:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
 1006878:	b111      	cbz	r1, 1006880 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
 100687a:	2100      	movs	r1, #0
 100687c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
 1006880:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 1006884:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
 1006888:	f382 8811 	msr	BASEPRI, r2
 100688c:	f3bf 8f6f 	isb	sy
}
 1006890:	4770      	bx	lr

01006892 <sys_clock_cycle_get_32>:
{
 1006892:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
 1006894:	f7fd f940 	bl	1003b18 <z_nrf_rtc_timer_read>
}
 1006898:	bd08      	pop	{r3, pc}

0100689a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 100689a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
 100689c:	6843      	ldr	r3, [r0, #4]
 100689e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
 10068a0:	7a05      	ldrb	r5, [r0, #8]
 10068a2:	6844      	ldr	r4, [r0, #4]
 10068a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 10068a8:	42a3      	cmp	r3, r4
 10068aa:	d302      	bcc.n	10068b2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
 10068ac:	f06f 0001 	mvn.w	r0, #1
}
 10068b0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
 10068b2:	795c      	ldrb	r4, [r3, #5]
 10068b4:	428c      	cmp	r4, r1
 10068b6:	d001      	beq.n	10068bc <pinctrl_lookup_state+0x22>
		(*state)++;
 10068b8:	3308      	adds	r3, #8
 10068ba:	e7f0      	b.n	100689e <pinctrl_lookup_state+0x4>
			return 0;
 10068bc:	2000      	movs	r0, #0
 10068be:	e7f7      	b.n	10068b0 <pinctrl_lookup_state+0x16>

010068c0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
 10068c0:	4700      	bx	r0

010068c2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
 10068c2:	f000 b9e6 	b.w	1006c92 <z_impl_k_busy_wait>

010068c6 <nrfx_clock_stop>:
    clock_stop(domain);
 10068c6:	f7fd bbdb 	b.w	1004080 <clock_stop>

010068ca <nrf_gpio_reconfigure>:
{
 10068ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 10068cc:	4616      	mov	r6, r2
 10068ce:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
 10068d2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10068d4:	a801      	add	r0, sp, #4
{
 10068d6:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
 10068d8:	f7fd fcc8 	bl	100426c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
 10068dc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 10068de:	f1b6 0c00 	subs.w	ip, r6, #0
 10068e2:	bf18      	it	ne
 10068e4:	f04f 0c01 	movne.w	ip, #1
 10068e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 10068ec:	1e0b      	subs	r3, r1, #0
 10068ee:	bf18      	it	ne
 10068f0:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 10068f2:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 10068f4:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 10068f8:	bf14      	ite	ne
 10068fa:	f04f 0c0c 	movne.w	ip, #12
 10068fe:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1006902:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
 1006904:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
 1006908:	bf14      	ite	ne
 100690a:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
 100690e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1006912:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
 1006914:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
 1006918:	bf14      	ite	ne
 100691a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
 100691e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
 1006922:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
 1006926:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
 100692a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 100692e:	b101      	cbz	r1, 1006932 <nrf_gpio_reconfigure+0x68>
 1006930:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
 1006932:	b10e      	cbz	r6, 1006938 <nrf_gpio_reconfigure+0x6e>
 1006934:	7836      	ldrb	r6, [r6, #0]
 1006936:	0076      	lsls	r6, r6, #1
 1006938:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
 100693a:	b10d      	cbz	r5, 1006940 <nrf_gpio_reconfigure+0x76>
 100693c:	782d      	ldrb	r5, [r5, #0]
 100693e:	00ad      	lsls	r5, r5, #2
 1006940:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
 1006942:	b10c      	cbz	r4, 1006948 <nrf_gpio_reconfigure+0x7e>
 1006944:	7824      	ldrb	r4, [r4, #0]
 1006946:	0224      	lsls	r4, r4, #8
 1006948:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
 100694a:	b10f      	cbz	r7, 1006950 <nrf_gpio_reconfigure+0x86>
 100694c:	783f      	ldrb	r7, [r7, #0]
 100694e:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
 1006950:	430c      	orrs	r4, r1
 1006952:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
 1006954:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
 1006958:	b003      	add	sp, #12
 100695a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0100695c <nrf_gpio_cfg_sense_set>:
{
 100695c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 100695e:	f10d 030f 	add.w	r3, sp, #15
 1006962:	9301      	str	r3, [sp, #4]
 1006964:	2300      	movs	r3, #0
{
 1006966:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
 100696a:	461a      	mov	r2, r3
 100696c:	4619      	mov	r1, r3
 100696e:	9300      	str	r3, [sp, #0]
 1006970:	f7ff ffab 	bl	10068ca <nrf_gpio_reconfigure>
}
 1006974:	b005      	add	sp, #20
 1006976:	f85d fb04 	ldr.w	pc, [sp], #4

0100697a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
 100697a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 100697c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 100697e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 1006980:	bf9c      	itt	ls
 1006982:	6881      	ldrls	r1, [r0, #8]
 1006984:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
 1006986:	3b01      	subs	r3, #1
 1006988:	1a98      	subs	r0, r3, r2
}
 100698a:	4770      	bx	lr

0100698c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 100698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 1006990:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
 1006992:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1006996:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
 1006998:	eba8 0604 	sub.w	r6, r8, r4
  if (Rem > NumBytes) {
 100699c:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 100699e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 10069a0:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
 10069a2:	4414      	add	r4, r2
  if (Rem > NumBytes) {
 10069a4:	d904      	bls.n	10069b0 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 10069a6:	f7ff fe08 	bl	10065ba <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 10069aa:	60ec      	str	r4, [r5, #12]
}
 10069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 10069b0:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
 10069b2:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 10069b6:	f7ff fe00 	bl	10065ba <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 10069ba:	4622      	mov	r2, r4
 10069bc:	6868      	ldr	r0, [r5, #4]
 10069be:	19b9      	adds	r1, r7, r6
 10069c0:	e7f1      	b.n	10069a6 <_WriteNoCheck+0x1a>

010069c2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 10069c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 10069c6:	4606      	mov	r6, r0
 10069c8:	4689      	mov	r9, r1
 10069ca:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
 10069cc:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
 10069d0:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 10069d2:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 10069d4:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
 10069d6:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 10069d8:	bf28      	it	cs
 10069da:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 10069dc:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 10069de:	42bc      	cmp	r4, r7
 10069e0:	bf28      	it	cs
 10069e2:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 10069e4:	3b01      	subs	r3, #1
 10069e6:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 10069e8:	429c      	cmp	r4, r3
 10069ea:	bf28      	it	cs
 10069ec:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 10069ee:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 10069f0:	4649      	mov	r1, r9
 10069f2:	4428      	add	r0, r5
 10069f4:	4622      	mov	r2, r4
 10069f6:	f7ff fde0 	bl	10065ba <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
 10069fa:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
 10069fc:	4425      	add	r5, r4
      WrOff = 0u;
 10069fe:	42ab      	cmp	r3, r5
 1006a00:	bf08      	it	eq
 1006a02:	2500      	moveq	r5, #0
  } while (NumBytes);
 1006a04:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
 1006a06:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
 1006a08:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
 1006a0a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 1006a0c:	d1e1      	bne.n	10069d2 <_WriteBlocking+0x10>
}
 1006a0e:	4640      	mov	r0, r8
 1006a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

01006a14 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
 1006a14:	f7fd bfd2 	b.w	10049bc <_DoInit>

01006a18 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
 1006a18:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
 1006a1a:	f7ff fffb 	bl	1006a14 <SEGGER_RTT_Init>

	return 0;
}
 1006a1e:	2000      	movs	r0, #0
 1006a20:	bd08      	pop	{r3, pc}

01006a22 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 1006a22:	4770      	bx	lr

01006a24 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 1006a24:	b140      	cbz	r0, 1006a38 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 1006a26:	68c3      	ldr	r3, [r0, #12]
 1006a28:	7858      	ldrb	r0, [r3, #1]
 1006a2a:	f010 0001 	ands.w	r0, r0, #1
 1006a2e:	bf1e      	ittt	ne
 1006a30:	7818      	ldrbne	r0, [r3, #0]
 1006a32:	fab0 f080 	clzne	r0, r0
 1006a36:	0940      	lsrne	r0, r0, #5
}
 1006a38:	4770      	bx	lr

01006a3a <z_early_memset>:
	(void) memset(dst, c, n);
 1006a3a:	f7ff bdc9 	b.w	10065d0 <memset>

01006a3e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
 1006a3e:	f7ff bdbc 	b.w	10065ba <memcpy>

01006a42 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 1006a42:	f3ef 8005 	mrs	r0, IPSR
}
 1006a46:	3800      	subs	r0, #0
 1006a48:	bf18      	it	ne
 1006a4a:	2001      	movne	r0, #1
 1006a4c:	4770      	bx	lr

01006a4e <z_impl_k_thread_name_set>:
}
 1006a4e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 1006a52:	4770      	bx	lr

01006a54 <k_thread_name_get>:
}
 1006a54:	2000      	movs	r0, #0
 1006a56:	4770      	bx	lr

01006a58 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 1006a58:	b508      	push	{r3, lr}
	__asm__ volatile(
 1006a5a:	f04f 0220 	mov.w	r2, #32
 1006a5e:	f3ef 8311 	mrs	r3, BASEPRI
 1006a62:	f382 8812 	msr	BASEPRI_MAX, r2
 1006a66:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
 1006a6a:	f7fb fc6b 	bl	1002344 <arch_cpu_idle>
 1006a6e:	e7f4      	b.n	1006a5a <idle+0x2>

01006a70 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
 1006a70:	f990 300e 	ldrsb.w	r3, [r0, #14]
 1006a74:	428b      	cmp	r3, r1
 1006a76:	d001      	beq.n	1006a7c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
 1006a78:	f7fe bce0 	b.w	100543c <z_set_prio>
}
 1006a7c:	2000      	movs	r0, #0
 1006a7e:	4770      	bx	lr

01006a80 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 1006a80:	b13a      	cbz	r2, 1006a92 <z_impl_k_sem_init+0x12>
 1006a82:	428a      	cmp	r2, r1
 1006a84:	d305      	bcc.n	1006a92 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 1006a86:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 1006a8a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 1006a8e:	2000      	movs	r0, #0
 1006a90:	4770      	bx	lr
		return -EINVAL;
 1006a92:	f06f 0015 	mvn.w	r0, #21
}
 1006a96:	4770      	bx	lr

01006a98 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
 1006a98:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 1006a9c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 1006a9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 1006aa0:	2300      	movs	r3, #0
	node->prev = NULL;
 1006aa2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
 1006aa6:	4770      	bx	lr

01006aa8 <unpend_thread_no_timeout>:
{
 1006aa8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
 1006aaa:	f7ff fff5 	bl	1006a98 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 1006aae:	7b43      	ldrb	r3, [r0, #13]
 1006ab0:	f023 0302 	bic.w	r3, r3, #2
 1006ab4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
 1006ab6:	2300      	movs	r3, #0
 1006ab8:	6083      	str	r3, [r0, #8]
}
 1006aba:	bd08      	pop	{r3, pc}

01006abc <z_thread_timeout>:
{
 1006abc:	4601      	mov	r1, r0
 1006abe:	b510      	push	{r4, lr}
 1006ac0:	f04f 0320 	mov.w	r3, #32
 1006ac4:	f3ef 8411 	mrs	r4, BASEPRI
 1006ac8:	f383 8812 	msr	BASEPRI_MAX, r3
 1006acc:	f3bf 8f6f 	isb	sy
		if (!killed) {
 1006ad0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
 1006ad4:	f013 0f28 	tst.w	r3, #40	; 0x28
 1006ad8:	d10d      	bne.n	1006af6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
 1006ada:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
 1006ade:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
 1006ae0:	b10b      	cbz	r3, 1006ae6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
 1006ae2:	f7ff ffe1 	bl	1006aa8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 1006ae6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
 1006aea:	f023 0314 	bic.w	r3, r3, #20
 1006aee:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
 1006af2:	f7fe fbad 	bl	1005250 <ready_thread>
	__asm__ volatile(
 1006af6:	f384 8811 	msr	BASEPRI, r4
 1006afa:	f3bf 8f6f 	isb	sy
}
 1006afe:	bd10      	pop	{r4, pc}

01006b00 <add_to_waitq_locked>:
{
 1006b00:	b538      	push	{r3, r4, r5, lr}
 1006b02:	4604      	mov	r4, r0
 1006b04:	460d      	mov	r5, r1
	unready_thread(thread);
 1006b06:	f7fe fbd7 	bl	10052b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 1006b0a:	7b63      	ldrb	r3, [r4, #13]
 1006b0c:	f043 0302 	orr.w	r3, r3, #2
 1006b10:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 1006b12:	b1e5      	cbz	r5, 1006b4e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
 1006b14:	60a5      	str	r5, [r4, #8]
	return list->head == list;
 1006b16:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1006b18:	429d      	cmp	r5, r3
 1006b1a:	d109      	bne.n	1006b30 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
 1006b1c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
 1006b1e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
 1006b22:	601c      	str	r4, [r3, #0]
	list->tail = node;
 1006b24:	606c      	str	r4, [r5, #4]
}
 1006b26:	e012      	b.n	1006b4e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
 1006b28:	686a      	ldr	r2, [r5, #4]
 1006b2a:	4293      	cmp	r3, r2
 1006b2c:	d0f6      	beq.n	1006b1c <add_to_waitq_locked+0x1c>
 1006b2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 1006b30:	2b00      	cmp	r3, #0
 1006b32:	d0f3      	beq.n	1006b1c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
 1006b34:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
 1006b38:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
 1006b3c:	428a      	cmp	r2, r1
 1006b3e:	d0f3      	beq.n	1006b28 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
 1006b40:	4291      	cmp	r1, r2
 1006b42:	ddf1      	ble.n	1006b28 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
 1006b44:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 1006b46:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 1006b4a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 1006b4c:	605c      	str	r4, [r3, #4]
}
 1006b4e:	bd38      	pop	{r3, r4, r5, pc}

01006b50 <z_ready_thread>:
{
 1006b50:	b510      	push	{r4, lr}
	__asm__ volatile(
 1006b52:	f04f 0320 	mov.w	r3, #32
 1006b56:	f3ef 8411 	mrs	r4, BASEPRI
 1006b5a:	f383 8812 	msr	BASEPRI_MAX, r3
 1006b5e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 1006b62:	f7fe fb75 	bl	1005250 <ready_thread>
	__asm__ volatile(
 1006b66:	f384 8811 	msr	BASEPRI, r4
 1006b6a:	f3bf 8f6f 	isb	sy
}
 1006b6e:	bd10      	pop	{r4, pc}

01006b70 <z_unpend_thread_no_timeout>:
{
 1006b70:	b508      	push	{r3, lr}
	__asm__ volatile(
 1006b72:	f04f 0320 	mov.w	r3, #32
 1006b76:	f3ef 8111 	mrs	r1, BASEPRI
 1006b7a:	f383 8812 	msr	BASEPRI_MAX, r3
 1006b7e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 1006b82:	f7ff ff91 	bl	1006aa8 <unpend_thread_no_timeout>
	__asm__ volatile(
 1006b86:	f381 8811 	msr	BASEPRI, r1
 1006b8a:	f3bf 8f6f 	isb	sy
}
 1006b8e:	bd08      	pop	{r3, pc}

01006b90 <z_unpend1_no_timeout>:
{
 1006b90:	b508      	push	{r3, lr}
 1006b92:	4603      	mov	r3, r0
	__asm__ volatile(
 1006b94:	f04f 0220 	mov.w	r2, #32
 1006b98:	f3ef 8111 	mrs	r1, BASEPRI
 1006b9c:	f382 8812 	msr	BASEPRI_MAX, r2
 1006ba0:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1006ba4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1006ba6:	4283      	cmp	r3, r0
 1006ba8:	d007      	beq.n	1006bba <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
 1006baa:	b108      	cbz	r0, 1006bb0 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
 1006bac:	f7ff ff7c 	bl	1006aa8 <unpend_thread_no_timeout>
	__asm__ volatile(
 1006bb0:	f381 8811 	msr	BASEPRI, r1
 1006bb4:	f3bf 8f6f 	isb	sy
}
 1006bb8:	bd08      	pop	{r3, pc}
 1006bba:	2000      	movs	r0, #0
 1006bbc:	e7f8      	b.n	1006bb0 <z_unpend1_no_timeout+0x20>

01006bbe <z_unpend_first_thread>:
{
 1006bbe:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 1006bc0:	f04f 0320 	mov.w	r3, #32
 1006bc4:	f3ef 8511 	mrs	r5, BASEPRI
 1006bc8:	f383 8812 	msr	BASEPRI_MAX, r3
 1006bcc:	f3bf 8f6f 	isb	sy
	return list->head == list;
 1006bd0:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 1006bd2:	42a0      	cmp	r0, r4
 1006bd4:	d00d      	beq.n	1006bf2 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
 1006bd6:	b134      	cbz	r4, 1006be6 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
 1006bd8:	4620      	mov	r0, r4
 1006bda:	f7ff ff65 	bl	1006aa8 <unpend_thread_no_timeout>
 1006bde:	f104 0018 	add.w	r0, r4, #24
 1006be2:	f000 f81e 	bl	1006c22 <z_abort_timeout>
	__asm__ volatile(
 1006be6:	f385 8811 	msr	BASEPRI, r5
 1006bea:	f3bf 8f6f 	isb	sy
}
 1006bee:	4620      	mov	r0, r4
 1006bf0:	bd38      	pop	{r3, r4, r5, pc}
 1006bf2:	2400      	movs	r4, #0
 1006bf4:	e7f7      	b.n	1006be6 <z_unpend_first_thread+0x28>

01006bf6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 1006bf6:	4603      	mov	r3, r0
 1006bf8:	b920      	cbnz	r0, 1006c04 <z_reschedule_irqlock+0xe>
 1006bfa:	f3ef 8205 	mrs	r2, IPSR
 1006bfe:	b90a      	cbnz	r2, 1006c04 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
 1006c00:	f7fb bc6a 	b.w	10024d8 <arch_swap>
 1006c04:	f383 8811 	msr	BASEPRI, r3
 1006c08:	f3bf 8f6f 	isb	sy
}
 1006c0c:	4770      	bx	lr

01006c0e <z_reschedule_unlocked>:
	__asm__ volatile(
 1006c0e:	f04f 0320 	mov.w	r3, #32
 1006c12:	f3ef 8011 	mrs	r0, BASEPRI
 1006c16:	f383 8812 	msr	BASEPRI_MAX, r3
 1006c1a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 1006c1e:	f7ff bfea 	b.w	1006bf6 <z_reschedule_irqlock>

01006c22 <z_abort_timeout>:
{
 1006c22:	b510      	push	{r4, lr}
 1006c24:	f04f 0220 	mov.w	r2, #32
 1006c28:	f3ef 8411 	mrs	r4, BASEPRI
 1006c2c:	f382 8812 	msr	BASEPRI_MAX, r2
 1006c30:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 1006c34:	6803      	ldr	r3, [r0, #0]
 1006c36:	b13b      	cbz	r3, 1006c48 <z_abort_timeout+0x26>
			remove_timeout(to);
 1006c38:	f7fe fe32 	bl	10058a0 <remove_timeout>
			ret = 0;
 1006c3c:	2000      	movs	r0, #0
	__asm__ volatile(
 1006c3e:	f384 8811 	msr	BASEPRI, r4
 1006c42:	f3bf 8f6f 	isb	sy
}
 1006c46:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 1006c48:	f06f 0015 	mvn.w	r0, #21
 1006c4c:	e7f7      	b.n	1006c3e <z_abort_timeout+0x1c>

01006c4e <z_set_timeout_expiry>:
{
 1006c4e:	b570      	push	{r4, r5, r6, lr}
 1006c50:	4604      	mov	r4, r0
 1006c52:	460d      	mov	r5, r1
	__asm__ volatile(
 1006c54:	f04f 0320 	mov.w	r3, #32
 1006c58:	f3ef 8611 	mrs	r6, BASEPRI
 1006c5c:	f383 8812 	msr	BASEPRI_MAX, r3
 1006c60:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 1006c64:	f7fe fdf4 	bl	1005850 <next_timeout>
			      || (ticks <= next_to);
 1006c68:	2801      	cmp	r0, #1
 1006c6a:	dd07      	ble.n	1006c7c <z_set_timeout_expiry+0x2e>
 1006c6c:	42a0      	cmp	r0, r4
 1006c6e:	db05      	blt.n	1006c7c <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 1006c70:	42a0      	cmp	r0, r4
 1006c72:	4629      	mov	r1, r5
 1006c74:	bfa8      	it	ge
 1006c76:	4620      	movge	r0, r4
 1006c78:	f7fd f8ca 	bl	1003e10 <sys_clock_set_timeout>
	__asm__ volatile(
 1006c7c:	f386 8811 	msr	BASEPRI, r6
 1006c80:	f3bf 8f6f 	isb	sy
}
 1006c84:	bd70      	pop	{r4, r5, r6, pc}

01006c86 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
 1006c86:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
 1006c88:	f7fe ff00 	bl	1005a8c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 1006c8c:	bd08      	pop	{r3, pc}

01006c8e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
 1006c8e:	f7fe befd 	b.w	1005a8c <sys_clock_tick_get>

01006c92 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 1006c92:	b108      	cbz	r0, 1006c98 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
 1006c94:	f7fa bd78 	b.w	1001788 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 1006c98:	4770      	bx	lr

01006c9a <k_timer_init>:
	timer->status = 0U;
 1006c9a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
 1006c9c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
 1006ca0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
 1006ca4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
 1006ca8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
 1006cac:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 1006cae:	6343      	str	r3, [r0, #52]	; 0x34
}
 1006cb0:	4770      	bx	lr

01006cb2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 1006cb2:	b510      	push	{r4, lr}
 1006cb4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
 1006cb6:	f7ff ffb4 	bl	1006c22 <z_abort_timeout>

	if (inactive) {
 1006cba:	b9b0      	cbnz	r0, 1006cea <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 1006cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 1006cbe:	b10b      	cbz	r3, 1006cc4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 1006cc0:	4620      	mov	r0, r4
 1006cc2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 1006cc4:	f104 0018 	add.w	r0, r4, #24
 1006cc8:	f7ff ff62 	bl	1006b90 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 1006ccc:	b168      	cbz	r0, 1006cea <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 1006cce:	f7ff ff3f 	bl	1006b50 <z_ready_thread>
	__asm__ volatile(
 1006cd2:	f04f 0320 	mov.w	r3, #32
 1006cd6:	f3ef 8011 	mrs	r0, BASEPRI
 1006cda:	f383 8812 	msr	BASEPRI_MAX, r3
 1006cde:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 1006ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 1006ce6:	f7ff bf86 	b.w	1006bf6 <z_reschedule_irqlock>
 1006cea:	bd10      	pop	{r4, pc}

01006cec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 1006cec:	4770      	bx	lr
	...
