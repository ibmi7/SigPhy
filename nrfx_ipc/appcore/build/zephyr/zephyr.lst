
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 22 00 20 21 32 00 00 d7 7b 00 00 f5 31 00 00     @". !2...{...1..
  10:	f5 31 00 00 f5 31 00 00 f5 31 00 00 f5 31 00 00     .1...1...1...1..
	...
  2c:	6d 2b 00 00 f5 31 00 00 00 00 00 00 15 2b 00 00     m+...1.......+..
  3c:	f5 31 00 00                                         .1..

00000040 <_irq_vector_table>:
  40:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  50:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  60:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  70:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  80:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  90:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  a0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  b0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  c0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  d0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  e0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
  f0:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 100:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 110:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 120:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 130:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 140:	ed 2b 00 00 ed 2b 00 00 ed 2b 00 00 ed 2b 00 00     .+...+...+...+..
 150:	ed 2b 00 00                                         .+..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x22>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <__data_size+0x54>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <__data_size+0x4c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
     1e0:	d204      	bcs.n	1ec <__data_size+0xc>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <__data_size+0xc>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <__data_size+0x50>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295
     20c:	d204      	bcs.n	218 <__data_size+0x38>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <__data_size+0x38>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <__data_size+0x48>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <__data_size+0xc>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <__data_size+0x38>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <__data_size+0x88>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <__data_size+0x88>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <__data_size+0x3e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
     2fe:	d204      	bcs.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <__data_size+0x5a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <__data_size+0x88>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     326:	b916      	cbnz	r6, 32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <__data_size+0x48>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <__data_size+0x48>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xa>
     3ec:	d106      	bne.n	3fc <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x14>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x14>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>

00000424 <spi_transceive.constprop.0>:
#endif

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
     424:	b430      	push	{r4, r5}
     426:	4613      	mov	r3, r2
     428:	4604      	mov	r4, r0
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
     42a:	4804      	ldr	r0, [pc, #16]	; (43c <spi_transceive.constprop.0+0x18>)
     42c:	6882      	ldr	r2, [r0, #8]
     42e:	6815      	ldr	r5, [r2, #0]
     430:	460a      	mov	r2, r1
     432:	46ac      	mov	ip, r5
     434:	4621      	mov	r1, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
     436:	bc30      	pop	{r4, r5}
     438:	4760      	bx	ip
     43a:	bf00      	nop
     43c:	000089e0 	.word	0x000089e0

00000440 <nrfx_ipc_send.part.0>:
			ipc_rx_buf->busy = 0;
		}
	}
}

int nrfx_ipc_send(const void *data, int size)
     440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	{
		return -EINVAL;
	}
	if (ipc_tx_buf->valid == MAGIC_VALID && ipc_tx_buf->busy == 1)
	{
		LOG_ERR("ipc is busy");
     442:	4b08      	ldr	r3, [pc, #32]	; (464 <nrfx_ipc_send.part.0+0x24>)
     444:	9305      	str	r3, [sp, #20]
     446:	2302      	movs	r3, #2
     448:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     44a:	2300      	movs	r3, #0
     44c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     450:	4805      	ldr	r0, [pc, #20]	; (468 <nrfx_ipc_send.part.0+0x28>)
     452:	aa04      	add	r2, sp, #16
     454:	f001 fd6c 	bl	1f30 <z_impl_z_log_msg_static_create>
	ipc_tx_buf->busy = 1;
	ipc_tx_buf->len = size;
	memcpy(ipc_tx_buf->data, data, size);
	nrfx_ipc_signal(CH_NO_SEND);
	return 0;
}
     458:	f06f 000f 	mvn.w	r0, #15
     45c:	b007      	add	sp, #28
     45e:	f85d fb04 	ldr.w	pc, [sp], #4
     462:	bf00      	nop
     464:	00008fe0 	.word	0x00008fe0
     468:	00008c7c 	.word	0x00008c7c

0000046c <nrfx_ipc_handler>:
{
     46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOG_INF("event_mask %d", event_mask);
     46e:	466c      	mov	r4, sp
{
     470:	af00      	add	r7, sp, #0
	LOG_INF("event_mask %d", event_mask);
     472:	b088      	sub	sp, #32
{
     474:	4605      	mov	r5, r0
	LOG_INF("event_mask %d", event_mask);
     476:	466a      	mov	r2, sp
     478:	2603      	movs	r6, #3
     47a:	4b21      	ldr	r3, [pc, #132]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     47c:	e9c2 3005 	strd	r3, r0, [r2, #20]
     480:	f842 6f10 	str.w	r6, [r2, #16]!
     484:	2300      	movs	r3, #0
     486:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     48a:	481e      	ldr	r0, [pc, #120]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     48c:	f001 fd50 	bl	1f30 <z_impl_z_log_msg_static_create>
	if (event_mask == CH_NO_RECEIVE) {
     490:	2d01      	cmp	r5, #1
     492:	46a5      	mov	sp, r4
     494:	d113      	bne.n	4be <nrfx_ipc_handler+0x52>
		if (ipc_rx_buf->valid != MAGIC_VALID)
     496:	4d1c      	ldr	r5, [pc, #112]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     498:	4a1c      	ldr	r2, [pc, #112]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     49a:	682b      	ldr	r3, [r5, #0]
     49c:	681b      	ldr	r3, [r3, #0]
     49e:	4293      	cmp	r3, r2
     4a0:	d00f      	beq.n	4c2 <nrfx_ipc_handler+0x56>
			LOG_WRN("invalid ipc data %x", ipc_rx_buf->valid);			
     4a2:	b088      	sub	sp, #32
     4a4:	466a      	mov	r2, sp
     4a6:	491a      	ldr	r1, [pc, #104]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
     4ac:	f842 6f10 	str.w	r6, [r2, #16]!
     4b0:	2300      	movs	r3, #0
     4b2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
     4b6:	4813      	ldr	r0, [pc, #76]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     4b8:	f001 fd3a 	bl	1f30 <z_impl_z_log_msg_static_create>
     4bc:	46a5      	mov	sp, r4
}
     4be:	46bd      	mov	sp, r7
     4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			LOG_HEXDUMP_INF(ipc_rx_buf->data, ipc_rx_buf->len, "Received: ");
     4c2:	b088      	sub	sp, #32
     4c4:	466a      	mov	r2, sp
     4c6:	4b13      	ldr	r3, [pc, #76]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     4c8:	4913      	ldr	r1, [pc, #76]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4ca:	6153      	str	r3, [r2, #20]
     4cc:	4b13      	ldr	r3, [pc, #76]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4ce:	6193      	str	r3, [r2, #24]
     4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
     4d4:	8393      	strh	r3, [r2, #28]
     4d6:	4b12      	ldr	r3, [pc, #72]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4d8:	f842 3f10 	str.w	r3, [r2, #16]!
     4dc:	682b      	ldr	r3, [r5, #0]
     4de:	6898      	ldr	r0, [r3, #8]
     4e0:	68db      	ldr	r3, [r3, #12]
     4e2:	ea01 41c0 	and.w	r1, r1, r0, lsl #19
     4e6:	f441 51e6 	orr.w	r1, r1, #7360	; 0x1cc0
     4ea:	4806      	ldr	r0, [pc, #24]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     4ec:	f001 fd20 	bl	1f30 <z_impl_z_log_msg_static_create>
			ipc_rx_buf->valid = 0;
     4f0:	2300      	movs	r3, #0
     4f2:	682a      	ldr	r2, [r5, #0]
     4f4:	46a5      	mov	sp, r4
     4f6:	6013      	str	r3, [r2, #0]
			ipc_rx_buf->busy = 0;
     4f8:	682a      	ldr	r2, [r5, #0]
     4fa:	6053      	str	r3, [r2, #4]
}
     4fc:	e7df      	b.n	4be <nrfx_ipc_handler+0x52>
     4fe:	bf00      	nop
     500:	00008fec 	.word	0x00008fec
     504:	00008c7c 	.word	0x00008c7c
     508:	20000000 	.word	0x20000000
     50c:	20220408 	.word	0x20220408
     510:	00008ffa 	.word	0x00008ffa
     514:	00009850 	.word	0x00009850
     518:	7ff80000 	.word	0x7ff80000
     51c:	0000900e 	.word	0x0000900e
     520:	01000003 	.word	0x01000003

00000524 <nrfx_ipc_send>:
	if (size > (IPC_DATA_MAX_SIZE - IPC_DATA_HEADER_LEN) )
     524:	f5b1 6ffe 	cmp.w	r1, #2032	; 0x7f0
{
     528:	460a      	mov	r2, r1
     52a:	b538      	push	{r3, r4, r5, lr}
	if (size > (IPC_DATA_MAX_SIZE - IPC_DATA_HEADER_LEN) )
     52c:	dc19      	bgt.n	562 <nrfx_ipc_send+0x3e>
	if (ipc_tx_buf->valid == MAGIC_VALID && ipc_tx_buf->busy == 1)
     52e:	490e      	ldr	r1, [pc, #56]	; (568 <nrfx_ipc_send+0x44>)
     530:	4c0e      	ldr	r4, [pc, #56]	; (56c <nrfx_ipc_send+0x48>)
     532:	680b      	ldr	r3, [r1, #0]
     534:	681d      	ldr	r5, [r3, #0]
     536:	42a5      	cmp	r5, r4
     538:	d106      	bne.n	548 <nrfx_ipc_send+0x24>
     53a:	685d      	ldr	r5, [r3, #4]
     53c:	2d01      	cmp	r5, #1
     53e:	d103      	bne.n	548 <nrfx_ipc_send+0x24>
}
     540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     544:	f7ff bf7c 	b.w	440 <nrfx_ipc_send.part.0>
	ipc_tx_buf->valid = MAGIC_VALID;
     548:	601c      	str	r4, [r3, #0]
	ipc_tx_buf->busy = 1;
     54a:	2401      	movs	r4, #1
     54c:	680b      	ldr	r3, [r1, #0]
	memcpy(ipc_tx_buf->data, data, size);
     54e:	4601      	mov	r1, r0
	ipc_tx_buf->len = size;
     550:	e9c3 4201 	strd	r4, r2, [r3, #4]
	memcpy(ipc_tx_buf->data, data, size);
     554:	68d8      	ldr	r0, [r3, #12]
     556:	f007 fb85 	bl	7c64 <memcpy>
	return 0;
     55a:	2000      	movs	r0, #0

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
     55c:	4b04      	ldr	r3, [pc, #16]	; (570 <nrfx_ipc_send+0x4c>)
     55e:	601c      	str	r4, [r3, #0]
}
     560:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
     562:	f06f 0015 	mvn.w	r0, #21
     566:	e7fb      	b.n	560 <nrfx_ipc_send+0x3c>
     568:	20000004 	.word	0x20000004
     56c:	20220408 	.word	0x20220408
     570:	5002a000 	.word	0x5002a000

00000574 <send_to_net>:

void send_to_net(void)
{
     574:	b5b0      	push	{r4, r5, r7, lr}
	int ret;
	static uint8_t cnt;
	char test_str[20];
	//snprintf(&spi_rx_buf[0], 1, "SPI I am from APP %c", cnt++);
	spi_rx_buf[0]=0;
     576:	2400      	movs	r4, #0
     578:	4b16      	ldr	r3, [pc, #88]	; (5d4 <send_to_net+0x60>)
{
     57a:	af00      	add	r7, sp, #0
	ret = nrfx_ipc_send(spi_rx_buf[0], 1);
     57c:	2101      	movs	r1, #1
     57e:	4620      	mov	r0, r4
	spi_rx_buf[0]=0;
     580:	701c      	strb	r4, [r3, #0]
	ret = nrfx_ipc_send(spi_rx_buf[0], 1);
     582:	f7ff ffcf 	bl	524 <nrfx_ipc_send>
	if (ret)
     586:	b188      	cbz	r0, 5ac <send_to_net+0x38>
	{
		LOG_ERR("nrfx_ipc_send error %d", ret);
     588:	466d      	mov	r5, sp
     58a:	b088      	sub	sp, #32
     58c:	466a      	mov	r2, sp
     58e:	4b12      	ldr	r3, [pc, #72]	; (5d8 <send_to_net+0x64>)
     590:	e9c2 3005 	strd	r3, r0, [r2, #20]
     594:	2303      	movs	r3, #3
     596:	f842 3f10 	str.w	r3, [r2, #16]!
     59a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     59e:	4623      	mov	r3, r4
     5a0:	480e      	ldr	r0, [pc, #56]	; (5dc <send_to_net+0x68>)
     5a2:	f001 fcc5 	bl	1f30 <z_impl_z_log_msg_static_create>
     5a6:	46ad      	mov	sp, r5
	}
	else
	{
		LOG_INF("sent successfully %x", cnt-1);
	}	
}
     5a8:	46bd      	mov	sp, r7
     5aa:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_INF("sent successfully %x", cnt-1);
     5ac:	466c      	mov	r4, sp
     5ae:	b088      	sub	sp, #32
     5b0:	466a      	mov	r2, sp
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <send_to_net+0x6c>)
     5b4:	6153      	str	r3, [r2, #20]
     5b6:	f04f 33ff 	mov.w	r3, #4294967295
     5ba:	6193      	str	r3, [r2, #24]
     5bc:	2303      	movs	r3, #3
     5be:	f842 3f10 	str.w	r3, [r2, #16]!
     5c2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     5c6:	4603      	mov	r3, r0
     5c8:	4804      	ldr	r0, [pc, #16]	; (5dc <send_to_net+0x68>)
     5ca:	f001 fcb1 	bl	1f30 <z_impl_z_log_msg_static_create>
     5ce:	46a5      	mov	sp, r4
}
     5d0:	e7ea      	b.n	5a8 <send_to_net+0x34>
     5d2:	bf00      	nop
     5d4:	200011d0 	.word	0x200011d0
     5d8:	00009019 	.word	0x00009019
     5dc:	00008c7c 	.word	0x00008c7c
     5e0:	00009030 	.word	0x00009030

000005e4 <main>:

void main(void)
{
     5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e6:	b08d      	sub	sp, #52	; 0x34
     5e8:	af00      	add	r7, sp, #0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     5ea:	486e      	ldr	r0, [pc, #440]	; (7a4 <main+0x1c0>)
     5ec:	f007 fefd 	bl	83ea <z_device_is_ready>
	//init spi
	struct device * spi1_dev = DEVICE_DT_GET(MY_SPI_MASTER);
	if(!device_is_ready(spi1_dev)) {
     5f0:	b910      	cbnz	r0, 5f8 <main+0x14>
		printk("SPI master device not ready!\n");
     5f2:	486d      	ldr	r0, [pc, #436]	; (7a8 <main+0x1c4>)
     5f4:	f006 fed1 	bl	739a <printk>
	}
	struct spi_cs_control spim_cs = {
     5f8:	4a6c      	ldr	r2, [pc, #432]	; (7ac <main+0x1c8>)
        .operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB |
				 SPI_MODE_CPOL | SPI_MODE_CPHA,
		.slave = 0,
		.cs = &spim_cs,
    };
	spi_tx_buf[0] = 0xAE;
     5fa:	4c6d      	ldr	r4, [pc, #436]	; (7b0 <main+0x1cc>)
	struct spi_cs_control spim_cs = {
     5fc:	ca07      	ldmia	r2, {r0, r1, r2}
     5fe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    struct spi_config spi_cfg = {
     602:	f44f 7283 	mov.w	r2, #262	; 0x106
     606:	496b      	ldr	r1, [pc, #428]	; (7b4 <main+0x1d0>)
	spi_tx_buf[4] = 63;
    spi_tx_buf[5] = 0xD3;
	spi_tx_buf[6] = 0x40 | 0x0;
	spi_tx_buf[7] = 0x10;
	spi_tx_buf[8] = 0x20;
    spi_tx_buf[9] = 0x0;
     608:	2500      	movs	r5, #0
    struct spi_config spi_cfg = {
     60a:	e9c7 1203 	strd	r1, r2, [r7, #12]
	spi_tx_buf[0] = 0xAE;
     60e:	22ae      	movs	r2, #174	; 0xae
	spi_tx_buf[7] = 0x10;
     610:	2110      	movs	r1, #16
	spi_tx_buf[0] = 0xAE;
     612:	7022      	strb	r2, [r4, #0]
	spi_tx_buf[7] = 0x10;
     614:	71e1      	strb	r1, [r4, #7]
    spi_tx_buf[1] = 0xD5;
     616:	22d5      	movs	r2, #213	; 0xd5
	spi_tx_buf[8] = 0x20;
     618:	2120      	movs	r1, #32
    spi_tx_buf[1] = 0xD5;
     61a:	7062      	strb	r2, [r4, #1]
	spi_tx_buf[8] = 0x20;
     61c:	7221      	strb	r1, [r4, #8]
	spi_tx_buf[2] = 0x80;
     61e:	2280      	movs	r2, #128	; 0x80
	spi_tx_buf[10] = 0xA0 | 1;
     620:	21a1      	movs	r1, #161	; 0xa1
	spi_tx_buf[2] = 0x80;
     622:	70a2      	strb	r2, [r4, #2]
	spi_tx_buf[10] = 0xA0 | 1;
     624:	72a1      	strb	r1, [r4, #10]
	spi_tx_buf[3] = 0xA8;
     626:	22a8      	movs	r2, #168	; 0xa8
	spi_tx_buf[11] = 0xC8;
     628:	21c8      	movs	r1, #200	; 0xc8
	spi_tx_buf[3] = 0xA8;
     62a:	70e2      	strb	r2, [r4, #3]
	spi_tx_buf[11] = 0xC8;
     62c:	72e1      	strb	r1, [r4, #11]
	spi_tx_buf[4] = 63;
     62e:	223f      	movs	r2, #63	; 0x3f
	spi_tx_buf[12] = 0xDA;
     630:	21da      	movs	r1, #218	; 0xda
	spi_tx_buf[4] = 63;
     632:	7122      	strb	r2, [r4, #4]
	spi_tx_buf[12] = 0xDA;
     634:	7321      	strb	r1, [r4, #12]
    spi_tx_buf[5] = 0xD3;
     636:	22d3      	movs	r2, #211	; 0xd3
    spi_tx_buf[13] = 0x12;
     638:	2112      	movs	r1, #18
    spi_tx_buf[5] = 0xD3;
     63a:	7162      	strb	r2, [r4, #5]
    spi_tx_buf[13] = 0x12;
     63c:	7361      	strb	r1, [r4, #13]
	spi_tx_buf[6] = 0x40 | 0x0;
     63e:	2240      	movs	r2, #64	; 0x40
	spi_tx_buf[14] = 0x81;
     640:	2181      	movs	r1, #129	; 0x81
	spi_tx_buf[6] = 0x40 | 0x0;
     642:	71a2      	strb	r2, [r4, #6]
	spi_tx_buf[14] = 0x81;
     644:	73a1      	strb	r1, [r4, #14]
	spi_tx_buf[15] = 0x9F;
	spi_tx_buf[16] = 0xD9;
    spi_tx_buf[17] = 0x22;
	spi_tx_buf[18] = 0xDB;
	spi_tx_buf[19] = 0x40;
     646:	74e2      	strb	r2, [r4, #19]
	spi_tx_buf[15] = 0x9F;
     648:	219f      	movs	r1, #159	; 0x9f
	spi_tx_buf[20] = 0xA4;
     64a:	22a4      	movs	r2, #164	; 0xa4
	spi_tx_buf[15] = 0x9F;
     64c:	73e1      	strb	r1, [r4, #15]
	spi_tx_buf[20] = 0xA4;
     64e:	7522      	strb	r2, [r4, #20]
	spi_tx_buf[16] = 0xD9;
     650:	21d9      	movs	r1, #217	; 0xd9
    spi_tx_buf[21] = 0xA6;
     652:	22a6      	movs	r2, #166	; 0xa6
	spi_tx_buf[16] = 0xD9;
     654:	7421      	strb	r1, [r4, #16]
    spi_tx_buf[21] = 0xA6;
     656:	7562      	strb	r2, [r4, #21]
    spi_tx_buf[17] = 0x22;
     658:	2122      	movs	r1, #34	; 0x22
	spi_tx_buf[22] = 0x2E;
     65a:	222e      	movs	r2, #46	; 0x2e
    spi_tx_buf[17] = 0x22;
     65c:	7461      	strb	r1, [r4, #17]
	spi_tx_buf[22] = 0x2E;
     65e:	75a2      	strb	r2, [r4, #22]
	spi_tx_buf[18] = 0xDB;
     660:	21db      	movs	r1, #219	; 0xdb
	spi_tx_buf[23] = 0xAF;
     662:	22af      	movs	r2, #175	; 0xaf
	for (int i = 0; i < 24; i++)
	{
		printk("SPI TX: 0x%.2x\n", spi_tx_buf[i]);
     664:	4e54      	ldr	r6, [pc, #336]	; (7b8 <main+0x1d4>)
    struct spi_config spi_cfg = {
     666:	617f      	str	r7, [r7, #20]
    spi_tx_buf[9] = 0x0;
     668:	7265      	strb	r5, [r4, #9]
	spi_tx_buf[18] = 0xDB;
     66a:	74a1      	strb	r1, [r4, #18]
	spi_tx_buf[23] = 0xAF;
     66c:	75e2      	strb	r2, [r4, #23]
		printk("SPI TX: 0x%.2x\n", spi_tx_buf[i]);
     66e:	4630      	mov	r0, r6
     670:	f814 1b01 	ldrb.w	r1, [r4], #1
	for (int i = 0; i < 24; i++)
     674:	3501      	adds	r5, #1
		printk("SPI TX: 0x%.2x\n", spi_tx_buf[i]);
     676:	f006 fe90 	bl	739a <printk>
	for (int i = 0; i < 24; i++)
     67a:	2d18      	cmp	r5, #24
     67c:	d1f7      	bne.n	66e <main+0x8a>
 */
static inline int spi_write(const struct device *dev,
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
     67e:	2200      	movs	r2, #0
     680:	494e      	ldr	r1, [pc, #312]	; (7bc <main+0x1d8>)
     682:	f107 000c 	add.w	r0, r7, #12
     686:	f7ff fecd 	bl	424 <spi_transceive.constprop.0>
     68a:	4604      	mov	r4, r0
	}
	int error = spi_write(spi1_dev,&spi_cfg,&tx);
	spi_transceive(spi1_dev, &spi_cfg, &tx, &rx);
     68c:	4a4c      	ldr	r2, [pc, #304]	; (7c0 <main+0x1dc>)
     68e:	494b      	ldr	r1, [pc, #300]	; (7bc <main+0x1d8>)
     690:	f107 000c 	add.w	r0, r7, #12
     694:	f7ff fec6 	bl	424 <spi_transceive.constprop.0>
	if(error != 0){
     698:	b11c      	cbz	r4, 6a2 <main+0xbe>
		printk("SPI transceive error: %i\n", error);
     69a:	4621      	mov	r1, r4
     69c:	4849      	ldr	r0, [pc, #292]	; (7c4 <main+0x1e0>)
     69e:	f006 fe7c 	bl	739a <printk>
	}

	//init ipc
	LOG_INF("dual core communication sample at %s %s", __TIME__, __DATE__);
     6a2:	466c      	mov	r4, sp
     6a4:	b08a      	sub	sp, #40	; 0x28
     6a6:	466b      	mov	r3, sp
     6a8:	4947      	ldr	r1, [pc, #284]	; (7c8 <main+0x1e4>)
     6aa:	f103 0210 	add.w	r2, r3, #16
     6ae:	6159      	str	r1, [r3, #20]
     6b0:	4946      	ldr	r1, [pc, #280]	; (7cc <main+0x1e8>)
     6b2:	f107 0018 	add.w	r0, r7, #24
     6b6:	6199      	str	r1, [r3, #24]
     6b8:	4945      	ldr	r1, [pc, #276]	; (7d0 <main+0x1ec>)
     6ba:	f103 0523 	add.w	r5, r3, #35	; 0x23
     6be:	61b9      	str	r1, [r7, #24]
     6c0:	4944      	ldr	r1, [pc, #272]	; (7d4 <main+0x1f0>)
     6c2:	61d9      	str	r1, [r3, #28]
     6c4:	f103 011f 	add.w	r1, r3, #31
     6c8:	f810 6b01 	ldrb.w	r6, [r0], #1
     6cc:	f801 6f01 	strb.w	r6, [r1, #1]!
     6d0:	42a9      	cmp	r1, r5
     6d2:	d1f9      	bne.n	6c8 <main+0xe4>
     6d4:	4940      	ldr	r1, [pc, #256]	; (7d8 <main+0x1f4>)
     6d6:	6119      	str	r1, [r3, #16]
     6d8:	2300      	movs	r3, #0
     6da:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
     6de:	483f      	ldr	r0, [pc, #252]	; (7dc <main+0x1f8>)
     6e0:	f001 fc26 	bl	1f30 <z_impl_z_log_msg_static_create>

	nrfx_ipc_init(0, nrfx_ipc_handler, NULL);
     6e4:	2200      	movs	r2, #0
     6e6:	46a5      	mov	sp, r4
     6e8:	4610      	mov	r0, r2
     6ea:	493d      	ldr	r1, [pc, #244]	; (7e0 <main+0x1fc>)
     6ec:	f004 ff72 	bl	55d4 <nrfx_ipc_init>
	IRQ_CONNECT(NRFX_IRQ_NUMBER_GET(NRF_IPC), 4,
     6f0:	2200      	movs	r2, #0
     6f2:	2104      	movs	r1, #4
     6f4:	202a      	movs	r0, #42	; 0x2a
     6f6:	f002 f9bd 	bl	2a74 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);
	ipc_tx_buf->data = (void *)((uint32_t) ipc_tx_buf + IPC_DATA_HEADER_LEN);
     6fa:	483a      	ldr	r0, [pc, #232]	; (7e4 <main+0x200>)
	ipc_rx_buf->data = (void *)((uint32_t) ipc_rx_buf + IPC_DATA_HEADER_LEN);
     6fc:	4a3a      	ldr	r2, [pc, #232]	; (7e8 <main+0x204>)
	ipc_tx_buf->data = (void *)((uint32_t) ipc_tx_buf + IPC_DATA_HEADER_LEN);
     6fe:	6801      	ldr	r1, [r0, #0]
     700:	f101 0310 	add.w	r3, r1, #16
     704:	60cb      	str	r3, [r1, #12]
	ipc_rx_buf->data = (void *)((uint32_t) ipc_rx_buf + IPC_DATA_HEADER_LEN);
     706:	6813      	ldr	r3, [r2, #0]
     708:	f103 0410 	add.w	r4, r3, #16
     70c:	60dc      	str	r4, [r3, #12]
	ipc_tx_buf->valid = 0;
     70e:	2300      	movs	r3, #0
     710:	600b      	str	r3, [r1, #0]
	ipc_tx_buf->busy = 0;
     712:	6801      	ldr	r1, [r0, #0]
     714:	604b      	str	r3, [r1, #4]
	ipc_rx_buf->valid = 0;
     716:	6811      	ldr	r1, [r2, #0]
     718:	600b      	str	r3, [r1, #0]
	ipc_rx_buf->busy = 0;		
     71a:	6812      	ldr	r2, [r2, #0]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
     71c:	4933      	ldr	r1, [pc, #204]	; (7ec <main+0x208>)
     71e:	6053      	str	r3, [r2, #4]
     720:	2201      	movs	r2, #1
     722:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
     726:	2202      	movs	r2, #2
     728:	f8c1 2594 	str.w	r2, [r1, #1428]	; 0x594
    p_reg->INTENSET = mask;
     72c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304

	nrf_ipc_send_config_set(NRF_IPC, CH_NO_SEND, 1 << CH_NO_SEND);
	nrf_ipc_receive_config_set(NRF_IPC, CH_NO_RECEIVE, 1 << CH_NO_RECEIVE);
	nrf_ipc_int_enable(NRF_IPC, 1 << CH_NO_RECEIVE);

	LOG_INF("ipc init done");
     730:	492f      	ldr	r1, [pc, #188]	; (7f0 <main+0x20c>)
     732:	e9c7 210a 	strd	r2, r1, [r7, #40]	; 0x28

	while (1) {                
        LOG_INF("app core start to send");
     736:	4c2f      	ldr	r4, [pc, #188]	; (7f4 <main+0x210>)
     738:	4d28      	ldr	r5, [pc, #160]	; (7dc <main+0x1f8>)
     73a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     73e:	4827      	ldr	r0, [pc, #156]	; (7dc <main+0x1f8>)
     740:	f107 0228 	add.w	r2, r7, #40	; 0x28
     744:	f001 fbf4 	bl	1f30 <z_impl_z_log_msg_static_create>
     748:	2302      	movs	r3, #2
     74a:	62fc      	str	r4, [r7, #44]	; 0x2c
     74c:	62bb      	str	r3, [r7, #40]	; 0x28
     74e:	2300      	movs	r3, #0
     750:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     754:	4628      	mov	r0, r5
     756:	f107 0228 	add.w	r2, r7, #40	; 0x28
     75a:	f001 fbe9 	bl	1f30 <z_impl_z_log_msg_static_create>
        send_to_net();
     75e:	f7ff ff09 	bl	574 <send_to_net>
     762:	4916      	ldr	r1, [pc, #88]	; (7bc <main+0x1d8>)
     764:	2200      	movs	r2, #0
     766:	f107 000c 	add.w	r0, r7, #12
     76a:	f7ff fe5b 	bl	424 <spi_transceive.constprop.0>
		int error = spi_write(spi1_dev,&spi_cfg,&tx);
		if(error != 0){
     76e:	4601      	mov	r1, r0
     770:	b110      	cbz	r0, 778 <main+0x194>
			printk("SPI transceive error: %i\n", error);
     772:	4814      	ldr	r0, [pc, #80]	; (7c4 <main+0x1e0>)
     774:	f006 fe11 	bl	739a <printk>
	return spi_transceive(dev, config, NULL, rx_bufs);
     778:	2100      	movs	r1, #0
     77a:	4a11      	ldr	r2, [pc, #68]	; (7c0 <main+0x1dc>)
     77c:	f107 000c 	add.w	r0, r7, #12
     780:	f7ff fe50 	bl	424 <spi_transceive.constprop.0>
		}
		error = spi_read(spi1_dev,&spi_cfg,&rx);
		if (error != 0)
     784:	4601      	mov	r1, r0
     786:	b110      	cbz	r0, 78e <main+0x1aa>
		{
			printk("SPI transceive error: %i\n", error);
     788:	480e      	ldr	r0, [pc, #56]	; (7c4 <main+0x1e0>)
     78a:	f006 fe06 	bl	739a <printk>
		}
		printk("SPI RX: %d\n", spi_rx_buf[0]);
     78e:	4b1a      	ldr	r3, [pc, #104]	; (7f8 <main+0x214>)
     790:	481a      	ldr	r0, [pc, #104]	; (7fc <main+0x218>)
     792:	7819      	ldrb	r1, [r3, #0]
     794:	f006 fe01 	bl	739a <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     798:	2100      	movs	r1, #0
     79a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     79e:	f005 ffe5 	bl	676c <z_impl_k_sleep>
	while (1) {                
     7a2:	e7d1      	b.n	748 <main+0x164>
     7a4:	000089e0 	.word	0x000089e0
     7a8:	00009045 	.word	0x00009045
     7ac:	00008cf0 	.word	0x00008cf0
     7b0:	200011d1 	.word	0x200011d1
     7b4:	003d0900 	.word	0x003d0900
     7b8:	00009063 	.word	0x00009063
     7bc:	20000018 	.word	0x20000018
     7c0:	20000008 	.word	0x20000008
     7c4:	00009073 	.word	0x00009073
     7c8:	0000908d 	.word	0x0000908d
     7cc:	000090b5 	.word	0x000090b5
     7d0:	03010200 	.word	0x03010200
     7d4:	000090be 	.word	0x000090be
     7d8:	02000004 	.word	0x02000004
     7dc:	00008c7c 	.word	0x00008c7c
     7e0:	0000046d 	.word	0x0000046d
     7e4:	20000004 	.word	0x20000004
     7e8:	20000000 	.word	0x20000000
     7ec:	5002a000 	.word	0x5002a000
     7f0:	000090ca 	.word	0x000090ca
     7f4:	000090d8 	.word	0x000090d8
     7f8:	200011d0 	.word	0x200011d0
     7fc:	000090ef 	.word	0x000090ef

00000800 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     804:	b091      	sub	sp, #68	; 0x44
     806:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     808:	f002 0304 	and.w	r3, r2, #4
     80c:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     80e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     812:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     814:	0784      	lsls	r4, r0, #30
{
     816:	4605      	mov	r5, r0
     818:	460e      	mov	r6, r1
     81a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
     81e:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     820:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     822:	f040 81bd 	bne.w	ba0 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     826:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     828:	b130      	cbz	r0, 838 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     82a:	2907      	cmp	r1, #7
     82c:	d809      	bhi.n	842 <cbvprintf_package+0x42>
		return -ENOSPC;
     82e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     832:	b011      	add	sp, #68	; 0x44
     834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     838:	f001 0607 	and.w	r6, r1, #7
     83c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     83e:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     842:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     844:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
     848:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
     84c:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     84e:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     852:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     854:	9301      	str	r3, [sp, #4]
	bool parsing = false;
     856:	46cb      	mov	fp, r9
	size = sizeof(char *);
     858:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     85a:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
     85e:	b10d      	cbz	r5, 864 <cbvprintf_package+0x64>
				*(const char **)buf = s;
     860:	9a00      	ldr	r2, [sp, #0]
     862:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     864:	9805      	ldr	r0, [sp, #20]
     866:	2800      	cmp	r0, #0
     868:	f300 80eb 	bgt.w	a42 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     86c:	4899      	ldr	r0, [pc, #612]	; (ad4 <cbvprintf_package+0x2d4>)
     86e:	9a00      	ldr	r2, [sp, #0]
     870:	4282      	cmp	r2, r0
     872:	d303      	bcc.n	87c <cbvprintf_package+0x7c>
     874:	4898      	ldr	r0, [pc, #608]	; (ad8 <cbvprintf_package+0x2d8>)
     876:	4282      	cmp	r2, r0
     878:	f0c0 80e3 	bcc.w	a42 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     87c:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     87e:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     882:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     884:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     888:	f100 8106 	bmi.w	a98 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     88c:	2f0f      	cmp	r7, #15
     88e:	f200 80b4 	bhi.w	9fa <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
     892:	2d00      	cmp	r5, #0
     894:	f000 8108 	beq.w	aa8 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
     898:	f107 0240 	add.w	r2, r7, #64	; 0x40
     89c:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     8a0:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     8a2:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     8a6:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     8aa:	9804      	ldr	r0, [sp, #16]
     8ac:	3001      	adds	r0, #1
     8ae:	9004      	str	r0, [sp, #16]
     8b0:	e0ea      	b.n	a88 <cbvprintf_package+0x288>
			switch (*fmt) {
     8b2:	287a      	cmp	r0, #122	; 0x7a
     8b4:	d860      	bhi.n	978 <cbvprintf_package+0x178>
     8b6:	284b      	cmp	r0, #75	; 0x4b
     8b8:	d80e      	bhi.n	8d8 <cbvprintf_package+0xd8>
     8ba:	2847      	cmp	r0, #71	; 0x47
     8bc:	d85c      	bhi.n	978 <cbvprintf_package+0x178>
     8be:	2829      	cmp	r0, #41	; 0x29
     8c0:	d82f      	bhi.n	922 <cbvprintf_package+0x122>
     8c2:	2825      	cmp	r0, #37	; 0x25
     8c4:	d055      	beq.n	972 <cbvprintf_package+0x172>
     8c6:	d857      	bhi.n	978 <cbvprintf_package+0x178>
     8c8:	2820      	cmp	r0, #32
     8ca:	d07d      	beq.n	9c8 <cbvprintf_package+0x1c8>
     8cc:	3823      	subs	r0, #35	; 0x23
     8ce:	f1d0 0b00 	rsbs	fp, r0, #0
     8d2:	eb4b 0b00 	adc.w	fp, fp, r0
     8d6:	e077      	b.n	9c8 <cbvprintf_package+0x1c8>
     8d8:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     8dc:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     8e0:	d84a      	bhi.n	978 <cbvprintf_package+0x178>
     8e2:	e8df f00c 	tbb	[pc, ip]
     8e6:	4971      	.short	0x4971
     8e8:	49494949 	.word	0x49494949
     8ec:	49494949 	.word	0x49494949
     8f0:	494c4949 	.word	0x494c4949
     8f4:	49494949 	.word	0x49494949
     8f8:	5a494949 	.word	0x5a494949
     8fc:	5a4c4c49 	.word	0x5a4c4c49
     900:	4c715a5a 	.word	0x4c715a5a
     904:	4971496e 	.word	0x4971496e
     908:	49184c18 	.word	0x49184c18
     90c:	4c808349 	.word	0x4c808349
     910:	494c4949 	.word	0x494c4949
     914:	80          	.byte	0x80
     915:	00          	.byte	0x00
     916:	2000      	movs	r0, #0
     918:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     91c:	f04f 0a04 	mov.w	sl, #4
     920:	e039      	b.n	996 <cbvprintf_package+0x196>
     922:	2201      	movs	r2, #1
			switch (*fmt) {
     924:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     928:	fa5f fc8c 	uxtb.w	ip, ip
     92c:	fa02 fc0c 	lsl.w	ip, r2, ip
     930:	ea1c 0f0e 	tst.w	ip, lr
     934:	d148      	bne.n	9c8 <cbvprintf_package+0x1c8>
     936:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     93a:	d12e      	bne.n	99a <cbvprintf_package+0x19a>
     93c:	ea1c 0b02 	ands.w	fp, ip, r2
     940:	d042      	beq.n	9c8 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
     942:	3c01      	subs	r4, #1
     944:	4454      	add	r4, sl
     946:	f1ca 0c00 	rsb	ip, sl, #0
     94a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     94e:	2d00      	cmp	r5, #0
     950:	d061      	beq.n	a16 <cbvprintf_package+0x216>
     952:	eba3 0c05 	sub.w	ip, r3, r5
     956:	44a4      	add	ip, r4
     958:	45b4      	cmp	ip, r6
     95a:	f63f af68 	bhi.w	82e <cbvprintf_package+0x2e>
		if (is_str_arg) {
     95e:	2800      	cmp	r0, #0
     960:	d168      	bne.n	a34 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
     962:	2b04      	cmp	r3, #4
     964:	d147      	bne.n	9f6 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
     966:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     96a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     96c:	2304      	movs	r3, #4
     96e:	3404      	adds	r4, #4
     970:	e02a      	b.n	9c8 <cbvprintf_package+0x1c8>
				arg_idx--;
     972:	9a01      	ldr	r2, [sp, #4]
     974:	3a01      	subs	r2, #1
     976:	9201      	str	r2, [sp, #4]
				parsing = false;
     978:	f04f 0b00 	mov.w	fp, #0
				continue;
     97c:	e024      	b.n	9c8 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
     97e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     982:	286c      	cmp	r0, #108	; 0x6c
     984:	d134      	bne.n	9f0 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
     986:	2000      	movs	r0, #0
     988:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
     98c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     98e:	2b6c      	cmp	r3, #108	; 0x6c
     990:	d1c4      	bne.n	91c <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
     992:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     996:	4653      	mov	r3, sl
     998:	e7d3      	b.n	942 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
     99a:	f108 0807 	add.w	r8, r8, #7
     99e:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     9a2:	3407      	adds	r4, #7
     9a4:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
     9a8:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
     9ac:	b135      	cbz	r5, 9bc <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
     9ae:	9806      	ldr	r0, [sp, #24]
     9b0:	4420      	add	r0, r4
     9b2:	42b0      	cmp	r0, r6
     9b4:	f63f af3b 	bhi.w	82e <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
     9b8:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
     9bc:	f04f 0b00 	mov.w	fp, #0
				buf += size;
     9c0:	3408      	adds	r4, #8
			switch (*fmt) {
     9c2:	f04f 0a08 	mov.w	sl, #8
     9c6:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     9c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     9cc:	2800      	cmp	r0, #0
     9ce:	d078      	beq.n	ac2 <cbvprintf_package+0x2c2>
			if (!parsing) {
     9d0:	f1bb 0f00 	cmp.w	fp, #0
     9d4:	f47f af6d 	bne.w	8b2 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
     9d8:	2825      	cmp	r0, #37	; 0x25
     9da:	d1f5      	bne.n	9c8 <cbvprintf_package+0x1c8>
					parsing = true;
     9dc:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	3301      	adds	r3, #1
     9e4:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
     9e6:	f04f 0a04 	mov.w	sl, #4
     9ea:	e7ec      	b.n	9c6 <cbvprintf_package+0x1c6>
			switch (*fmt) {
     9ec:	4658      	mov	r0, fp
     9ee:	e793      	b.n	918 <cbvprintf_package+0x118>
     9f0:	2000      	movs	r0, #0
				parsing = false;
     9f2:	4683      	mov	fp, r0
     9f4:	e7a5      	b.n	942 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
     9f6:	2b08      	cmp	r3, #8
     9f8:	d002      	beq.n	a00 <cbvprintf_package+0x200>
					return -EINVAL;
     9fa:	f06f 0015 	mvn.w	r0, #21
     9fe:	e718      	b.n	832 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
     a00:	f108 0807 	add.w	r8, r8, #7
     a04:	f028 0807 	bic.w	r8, r8, #7
     a08:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     a0c:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     a10:	2308      	movs	r3, #8
     a12:	3408      	adds	r4, #8
     a14:	e7d8      	b.n	9c8 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
     a16:	b968      	cbnz	r0, a34 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
     a18:	2b04      	cmp	r3, #4
     a1a:	d102      	bne.n	a22 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
     a1c:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     a20:	e7a4      	b.n	96c <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
     a22:	2b08      	cmp	r3, #8
     a24:	d1e9      	bne.n	9fa <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
     a26:	f108 0807 	add.w	r8, r8, #7
     a2a:	f028 0807 	bic.w	r8, r8, #7
     a2e:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     a32:	e7ed      	b.n	a10 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a34:	9a05      	ldr	r2, [sp, #20]
     a36:	3a01      	subs	r2, #1
     a38:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     a3a:	f858 2b04 	ldr.w	r2, [r8], #4
     a3e:	9200      	str	r2, [sp, #0]
     a40:	e70d      	b.n	85e <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
     a42:	9a03      	ldr	r2, [sp, #12]
     a44:	0790      	lsls	r0, r2, #30
     a46:	d520      	bpl.n	a8a <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a48:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a4c:	eba4 0e05 	sub.w	lr, r4, r5
     a50:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a54:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     a58:	d2cf      	bcs.n	9fa <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     a5a:	2f0f      	cmp	r7, #15
     a5c:	d8cd      	bhi.n	9fa <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
     a5e:	b1f5      	cbz	r5, a9e <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
     a60:	f107 0240 	add.w	r2, r7, #64	; 0x40
     a64:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     a68:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     a6a:	b2c0      	uxtb	r0, r0
     a6c:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     a70:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     a74:	f1bc 0f00 	cmp.w	ip, #0
     a78:	f43f af17 	beq.w	8aa <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     a7c:	f060 007f 	orn	r0, r0, #127	; 0x7f
     a80:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     a84:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     a88:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     a8a:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
     a8e:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
     a92:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     a94:	9206      	str	r2, [sp, #24]
     a96:	e797      	b.n	9c8 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a98:	f04f 0c00 	mov.w	ip, #0
     a9c:	e7da      	b.n	a54 <cbvprintf_package+0x254>
				} else if (is_ro) {
     a9e:	f1bc 0f00 	cmp.w	ip, #0
     aa2:	d001      	beq.n	aa8 <cbvprintf_package+0x2a8>
					len += 1;
     aa4:	3601      	adds	r6, #1
     aa6:	e7ef      	b.n	a88 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
     aa8:	9802      	ldr	r0, [sp, #8]
					len += 2;
     aaa:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     aac:	2800      	cmp	r0, #0
     aae:	d1eb      	bne.n	a88 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
     ab0:	9800      	ldr	r0, [sp, #0]
     ab2:	e9cd 3106 	strd	r3, r1, [sp, #24]
     ab6:	f007 f8c5 	bl	7c44 <strlen>
     aba:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     abe:	4406      	add	r6, r0
     ac0:	e7e2      	b.n	a88 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
     ac2:	1b63      	subs	r3, r4, r5
     ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     ac8:	d297      	bcs.n	9fa <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
     aca:	b93d      	cbnz	r5, adc <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     acc:	f1a6 0408 	sub.w	r4, r6, #8
     ad0:	18e0      	adds	r0, r4, r3
     ad2:	e6ae      	b.n	832 <cbvprintf_package+0x32>
     ad4:	00008910 	.word	0x00008910
     ad8:	00009af0 	.word	0x00009af0
	if (rws_pos_en) {
     adc:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     ade:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
     ae0:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     ae2:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     ae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     ae8:	b1c2      	cbz	r2, b1c <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     aea:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     aec:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     af0:	f1b9 0f00 	cmp.w	r9, #0
     af4:	d005      	beq.n	b02 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
     af6:	2200      	movs	r2, #0
     af8:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
     afa:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     afe:	4297      	cmp	r7, r2
     b00:	d10e      	bne.n	b20 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
     b02:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     b06:	f1c5 0301 	rsb	r3, r5, #1
     b0a:	f10d 0820 	add.w	r8, sp, #32
     b0e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     b10:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     b14:	4557      	cmp	r7, sl
     b16:	d112      	bne.n	b3e <cbvprintf_package+0x33e>
	return BUF_OFFSET;
     b18:	1b60      	subs	r0, r4, r5
     b1a:	e68a      	b.n	832 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     b1c:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     b1e:	e7e5      	b.n	aec <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     b20:	f810 3b01 	ldrb.w	r3, [r0], #1
     b24:	0619      	lsls	r1, r3, #24
     b26:	d508      	bpl.n	b3a <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
     b28:	eb04 0e0c 	add.w	lr, r4, ip
     b2c:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     b32:	f63f ae7c 	bhi.w	82e <cbvprintf_package+0x2e>
			*buf++ = pos;
     b36:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     b3a:	3201      	adds	r2, #1
     b3c:	e7df      	b.n	afe <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     b3e:	f1b9 0f00 	cmp.w	r9, #0
     b42:	d003      	beq.n	b4c <cbvprintf_package+0x34c>
     b44:	f998 2000 	ldrsb.w	r2, [r8]
     b48:	2a00      	cmp	r2, #0
     b4a:	db17      	blt.n	b7c <cbvprintf_package+0x37c>
		if (rws_pos_en) {
     b4c:	9b02      	ldr	r3, [sp, #8]
     b4e:	b1d3      	cbz	r3, b86 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
     b50:	f81a 200b 	ldrb.w	r2, [sl, fp]
     b54:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     b58:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     b5a:	9b01      	ldr	r3, [sp, #4]
     b5c:	1898      	adds	r0, r3, r2
     b5e:	4420      	add	r0, r4
     b60:	42b0      	cmp	r0, r6
     b62:	f63f ae64 	bhi.w	82e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
     b66:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
     b6a:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
     b6c:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     b70:	4620      	mov	r0, r4
     b72:	9203      	str	r2, [sp, #12]
     b74:	f007 f876 	bl	7c64 <memcpy>
		buf += size;
     b78:	9a03      	ldr	r2, [sp, #12]
     b7a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     b7c:	f10a 0a01 	add.w	sl, sl, #1
     b80:	f108 0801 	add.w	r8, r8, #1
     b84:	e7c6      	b.n	b14 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     b86:	f898 2000 	ldrb.w	r2, [r8]
     b8a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     b8e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     b90:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
     b92:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     b94:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     b98:	f007 f854 	bl	7c44 <strlen>
     b9c:	1c42      	adds	r2, r0, #1
     b9e:	e7dc      	b.n	b5a <cbvprintf_package+0x35a>
		return -EFAULT;
     ba0:	f06f 000d 	mvn.w	r0, #13
     ba4:	e645      	b.n	832 <cbvprintf_package+0x32>
     ba6:	bf00      	nop

00000ba8 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bac:	b095      	sub	sp, #84	; 0x54
     bae:	af00      	add	r7, sp, #0
     bb0:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     bb4:	61bb      	str	r3, [r7, #24]
     bb6:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     bba:	4604      	mov	r4, r0
     bbc:	627a      	str	r2, [r7, #36]	; 0x24
     bbe:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     bc0:	6239      	str	r1, [r7, #32]
     bc2:	b951      	cbnz	r1, bda <cbprintf_package_convert+0x32>
	for (int i = 0; i < s_nbr; i++) {
     bc4:	460d      	mov	r5, r1
	buf += ros_nbr;
     bc6:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     bc8:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     bca:	7880      	ldrb	r0, [r0, #2]
     bcc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     bd0:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
     bd2:	42ae      	cmp	r6, r5
     bd4:	d81a      	bhi.n	c0c <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     bd6:	1b03      	subs	r3, r0, r4
     bd8:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     bda:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     bde:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
     be0:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
     be2:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
     be4:	f1b9 0f00 	cmp.w	r9, #0
     be8:	d002      	beq.n	bf0 <cbprintf_package_convert+0x48>
     bea:	f01b 0f01 	tst.w	fp, #1
     bee:	d116      	bne.n	c1e <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
     bf0:	697b      	ldr	r3, [r7, #20]
     bf2:	bb53      	cbnz	r3, c4a <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bf6:	b11b      	cbz	r3, c00 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     bf8:	4620      	mov	r0, r4
     bfa:	69ba      	ldr	r2, [r7, #24]
     bfc:	6a39      	ldr	r1, [r7, #32]
     bfe:	4798      	blx	r3
		}

		return in_len;
     c00:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     c02:	4628      	mov	r0, r5
     c04:	3754      	adds	r7, #84	; 0x54
     c06:	46bd      	mov	sp, r7
     c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     c0c:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
     c10:	4640      	mov	r0, r8
     c12:	f007 f817 	bl	7c44 <strlen>
     c16:	3001      	adds	r0, #1
     c18:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
     c1a:	3501      	adds	r5, #1
     c1c:	e7d9      	b.n	bd2 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
     c1e:	6863      	ldr	r3, [r4, #4]
     c20:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     c24:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     c28:	ea4f 028a 	mov.w	r2, sl, lsl #2
     c2c:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     c2e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
     c32:	2b00      	cmp	r3, #0
     c34:	f040 8102 	bne.w	e3c <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
     c38:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
     c3a:	2600      	movs	r6, #0
		out_len = (int)in_len;
     c3c:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     c3e:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
     c42:	4543      	cmp	r3, r8
     c44:	d14e      	bne.n	ce4 <cbprintf_package_convert+0x13c>
     c46:	44ca      	add	sl, r9
     c48:	e013      	b.n	c72 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
     c4a:	f01b 0f02 	tst.w	fp, #2
     c4e:	d0d1      	beq.n	bf4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     c50:	f894 a000 	ldrb.w	sl, [r4]
     c54:	ea4f 038a 	mov.w	r3, sl, lsl #2
     c58:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     c5a:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
     c5c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
     c60:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c64:	2b00      	cmp	r3, #0
     c66:	d178      	bne.n	d5a <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
     c68:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     c6a:	f1b9 0f00 	cmp.w	r9, #0
     c6e:	d14e      	bne.n	d0e <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
     c70:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
     c72:	f01b 0f05 	tst.w	fp, #5
     c76:	bf0c      	ite	eq
     c78:	2302      	moveq	r3, #2
     c7a:	2301      	movne	r3, #1
     c7c:	627b      	str	r3, [r7, #36]	; 0x24
     c7e:	697b      	ldr	r3, [r7, #20]
     c80:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     c84:	f00b 0302 	and.w	r3, fp, #2
     c88:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
     c8a:	45ca      	cmp	sl, r9
     c8c:	d0b9      	beq.n	c02 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     c8e:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
     c92:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
     c96:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
     c9a:	4bad      	ldr	r3, [pc, #692]	; (f50 <cbprintf_package_convert+0x3a8>)
     c9c:	4598      	cmp	r8, r3
     c9e:	d302      	bcc.n	ca6 <cbprintf_package_convert+0xfe>
     ca0:	4bac      	ldr	r3, [pc, #688]	; (f54 <cbprintf_package_convert+0x3ac>)
     ca2:	4598      	cmp	r8, r3
     ca4:	d339      	bcc.n	d1a <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     ca6:	693b      	ldr	r3, [r7, #16]
     ca8:	2b00      	cmp	r3, #0
     caa:	d043      	beq.n	d34 <cbprintf_package_convert+0x18c>
     cac:	69f8      	ldr	r0, [r7, #28]
     cae:	f006 fb3a 	bl	7326 <is_ptr>
     cb2:	2800      	cmp	r0, #0
     cb4:	d03e      	beq.n	d34 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     cb6:	46e8      	mov	r8, sp
     cb8:	b08a      	sub	sp, #40	; 0x28
     cba:	466a      	mov	r2, sp
     cbc:	4ba6      	ldr	r3, [pc, #664]	; (f58 <cbprintf_package_convert+0x3b0>)
     cbe:	6153      	str	r3, [r2, #20]
     cc0:	69fb      	ldr	r3, [r7, #28]
     cc2:	e9c2 3106 	strd	r3, r1, [r2, #24]
     cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
     cca:	8413      	strh	r3, [r2, #32]
     ccc:	4ba3      	ldr	r3, [pc, #652]	; (f5c <cbprintf_package_convert+0x3b4>)
     cce:	f842 3f10 	str.w	r3, [r2, #16]!
     cd2:	2300      	movs	r3, #0
     cd4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     cd8:	48a1      	ldr	r0, [pc, #644]	; (f60 <cbprintf_package_convert+0x3b8>)
     cda:	f001 f929 	bl	1f30 <z_impl_z_log_msg_static_create>
				out_len -= 2;
     cde:	3d02      	subs	r5, #2
     ce0:	46c5      	mov	sp, r8
				continue;
     ce2:	e7d2      	b.n	c8a <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
     ce4:	f818 2b01 	ldrb.w	r2, [r8], #1
     ce8:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     cea:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     cee:	f006 ffa9 	bl	7c44 <strlen>
				if (strl && strl_cnt < strl_len) {
     cf2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     cf6:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     cf8:	b13a      	cbz	r2, d0a <cbprintf_package_convert+0x162>
     cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     cfe:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     d00:	bf3e      	ittt	cc
     d02:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     d04:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     d08:	3601      	addcc	r6, #1
				out_len += len;
     d0a:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
     d0c:	e799      	b.n	c42 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     d0e:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     d12:	bf1c      	itt	ne
     d14:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     d16:	44ca      	addne	sl, r9
     d18:	e7ab      	b.n	c72 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     d1a:	693b      	ldr	r3, [r7, #16]
     d1c:	b123      	cbz	r3, d28 <cbprintf_package_convert+0x180>
     d1e:	69f8      	ldr	r0, [r7, #28]
     d20:	f006 fb01 	bl	7326 <is_ptr>
     d24:	2800      	cmp	r0, #0
     d26:	d1c6      	bne.n	cb6 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     d28:	f01b 0f01 	tst.w	fp, #1
     d2c:	d105      	bne.n	d3a <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
     d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d30:	1aed      	subs	r5, r5, r3
     d32:	e7aa      	b.n	c8a <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     d34:	6a3b      	ldr	r3, [r7, #32]
     d36:	2b00      	cmp	r3, #0
     d38:	d0a7      	beq.n	c8a <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
     d3a:	4640      	mov	r0, r8
     d3c:	f006 ff82 	bl	7c44 <strlen>
				if (strl && strl_cnt < strl_len) {
     d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     d42:	b143      	cbz	r3, d56 <cbprintf_package_convert+0x1ae>
     d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     d48:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     d4a:	bf3f      	itttt	cc
     d4c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     d4e:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     d50:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     d54:	3601      	addcc	r6, #1
				out_len += (len - 1);
     d56:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
     d58:	e797      	b.n	c8a <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     d5a:	f1b9 0f00 	cmp.w	r9, #0
     d5e:	d072      	beq.n	e46 <cbprintf_package_convert+0x29e>
     d60:	f01b 0604 	ands.w	r6, fp, #4
     d64:	d072      	beq.n	e4c <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     d66:	46c8      	mov	r8, r9
		scpy_cnt = 0;
     d68:	2600      	movs	r6, #0
		dst = keep_str_pos;
     d6a:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     d6e:	464a      	mov	r2, r9
     d70:	4651      	mov	r1, sl
     d72:	f006 ff77 	bl	7c64 <memcpy>
	str_pos += ros_nbr;
     d76:	697b      	ldr	r3, [r7, #20]
     d78:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
     d7a:	005b      	lsls	r3, r3, #1
     d7c:	60bb      	str	r3, [r7, #8]
     d7e:	697b      	ldr	r3, [r7, #20]
     d80:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
     d84:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     d86:	f00b 0302 	and.w	r3, fp, #2
     d8a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	459a      	cmp	sl, r3
     d90:	d15e      	bne.n	e50 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
     d92:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     d94:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
     d98:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     d9a:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     d9c:	bf18      	it	ne
     d9e:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     da0:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     da4:	bf08      	it	eq
     da6:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     daa:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     dae:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     db0:	f040 809d 	bne.w	eee <cbprintf_package_convert+0x346>
     db4:	f01b 0f04 	tst.w	fp, #4
     db8:	bf14      	ite	ne
     dba:	4640      	movne	r0, r8
     dbc:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     dbe:	f894 b002 	ldrb.w	fp, [r4, #2]
     dc2:	f894 a003 	ldrb.w	sl, [r4, #3]
     dc6:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     dc8:	7062      	strb	r2, [r4, #1]
     dca:	70a0      	strb	r0, [r4, #2]
     dcc:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     dce:	4620      	mov	r0, r4
     dd0:	69ba      	ldr	r2, [r7, #24]
     dd2:	68f9      	ldr	r1, [r7, #12]
     dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dd6:	4798      	blx	r3
	if (rv < 0) {
     dd8:	1e05      	subs	r5, r0, #0
     dda:	f6ff af12 	blt.w	c02 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     dde:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     de0:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
     de2:	7023      	strb	r3, [r4, #0]
     de4:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     de6:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
     de8:	7063      	strb	r3, [r4, #1]
     dea:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     df0:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     df4:	f107 0040 	add.w	r0, r7, #64	; 0x40
     df8:	4798      	blx	r3
	if (rv < 0) {
     dfa:	f1b0 0800 	subs.w	r8, r0, #0
     dfe:	f2c0 80a3 	blt.w	f48 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e02:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     e04:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e06:	eba3 0109 	sub.w	r1, r3, r9
     e0a:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
     e0c:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e0e:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     e10:	68bb      	ldr	r3, [r7, #8]
     e12:	1ac9      	subs	r1, r1, r3
     e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e16:	4798      	blx	r3
	if (rv < 0) {
     e18:	2800      	cmp	r0, #0
     e1a:	f2c0 8097 	blt.w	f4c <cbprintf_package_convert+0x3a4>
	for (int i = 0; i < scpy_cnt; i++) {
     e1e:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
     e22:	44a8      	add	r8, r5
	out_len += rv;
     e24:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
     e28:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
     e2c:	45b3      	cmp	fp, r6
     e2e:	db60      	blt.n	ef2 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
     e30:	2100      	movs	r1, #0
     e32:	69ba      	ldr	r2, [r7, #24]
     e34:	4608      	mov	r0, r1
     e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e38:	4798      	blx	r3
	return out_len;
     e3a:	e6e2      	b.n	c02 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     e3c:	f04f 0800 	mov.w	r8, #0
     e40:	f107 0030 	add.w	r0, r7, #48	; 0x30
     e44:	e793      	b.n	d6e <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
     e46:	464e      	mov	r6, r9
		keep_cnt = 0;
     e48:	46c8      	mov	r8, r9
     e4a:	e794      	b.n	d76 <cbprintf_package_convert+0x1ce>
     e4c:	46b0      	mov	r8, r6
     e4e:	e792      	b.n	d76 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
     e50:	f81a 1b02 	ldrb.w	r1, [sl], #2
     e54:	4a3e      	ldr	r2, [pc, #248]	; (f50 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
     e56:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     e5a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     e5e:	4293      	cmp	r3, r2
     e60:	d302      	bcc.n	e68 <cbprintf_package_convert+0x2c0>
     e62:	4a3c      	ldr	r2, [pc, #240]	; (f54 <cbprintf_package_convert+0x3ac>)
     e64:	4293      	cmp	r3, r2
     e66:	d31c      	bcc.n	ea2 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     e68:	693b      	ldr	r3, [r7, #16]
     e6a:	b123      	cbz	r3, e76 <cbprintf_package_convert+0x2ce>
     e6c:	69f8      	ldr	r0, [r7, #28]
     e6e:	f006 fa5a 	bl	7326 <is_ptr>
     e72:	2800      	cmp	r0, #0
     e74:	d18a      	bne.n	d8c <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	b9f3      	cbnz	r3, eb8 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
     e7a:	f108 0228 	add.w	r2, r8, #40	; 0x28
     e7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
     e82:	4402      	add	r2, r0
     e84:	f108 0301 	add.w	r3, r8, #1
     e88:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     e8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
     e90:	f108 0802 	add.w	r8, r8, #2
     e94:	fa52 f383 	uxtab	r3, r2, r3
     e98:	fa5f f888 	uxtb.w	r8, r8
     e9c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
     ea0:	e774      	b.n	d8c <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     ea2:	693b      	ldr	r3, [r7, #16]
     ea4:	b12b      	cbz	r3, eb2 <cbprintf_package_convert+0x30a>
     ea6:	69f8      	ldr	r0, [r7, #28]
     ea8:	f006 fa3d 	bl	7326 <is_ptr>
     eac:	2800      	cmp	r0, #0
     eae:	f47f af6d 	bne.w	d8c <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     eb2:	f01b 0f01 	tst.w	fp, #1
     eb6:	d009      	beq.n	ecc <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     eb8:	f106 0228 	add.w	r2, r6, #40	; 0x28
     ebc:	f107 0128 	add.w	r1, r7, #40	; 0x28
     ec0:	1c73      	adds	r3, r6, #1
     ec2:	1856      	adds	r6, r2, r1
     ec4:	f806 5c20 	strb.w	r5, [r6, #-32]
     ec8:	b2de      	uxtb	r6, r3
     eca:	e75f      	b.n	d8c <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     ecc:	f01b 0f04 	tst.w	fp, #4
     ed0:	f43f af5c 	beq.w	d8c <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
     ed4:	f108 0228 	add.w	r2, r8, #40	; 0x28
     ed8:	f107 0128 	add.w	r1, r7, #40	; 0x28
     edc:	f108 0301 	add.w	r3, r8, #1
     ee0:	eb02 0801 	add.w	r8, r2, r1
     ee4:	f808 5c10 	strb.w	r5, [r8, #-16]
     ee8:	fa5f f883 	uxtb.w	r8, r3
     eec:	e74e      	b.n	d8c <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     eee:	2000      	movs	r0, #0
     ef0:	e765      	b.n	dbe <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
     ef2:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
     ef6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
     efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
     efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     f00:	b1fb      	cbz	r3, f42 <cbprintf_package_convert+0x39a>
     f02:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     f06:	2101      	movs	r1, #1
     f08:	69ba      	ldr	r2, [r7, #24]
     f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f0c:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     f10:	4798      	blx	r3
		if (rv < 0) {
     f12:	2800      	cmp	r0, #0
     f14:	db1a      	blt.n	f4c <cbprintf_package_convert+0x3a4>
		out_len += rv;
     f16:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     f18:	f1b8 0f00 	cmp.w	r8, #0
     f1c:	d106      	bne.n	f2c <cbprintf_package_convert+0x384>
     f1e:	4648      	mov	r0, r9
     f20:	f006 fe90 	bl	7c44 <strlen>
     f24:	f100 0801 	add.w	r8, r0, #1
     f28:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     f2c:	4641      	mov	r1, r8
     f2e:	4648      	mov	r0, r9
     f30:	69ba      	ldr	r2, [r7, #24]
     f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f34:	4798      	blx	r3
		if (rv < 0) {
     f36:	2800      	cmp	r0, #0
     f38:	db08      	blt.n	f4c <cbprintf_package_convert+0x3a4>
		out_len += rv;
     f3a:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
     f3c:	f10b 0b01 	add.w	fp, fp, #1
     f40:	e774      	b.n	e2c <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
     f42:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     f46:	e7de      	b.n	f06 <cbprintf_package_convert+0x35e>
     f48:	4645      	mov	r5, r8
     f4a:	e65a      	b.n	c02 <cbprintf_package_convert+0x5a>
     f4c:	4605      	mov	r5, r0
     f4e:	e658      	b.n	c02 <cbprintf_package_convert+0x5a>
     f50:	00008910 	.word	0x00008910
     f54:	00009af0 	.word	0x00009af0
     f58:	00009103 	.word	0x00009103
     f5c:	01000004 	.word	0x01000004
     f60:	00008c64 	.word	0x00008c64

00000f64 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     f64:	4b01      	ldr	r3, [pc, #4]	; (f6c <__printk_hook_install+0x8>)
     f66:	6018      	str	r0, [r3, #0]
}
     f68:	4770      	bx	lr
     f6a:	bf00      	nop
     f6c:	20000028 	.word	0x20000028

00000f70 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     f70:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
     f72:	2500      	movs	r5, #0
{
     f74:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     f76:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     f7a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     f7c:	9500      	str	r5, [sp, #0]
     f7e:	a903      	add	r1, sp, #12
     f80:	4805      	ldr	r0, [pc, #20]	; (f98 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     f82:	9505      	str	r5, [sp, #20]
     f84:	f000 f918 	bl	11b8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     f88:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     f8c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     f8e:	bfb8      	it	lt
     f90:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     f92:	b007      	add	sp, #28
     f94:	bd30      	pop	{r4, r5, pc}
     f96:	bf00      	nop
     f98:	00007375 	.word	0x00007375

00000f9c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fa0:	8b05      	ldrh	r5, [r0, #24]
{
     fa2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     fa4:	0728      	lsls	r0, r5, #28
{
     fa6:	4690      	mov	r8, r2
	if (processing) {
     fa8:	d411      	bmi.n	fce <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     faa:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fac:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     fb0:	f040 80cd 	bne.w	114e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14e>
			evt = process_recheck(mgr);
     fb4:	4620      	mov	r0, r4
     fb6:	f006 fa14 	bl	73e2 <process_recheck>
		}

		if (evt == EVT_NOP) {
     fba:	b178      	cbz	r0, fdc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     fbc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fbe:	8b21      	ldrh	r1, [r4, #24]
     fc0:	2804      	cmp	r0, #4
     fc2:	d811      	bhi.n	fe8 <process_event+0x4c>
     fc4:	e8df f000 	tbb	[pc, r0]
     fc8:	856d10c3 	.word	0x856d10c3
     fcc:	95          	.byte	0x95
     fcd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     fce:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     fd0:	bf0c      	ite	eq
     fd2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fd6:	f045 0520 	orrne.w	r5, r5, #32
     fda:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     fdc:	f388 8811 	msr	BASEPRI, r8
     fe0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     fe8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     fec:	45aa      	cmp	sl, r5
     fee:	f000 80a6 	beq.w	113e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x13e>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     ff2:	2700      	movs	r7, #0
     ff4:	46b9      	mov	r9, r7
     ff6:	463e      	mov	r6, r7
     ff8:	68a3      	ldr	r3, [r4, #8]
     ffa:	2b00      	cmp	r3, #0
     ffc:	f000 80bd 	beq.w	117a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x17a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1000:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1004:	8321      	strh	r1, [r4, #24]
    1006:	f388 8811 	msr	BASEPRI, r8
    100a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    100e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1010:	2900      	cmp	r1, #0
    1012:	f000 80bb 	beq.w	118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>
	return node->next;
    1016:	680d      	ldr	r5, [r1, #0]
    1018:	2900      	cmp	r1, #0
    101a:	f000 80b7 	beq.w	118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>
		mon->callback(mgr, mon, state, res);
    101e:	4633      	mov	r3, r6
    1020:	4652      	mov	r2, sl
    1022:	4620      	mov	r0, r4
    1024:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1028:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    102a:	2d00      	cmp	r5, #0
    102c:	d076      	beq.n	111c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11c>
    102e:	682b      	ldr	r3, [r5, #0]
    1030:	4629      	mov	r1, r5
    1032:	461d      	mov	r5, r3
    1034:	e7f0      	b.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    1036:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    103a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    103c:	2a01      	cmp	r2, #1
    103e:	d81b      	bhi.n	1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>
	list->head = NULL;
    1040:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1042:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1046:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1048:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    104a:	b289      	uxth	r1, r1
	list->tail = NULL;
    104c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1050:	d109      	bne.n	1066 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x66>
    1052:	463b      	mov	r3, r7
    1054:	e003      	b.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
				mgr->refs += 1U;
    1056:	8b62      	ldrh	r2, [r4, #26]
    1058:	3201      	adds	r2, #1
    105a:	8362      	strh	r2, [r4, #26]
	return node->next;
    105c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    105e:	2b00      	cmp	r3, #0
    1060:	d1f9      	bne.n	1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1062:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1066:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1068:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    106a:	f006 f9ba 	bl	73e2 <process_recheck>
    106e:	2800      	cmp	r0, #0
    1070:	d07b      	beq.n	116a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1072:	f041 0120 	orr.w	r1, r1, #32
    1076:	e077      	b.n	1168 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x168>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1078:	2b04      	cmp	r3, #4
    107a:	d10a      	bne.n	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    107c:	f021 0107 	bic.w	r1, r1, #7
    1080:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1082:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1084:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1086:	f006 f9ac 	bl	73e2 <process_recheck>
    108a:	b110      	cbz	r0, 1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    108c:	f041 0120 	orr.w	r1, r1, #32
    1090:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1092:	8b21      	ldrh	r1, [r4, #24]
    1094:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1098:	45aa      	cmp	sl, r5
    109a:	d050      	beq.n	113e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x13e>
    109c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    109e:	46b9      	mov	r9, r7
    10a0:	e7aa      	b.n	ff8 <process_event+0x5c>
			transit = mgr->transitions->start;
    10a2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10a4:	f021 0107 	bic.w	r1, r1, #7
    10a8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    10ac:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    10ae:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    10b2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    10b4:	d12d      	bne.n	1112 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x112>
		    || (transit != NULL)) {
    10b6:	f1b9 0f00 	cmp.w	r9, #0
    10ba:	d040      	beq.n	113e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x13e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    10bc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    10c0:	8321      	strh	r1, [r4, #24]
    10c2:	f388 8811 	msr	BASEPRI, r8
    10c6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    10ca:	4620      	mov	r0, r4
    10cc:	4939      	ldr	r1, [pc, #228]	; (11b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1b4>)
    10ce:	47c8      	blx	r9
    10d0:	e029      	b.n	1126 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x126>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10d2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    10d6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10d8:	f041 0104 	orr.w	r1, r1, #4
    10dc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    10de:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    10e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    10e4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    10e6:	d0e6      	beq.n	10b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb6>
    10e8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    10ea:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    10ee:	463e      	mov	r6, r7
    10f0:	e782      	b.n	ff8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10f2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    10f6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10f8:	f041 0105 	orr.w	r1, r1, #5
    10fc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    10fe:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1100:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1104:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1106:	d0d6      	beq.n	10b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb6>
    1108:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    110a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    110e:	463e      	mov	r6, r7
    1110:	e772      	b.n	ff8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1112:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1114:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    1118:	463e      	mov	r6, r7
    111a:	e76d      	b.n	ff8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    111c:	462b      	mov	r3, r5
    111e:	e787      	b.n	1030 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x30>
			if (transit != NULL) {
    1120:	f1b9 0f00 	cmp.w	r9, #0
    1124:	d1d1      	bne.n	10ca <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xca>
	__asm__ volatile(
    1126:	f04f 0320 	mov.w	r3, #32
    112a:	f3ef 8811 	mrs	r8, BASEPRI
    112e:	f383 8812 	msr	BASEPRI_MAX, r3
    1132:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1136:	8b23      	ldrh	r3, [r4, #24]
    1138:	f023 0308 	bic.w	r3, r3, #8
    113c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    113e:	8b25      	ldrh	r5, [r4, #24]
    1140:	06ea      	lsls	r2, r5, #27
    1142:	d52e      	bpl.n	11a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1144:	f025 0310 	bic.w	r3, r5, #16
    1148:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    114a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    114e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1150:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1152:	2e00      	cmp	r6, #0
    1154:	f6bf af6f 	bge.w	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
	list->head = NULL;
    1158:	2300      	movs	r3, #0
		*clients = mgr->clients;
    115a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    115c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1160:	f021 0107 	bic.w	r1, r1, #7
    1164:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1168:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    116a:	8b21      	ldrh	r1, [r4, #24]
    116c:	f04f 0900 	mov.w	r9, #0
    1170:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1174:	45aa      	cmp	sl, r5
    1176:	f47f af3f 	bne.w	ff8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    117a:	2f00      	cmp	r7, #0
    117c:	d09b      	beq.n	10b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb6>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    117e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1182:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1184:	f388 8811 	msr	BASEPRI, r8
    1188:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    118c:	2f00      	cmp	r7, #0
    118e:	d0c7      	beq.n	1120 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x120>
	return node->next;
    1190:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1192:	4639      	mov	r1, r7
    1194:	4633      	mov	r3, r6
    1196:	4652      	mov	r2, sl
    1198:	4620      	mov	r0, r4
    119a:	f006 f94e 	bl	743a <notify_one>
	list->head = node;
    119e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    11a0:	e7f4      	b.n	118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    11a2:	06ab      	lsls	r3, r5, #26
    11a4:	f57f af1a 	bpl.w	fdc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    11a8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    11ac:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    11ae:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    11b2:	e6ff      	b.n	fb4 <process_event+0x18>
    11b4:	00007467 	.word	0x00007467

000011b8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    11b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11bc:	4681      	mov	r9, r0
    11be:	468b      	mov	fp, r1
    11c0:	4617      	mov	r7, r2
    11c2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    11c4:	2500      	movs	r5, #0
{
    11c6:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    11c8:	7838      	ldrb	r0, [r7, #0]
    11ca:	b908      	cbnz	r0, 11d0 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    11cc:	4628      	mov	r0, r5
    11ce:	e357      	b.n	1880 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    11d0:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    11d2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    11d4:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    11d6:	d006      	beq.n	11e6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    11d8:	4659      	mov	r1, fp
    11da:	47c8      	blx	r9
    11dc:	2800      	cmp	r0, #0
    11de:	f2c0 834f 	blt.w	1880 <z_cbvprintf_impl+0x6c8>
    11e2:	3501      	adds	r5, #1
		if (bps == NULL) {
    11e4:	e1fb      	b.n	15de <z_cbvprintf_impl+0x426>
		} state = {
    11e6:	2218      	movs	r2, #24
    11e8:	2100      	movs	r1, #0
    11ea:	a80e      	add	r0, sp, #56	; 0x38
    11ec:	f006 fd45 	bl	7c7a <memset>
	if (*sp == '%') {
    11f0:	787b      	ldrb	r3, [r7, #1]
    11f2:	2b25      	cmp	r3, #37	; 0x25
    11f4:	d07d      	beq.n	12f2 <z_cbvprintf_impl+0x13a>
    11f6:	2300      	movs	r3, #0
    11f8:	4698      	mov	r8, r3
    11fa:	469e      	mov	lr, r3
    11fc:	469c      	mov	ip, r3
    11fe:	461e      	mov	r6, r3
    1200:	1c78      	adds	r0, r7, #1
    1202:	4601      	mov	r1, r0
		switch (*sp) {
    1204:	f810 2b01 	ldrb.w	r2, [r0], #1
    1208:	2a2b      	cmp	r2, #43	; 0x2b
    120a:	f000 80a1 	beq.w	1350 <z_cbvprintf_impl+0x198>
    120e:	f200 8098 	bhi.w	1342 <z_cbvprintf_impl+0x18a>
    1212:	2a20      	cmp	r2, #32
    1214:	f000 809f 	beq.w	1356 <z_cbvprintf_impl+0x19e>
    1218:	2a23      	cmp	r2, #35	; 0x23
    121a:	f000 809f 	beq.w	135c <z_cbvprintf_impl+0x1a4>
    121e:	b12b      	cbz	r3, 122c <z_cbvprintf_impl+0x74>
    1220:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1228:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    122c:	f1b8 0f00 	cmp.w	r8, #0
    1230:	d005      	beq.n	123e <z_cbvprintf_impl+0x86>
    1232:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1236:	f043 0320 	orr.w	r3, r3, #32
    123a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    123e:	f1be 0f00 	cmp.w	lr, #0
    1242:	d005      	beq.n	1250 <z_cbvprintf_impl+0x98>
    1244:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1248:	f043 0310 	orr.w	r3, r3, #16
    124c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1250:	f1bc 0f00 	cmp.w	ip, #0
    1254:	d005      	beq.n	1262 <z_cbvprintf_impl+0xaa>
    1256:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    125a:	f043 0308 	orr.w	r3, r3, #8
    125e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1262:	b12e      	cbz	r6, 1270 <z_cbvprintf_impl+0xb8>
    1264:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1268:	f043 0304 	orr.w	r3, r3, #4
    126c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1270:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1274:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1278:	2844      	cmp	r0, #68	; 0x44
    127a:	d103      	bne.n	1284 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    127c:	f36f 1386 	bfc	r3, #6, #1
    1280:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1284:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1288:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    128e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1292:	d17f      	bne.n	1394 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1294:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1298:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    129a:	f042 0201 	orr.w	r2, r2, #1
    129e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    12a2:	781a      	ldrb	r2, [r3, #0]
    12a4:	2a2e      	cmp	r2, #46	; 0x2e
    12a6:	bf0c      	ite	eq
    12a8:	2101      	moveq	r1, #1
    12aa:	2100      	movne	r1, #0
    12ac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    12b0:	f361 0241 	bfi	r2, r1, #1, #1
    12b4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    12b8:	d178      	bne.n	13ac <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    12ba:	785a      	ldrb	r2, [r3, #1]
    12bc:	2a2a      	cmp	r2, #42	; 0x2a
    12be:	d06e      	beq.n	139e <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    12c0:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    12c2:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    12c6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    12c8:	4619      	mov	r1, r3
    12ca:	f811 0b01 	ldrb.w	r0, [r1], #1
    12ce:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    12d2:	2e09      	cmp	r6, #9
    12d4:	f240 8095 	bls.w	1402 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    12d8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    12dc:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    12de:	f3c1 0040 	ubfx	r0, r1, #1, #1
    12e2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    12e6:	460a      	mov	r2, r1
    12e8:	f360 0241 	bfi	r2, r0, #1, #1
    12ec:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    12f0:	e05c      	b.n	13ac <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    12f2:	1cba      	adds	r2, r7, #2
    12f4:	9203      	str	r2, [sp, #12]
    12f6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    12fa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    12fe:	07da      	lsls	r2, r3, #31
    1300:	f140 812e 	bpl.w	1560 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    1304:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1308:	f1b8 0f00 	cmp.w	r8, #0
    130c:	da07      	bge.n	131e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    130e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1312:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    1316:	f042 0204 	orr.w	r2, r2, #4
    131a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    131e:	075e      	lsls	r6, r3, #29
    1320:	f140 8127 	bpl.w	1572 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1324:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1328:	f1ba 0f00 	cmp.w	sl, #0
    132c:	f280 8126 	bge.w	157c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    1330:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1334:	f36f 0341 	bfc	r3, #1, #1
    1338:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    133c:	f04f 3aff 	mov.w	sl, #4294967295
    1340:	e11c      	b.n	157c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    1342:	2a2d      	cmp	r2, #45	; 0x2d
    1344:	d00d      	beq.n	1362 <z_cbvprintf_impl+0x1aa>
    1346:	2a30      	cmp	r2, #48	; 0x30
    1348:	f47f af69 	bne.w	121e <z_cbvprintf_impl+0x66>
    134c:	2301      	movs	r3, #1
	} while (loop);
    134e:	e758      	b.n	1202 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1350:	f04f 0c01 	mov.w	ip, #1
    1354:	e755      	b.n	1202 <z_cbvprintf_impl+0x4a>
    1356:	f04f 0e01 	mov.w	lr, #1
    135a:	e752      	b.n	1202 <z_cbvprintf_impl+0x4a>
    135c:	f04f 0801 	mov.w	r8, #1
    1360:	e74f      	b.n	1202 <z_cbvprintf_impl+0x4a>
    1362:	2601      	movs	r6, #1
    1364:	e74d      	b.n	1202 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1366:	4603      	mov	r3, r0
    1368:	fb0e 6202 	mla	r2, lr, r2, r6
    136c:	3a30      	subs	r2, #48	; 0x30
    136e:	4618      	mov	r0, r3
    1370:	f810 6b01 	ldrb.w	r6, [r0], #1
    1374:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1378:	f1bc 0f09 	cmp.w	ip, #9
    137c:	d9f3      	bls.n	1366 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    137e:	4299      	cmp	r1, r3
    1380:	d08f      	beq.n	12a2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1382:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1386:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1388:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    138a:	f362 0141 	bfi	r1, r2, #1, #1
    138e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1392:	e786      	b.n	12a2 <z_cbvprintf_impl+0xea>
    1394:	460b      	mov	r3, r1
	size_t val = 0;
    1396:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1398:	f04f 0e0a 	mov.w	lr, #10
    139c:	e7e7      	b.n	136e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    139e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    13a2:	3302      	adds	r3, #2
		conv->prec_star = true;
    13a4:	f042 0204 	orr.w	r2, r2, #4
    13a8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    13ac:	781a      	ldrb	r2, [r3, #0]
    13ae:	2a6c      	cmp	r2, #108	; 0x6c
    13b0:	d047      	beq.n	1442 <z_cbvprintf_impl+0x28a>
    13b2:	d82b      	bhi.n	140c <z_cbvprintf_impl+0x254>
    13b4:	2a68      	cmp	r2, #104	; 0x68
    13b6:	d031      	beq.n	141c <z_cbvprintf_impl+0x264>
    13b8:	2a6a      	cmp	r2, #106	; 0x6a
    13ba:	d04b      	beq.n	1454 <z_cbvprintf_impl+0x29c>
    13bc:	2a4c      	cmp	r2, #76	; 0x4c
    13be:	d051      	beq.n	1464 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    13c0:	461a      	mov	r2, r3
    13c2:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    13c6:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    13c8:	9203      	str	r2, [sp, #12]
    13ca:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    13ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    13d2:	f200 80be 	bhi.w	1552 <z_cbvprintf_impl+0x39a>
    13d6:	2b6d      	cmp	r3, #109	; 0x6d
    13d8:	d851      	bhi.n	147e <z_cbvprintf_impl+0x2c6>
    13da:	2b69      	cmp	r3, #105	; 0x69
    13dc:	f200 80b9 	bhi.w	1552 <z_cbvprintf_impl+0x39a>
    13e0:	2b57      	cmp	r3, #87	; 0x57
    13e2:	d867      	bhi.n	14b4 <z_cbvprintf_impl+0x2fc>
    13e4:	2b41      	cmp	r3, #65	; 0x41
    13e6:	d003      	beq.n	13f0 <z_cbvprintf_impl+0x238>
    13e8:	3b45      	subs	r3, #69	; 0x45
    13ea:	2b02      	cmp	r3, #2
    13ec:	f200 80b1 	bhi.w	1552 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    13f0:	2204      	movs	r2, #4
    13f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    13f6:	f362 0302 	bfi	r3, r2, #0, #3
    13fa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    13fe:	2301      	movs	r3, #1
			break;
    1400:	e073      	b.n	14ea <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    1402:	fb0c 0202 	mla	r2, ip, r2, r0
    1406:	460b      	mov	r3, r1
    1408:	3a30      	subs	r2, #48	; 0x30
    140a:	e75d      	b.n	12c8 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    140c:	2a74      	cmp	r2, #116	; 0x74
    140e:	d025      	beq.n	145c <z_cbvprintf_impl+0x2a4>
    1410:	2a7a      	cmp	r2, #122	; 0x7a
    1412:	d1d5      	bne.n	13c0 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1414:	2106      	movs	r1, #6
    1416:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    141a:	e00c      	b.n	1436 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    141c:	785a      	ldrb	r2, [r3, #1]
    141e:	2a68      	cmp	r2, #104	; 0x68
    1420:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1424:	d106      	bne.n	1434 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1426:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1428:	f361 02c6 	bfi	r2, r1, #3, #4
    142c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1430:	3302      	adds	r3, #2
    1432:	e7c5      	b.n	13c0 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1434:	2102      	movs	r1, #2
    1436:	f361 02c6 	bfi	r2, r1, #3, #4
    143a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    143e:	3301      	adds	r3, #1
    1440:	e7be      	b.n	13c0 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    1442:	785a      	ldrb	r2, [r3, #1]
    1444:	2a6c      	cmp	r2, #108	; 0x6c
    1446:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    144a:	d101      	bne.n	1450 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    144c:	2104      	movs	r1, #4
    144e:	e7eb      	b.n	1428 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    1450:	2103      	movs	r1, #3
    1452:	e7f0      	b.n	1436 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1454:	2105      	movs	r1, #5
    1456:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    145a:	e7ec      	b.n	1436 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    145c:	2107      	movs	r1, #7
    145e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1462:	e7e8      	b.n	1436 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1464:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1468:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    146c:	f022 0202 	bic.w	r2, r2, #2
    1470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1474:	f042 0202 	orr.w	r2, r2, #2
    1478:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    147c:	e7df      	b.n	143e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    147e:	3b6e      	subs	r3, #110	; 0x6e
    1480:	b2d9      	uxtb	r1, r3
    1482:	2301      	movs	r3, #1
    1484:	408b      	lsls	r3, r1
    1486:	f240 4182 	movw	r1, #1154	; 0x482
    148a:	420b      	tst	r3, r1
    148c:	d137      	bne.n	14fe <z_cbvprintf_impl+0x346>
    148e:	f013 0f24 	tst.w	r3, #36	; 0x24
    1492:	d151      	bne.n	1538 <z_cbvprintf_impl+0x380>
    1494:	07d8      	lsls	r0, r3, #31
    1496:	d55c      	bpl.n	1552 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1498:	2103      	movs	r1, #3
    149a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    149e:	f361 0302 	bfi	r3, r1, #0, #3
    14a2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    14a6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    14aa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    14ae:	424b      	negs	r3, r1
    14b0:	414b      	adcs	r3, r1
    14b2:	e01a      	b.n	14ea <z_cbvprintf_impl+0x332>
    14b4:	2001      	movs	r0, #1
	switch (conv->specifier) {
    14b6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    14ba:	b2c9      	uxtb	r1, r1
    14bc:	fa00 f101 	lsl.w	r1, r0, r1
    14c0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    14c4:	d194      	bne.n	13f0 <z_cbvprintf_impl+0x238>
    14c6:	f640 0601 	movw	r6, #2049	; 0x801
    14ca:	4231      	tst	r1, r6
    14cc:	d11d      	bne.n	150a <z_cbvprintf_impl+0x352>
    14ce:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    14d2:	d03e      	beq.n	1552 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    14d4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    14d8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    14dc:	f002 0278 	and.w	r2, r2, #120	; 0x78
    14e0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    14e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    14e6:	d034      	beq.n	1552 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    14e8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    14ea:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    14ee:	f3c2 0140 	ubfx	r1, r2, #1, #1
    14f2:	430b      	orrs	r3, r1
    14f4:	f363 0241 	bfi	r2, r3, #1, #1
    14f8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    14fc:	e6fd      	b.n	12fa <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    14fe:	2102      	movs	r1, #2
    1500:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1504:	f361 0302 	bfi	r3, r1, #0, #3
    1508:	e7e8      	b.n	14dc <z_cbvprintf_impl+0x324>
    150a:	2002      	movs	r0, #2
    150c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1510:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1514:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1518:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    151a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    151e:	bf02      	ittt	eq
    1520:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1524:	f041 0101 	orreq.w	r1, r1, #1
    1528:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    152c:	2b63      	cmp	r3, #99	; 0x63
    152e:	d1db      	bne.n	14e8 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1530:	1e13      	subs	r3, r2, #0
    1532:	bf18      	it	ne
    1534:	2301      	movne	r3, #1
    1536:	e7d8      	b.n	14ea <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1538:	2103      	movs	r1, #3
    153a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    153e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1542:	f361 0302 	bfi	r3, r1, #0, #3
    1546:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    154a:	bf14      	ite	ne
    154c:	2301      	movne	r3, #1
    154e:	2300      	moveq	r3, #0
    1550:	e7cb      	b.n	14ea <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    1552:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1556:	f043 0301 	orr.w	r3, r3, #1
    155a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    155e:	e7c3      	b.n	14e8 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    1560:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1564:	2a00      	cmp	r2, #0
		int width = -1;
    1566:	bfac      	ite	ge
    1568:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    156c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    1570:	e6d5      	b.n	131e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    1572:	0798      	lsls	r0, r3, #30
    1574:	f57f aee2 	bpl.w	133c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1578:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    157c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    157e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1582:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    1586:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    158a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    158e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1590:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1594:	d133      	bne.n	15fe <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1596:	1ecb      	subs	r3, r1, #3
    1598:	2b04      	cmp	r3, #4
    159a:	d804      	bhi.n	15a6 <z_cbvprintf_impl+0x3ee>
    159c:	e8df f003 	tbb	[pc, r3]
    15a0:	21464621 	.word	0x21464621
    15a4:	21          	.byte	0x21
    15a5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    15a6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    15a8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    15aa:	ea4f 72e3 	mov.w	r2, r3, asr #31
    15ae:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    15b2:	d11c      	bne.n	15ee <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    15b4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    15b8:	17da      	asrs	r2, r3, #31
    15ba:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    15be:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    15c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    15c4:	f013 0603 	ands.w	r6, r3, #3
    15c8:	d050      	beq.n	166c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    15ca:	463a      	mov	r2, r7
    15cc:	4659      	mov	r1, fp
    15ce:	4648      	mov	r0, r9
    15d0:	9b03      	ldr	r3, [sp, #12]
    15d2:	f006 f834 	bl	763e <outs>
    15d6:	2800      	cmp	r0, #0
    15d8:	f2c0 8152 	blt.w	1880 <z_cbvprintf_impl+0x6c8>
    15dc:	4405      	add	r5, r0
			continue;
    15de:	9f03      	ldr	r7, [sp, #12]
    15e0:	e5f2      	b.n	11c8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    15e2:	f854 3b04 	ldr.w	r3, [r4], #4
    15e6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    15e8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    15ec:	e7e8      	b.n	15c0 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    15ee:	2902      	cmp	r1, #2
    15f0:	d1e5      	bne.n	15be <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    15f2:	b21a      	sxth	r2, r3
    15f4:	f343 33c0 	sbfx	r3, r3, #15, #1
    15f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    15fc:	e7df      	b.n	15be <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    15fe:	2b02      	cmp	r3, #2
    1600:	d124      	bne.n	164c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    1602:	1ecb      	subs	r3, r1, #3
    1604:	2b04      	cmp	r3, #4
    1606:	d804      	bhi.n	1612 <z_cbvprintf_impl+0x45a>
    1608:	e8df f003 	tbb	[pc, r3]
    160c:	18101018 	.word	0x18101018
    1610:	18          	.byte	0x18
    1611:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1612:	2901      	cmp	r1, #1
    1614:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    1618:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    161c:	d014      	beq.n	1648 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    161e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1620:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1624:	d1cc      	bne.n	15c0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1626:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1628:	930e      	str	r3, [sp, #56]	; 0x38
    162a:	e7c9      	b.n	15c0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    162c:	3407      	adds	r4, #7
    162e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1632:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1636:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    163a:	e7c1      	b.n	15c0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    163c:	f854 3b04 	ldr.w	r3, [r4], #4
    1640:	930e      	str	r3, [sp, #56]	; 0x38
    1642:	2300      	movs	r3, #0
    1644:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1646:	e7bb      	b.n	15c0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1648:	b2db      	uxtb	r3, r3
    164a:	e7cd      	b.n	15e8 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    164c:	2b04      	cmp	r3, #4
    164e:	d108      	bne.n	1662 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    1650:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1652:	f024 0407 	bic.w	r4, r4, #7
    1656:	e9d4 2300 	ldrd	r2, r3, [r4]
    165a:	3408      	adds	r4, #8
    165c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1660:	e7ae      	b.n	15c0 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1662:	2b03      	cmp	r3, #3
    1664:	d1ac      	bne.n	15c0 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    1666:	f854 3b04 	ldr.w	r3, [r4], #4
    166a:	e7dd      	b.n	1628 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    166c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1670:	2878      	cmp	r0, #120	; 0x78
    1672:	d8b4      	bhi.n	15de <z_cbvprintf_impl+0x426>
    1674:	2862      	cmp	r0, #98	; 0x62
    1676:	d81c      	bhi.n	16b2 <z_cbvprintf_impl+0x4fa>
    1678:	2825      	cmp	r0, #37	; 0x25
    167a:	f43f adad 	beq.w	11d8 <z_cbvprintf_impl+0x20>
    167e:	2858      	cmp	r0, #88	; 0x58
    1680:	d1ad      	bne.n	15de <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1682:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1686:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    168a:	9300      	str	r3, [sp, #0]
    168c:	aa10      	add	r2, sp, #64	; 0x40
    168e:	ab08      	add	r3, sp, #32
    1690:	f005 ff8f 	bl	75b2 <encode_uint>
			if (precision >= 0) {
    1694:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1698:	4607      	mov	r7, r0
			if (precision >= 0) {
    169a:	f280 8099 	bge.w	17d0 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    169e:	2f00      	cmp	r7, #0
    16a0:	d09d      	beq.n	15de <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    16a2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    16a6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    16a8:	2e00      	cmp	r6, #0
    16aa:	f000 80c0 	beq.w	182e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    16ae:	3001      	adds	r0, #1
    16b0:	e0bd      	b.n	182e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    16b2:	3863      	subs	r0, #99	; 0x63
    16b4:	2815      	cmp	r0, #21
    16b6:	d892      	bhi.n	15de <z_cbvprintf_impl+0x426>
    16b8:	a201      	add	r2, pc, #4	; (adr r2, 16c0 <z_cbvprintf_impl+0x508>)
    16ba:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    16be:	bf00      	nop
    16c0:	00001795 	.word	0x00001795
    16c4:	000017a7 	.word	0x000017a7
    16c8:	000015df 	.word	0x000015df
    16cc:	000015df 	.word	0x000015df
    16d0:	000015df 	.word	0x000015df
    16d4:	000015df 	.word	0x000015df
    16d8:	000017a7 	.word	0x000017a7
    16dc:	000015df 	.word	0x000015df
    16e0:	000015df 	.word	0x000015df
    16e4:	000015df 	.word	0x000015df
    16e8:	000015df 	.word	0x000015df
    16ec:	00001833 	.word	0x00001833
    16f0:	000017cb 	.word	0x000017cb
    16f4:	000017f1 	.word	0x000017f1
    16f8:	000015df 	.word	0x000015df
    16fc:	000015df 	.word	0x000015df
    1700:	00001719 	.word	0x00001719
    1704:	000015df 	.word	0x000015df
    1708:	000017cb 	.word	0x000017cb
    170c:	000015df 	.word	0x000015df
    1710:	000015df 	.word	0x000015df
    1714:	000017cb 	.word	0x000017cb
			if (precision >= 0) {
    1718:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    171c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    171e:	db35      	blt.n	178c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    1720:	4651      	mov	r1, sl
    1722:	4638      	mov	r0, r7
    1724:	f006 fa95 	bl	7c52 <strnlen>
			bpe = bps + len;
    1728:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    172c:	2f00      	cmp	r7, #0
    172e:	f43f af56 	beq.w	15de <z_cbvprintf_impl+0x426>
		char sign = 0;
    1732:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1734:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1738:	f013 0210 	ands.w	r2, r3, #16
    173c:	9205      	str	r2, [sp, #20]
    173e:	f000 8092 	beq.w	1866 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    1742:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1744:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1746:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1748:	bf48      	it	mi
    174a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    174c:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    174e:	bf48      	it	mi
    1750:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1752:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    1756:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    1758:	f340 809f 	ble.w	189a <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    175c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1760:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1764:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1768:	0750      	lsls	r0, r2, #29
    176a:	9306      	str	r3, [sp, #24]
    176c:	f100 8095 	bmi.w	189a <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    1770:	0651      	lsls	r1, r2, #25
    1772:	f140 8088 	bpl.w	1886 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    1776:	b13e      	cbz	r6, 1788 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    1778:	4659      	mov	r1, fp
    177a:	4630      	mov	r0, r6
    177c:	47c8      	blx	r9
    177e:	2800      	cmp	r0, #0
    1780:	db7e      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    1782:	9b06      	ldr	r3, [sp, #24]
    1784:	3501      	adds	r5, #1
    1786:	461e      	mov	r6, r3
					pad = '0';
    1788:	2230      	movs	r2, #48	; 0x30
    178a:	e07d      	b.n	1888 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    178c:	4638      	mov	r0, r7
    178e:	f006 fa59 	bl	7c44 <strlen>
    1792:	e7c9      	b.n	1728 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    1796:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    1798:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    179a:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    179e:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    17a0:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    17a4:	e7c6      	b.n	1734 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    17a6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    17a8:	bf5a      	itte	pl
    17aa:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    17ae:	015e      	lslpl	r6, r3, #5
				sign = '+';
    17b0:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    17b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    17b6:	2b00      	cmp	r3, #0
    17b8:	f6bf af63 	bge.w	1682 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    17bc:	4252      	negs	r2, r2
    17be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    17c2:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    17c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    17c8:	e75b      	b.n	1682 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    17ca:	2600      	movs	r6, #0
    17cc:	e759      	b.n	1682 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    17ce:	2600      	movs	r6, #0
				conv->flag_zero = false;
    17d0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    17d4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    17d8:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    17da:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    17de:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    17e0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    17e4:	f67f af5b 	bls.w	169e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    17e8:	ebaa 0303 	sub.w	r3, sl, r3
    17ec:	9311      	str	r3, [sp, #68]	; 0x44
    17ee:	e756      	b.n	169e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    17f0:	980e      	ldr	r0, [sp, #56]	; 0x38
    17f2:	b390      	cbz	r0, 185a <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    17f4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    17f8:	9300      	str	r3, [sp, #0]
    17fa:	2100      	movs	r1, #0
    17fc:	ab08      	add	r3, sp, #32
    17fe:	aa10      	add	r2, sp, #64	; 0x40
    1800:	f005 fed7 	bl	75b2 <encode_uint>
				conv->altform_0c = true;
    1804:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1808:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    180c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1810:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1814:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1818:	4607      	mov	r7, r0
				conv->altform_0c = true;
    181a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    181e:	dad6      	bge.n	17ce <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    1820:	2800      	cmp	r0, #0
    1822:	f43f aedc 	beq.w	15de <z_cbvprintf_impl+0x426>
		char sign = 0;
    1826:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    1828:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    182c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    182e:	469a      	mov	sl, r3
    1830:	e780      	b.n	1734 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    1832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1834:	2907      	cmp	r1, #7
    1836:	f63f aed2 	bhi.w	15de <z_cbvprintf_impl+0x426>
    183a:	e8df f001 	tbb	[pc, r1]
    183e:	040c      	.short	0x040c
    1840:	08080c06 	.word	0x08080c06
    1844:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1846:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1848:	e6c9      	b.n	15de <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    184a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    184c:	e6c7      	b.n	15de <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    184e:	17ea      	asrs	r2, r5, #31
    1850:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1854:	e6c3      	b.n	15de <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1856:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1858:	e6c1      	b.n	15de <z_cbvprintf_impl+0x426>
    185a:	4f2f      	ldr	r7, [pc, #188]	; (1918 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    185c:	4606      	mov	r6, r0
			bpe = bps + 5;
    185e:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1862:	2005      	movs	r0, #5
    1864:	e766      	b.n	1734 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    1866:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1868:	bf48      	it	mi
    186a:	3001      	addmi	r0, #1
    186c:	e76a      	b.n	1744 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    186e:	4610      	mov	r0, r2
    1870:	9307      	str	r3, [sp, #28]
    1872:	9206      	str	r2, [sp, #24]
    1874:	4659      	mov	r1, fp
    1876:	47c8      	blx	r9
    1878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    187c:	2800      	cmp	r0, #0
    187e:	da04      	bge.n	188a <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    1880:	b015      	add	sp, #84	; 0x54
    1882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1886:	2220      	movs	r2, #32
					pad = '0';
    1888:	4643      	mov	r3, r8
				while (width-- > 0) {
    188a:	4619      	mov	r1, r3
    188c:	2900      	cmp	r1, #0
    188e:	f103 33ff 	add.w	r3, r3, #4294967295
    1892:	dcec      	bgt.n	186e <z_cbvprintf_impl+0x6b6>
    1894:	4445      	add	r5, r8
    1896:	4698      	mov	r8, r3
    1898:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    189a:	b12e      	cbz	r6, 18a8 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    189c:	4659      	mov	r1, fp
    189e:	4630      	mov	r0, r6
    18a0:	47c8      	blx	r9
    18a2:	2800      	cmp	r0, #0
    18a4:	dbec      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    18a6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    18a8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    18ac:	06da      	lsls	r2, r3, #27
    18ae:	d401      	bmi.n	18b4 <z_cbvprintf_impl+0x6fc>
    18b0:	071b      	lsls	r3, r3, #28
    18b2:	d505      	bpl.n	18c0 <z_cbvprintf_impl+0x708>
				OUTC('0');
    18b4:	4659      	mov	r1, fp
    18b6:	2030      	movs	r0, #48	; 0x30
    18b8:	47c8      	blx	r9
    18ba:	2800      	cmp	r0, #0
    18bc:	dbe0      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    18be:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    18c0:	9b05      	ldr	r3, [sp, #20]
    18c2:	b133      	cbz	r3, 18d2 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    18c4:	4659      	mov	r1, fp
    18c6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    18ca:	47c8      	blx	r9
    18cc:	2800      	cmp	r0, #0
    18ce:	dbd7      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    18d0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    18d2:	9e04      	ldr	r6, [sp, #16]
    18d4:	442e      	add	r6, r5
    18d6:	e005      	b.n	18e4 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    18d8:	4659      	mov	r1, fp
    18da:	2030      	movs	r0, #48	; 0x30
    18dc:	47c8      	blx	r9
    18de:	2800      	cmp	r0, #0
    18e0:	dbce      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    18e2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    18e4:	1b73      	subs	r3, r6, r5
    18e6:	2b00      	cmp	r3, #0
    18e8:	dcf6      	bgt.n	18d8 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    18ea:	4653      	mov	r3, sl
    18ec:	463a      	mov	r2, r7
    18ee:	4659      	mov	r1, fp
    18f0:	4648      	mov	r0, r9
    18f2:	f005 fea4 	bl	763e <outs>
    18f6:	2800      	cmp	r0, #0
    18f8:	dbc2      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    18fa:	4405      	add	r5, r0
		while (width > 0) {
    18fc:	44a8      	add	r8, r5
    18fe:	eba8 0305 	sub.w	r3, r8, r5
    1902:	2b00      	cmp	r3, #0
    1904:	f77f ae6b 	ble.w	15de <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1908:	4659      	mov	r1, fp
    190a:	2020      	movs	r0, #32
    190c:	47c8      	blx	r9
    190e:	2800      	cmp	r0, #0
    1910:	dbb6      	blt.n	1880 <z_cbvprintf_impl+0x6c8>
    1912:	3501      	adds	r5, #1
			--width;
    1914:	e7f3      	b.n	18fe <z_cbvprintf_impl+0x746>
    1916:	bf00      	nop
    1918:	000091b7 	.word	0x000091b7

0000191c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    191c:	b508      	push	{r3, lr}
	__asm__ volatile(
    191e:	f04f 0220 	mov.w	r2, #32
    1922:	f3ef 8311 	mrs	r3, BASEPRI
    1926:	f382 8812 	msr	BASEPRI_MAX, r2
    192a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    192e:	f001 fca7 	bl	3280 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1932:	4803      	ldr	r0, [pc, #12]	; (1940 <sys_reboot+0x24>)
    1934:	f005 fd31 	bl	739a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1938:	f000 ffee 	bl	2918 <arch_cpu_idle>
    193c:	e7fc      	b.n	1938 <sys_reboot+0x1c>
    193e:	bf00      	nop
    1940:	000091bd 	.word	0x000091bd

00001944 <nrf_gpio_pin_control_select>:
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    1944:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    1946:	4b09      	ldr	r3, [pc, #36]	; (196c <nrf_gpio_pin_control_select+0x28>)
    1948:	4c09      	ldr	r4, [pc, #36]	; (1970 <nrf_gpio_pin_control_select+0x2c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    194a:	f000 021f 	and.w	r2, r0, #31

    return pin_number >> 5;
    194e:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    1950:	2801      	cmp	r0, #1
    1952:	bf18      	it	ne
    1954:	4623      	movne	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1956:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    195a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    195e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1962:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    1966:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    196a:	bd10      	pop	{r4, pc}
    196c:	50842800 	.word	0x50842800
    1970:	50842500 	.word	0x50842500

00001974 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	f04f 0320 	mov.w	r3, #32
    197a:	f3ef 8611 	mrs	r6, BASEPRI
    197e:	f383 8812 	msr	BASEPRI_MAX, r3
    1982:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1986:	2401      	movs	r4, #1
    1988:	4b13      	ldr	r3, [pc, #76]	; (19d8 <nordicsemi_nrf53_init+0x64>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    198a:	4d14      	ldr	r5, [pc, #80]	; (19dc <nordicsemi_nrf53_init+0x68>)
    198c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    1990:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1992:	2103      	movs	r1, #3
    1994:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
    1998:	2000      	movs	r0, #0
    199a:	f7ff ffd3 	bl	1944 <nrf_gpio_pin_control_select>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    199e:	4620      	mov	r0, r4
    19a0:	f7ff ffd0 	bl	1944 <nrf_gpio_pin_control_select>

#if NRF_GPIO_HAS_SEL
static inline void soc_secure_gpio_pin_mcu_select(uint32_t pin_number,
						  nrf_gpio_pin_sel_t mcu)
{
	nrf_gpio_pin_control_select(pin_number, mcu);
    19a4:	4621      	mov	r1, r4
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    19a6:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
    19aa:	2021      	movs	r0, #33	; 0x21
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    19ac:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    19b0:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
    19b4:	f7ff ffc6 	bl	1944 <nrf_gpio_pin_control_select>
    19b8:	2020      	movs	r0, #32
    19ba:	f7ff ffc3 	bl	1944 <nrf_gpio_pin_control_select>
    19be:	200b      	movs	r0, #11
    19c0:	f7ff ffc0 	bl	1944 <nrf_gpio_pin_control_select>
    19c4:	200a      	movs	r0, #10
    19c6:	f7ff ffbd 	bl	1944 <nrf_gpio_pin_control_select>
	__asm__ volatile(
    19ca:	f386 8811 	msr	BASEPRI, r6
    19ce:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    19d2:	2000      	movs	r0, #0
    19d4:	bd70      	pop	{r4, r5, r6, pc}
    19d6:	bf00      	nop
    19d8:	50001000 	.word	0x50001000
    19dc:	50004000 	.word	0x50004000

000019e0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    19e0:	b148      	cbz	r0, 19f6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    19e2:	4b05      	ldr	r3, [pc, #20]	; (19f8 <arch_busy_wait+0x18>)
    19e4:	4a05      	ldr	r2, [pc, #20]	; (19fc <arch_busy_wait+0x1c>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    19ec:	4358      	muls	r0, r3
    19ee:	4b04      	ldr	r3, [pc, #16]	; (1a00 <arch_busy_wait+0x20>)
    19f0:	f043 0301 	orr.w	r3, r3, #1
    19f4:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    19f6:	4770      	bx	lr
    19f8:	200000f4 	.word	0x200000f4
    19fc:	000f4240 	.word	0x000f4240
    1a00:	00008d00 	.word	0x00008d00

00001a04 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    1a04:	2806      	cmp	r0, #6
    1a06:	d107      	bne.n	1a18 <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1a08:	2201      	movs	r2, #1
    1a0a:	4b04      	ldr	r3, [pc, #16]	; (1a1c <pm_state_set+0x18>)
    1a0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a10:	f3bf 8f4f 	dsb	sy
        __WFE();
    1a14:	bf20      	wfe
    while (true)
    1a16:	e7fd      	b.n	1a14 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    1a18:	4770      	bx	lr
    1a1a:	bf00      	nop
    1a1c:	50004000 	.word	0x50004000

00001a20 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1a20:	f003 b914 	b.w	4c4c <SystemInit>

00001a24 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a28:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    1a2a:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    1a2c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1a30:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a84 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    1a34:	b914      	cbnz	r4, 1a3c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    1a36:	4638      	mov	r0, r7
    1a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    1a3c:	fa94 f5a4 	rbit	r5, r4
    1a40:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    1a44:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1a48:	012e      	lsls	r6, r5, #4
    1a4a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    1a4e:	ea6f 0a03 	mvn.w	sl, r3
    1a52:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1a56:	7b2b      	ldrb	r3, [r5, #12]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d0eb      	beq.n	1a34 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1a5c:	f858 3006 	ldr.w	r3, [r8, r6]
    1a60:	691b      	ldr	r3, [r3, #16]
    1a62:	b94b      	cbnz	r3, 1a78 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1a64:	4446      	add	r6, r8
			log_backend_enable(backend,
    1a66:	6873      	ldr	r3, [r6, #4]
    1a68:	2204      	movs	r2, #4
    1a6a:	4628      	mov	r0, r5
    1a6c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    1a6e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    1a72:	f000 fa49 	bl	1f08 <log_backend_enable>
    1a76:	e7dd      	b.n	1a34 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1a78:	4628      	mov	r0, r5
    1a7a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1a7c:	2800      	cmp	r0, #0
    1a7e:	d1d9      	bne.n	1a34 <activate_foreach_backend+0x10>
    1a80:	e7f0      	b.n	1a64 <activate_foreach_backend+0x40>
    1a82:	bf00      	nop
    1a84:	00008cd4 	.word	0x00008cd4

00001a88 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1a88:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1a8a:	2200      	movs	r2, #0
{
    1a8c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1a8e:	490f      	ldr	r1, [pc, #60]	; (1acc <enable_logger+0x44>)
    1a90:	480f      	ldr	r0, [pc, #60]	; (1ad0 <enable_logger+0x48>)
    1a92:	f006 fe81 	bl	8798 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1a96:	2200      	movs	r2, #0
    1a98:	2300      	movs	r3, #0
    1a9a:	2400      	movs	r4, #0
    1a9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1aa0:	230e      	movs	r3, #14
    1aa2:	4d0c      	ldr	r5, [pc, #48]	; (1ad4 <enable_logger+0x4c>)
    1aa4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
    1aac:	4628      	mov	r0, r5
    1aae:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1ab2:	4b09      	ldr	r3, [pc, #36]	; (1ad8 <enable_logger+0x50>)
    1ab4:	4909      	ldr	r1, [pc, #36]	; (1adc <enable_logger+0x54>)
    1ab6:	9400      	str	r4, [sp, #0]
    1ab8:	f004 f9e8 	bl	5e8c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1abc:	4908      	ldr	r1, [pc, #32]	; (1ae0 <enable_logger+0x58>)
    1abe:	4628      	mov	r0, r5
    1ac0:	f006 fcf5 	bl	84ae <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1ac4:	4620      	mov	r0, r4
    1ac6:	b009      	add	sp, #36	; 0x24
    1ac8:	bd30      	pop	{r4, r5, pc}
    1aca:	bf00      	nop
    1acc:	00001ae5 	.word	0x00001ae5
    1ad0:	20000720 	.word	0x20000720
    1ad4:	20000298 	.word	0x20000298
    1ad8:	00001db5 	.word	0x00001db5
    1adc:	20001200 	.word	0x20001200
    1ae0:	000091ea 	.word	0x000091ea

00001ae4 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1ae4:	4801      	ldr	r0, [pc, #4]	; (1aec <log_process_thread_timer_expiry_fn+0x8>)
    1ae6:	f004 bb2b 	b.w	6140 <z_impl_k_sem_give>
    1aea:	bf00      	nop
    1aec:	20000280 	.word	0x20000280

00001af0 <z_log_init>:
{
    1af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1af4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1af6:	481f      	ldr	r0, [pc, #124]	; (1b74 <z_log_init+0x84>)
{
    1af8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1afa:	f005 ffcd 	bl	7a98 <atomic_inc>
    1afe:	4606      	mov	r6, r0
    1b00:	2800      	cmp	r0, #0
    1b02:	d030      	beq.n	1b66 <z_log_init+0x76>
	uint32_t mask = 0;
    1b04:	2500      	movs	r5, #0
}
    1b06:	4628      	mov	r0, r5
    1b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1b0c:	7b23      	ldrb	r3, [r4, #12]
    1b0e:	b173      	cbz	r3, 1b2e <z_log_init+0x3e>
	if (backend->api->init) {
    1b10:	6823      	ldr	r3, [r4, #0]
    1b12:	68db      	ldr	r3, [r3, #12]
    1b14:	b10b      	cbz	r3, 1b1a <z_log_init+0x2a>
		backend->api->init(backend);
    1b16:	4620      	mov	r0, r4
    1b18:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1b1a:	6823      	ldr	r3, [r4, #0]
    1b1c:	691b      	ldr	r3, [r3, #16]
    1b1e:	b9d3      	cbnz	r3, 1b56 <z_log_init+0x66>
				log_backend_enable(backend,
    1b20:	6863      	ldr	r3, [r4, #4]
    1b22:	2204      	movs	r2, #4
    1b24:	4620      	mov	r0, r4
    1b26:	6819      	ldr	r1, [r3, #0]
    1b28:	f000 f9ee 	bl	1f08 <log_backend_enable>
			i++;
    1b2c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1b2e:	3410      	adds	r4, #16
    1b30:	454c      	cmp	r4, r9
    1b32:	d3eb      	bcc.n	1b0c <z_log_init+0x1c>
	if (blocking) {
    1b34:	f1b8 0f00 	cmp.w	r8, #0
    1b38:	d0e5      	beq.n	1b06 <z_log_init+0x16>
		while (mask) {
    1b3a:	2d00      	cmp	r5, #0
    1b3c:	d0e2      	beq.n	1b04 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    1b3e:	4628      	mov	r0, r5
    1b40:	f7ff ff70 	bl	1a24 <activate_foreach_backend>
    1b44:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1b46:	2f00      	cmp	r7, #0
    1b48:	d0f7      	beq.n	1b3a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    1b4a:	2100      	movs	r1, #0
    1b4c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1b50:	f004 fe0c 	bl	676c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1b54:	e7f1      	b.n	1b3a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1b56:	4620      	mov	r0, r4
    1b58:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d0e0      	beq.n	1b20 <z_log_init+0x30>
				mask |= BIT(i);
    1b5e:	fa0a f306 	lsl.w	r3, sl, r6
    1b62:	431d      	orrs	r5, r3
    1b64:	e7e2      	b.n	1b2c <z_log_init+0x3c>
	uint32_t mask = 0;
    1b66:	4605      	mov	r5, r0
				mask |= BIT(i);
    1b68:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1b6c:	4c02      	ldr	r4, [pc, #8]	; (1b78 <z_log_init+0x88>)
    1b6e:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1b7c <z_log_init+0x8c>
    1b72:	e7dd      	b.n	1b30 <z_log_init+0x40>
    1b74:	20000930 	.word	0x20000930
    1b78:	00008cd4 	.word	0x00008cd4
    1b7c:	00008ce4 	.word	0x00008ce4

00001b80 <log_format_func_t_get>:
}
    1b80:	4b01      	ldr	r3, [pc, #4]	; (1b88 <log_format_func_t_get+0x8>)
    1b82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1b86:	4770      	bx	lr
    1b88:	00008d1c 	.word	0x00008d1c

00001b8c <log_set_timestamp_func>:
{
    1b8c:	b508      	push	{r3, lr}
    1b8e:	4603      	mov	r3, r0
    1b90:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1b92:	b12b      	cbz	r3, 1ba0 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1b94:	4a04      	ldr	r2, [pc, #16]	; (1ba8 <log_set_timestamp_func+0x1c>)
    1b96:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1b98:	f000 fc3c 	bl	2414 <log_output_timestamp_freq_set>
	return 0;
    1b9c:	2000      	movs	r0, #0
}
    1b9e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1ba0:	f06f 0015 	mvn.w	r0, #21
    1ba4:	e7fb      	b.n	1b9e <log_set_timestamp_func+0x12>
    1ba6:	bf00      	nop
    1ba8:	2000002c 	.word	0x2000002c

00001bac <z_log_notify_backend_enabled>:
{
    1bac:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1bae:	4c04      	ldr	r4, [pc, #16]	; (1bc0 <z_log_notify_backend_enabled+0x14>)
    1bb0:	7823      	ldrb	r3, [r4, #0]
    1bb2:	b913      	cbnz	r3, 1bba <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1bb4:	4803      	ldr	r0, [pc, #12]	; (1bc4 <z_log_notify_backend_enabled+0x18>)
    1bb6:	f004 fac3 	bl	6140 <z_impl_k_sem_give>
	backend_attached = true;
    1bba:	2301      	movs	r3, #1
    1bbc:	7023      	strb	r3, [r4, #0]
}
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	200011e9 	.word	0x200011e9
    1bc4:	20000280 	.word	0x20000280

00001bc8 <z_log_dropped>:
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1bcc:	4806      	ldr	r0, [pc, #24]	; (1be8 <z_log_dropped+0x20>)
    1bce:	f005 ff63 	bl	7a98 <atomic_inc>
	if (buffered) {
    1bd2:	b13c      	cbz	r4, 1be4 <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1bd4:	4b05      	ldr	r3, [pc, #20]	; (1bec <z_log_dropped+0x24>)
    1bd6:	e8d3 1fef 	ldaex	r1, [r3]
    1bda:	3901      	subs	r1, #1
    1bdc:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1be0:	2a00      	cmp	r2, #0
    1be2:	d1f8      	bne.n	1bd6 <z_log_dropped+0xe>
}
    1be4:	bd10      	pop	{r4, pc}
    1be6:	bf00      	nop
    1be8:	20000928 	.word	0x20000928
    1bec:	2000092c 	.word	0x2000092c

00001bf0 <z_log_dropped_read_and_clear>:
}
    1bf0:	2000      	movs	r0, #0
    1bf2:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1bf4:	4b03      	ldr	r3, [pc, #12]	; (1c04 <z_log_dropped_read_and_clear+0x14>)
    1bf6:	e8d3 0fef 	ldaex	r0, [r3]
    1bfa:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1bfe:	2a00      	cmp	r2, #0
    1c00:	d1f9      	bne.n	1bf6 <z_log_dropped_read_and_clear+0x6>
    1c02:	4770      	bx	lr
    1c04:	20000928 	.word	0x20000928

00001c08 <dropped_notify>:
{
    1c08:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1c0a:	f7ff fff1 	bl	1bf0 <z_log_dropped_read_and_clear>
    1c0e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1c10:	4c07      	ldr	r4, [pc, #28]	; (1c30 <dropped_notify+0x28>)
    1c12:	4e08      	ldr	r6, [pc, #32]	; (1c34 <dropped_notify+0x2c>)
    1c14:	42b4      	cmp	r4, r6
    1c16:	d300      	bcc.n	1c1a <dropped_notify+0x12>
}
    1c18:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1c1a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1c1c:	795b      	ldrb	r3, [r3, #5]
    1c1e:	b12b      	cbz	r3, 1c2c <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    1c20:	6823      	ldr	r3, [r4, #0]
    1c22:	685b      	ldr	r3, [r3, #4]
    1c24:	b113      	cbz	r3, 1c2c <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    1c26:	4629      	mov	r1, r5
    1c28:	4620      	mov	r0, r4
    1c2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1c2c:	3410      	adds	r4, #16
    1c2e:	e7f1      	b.n	1c14 <dropped_notify+0xc>
    1c30:	00008cd4 	.word	0x00008cd4
    1c34:	00008ce4 	.word	0x00008ce4

00001c38 <z_log_msg_init>:
{
    1c38:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1c3a:	4c04      	ldr	r4, [pc, #16]	; (1c4c <z_log_msg_init+0x14>)
    1c3c:	4904      	ldr	r1, [pc, #16]	; (1c50 <z_log_msg_init+0x18>)
    1c3e:	4620      	mov	r0, r4
    1c40:	f005 fdc1 	bl	77c6 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1c44:	4b03      	ldr	r3, [pc, #12]	; (1c54 <z_log_msg_init+0x1c>)
    1c46:	601c      	str	r4, [r3, #0]
}
    1c48:	bd10      	pop	{r4, pc}
    1c4a:	bf00      	nop
    1c4c:	200001ec 	.word	0x200001ec
    1c50:	00008d08 	.word	0x00008d08
    1c54:	20000920 	.word	0x20000920

00001c58 <log_core_init>:
{
    1c58:	b508      	push	{r3, lr}
	panic_mode = false;
    1c5a:	2300      	movs	r3, #0
    1c5c:	4a06      	ldr	r2, [pc, #24]	; (1c78 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    1c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    1c62:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1c64:	4a05      	ldr	r2, [pc, #20]	; (1c7c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    1c66:	4806      	ldr	r0, [pc, #24]	; (1c80 <log_core_init+0x28>)
	dropped_cnt = 0;
    1c68:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1c6a:	f7ff ff8f 	bl	1b8c <log_set_timestamp_func>
}
    1c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1c72:	f7ff bfe1 	b.w	1c38 <z_log_msg_init>
    1c76:	bf00      	nop
    1c78:	200011ea 	.word	0x200011ea
    1c7c:	20000928 	.word	0x20000928
    1c80:	00007a95 	.word	0x00007a95

00001c84 <z_log_msg_alloc>:
{
    1c84:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    1c86:	2200      	movs	r2, #0
    1c88:	2300      	movs	r3, #0
    1c8a:	4801      	ldr	r0, [pc, #4]	; (1c90 <z_log_msg_alloc+0xc>)
    1c8c:	f005 bdbc 	b.w	7808 <mpsc_pbuf_alloc>
    1c90:	200001ec 	.word	0x200001ec

00001c94 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1c94:	4801      	ldr	r0, [pc, #4]	; (1c9c <z_log_msg_local_claim+0x8>)
    1c96:	f005 be55 	b.w	7944 <mpsc_pbuf_claim>
    1c9a:	bf00      	nop
    1c9c:	200001ec 	.word	0x200001ec

00001ca0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1ca0:	4b02      	ldr	r3, [pc, #8]	; (1cac <z_log_msg_free+0xc>)
{
    1ca2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1ca4:	6818      	ldr	r0, [r3, #0]
    1ca6:	f005 be9d 	b.w	79e4 <mpsc_pbuf_free>
    1caa:	bf00      	nop
    1cac:	20000920 	.word	0x20000920

00001cb0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1cb0:	4801      	ldr	r0, [pc, #4]	; (1cb8 <z_log_msg_pending+0x8>)
    1cb2:	f005 becb 	b.w	7a4c <mpsc_pbuf_is_pending>
    1cb6:	bf00      	nop
    1cb8:	200001ec 	.word	0x200001ec

00001cbc <z_impl_log_process>:
{
    1cbc:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1cbe:	4b26      	ldr	r3, [pc, #152]	; (1d58 <z_impl_log_process+0x9c>)
    1cc0:	7818      	ldrb	r0, [r3, #0]
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d047      	beq.n	1d56 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    1cc6:	f7ff ffe5 	bl	1c94 <z_log_msg_local_claim>
	if (msg) {
    1cca:	4605      	mov	r5, r0
    1ccc:	b170      	cbz	r0, 1cec <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1cce:	4b23      	ldr	r3, [pc, #140]	; (1d5c <z_impl_log_process+0xa0>)
    1cd0:	e8d3 1fef 	ldaex	r1, [r3]
    1cd4:	3901      	subs	r1, #1
    1cd6:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1cda:	2a00      	cmp	r2, #0
    1cdc:	d1f8      	bne.n	1cd0 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1cde:	4c20      	ldr	r4, [pc, #128]	; (1d60 <z_impl_log_process+0xa4>)
    1ce0:	4e20      	ldr	r6, [pc, #128]	; (1d64 <z_impl_log_process+0xa8>)
    1ce2:	42b4      	cmp	r4, r6
    1ce4:	d32d      	bcc.n	1d42 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    1ce6:	4628      	mov	r0, r5
    1ce8:	f7ff ffda 	bl	1ca0 <z_log_msg_free>
	return dropped_cnt > 0;
    1cec:	4b1e      	ldr	r3, [pc, #120]	; (1d68 <z_impl_log_process+0xac>)
    1cee:	4c1f      	ldr	r4, [pc, #124]	; (1d6c <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	dd19      	ble.n	1d2a <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    1cf6:	f006 fd49 	bl	878c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1cfe:	fba0 0302 	umull	r0, r3, r0, r2
    1d02:	fb02 3101 	mla	r1, r2, r1, r3
    1d06:	0bc3      	lsrs	r3, r0, #15
    1d08:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1d0c:	e9d4 2000 	ldrd	r2, r0, [r4]
    1d10:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    1d12:	f240 32e9 	movw	r2, #1001	; 0x3e9
    1d16:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1d1a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    1d1e:	4293      	cmp	r3, r2
    1d20:	f171 0100 	sbcs.w	r1, r1, #0
    1d24:	d301      	bcc.n	1d2a <z_impl_log_process+0x6e>
				dropped_notify();
    1d26:	f7ff ff6f 	bl	1c08 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1d2a:	e9d4 3200 	ldrd	r3, r2, [r4]
    1d2e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1d32:	f142 0200 	adc.w	r2, r2, #0
    1d36:	e9c4 3200 	strd	r3, r2, [r4]
}
    1d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    1d3e:	f7ff bfb7 	b.w	1cb0 <z_log_msg_pending>
	return backend->cb->active;
    1d42:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1d44:	795b      	ldrb	r3, [r3, #5]
    1d46:	b123      	cbz	r3, 1d52 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    1d48:	6823      	ldr	r3, [r4, #0]
    1d4a:	4629      	mov	r1, r5
    1d4c:	4620      	mov	r0, r4
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1d52:	3410      	adds	r4, #16
    1d54:	e7c5      	b.n	1ce2 <z_impl_log_process+0x26>
}
    1d56:	bd70      	pop	{r4, r5, r6, pc}
    1d58:	200011e9 	.word	0x200011e9
    1d5c:	2000092c 	.word	0x2000092c
    1d60:	00008cd4 	.word	0x00008cd4
    1d64:	00008ce4 	.word	0x00008ce4
    1d68:	20000928 	.word	0x20000928
    1d6c:	20000718 	.word	0x20000718

00001d70 <z_impl_log_panic>:
{
    1d70:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1d72:	4d0d      	ldr	r5, [pc, #52]	; (1da8 <z_impl_log_panic+0x38>)
    1d74:	7829      	ldrb	r1, [r5, #0]
    1d76:	b961      	cbnz	r1, 1d92 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1d78:	2001      	movs	r0, #1
    1d7a:	f7ff feb9 	bl	1af0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1d7e:	4c0b      	ldr	r4, [pc, #44]	; (1dac <z_impl_log_panic+0x3c>)
    1d80:	4e0b      	ldr	r6, [pc, #44]	; (1db0 <z_impl_log_panic+0x40>)
    1d82:	42b4      	cmp	r4, r6
    1d84:	d306      	bcc.n	1d94 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1d86:	f7ff ff99 	bl	1cbc <z_impl_log_process>
		while (log_process() == true) {
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d1fb      	bne.n	1d86 <z_impl_log_panic+0x16>
	panic_mode = true;
    1d8e:	2301      	movs	r3, #1
    1d90:	702b      	strb	r3, [r5, #0]
}
    1d92:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1d94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1d96:	795b      	ldrb	r3, [r3, #5]
    1d98:	b11b      	cbz	r3, 1da2 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1d9a:	6823      	ldr	r3, [r4, #0]
    1d9c:	4620      	mov	r0, r4
    1d9e:	689b      	ldr	r3, [r3, #8]
    1da0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1da2:	3410      	adds	r4, #16
    1da4:	e7ed      	b.n	1d82 <z_impl_log_panic+0x12>
    1da6:	bf00      	nop
    1da8:	200011ea 	.word	0x200011ea
    1dac:	00008cd4 	.word	0x00008cd4
    1db0:	00008ce4 	.word	0x00008ce4

00001db4 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1db4:	2100      	movs	r1, #0
{
    1db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1dba:	4608      	mov	r0, r1
    1dbc:	f7ff fe98 	bl	1af0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1dc0:	4604      	mov	r4, r0
    1dc2:	b348      	cbz	r0, 1e18 <log_process_thread_func+0x64>
    1dc4:	f240 6867 	movw	r8, #1639	; 0x667
    1dc8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1dcc:	f004 fce8 	bl	67a0 <z_impl_z_current_get>
	proc_tid = process_tid;
    1dd0:	4b1a      	ldr	r3, [pc, #104]	; (1e3c <log_process_thread_func+0x88>)
    1dd2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1dd4:	b130      	cbz	r0, 1de4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1dd6:	4b1a      	ldr	r3, [pc, #104]	; (1e40 <log_process_thread_func+0x8c>)
	    process_tid &&
    1dd8:	681b      	ldr	r3, [r3, #0]
    1dda:	2b09      	cmp	r3, #9
    1ddc:	dd02      	ble.n	1de4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1dde:	4819      	ldr	r0, [pc, #100]	; (1e44 <log_process_thread_func+0x90>)
    1de0:	f004 f9ae 	bl	6140 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1de4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1de6:	4f18      	ldr	r7, [pc, #96]	; (1e48 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1de8:	f8df a058 	ldr.w	sl, [pc, #88]	; 1e44 <log_process_thread_func+0x90>
		if (activate_mask) {
    1dec:	b144      	cbz	r4, 1e00 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1dee:	4620      	mov	r0, r4
    1df0:	f7ff fe18 	bl	1a24 <activate_foreach_backend>
			if (!activate_mask) {
    1df4:	4604      	mov	r4, r0
    1df6:	b918      	cbnz	r0, 1e00 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1df8:	f04f 38ff 	mov.w	r8, #4294967295
    1dfc:	f04f 39ff 	mov.w	r9, #4294967295
    1e00:	f7ff ff5c 	bl	1cbc <z_impl_log_process>
		if (log_process() == false) {
    1e04:	4606      	mov	r6, r0
    1e06:	b928      	cbnz	r0, 1e14 <log_process_thread_func+0x60>
			if (processed_any) {
    1e08:	b9b5      	cbnz	r5, 1e38 <log_process_thread_func+0x84>
    1e0a:	4642      	mov	r2, r8
    1e0c:	464b      	mov	r3, r9
    1e0e:	4650      	mov	r0, sl
    1e10:	f004 f9bc 	bl	618c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1e14:	4635      	mov	r5, r6
    1e16:	e7e9      	b.n	1dec <log_process_thread_func+0x38>
    1e18:	f04f 38ff 	mov.w	r8, #4294967295
    1e1c:	f04f 39ff 	mov.w	r9, #4294967295
    1e20:	e7d4      	b.n	1dcc <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1e22:	682b      	ldr	r3, [r5, #0]
    1e24:	699b      	ldr	r3, [r3, #24]
    1e26:	b11b      	cbz	r3, 1e30 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1e28:	2200      	movs	r2, #0
    1e2a:	4628      	mov	r0, r5
    1e2c:	4611      	mov	r1, r2
    1e2e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1e30:	3510      	adds	r5, #16
    1e32:	42bd      	cmp	r5, r7
    1e34:	d3f5      	bcc.n	1e22 <log_process_thread_func+0x6e>
    1e36:	e7e8      	b.n	1e0a <log_process_thread_func+0x56>
    1e38:	4d04      	ldr	r5, [pc, #16]	; (1e4c <log_process_thread_func+0x98>)
    1e3a:	e7fa      	b.n	1e32 <log_process_thread_func+0x7e>
    1e3c:	20000924 	.word	0x20000924
    1e40:	2000092c 	.word	0x2000092c
    1e44:	20000280 	.word	0x20000280
    1e48:	00008ce4 	.word	0x00008ce4
    1e4c:	00008cd4 	.word	0x00008cd4

00001e50 <z_log_msg_post_finalize>:
{
    1e50:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1e52:	4818      	ldr	r0, [pc, #96]	; (1eb4 <z_log_msg_post_finalize+0x64>)
    1e54:	f005 fe20 	bl	7a98 <atomic_inc>
	if (panic_mode) {
    1e58:	4b17      	ldr	r3, [pc, #92]	; (1eb8 <z_log_msg_post_finalize+0x68>)
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	b17b      	cbz	r3, 1e7e <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    1e5e:	f04f 0320 	mov.w	r3, #32
    1e62:	f3ef 8411 	mrs	r4, BASEPRI
    1e66:	f383 8812 	msr	BASEPRI_MAX, r3
    1e6a:	f3bf 8f6f 	isb	sy
    1e6e:	f7ff ff25 	bl	1cbc <z_impl_log_process>
	__asm__ volatile(
    1e72:	f384 8811 	msr	BASEPRI, r4
    1e76:	f3bf 8f6f 	isb	sy
}
    1e7a:	b002      	add	sp, #8
    1e7c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1e7e:	4b0f      	ldr	r3, [pc, #60]	; (1ebc <z_log_msg_post_finalize+0x6c>)
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d0f9      	beq.n	1e7a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1e86:	b950      	cbnz	r0, 1e9e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1e88:	2200      	movs	r2, #0
    1e8a:	2300      	movs	r3, #0
    1e8c:	480c      	ldr	r0, [pc, #48]	; (1ec0 <z_log_msg_post_finalize+0x70>)
    1e8e:	e9cd 2300 	strd	r2, r3, [sp]
    1e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e96:	2300      	movs	r3, #0
    1e98:	f004 fec0 	bl	6c1c <z_impl_k_timer_start>
    1e9c:	e7ed      	b.n	1e7a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1e9e:	280a      	cmp	r0, #10
    1ea0:	d1eb      	bne.n	1e7a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1ea2:	4807      	ldr	r0, [pc, #28]	; (1ec0 <z_log_msg_post_finalize+0x70>)
    1ea4:	f006 fc84 	bl	87b0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1ea8:	4806      	ldr	r0, [pc, #24]	; (1ec4 <z_log_msg_post_finalize+0x74>)
}
    1eaa:	b002      	add	sp, #8
    1eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1eb0:	f004 b946 	b.w	6140 <z_impl_k_sem_give>
    1eb4:	2000092c 	.word	0x2000092c
    1eb8:	200011ea 	.word	0x200011ea
    1ebc:	20000924 	.word	0x20000924
    1ec0:	20000720 	.word	0x20000720
    1ec4:	20000280 	.word	0x20000280

00001ec8 <z_log_msg_commit>:
{
    1ec8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1eca:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <z_log_msg_commit+0x1c>)
{
    1ecc:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1ed2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1ed4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1ed6:	4804      	ldr	r0, [pc, #16]	; (1ee8 <z_log_msg_commit+0x20>)
    1ed8:	f005 fd14 	bl	7904 <mpsc_pbuf_commit>
}
    1edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1ee0:	f7ff bfb6 	b.w	1e50 <z_log_msg_post_finalize>
    1ee4:	2000002c 	.word	0x2000002c
    1ee8:	200001ec 	.word	0x200001ec

00001eec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1eec:	4a04      	ldr	r2, [pc, #16]	; (1f00 <log_source_name_get+0x14>)
    1eee:	4b05      	ldr	r3, [pc, #20]	; (1f04 <log_source_name_get+0x18>)
    1ef0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1ef2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1ef6:	bf34      	ite	cc
    1ef8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1efc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1efe:	4770      	bx	lr
    1f00:	00008c44 	.word	0x00008c44
    1f04:	00008cd4 	.word	0x00008cd4

00001f08 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1f08:	4b08      	ldr	r3, [pc, #32]	; (1f2c <log_backend_enable+0x24>)
{
    1f0a:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1f0c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    1f0e:	6844      	ldr	r4, [r0, #4]
    1f10:	111b      	asrs	r3, r3, #4
    1f12:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1f14:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1f16:	6843      	ldr	r3, [r0, #4]
    1f18:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    1f1a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    1f1c:	6843      	ldr	r3, [r0, #4]
    1f1e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1f20:	6843      	ldr	r3, [r0, #4]
    1f22:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1f24:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1f26:	f7ff be41 	b.w	1bac <z_log_notify_backend_enabled>
    1f2a:	bf00      	nop
    1f2c:	00008cd4 	.word	0x00008cd4

00001f30 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1f34:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    1f38:	b08f      	sub	sp, #60	; 0x3c
    1f3a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    1f3e:	460d      	mov	r5, r1
    1f40:	4690      	mov	r8, r2
    1f42:	4699      	mov	r9, r3
    1f44:	9005      	str	r0, [sp, #20]
    1f46:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1f48:	2e00      	cmp	r6, #0
    1f4a:	d03c      	beq.n	1fc6 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    1f4c:	f04f 0b04 	mov.w	fp, #4
    1f50:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    1f54:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1f56:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1f58:	4631      	mov	r1, r6
    1f5a:	ab0b      	add	r3, sp, #44	; 0x2c
    1f5c:	4640      	mov	r0, r8
    1f5e:	f8cd b008 	str.w	fp, [sp, #8]
    1f62:	9701      	str	r7, [sp, #4]
    1f64:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    1f68:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    1f6c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    1f6e:	9607      	str	r6, [sp, #28]
    1f70:	f7fe fe1a 	bl	ba8 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    1f74:	f3c0 0309 	ubfx	r3, r0, #0, #10
    1f78:	1918      	adds	r0, r3, r4
    1f7a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1f7e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    1f80:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1f82:	f363 2552 	bfi	r5, r3, #9, #10
    1f86:	9306      	str	r3, [sp, #24]
    1f88:	f7ff fe7c 	bl	1c84 <z_log_msg_alloc>
		if (msg) {
    1f8c:	4604      	mov	r4, r0
    1f8e:	b178      	cbz	r0, 1fb0 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    1f90:	2200      	movs	r2, #0
    1f92:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    1f94:	3010      	adds	r0, #16
    1f96:	900b      	str	r0, [sp, #44]	; 0x2c
    1f98:	930c      	str	r3, [sp, #48]	; 0x30
    1f9a:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    1f9c:	4640      	mov	r0, r8
    1f9e:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    1fa2:	4a0c      	ldr	r2, [pc, #48]	; (1fd4 <z_impl_z_log_msg_static_create+0xa4>)
    1fa4:	9907      	ldr	r1, [sp, #28]
    1fa6:	f8cd a000 	str.w	sl, [sp]
    1faa:	ab0b      	add	r3, sp, #44	; 0x2c
    1fac:	f7fe fdfc 	bl	ba8 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    1fb0:	f366 2552 	bfi	r5, r6, #9, #10
    1fb4:	464b      	mov	r3, r9
    1fb6:	462a      	mov	r2, r5
    1fb8:	4620      	mov	r0, r4
    1fba:	9905      	ldr	r1, [sp, #20]
}
    1fbc:	b00f      	add	sp, #60	; 0x3c
    1fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    1fc2:	f005 bd9b 	b.w	7afc <z_log_msg_finalize>
    1fc6:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1fca:	0880      	lsrs	r0, r0, #2
    1fcc:	f7ff fe5a 	bl	1c84 <z_log_msg_alloc>
    1fd0:	4604      	mov	r4, r0
    1fd2:	e7ed      	b.n	1fb0 <z_impl_z_log_msg_static_create+0x80>
    1fd4:	00007ad1 	.word	0x00007ad1

00001fd8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fdc:	b087      	sub	sp, #28
    1fde:	4604      	mov	r4, r0
    1fe0:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1fe4:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1fe8:	460f      	mov	r7, r1
    1fea:	4693      	mov	fp, r2
    1fec:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1fee:	b3b6      	cbz	r6, 205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1ff0:	2110      	movs	r1, #16
    1ff2:	4633      	mov	r3, r6
    1ff4:	4652      	mov	r2, sl
    1ff6:	2000      	movs	r0, #0
    1ff8:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    1ffc:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2000:	f7fe fbfe 	bl	800 <cbvprintf_package>
    2004:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2006:	4b17      	ldr	r3, [pc, #92]	; (2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>)
    2008:	f004 0407 	and.w	r4, r4, #7
    200c:	f00b 0b07 	and.w	fp, fp, #7
    2010:	00e4      	lsls	r4, r4, #3
    2012:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2016:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
    201a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    201e:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2020:	4408      	add	r0, r1
	struct log_msg_desc desc =
    2022:	4b11      	ldr	r3, [pc, #68]	; (2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2024:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2028:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    202c:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    202e:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2030:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    2032:	f7ff fe27 	bl	1c84 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    2036:	4605      	mov	r5, r0
    2038:	b140      	cbz	r0, 204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    203a:	b13e      	cbz	r6, 204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    203c:	4633      	mov	r3, r6
    203e:	4652      	mov	r2, sl
    2040:	9903      	ldr	r1, [sp, #12]
    2042:	f8cd 9000 	str.w	r9, [sp]
    2046:	3010      	adds	r0, #16
    2048:	f7fe fbda 	bl	800 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    204c:	4643      	mov	r3, r8
    204e:	4622      	mov	r2, r4
    2050:	4639      	mov	r1, r7
    2052:	4628      	mov	r0, r5
	}
}
    2054:	b007      	add	sp, #28
    2056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    205a:	f005 bd4f 	b.w	7afc <z_log_msg_finalize>
		plen = 0;
    205e:	4631      	mov	r1, r6
    2060:	e7d1      	b.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
    2062:	bf00      	nop
    2064:	0007fe00 	.word	0x0007fe00
    2068:	7ff80000 	.word	0x7ff80000

0000206c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    206c:	b40e      	push	{r1, r2, r3}
    206e:	b503      	push	{r0, r1, lr}
    2070:	ab03      	add	r3, sp, #12
    2072:	f853 2b04 	ldr.w	r2, [r3], #4
    2076:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2078:	4804      	ldr	r0, [pc, #16]	; (208c <print_formatted+0x20>)
	va_start(args, fmt);
    207a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    207c:	f005 fd65 	bl	7b4a <cbvprintf>
	va_end(args);

	return length;
}
    2080:	b002      	add	sp, #8
    2082:	f85d eb04 	ldr.w	lr, [sp], #4
    2086:	b003      	add	sp, #12
    2088:	4770      	bx	lr
    208a:	bf00      	nop
    208c:	00007b73 	.word	0x00007b73

00002090 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2090:	06ca      	lsls	r2, r1, #27
    2092:	d405      	bmi.n	20a0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2094:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2096:	bf4c      	ite	mi
    2098:	4902      	ldrmi	r1, [pc, #8]	; (20a4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    209a:	4903      	ldrpl	r1, [pc, #12]	; (20a8 <newline_print+0x18>)
    209c:	f7ff bfe6 	b.w	206c <print_formatted>
	}
}
    20a0:	4770      	bx	lr
    20a2:	bf00      	nop
    20a4:	00009200 	.word	0x00009200
    20a8:	000091ff 	.word	0x000091ff

000020ac <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    20ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20b0:	b089      	sub	sp, #36	; 0x24
    20b2:	469b      	mov	fp, r3
    20b4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    20b8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    20bc:	4604      	mov	r4, r0
    20be:	9304      	str	r3, [sp, #16]
    20c0:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    20c4:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    20c6:	9b04      	ldr	r3, [sp, #16]
{
    20c8:	460d      	mov	r5, r1
    20ca:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    20cc:	2b00      	cmp	r3, #0
    20ce:	f000 8087 	beq.w	21e0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    20d2:	f006 0308 	and.w	r3, r6, #8
    20d6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    20d8:	f005 fcf8 	bl	7acc <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    20dc:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    20e0:	4602      	mov	r2, r0
    20e2:	2800      	cmp	r0, #0
    20e4:	d04b      	beq.n	217e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    20e6:	4620      	mov	r0, r4
    20e8:	4985      	ldr	r1, [pc, #532]	; (2300 <log_output_process+0x254>)
    20ea:	f7ff ffbf 	bl	206c <print_formatted>
    20ee:	4680      	mov	r8, r0
	if (stamp) {
    20f0:	f1ba 0f00 	cmp.w	sl, #0
    20f4:	d008      	beq.n	2108 <log_output_process+0x5c>
	if (!format) {
    20f6:	f016 0f44 	tst.w	r6, #68	; 0x44
    20fa:	d142      	bne.n	2182 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    20fc:	462a      	mov	r2, r5
    20fe:	4620      	mov	r0, r4
    2100:	4980      	ldr	r1, [pc, #512]	; (2304 <log_output_process+0x258>)
    2102:	f7ff ffb3 	bl	206c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2106:	4480      	add	r8, r0
	if (color) {
    2108:	f006 0301 	and.w	r3, r6, #1
    210c:	b15b      	cbz	r3, 2126 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    210e:	4b7e      	ldr	r3, [pc, #504]	; (2308 <log_output_process+0x25c>)
    2110:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2112:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    2114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2118:	4b7c      	ldr	r3, [pc, #496]	; (230c <log_output_process+0x260>)
    211a:	497d      	ldr	r1, [pc, #500]	; (2310 <log_output_process+0x264>)
    211c:	2a00      	cmp	r2, #0
    211e:	bf08      	it	eq
    2120:	461a      	moveq	r2, r3
    2122:	f7ff ffa3 	bl	206c <print_formatted>
	if (level_on) {
    2126:	f006 0308 	and.w	r3, r6, #8
    212a:	2b00      	cmp	r3, #0
    212c:	d055      	beq.n	21da <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    212e:	4b79      	ldr	r3, [pc, #484]	; (2314 <log_output_process+0x268>)
    2130:	9a04      	ldr	r2, [sp, #16]
    2132:	4620      	mov	r0, r4
    2134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2138:	4977      	ldr	r1, [pc, #476]	; (2318 <log_output_process+0x26c>)
    213a:	f7ff ff97 	bl	206c <print_formatted>
    213e:	4605      	mov	r5, r0
	if (domain) {
    2140:	9b06      	ldr	r3, [sp, #24]
    2142:	b12b      	cbz	r3, 2150 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2144:	461a      	mov	r2, r3
    2146:	4620      	mov	r0, r4
    2148:	4974      	ldr	r1, [pc, #464]	; (231c <log_output_process+0x270>)
    214a:	f7ff ff8f 	bl	206c <print_formatted>
    214e:	4405      	add	r5, r0
	if (source) {
    2150:	f1bb 0f00 	cmp.w	fp, #0
    2154:	d005      	beq.n	2162 <log_output_process+0xb6>
		total += print_formatted(output,
    2156:	465a      	mov	r2, fp
    2158:	4620      	mov	r0, r4
    215a:	4971      	ldr	r1, [pc, #452]	; (2320 <log_output_process+0x274>)
    215c:	f7ff ff86 	bl	206c <print_formatted>
    2160:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2162:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2164:	f1b9 0f00 	cmp.w	r9, #0
    2168:	d149      	bne.n	21fe <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    216a:	2f00      	cmp	r7, #0
    216c:	d14f      	bne.n	220e <log_output_process+0x162>
	if (color) {
    216e:	07f3      	lsls	r3, r6, #31
    2170:	f100 80c0 	bmi.w	22f4 <log_output_process+0x248>
	newline_print(output, flags);
    2174:	4631      	mov	r1, r6
    2176:	4620      	mov	r0, r4
    2178:	f7ff ff8a 	bl	2090 <newline_print>
}
    217c:	e0b4      	b.n	22e8 <log_output_process+0x23c>
	uint32_t length = 0U;
    217e:	4680      	mov	r8, r0
    2180:	e7b6      	b.n	20f0 <log_output_process+0x44>
	} else if (freq != 0U) {
    2182:	4b68      	ldr	r3, [pc, #416]	; (2324 <log_output_process+0x278>)
    2184:	6818      	ldr	r0, [r3, #0]
    2186:	2800      	cmp	r0, #0
    2188:	d0bd      	beq.n	2106 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    218a:	4b67      	ldr	r3, [pc, #412]	; (2328 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    218c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    2196:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    219a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    219e:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    21a2:	fb0e f505 	mul.w	r5, lr, r5
    21a6:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21aa:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    21ae:	213c      	movs	r1, #60	; 0x3c
    21b0:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21b4:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    21b8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21bc:	fb0e f505 	mul.w	r5, lr, r5
    21c0:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    21c4:	fb01 2213 	mls	r2, r1, r3, r2
    21c8:	4620      	mov	r0, r4
    21ca:	9200      	str	r2, [sp, #0]
    21cc:	e9cd c501 	strd	ip, r5, [sp, #4]
    21d0:	4652      	mov	r2, sl
    21d2:	4956      	ldr	r1, [pc, #344]	; (232c <log_output_process+0x280>)
    21d4:	f7ff ff4a 	bl	206c <print_formatted>
    21d8:	e795      	b.n	2106 <log_output_process+0x5a>
	int total = 0;
    21da:	f006 0508 	and.w	r5, r6, #8
    21de:	e7af      	b.n	2140 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    21e0:	f1bb 0f01 	cmp.w	fp, #1
    21e4:	d106      	bne.n	21f4 <log_output_process+0x148>
	if (package) {
    21e6:	f1b9 0f00 	cmp.w	r9, #0
    21ea:	d164      	bne.n	22b6 <log_output_process+0x20a>
	if (data_len) {
    21ec:	2f00      	cmp	r7, #0
    21ee:	d07b      	beq.n	22e8 <log_output_process+0x23c>
		prefix_offset = 0;
    21f0:	2500      	movs	r5, #0
    21f2:	e00c      	b.n	220e <log_output_process+0x162>
	if (package) {
    21f4:	f1b9 0f00 	cmp.w	r9, #0
    21f8:	d0f8      	beq.n	21ec <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    21fa:	484d      	ldr	r0, [pc, #308]	; (2330 <log_output_process+0x284>)
    21fc:	e05c      	b.n	22b8 <log_output_process+0x20c>
		cb = out_func;
    21fe:	484d      	ldr	r0, [pc, #308]	; (2334 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2200:	464b      	mov	r3, r9
    2202:	4622      	mov	r2, r4
    2204:	494c      	ldr	r1, [pc, #304]	; (2338 <log_output_process+0x28c>)
    2206:	f005 f85d 	bl	72c4 <cbpprintf_external>
	if (data_len) {
    220a:	2f00      	cmp	r7, #0
    220c:	d068      	beq.n	22e0 <log_output_process+0x234>
		print_formatted(output, " ");
    220e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 233c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2212:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2340 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2216:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2218:	4631      	mov	r1, r6
    221a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    221c:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    221e:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2222:	bf28      	it	cs
    2224:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2228:	f7ff ff32 	bl	2090 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    222c:	455d      	cmp	r5, fp
    222e:	dc45      	bgt.n	22bc <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2230:	9b05      	ldr	r3, [sp, #20]
    2232:	4651      	mov	r1, sl
    2234:	4620      	mov	r0, r4
    2236:	781a      	ldrb	r2, [r3, #0]
    2238:	f7ff ff18 	bl	206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    223c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2240:	f01b 0f07 	tst.w	fp, #7
    2244:	d103      	bne.n	224e <log_output_process+0x1a2>
			print_formatted(output, " ");
    2246:	4649      	mov	r1, r9
    2248:	4620      	mov	r0, r4
    224a:	f7ff ff0f 	bl	206c <print_formatted>
		if (i < length) {
    224e:	45d8      	cmp	r8, fp
    2250:	d93b      	bls.n	22ca <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2252:	9b05      	ldr	r3, [sp, #20]
    2254:	4651      	mov	r1, sl
    2256:	4620      	mov	r0, r4
    2258:	f813 200b 	ldrb.w	r2, [r3, fp]
    225c:	f7ff ff06 	bl	206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2260:	f10b 0b01 	add.w	fp, fp, #1
    2264:	f1bb 0f10 	cmp.w	fp, #16
    2268:	d1ea      	bne.n	2240 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    226a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    226e:	4620      	mov	r0, r4
    2270:	4934      	ldr	r1, [pc, #208]	; (2344 <log_output_process+0x298>)
    2272:	f7ff fefb 	bl	206c <print_formatted>
		if (i < length) {
    2276:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    2278:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    227a:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    227c:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    227e:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2282:	295f      	cmp	r1, #95	; 0x5f
    2284:	bf28      	it	cs
    2286:	222e      	movcs	r2, #46	; 0x2e
    2288:	492f      	ldr	r1, [pc, #188]	; (2348 <log_output_process+0x29c>)
    228a:	f7ff feef 	bl	206c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    228e:	f10b 0b01 	add.w	fp, fp, #1
    2292:	f1bb 0f10 	cmp.w	fp, #16
    2296:	d01d      	beq.n	22d4 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    2298:	f01b 0f07 	tst.w	fp, #7
    229c:	d103      	bne.n	22a6 <log_output_process+0x1fa>
			print_formatted(output, " ");
    229e:	4649      	mov	r1, r9
    22a0:	4620      	mov	r0, r4
    22a2:	f7ff fee3 	bl	206c <print_formatted>
		if (i < length) {
    22a6:	45d8      	cmp	r8, fp
    22a8:	465a      	mov	r2, fp
    22aa:	d8e5      	bhi.n	2278 <log_output_process+0x1cc>
			print_formatted(output, " ");
    22ac:	4649      	mov	r1, r9
    22ae:	4620      	mov	r0, r4
    22b0:	f7ff fedc 	bl	206c <print_formatted>
    22b4:	e7eb      	b.n	228e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    22b6:	481f      	ldr	r0, [pc, #124]	; (2334 <log_output_process+0x288>)
		prefix_offset = 0;
    22b8:	9d04      	ldr	r5, [sp, #16]
    22ba:	e7a1      	b.n	2200 <log_output_process+0x154>
		print_formatted(output, " ");
    22bc:	4649      	mov	r1, r9
    22be:	4620      	mov	r0, r4
    22c0:	f7ff fed4 	bl	206c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    22c4:	f10b 0b01 	add.w	fp, fp, #1
    22c8:	e7b0      	b.n	222c <log_output_process+0x180>
			print_formatted(output, "   ");
    22ca:	4620      	mov	r0, r4
    22cc:	491f      	ldr	r1, [pc, #124]	; (234c <log_output_process+0x2a0>)
    22ce:	f7ff fecd 	bl	206c <print_formatted>
    22d2:	e7c5      	b.n	2260 <log_output_process+0x1b4>
		data += length;
    22d4:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    22d6:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    22da:	4443      	add	r3, r8
    22dc:	9305      	str	r3, [sp, #20]
	} while (len);
    22de:	d19a      	bne.n	2216 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    22e0:	9b04      	ldr	r3, [sp, #16]
    22e2:	2b00      	cmp	r3, #0
    22e4:	f47f af43 	bne.w	216e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    22e8:	4620      	mov	r0, r4
}
    22ea:	b009      	add	sp, #36	; 0x24
    22ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    22f0:	f005 bc32 	b.w	7b58 <log_output_flush>
		print_formatted(output, "%s", log_color);
    22f4:	4620      	mov	r0, r4
    22f6:	4a05      	ldr	r2, [pc, #20]	; (230c <log_output_process+0x260>)
    22f8:	4905      	ldr	r1, [pc, #20]	; (2310 <log_output_process+0x264>)
    22fa:	f7ff feb7 	bl	206c <print_formatted>
}
    22fe:	e739      	b.n	2174 <log_output_process+0xc8>
    2300:	00009207 	.word	0x00009207
    2304:	0000920b 	.word	0x0000920b
    2308:	00008d2c 	.word	0x00008d2c
    230c:	00009202 	.word	0x00009202
    2310:	00009850 	.word	0x00009850
    2314:	00008d40 	.word	0x00008d40
    2318:	00009230 	.word	0x00009230
    231c:	00009236 	.word	0x00009236
    2320:	0000923a 	.word	0x0000923a
    2324:	20000938 	.word	0x20000938
    2328:	20000934 	.word	0x20000934
    232c:	00009214 	.word	0x00009214
    2330:	00007ba1 	.word	0x00007ba1
    2334:	00007b73 	.word	0x00007b73
    2338:	00007b4b 	.word	0x00007b4b
    233c:	00009247 	.word	0x00009247
    2340:	0000923f 	.word	0x0000923f
    2344:	00009249 	.word	0x00009249
    2348:	0000924b 	.word	0x0000924b
    234c:	00009245 	.word	0x00009245

00002350 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2354:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2356:	684b      	ldr	r3, [r1, #4]
    2358:	4605      	mov	r5, r0
    235a:	460c      	mov	r4, r1
    235c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    235e:	688e      	ldr	r6, [r1, #8]
    2360:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    2362:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2366:	b15b      	cbz	r3, 2380 <log_output_msg_process+0x30>
    2368:	4a13      	ldr	r2, [pc, #76]	; (23b8 <log_output_msg_process+0x68>)
    236a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    236c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2370:	2900      	cmp	r1, #0
    2372:	db1f      	blt.n	23b4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2374:	7820      	ldrb	r0, [r4, #0]
    2376:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    237a:	f7ff fdb7 	bl	1eec <log_source_name_get>
    237e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2380:	4621      	mov	r1, r4
    2382:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    2386:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2388:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    238c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    238e:	eb01 0402 	add.w	r4, r1, r2
    2392:	bf08      	it	eq
    2394:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    2396:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    239a:	e9cd 0803 	strd	r0, r8, [sp, #12]
    239e:	e9cd 1401 	strd	r1, r4, [sp, #4]
    23a2:	2200      	movs	r2, #0
    23a4:	4631      	mov	r1, r6
    23a6:	4628      	mov	r0, r5
    23a8:	9700      	str	r7, [sp, #0]
    23aa:	f7ff fe7f 	bl	20ac <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    23ae:	b006      	add	sp, #24
    23b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    23b4:	2300      	movs	r3, #0
    23b6:	e7e3      	b.n	2380 <log_output_msg_process+0x30>
    23b8:	00008c44 	.word	0x00008c44

000023bc <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23bc:	f242 730f 	movw	r3, #9999	; 0x270f
{
    23c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23c2:	428b      	cmp	r3, r1
    23c4:	bf28      	it	cs
    23c6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    23c8:	6805      	ldr	r5, [r0, #0]
{
    23ca:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23cc:	2105      	movs	r1, #5
    23ce:	4668      	mov	r0, sp
    23d0:	4a0d      	ldr	r2, [pc, #52]	; (2408 <log_output_dropped_process+0x4c>)
    23d2:	f004 ffef 	bl	73b4 <snprintk>
    23d6:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    23d8:	6863      	ldr	r3, [r4, #4]
    23da:	4628      	mov	r0, r5
    23dc:	220b      	movs	r2, #11
    23de:	685b      	ldr	r3, [r3, #4]
    23e0:	490a      	ldr	r1, [pc, #40]	; (240c <log_output_dropped_process+0x50>)
    23e2:	f005 fba5 	bl	7b30 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    23e6:	6863      	ldr	r3, [r4, #4]
    23e8:	4632      	mov	r2, r6
    23ea:	4669      	mov	r1, sp
    23ec:	4628      	mov	r0, r5
    23ee:	685b      	ldr	r3, [r3, #4]
    23f0:	f005 fb9e 	bl	7b30 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    23f4:	6863      	ldr	r3, [r4, #4]
    23f6:	221b      	movs	r2, #27
    23f8:	4628      	mov	r0, r5
    23fa:	685b      	ldr	r3, [r3, #4]
    23fc:	4904      	ldr	r1, [pc, #16]	; (2410 <log_output_dropped_process+0x54>)
    23fe:	f005 fb97 	bl	7b30 <buffer_write>
		     output->control_block->ctx);
}
    2402:	b002      	add	sp, #8
    2404:	bd70      	pop	{r4, r5, r6, pc}
    2406:	bf00      	nop
    2408:	00009a18 	.word	0x00009a18
    240c:	0000926a 	.word	0x0000926a
    2410:	0000924e 	.word	0x0000924e

00002414 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2414:	2100      	movs	r1, #0
    2416:	2301      	movs	r3, #1
    2418:	4a06      	ldr	r2, [pc, #24]	; (2434 <log_output_timestamp_freq_set+0x20>)
    241a:	4290      	cmp	r0, r2
    241c:	d806      	bhi.n	242c <log_output_timestamp_freq_set+0x18>
    241e:	4a06      	ldr	r2, [pc, #24]	; (2438 <log_output_timestamp_freq_set+0x24>)
    2420:	b901      	cbnz	r1, 2424 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2422:	2301      	movs	r3, #1
    2424:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <log_output_timestamp_freq_set+0x28>)
    2428:	6018      	str	r0, [r3, #0]
}
    242a:	4770      	bx	lr
		timestamp_div *= 2U;
    242c:	2101      	movs	r1, #1
		frequency /= 2U;
    242e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2430:	005b      	lsls	r3, r3, #1
    2432:	e7f2      	b.n	241a <log_output_timestamp_freq_set+0x6>
    2434:	000f4240 	.word	0x000f4240
    2438:	20000934 	.word	0x20000934
    243c:	20000938 	.word	0x20000938

00002440 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2440:	4b01      	ldr	r3, [pc, #4]	; (2448 <format_set+0x8>)
	return 0;
}
    2442:	2000      	movs	r0, #0
	log_format_current = log_type;
    2444:	6019      	str	r1, [r3, #0]
}
    2446:	4770      	bx	lr
    2448:	20000950 	.word	0x20000950

0000244c <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    244c:	2201      	movs	r2, #1
    244e:	4b02      	ldr	r3, [pc, #8]	; (2458 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2450:	4802      	ldr	r0, [pc, #8]	; (245c <panic+0x10>)
    2452:	701a      	strb	r2, [r3, #0]
    2454:	f005 bb80 	b.w	7b58 <log_output_flush>
    2458:	200011ec 	.word	0x200011ec
    245c:	00008d70 	.word	0x00008d70

00002460 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2460:	4801      	ldr	r0, [pc, #4]	; (2468 <dropped+0x8>)
    2462:	f7ff bfab 	b.w	23bc <log_output_dropped_process>
    2466:	bf00      	nop
    2468:	00008d70 	.word	0x00008d70

0000246c <process>:
{
    246c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <process+0x1c>)
{
    2470:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2472:	6818      	ldr	r0, [r3, #0]
    2474:	f7ff fb84 	bl	1b80 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2478:	4621      	mov	r1, r4
}
    247a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    247e:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    2480:	220f      	movs	r2, #15
    2482:	4802      	ldr	r0, [pc, #8]	; (248c <process+0x20>)
    2484:	4718      	bx	r3
    2486:	bf00      	nop
    2488:	20000950 	.word	0x20000950
    248c:	00008d70 	.word	0x00008d70

00002490 <char_out>:
{
    2490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2492:	460d      	mov	r5, r1
    2494:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2496:	4f06      	ldr	r7, [pc, #24]	; (24b0 <char_out+0x20>)
    2498:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    249a:	42b4      	cmp	r4, r6
    249c:	d101      	bne.n	24a2 <char_out+0x12>
}
    249e:	4628      	mov	r0, r5
    24a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    24a2:	f814 1b01 	ldrb.w	r1, [r4], #1
    24a6:	68bb      	ldr	r3, [r7, #8]
    24a8:	4801      	ldr	r0, [pc, #4]	; (24b0 <char_out+0x20>)
    24aa:	685b      	ldr	r3, [r3, #4]
    24ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    24ae:	e7f4      	b.n	249a <char_out+0xa>
    24b0:	000089c8 	.word	0x000089c8

000024b4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    24b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24b8:	4605      	mov	r5, r0
	__asm__ volatile(
    24ba:	f04f 0320 	mov.w	r3, #32
    24be:	f3ef 8611 	mrs	r6, BASEPRI
    24c2:	f383 8812 	msr	BASEPRI_MAX, r3
    24c6:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    24ca:	f04f 090c 	mov.w	r9, #12
	return list->head;
    24ce:	4b0d      	ldr	r3, [pc, #52]	; (2504 <pm_state_notify+0x50>)
    24d0:	4f0d      	ldr	r7, [pc, #52]	; (2508 <pm_state_notify+0x54>)
    24d2:	681c      	ldr	r4, [r3, #0]
    24d4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 250c <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24d8:	b92c      	cbnz	r4, 24e6 <pm_state_notify+0x32>
	__asm__ volatile(
    24da:	f386 8811 	msr	BASEPRI, r6
    24de:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    24e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    24e6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    24ea:	2d00      	cmp	r5, #0
    24ec:	bf18      	it	ne
    24ee:	4613      	movne	r3, r2
		if (callback) {
    24f0:	b12b      	cbz	r3, 24fe <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    24f2:	f898 2014 	ldrb.w	r2, [r8, #20]
    24f6:	fb09 f202 	mul.w	r2, r9, r2
    24fa:	5cb8      	ldrb	r0, [r7, r2]
    24fc:	4798      	blx	r3
	return node->next;
    24fe:	6824      	ldr	r4, [r4, #0]
    2500:	e7ea      	b.n	24d8 <pm_state_notify+0x24>
    2502:	bf00      	nop
    2504:	2000096c 	.word	0x2000096c
    2508:	20000960 	.word	0x20000960
    250c:	20000fb8 	.word	0x20000fb8

00002510 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2510:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    2512:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2514:	4b16      	ldr	r3, [pc, #88]	; (2570 <pm_system_resume+0x60>)
    2516:	7d1c      	ldrb	r4, [r3, #20]
    2518:	f004 031f 	and.w	r3, r4, #31
    251c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    251e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2520:	4b14      	ldr	r3, [pc, #80]	; (2574 <pm_system_resume+0x64>)
    2522:	0961      	lsrs	r1, r4, #5
    2524:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2528:	e8d3 1fef 	ldaex	r1, [r3]
    252c:	ea01 0500 	and.w	r5, r1, r0
    2530:	e8c3 5fe6 	stlex	r6, r5, [r3]
    2534:	2e00      	cmp	r6, #0
    2536:	d1f7      	bne.n	2528 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2538:	420a      	tst	r2, r1
    253a:	d013      	beq.n	2564 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    253c:	4b0e      	ldr	r3, [pc, #56]	; (2578 <pm_system_resume+0x68>)
    253e:	4d0f      	ldr	r5, [pc, #60]	; (257c <pm_system_resume+0x6c>)
    2540:	b18b      	cbz	r3, 2566 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2542:	230c      	movs	r3, #12
    2544:	4363      	muls	r3, r4
    2546:	18ea      	adds	r2, r5, r3
    2548:	7851      	ldrb	r1, [r2, #1]
    254a:	5ce8      	ldrb	r0, [r5, r3]
    254c:	f005 fa89 	bl	7a62 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2550:	2000      	movs	r0, #0
    2552:	f7ff ffaf 	bl	24b4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2556:	230c      	movs	r3, #12
    2558:	435c      	muls	r4, r3
    255a:	2300      	movs	r3, #0
    255c:	192a      	adds	r2, r5, r4
    255e:	512b      	str	r3, [r5, r4]
    2560:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2564:	bd70      	pop	{r4, r5, r6, pc}
    2566:	f383 8811 	msr	BASEPRI, r3
    256a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    256e:	e7ef      	b.n	2550 <pm_system_resume+0x40>
    2570:	20000fb8 	.word	0x20000fb8
    2574:	20000974 	.word	0x20000974
    2578:	00007a63 	.word	0x00007a63
    257c:	20000960 	.word	0x20000960

00002580 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2584:	4b32      	ldr	r3, [pc, #200]	; (2650 <pm_system_suspend+0xd0>)
{
    2586:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2588:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    258a:	f04f 0320 	mov.w	r3, #32
    258e:	f3ef 8811 	mrs	r8, BASEPRI
    2592:	f383 8812 	msr	BASEPRI_MAX, r3
    2596:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    259a:	240c      	movs	r4, #12
    259c:	436c      	muls	r4, r5
    259e:	4b2d      	ldr	r3, [pc, #180]	; (2654 <pm_system_suspend+0xd4>)
    25a0:	4e2d      	ldr	r6, [pc, #180]	; (2658 <pm_system_suspend+0xd8>)
    25a2:	5d19      	ldrb	r1, [r3, r4]
    25a4:	191a      	adds	r2, r3, r4
    25a6:	2900      	cmp	r1, #0
    25a8:	d047      	beq.n	263a <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    25aa:	ca07      	ldmia	r2, {r0, r1, r2}
    25ac:	eb06 0c04 	add.w	ip, r6, r4
    25b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    25b4:	2200      	movs	r2, #0
    25b6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    25b8:	f388 8811 	msr	BASEPRI, r8
    25bc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    25c0:	230c      	movs	r3, #12
    25c2:	436b      	muls	r3, r5
    25c4:	5cf0      	ldrb	r0, [r6, r3]
    25c6:	18f2      	adds	r2, r6, r3
    25c8:	b3a8      	cbz	r0, 2636 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    25ca:	1c7b      	adds	r3, r7, #1
    25cc:	d010      	beq.n	25f0 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    25ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    25d2:	2100      	movs	r1, #0
    25d4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    25d8:	4c20      	ldr	r4, [pc, #128]	; (265c <pm_system_suspend+0xdc>)
    25da:	2300      	movs	r3, #0
    25dc:	fbec 4100 	umlal	r4, r1, ip, r0
    25e0:	4a1f      	ldr	r2, [pc, #124]	; (2660 <pm_system_suspend+0xe0>)
    25e2:	4620      	mov	r0, r4
    25e4:	f7fd fdb6 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    25e8:	2101      	movs	r1, #1
    25ea:	1a38      	subs	r0, r7, r0
    25ec:	f006 f8ae 	bl	874c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    25f0:	f003 fffe 	bl	65f0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    25f4:	2001      	movs	r0, #1
    25f6:	f7ff ff5d 	bl	24b4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    25fa:	4b1a      	ldr	r3, [pc, #104]	; (2664 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    25fc:	096a      	lsrs	r2, r5, #5
    25fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2602:	2201      	movs	r2, #1
    2604:	f005 011f 	and.w	r1, r5, #31
    2608:	408a      	lsls	r2, r1
    260a:	e8d3 0fef 	ldaex	r0, [r3]
    260e:	4310      	orrs	r0, r2
    2610:	e8c3 0fe1 	stlex	r1, r0, [r3]
    2614:	2900      	cmp	r1, #0
    2616:	d1f8      	bne.n	260a <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    2618:	4b13      	ldr	r3, [pc, #76]	; (2668 <pm_system_suspend+0xe8>)
    261a:	b13b      	cbz	r3, 262c <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    261c:	230c      	movs	r3, #12
    261e:	fb03 f005 	mul.w	r0, r3, r5
    2622:	1833      	adds	r3, r6, r0
    2624:	7859      	ldrb	r1, [r3, #1]
    2626:	5c30      	ldrb	r0, [r6, r0]
    2628:	f7ff f9ec 	bl	1a04 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    262c:	f7ff ff70 	bl	2510 <pm_system_resume>
	k_sched_unlock();
    2630:	f003 fff2 	bl	6618 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2634:	2001      	movs	r0, #1
}
    2636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    263a:	4601      	mov	r1, r0
    263c:	4628      	mov	r0, r5
    263e:	f000 f815 	bl	266c <pm_policy_next_state>
		if (info != NULL) {
    2642:	2800      	cmp	r0, #0
    2644:	d0b8      	beq.n	25b8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2646:	c807      	ldmia	r0, {r0, r1, r2}
    2648:	4434      	add	r4, r6
    264a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    264e:	e7b3      	b.n	25b8 <pm_system_suspend+0x38>
    2650:	20000fb8 	.word	0x20000fb8
    2654:	20000954 	.word	0x20000954
    2658:	20000960 	.word	0x20000960
    265c:	000f423f 	.word	0x000f423f
    2660:	000f4240 	.word	0x000f4240
    2664:	20000974 	.word	0x20000974
    2668:	00001a05 	.word	0x00001a05

0000266c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2670:	b085      	sub	sp, #20
    2672:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2674:	a903      	add	r1, sp, #12
    2676:	f000 f843 	bl	2700 <pm_state_cpu_get_all>
    267a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    267e:	4604      	mov	r4, r0
    2680:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2684:	4b1b      	ldr	r3, [pc, #108]	; (26f4 <pm_policy_next_state+0x88>)
    2686:	9d03      	ldr	r5, [sp, #12]
    2688:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    268c:	1e43      	subs	r3, r0, #1
    268e:	b21b      	sxth	r3, r3
    2690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2694:	f8df 8060 	ldr.w	r8, [pc, #96]	; 26f8 <pm_policy_next_state+0x8c>
    2698:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    269c:	b924      	cbnz	r4, 26a8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    269e:	46a1      	mov	r9, r4
}
    26a0:	4648      	mov	r0, r9
    26a2:	b005      	add	sp, #20
    26a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26a8:	46c4      	mov	ip, r8
    26aa:	4659      	mov	r1, fp
    26ac:	6868      	ldr	r0, [r5, #4]
    26ae:	2300      	movs	r3, #0
    26b0:	fbe0 c107 	umlal	ip, r1, r0, r7
    26b4:	4a11      	ldr	r2, [pc, #68]	; (26fc <pm_policy_next_state+0x90>)
    26b6:	4660      	mov	r0, ip
    26b8:	f7fd fd4c 	bl	154 <__aeabi_uldivmod>
    26bc:	46c4      	mov	ip, r8
    26be:	4659      	mov	r1, fp
    26c0:	9001      	str	r0, [sp, #4]
    26c2:	68a8      	ldr	r0, [r5, #8]
    26c4:	2300      	movs	r3, #0
    26c6:	fbe0 c107 	umlal	ip, r1, r0, r7
    26ca:	4a0c      	ldr	r2, [pc, #48]	; (26fc <pm_policy_next_state+0x90>)
    26cc:	4660      	mov	r0, ip
    26ce:	f7fd fd41 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    26d2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    26d6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    26d8:	d001      	beq.n	26de <pm_policy_next_state+0x72>
    26da:	4582      	cmp	sl, r0
    26dc:	d905      	bls.n	26ea <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    26de:	1c73      	adds	r3, r6, #1
    26e0:	d0de      	beq.n	26a0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    26e6:	42b0      	cmp	r0, r6
    26e8:	d9da      	bls.n	26a0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    26ea:	3c01      	subs	r4, #1
    26ec:	b2a4      	uxth	r4, r4
    26ee:	3d0c      	subs	r5, #12
    26f0:	e7d4      	b.n	269c <pm_policy_next_state+0x30>
    26f2:	bf00      	nop
    26f4:	20000030 	.word	0x20000030
    26f8:	000f423f 	.word	0x000f423f
    26fc:	000f4240 	.word	0x000f4240

00002700 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2700:	b908      	cbnz	r0, 2706 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2702:	4b02      	ldr	r3, [pc, #8]	; (270c <pm_state_cpu_get_all+0xc>)
    2704:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2706:	2000      	movs	r0, #0
    2708:	4770      	bx	lr
    270a:	bf00      	nop
    270c:	00008d80 	.word	0x00008d80

00002710 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2710:	4801      	ldr	r0, [pc, #4]	; (2718 <nrf_cc3xx_platform_abort_init+0x8>)
    2712:	f004 bc95 	b.w	7040 <nrf_cc3xx_platform_set_abort>
    2716:	bf00      	nop
    2718:	00008d80 	.word	0x00008d80

0000271c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    271c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    271e:	4604      	mov	r4, r0
    2720:	b918      	cbnz	r0, 272a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2722:	4b0f      	ldr	r3, [pc, #60]	; (2760 <mutex_free_platform+0x44>)
    2724:	480f      	ldr	r0, [pc, #60]	; (2764 <mutex_free_platform+0x48>)
    2726:	685b      	ldr	r3, [r3, #4]
    2728:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    272a:	6861      	ldr	r1, [r4, #4]
    272c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    2730:	d00f      	beq.n	2752 <mutex_free_platform+0x36>
    2732:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    2736:	d00c      	beq.n	2752 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2738:	4d0b      	ldr	r5, [pc, #44]	; (2768 <mutex_free_platform+0x4c>)
    273a:	42a9      	cmp	r1, r5
    273c:	d009      	beq.n	2752 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    273e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    2742:	d007      	beq.n	2754 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2744:	4621      	mov	r1, r4
    2746:	4809      	ldr	r0, [pc, #36]	; (276c <mutex_free_platform+0x50>)
    2748:	f005 fe82 	bl	8450 <k_mem_slab_free>
        mutex->mutex = NULL;
    274c:	2300      	movs	r3, #0
    274e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2750:	6065      	str	r5, [r4, #4]
}
    2752:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2754:	2214      	movs	r2, #20
    2756:	6820      	ldr	r0, [r4, #0]
    2758:	f005 fa8f 	bl	7c7a <memset>
    275c:	e7f8      	b.n	2750 <mutex_free_platform+0x34>
    275e:	bf00      	nop
    2760:	20000180 	.word	0x20000180
    2764:	000092b3 	.word	0x000092b3
    2768:	a95c5f2c 	.word	0xa95c5f2c
    276c:	20000e78 	.word	0x20000e78

00002770 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2770:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2772:	b360      	cbz	r0, 27ce <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2774:	6843      	ldr	r3, [r0, #4]
    2776:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    277a:	d00e      	beq.n	279a <mutex_lock_platform+0x2a>
    277c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2780:	d018      	beq.n	27b4 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2782:	4a14      	ldr	r2, [pc, #80]	; (27d4 <mutex_lock_platform+0x64>)
    2784:	4293      	cmp	r3, r2
    2786:	d020      	beq.n	27ca <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2788:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    278a:	f04f 32ff 	mov.w	r2, #4294967295
    278e:	f04f 33ff 	mov.w	r3, #4294967295
    2792:	f003 fc1f 	bl	5fd4 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    2796:	b158      	cbz	r0, 27b0 <mutex_lock_platform+0x40>
    2798:	e015      	b.n	27c6 <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    279a:	2201      	movs	r2, #1
    279c:	6803      	ldr	r3, [r0, #0]
    279e:	e8d3 1fef 	ldaex	r1, [r3]
    27a2:	2900      	cmp	r1, #0
    27a4:	d103      	bne.n	27ae <mutex_lock_platform+0x3e>
    27a6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    27aa:	2800      	cmp	r0, #0
    27ac:	d1f7      	bne.n	279e <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    27ae:	d10a      	bne.n	27c6 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    27b0:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    27b2:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    27b4:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    27b6:	4a08      	ldr	r2, [pc, #32]	; (27d8 <mutex_lock_platform+0x68>)
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
    27be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    27c2:	2b00      	cmp	r3, #0
    27c4:	d0f4      	beq.n	27b0 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    27c6:	4805      	ldr	r0, [pc, #20]	; (27dc <mutex_lock_platform+0x6c>)
    27c8:	e7f3      	b.n	27b2 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    27ca:	4805      	ldr	r0, [pc, #20]	; (27e0 <mutex_lock_platform+0x70>)
    27cc:	e7f1      	b.n	27b2 <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    27ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    27d2:	e7ee      	b.n	27b2 <mutex_lock_platform+0x42>
    27d4:	a95c5f2c 	.word	0xa95c5f2c
    27d8:	50030000 	.word	0x50030000
    27dc:	ffff8fe9 	.word	0xffff8fe9
    27e0:	ffff8fea 	.word	0xffff8fea

000027e4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    27e4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    27e6:	b320      	cbz	r0, 2832 <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    27e8:	6843      	ldr	r3, [r0, #4]
    27ea:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    27ee:	d009      	beq.n	2804 <mutex_unlock_platform+0x20>
    27f0:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    27f4:	d013      	beq.n	281e <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    27f6:	4a11      	ldr	r2, [pc, #68]	; (283c <mutex_unlock_platform+0x58>)
    27f8:	4293      	cmp	r3, r2
    27fa:	d01d      	beq.n	2838 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    27fc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    27fe:	f003 fc63 	bl	60c8 <z_impl_k_mutex_unlock>
    2802:	e014      	b.n	282e <mutex_unlock_platform+0x4a>
    2804:	2200      	movs	r2, #0
    2806:	6803      	ldr	r3, [r0, #0]
    2808:	e8d3 1fef 	ldaex	r1, [r3]
    280c:	2901      	cmp	r1, #1
    280e:	d103      	bne.n	2818 <mutex_unlock_platform+0x34>
    2810:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2814:	2800      	cmp	r0, #0
    2816:	d1f7      	bne.n	2808 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2818:	d009      	beq.n	282e <mutex_unlock_platform+0x4a>
    281a:	4809      	ldr	r0, [pc, #36]	; (2840 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    281c:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    281e:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    2820:	6803      	ldr	r3, [r0, #0]
    2822:	4a08      	ldr	r2, [pc, #32]	; (2844 <mutex_unlock_platform+0x60>)
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	f503 7380 	add.w	r3, r3, #256	; 0x100
    282a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    282e:	2000      	movs	r0, #0
    2830:	e7f4      	b.n	281c <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2832:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2836:	e7f1      	b.n	281c <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2838:	4803      	ldr	r0, [pc, #12]	; (2848 <mutex_unlock_platform+0x64>)
    283a:	e7ef      	b.n	281c <mutex_unlock_platform+0x38>
    283c:	a95c5f2c 	.word	0xa95c5f2c
    2840:	ffff8fe9 	.word	0xffff8fe9
    2844:	50030000 	.word	0x50030000
    2848:	ffff8fea 	.word	0xffff8fea

0000284c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    284c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    284e:	4604      	mov	r4, r0
    2850:	b918      	cbnz	r0, 285a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2852:	4b1d      	ldr	r3, [pc, #116]	; (28c8 <mutex_init_platform+0x7c>)
    2854:	481d      	ldr	r0, [pc, #116]	; (28cc <mutex_init_platform+0x80>)
    2856:	685b      	ldr	r3, [r3, #4]
    2858:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    285a:	6863      	ldr	r3, [r4, #4]
    285c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2860:	d02f      	beq.n	28c2 <mutex_init_platform+0x76>
    2862:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2866:	d02c      	beq.n	28c2 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    2868:	4a19      	ldr	r2, [pc, #100]	; (28d0 <mutex_init_platform+0x84>)
    286a:	4293      	cmp	r3, r2
    286c:	d119      	bne.n	28a2 <mutex_init_platform+0x56>
    286e:	6823      	ldr	r3, [r4, #0]
    2870:	bb03      	cbnz	r3, 28b4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2872:	f04f 32ff 	mov.w	r2, #4294967295
    2876:	f04f 33ff 	mov.w	r3, #4294967295
    287a:	4621      	mov	r1, r4
    287c:	4815      	ldr	r0, [pc, #84]	; (28d4 <mutex_init_platform+0x88>)
    287e:	f003 faa7 	bl	5dd0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2882:	b908      	cbnz	r0, 2888 <mutex_init_platform+0x3c>
    2884:	6823      	ldr	r3, [r4, #0]
    2886:	b91b      	cbnz	r3, 2890 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <mutex_init_platform+0x7c>)
    288a:	4813      	ldr	r0, [pc, #76]	; (28d8 <mutex_init_platform+0x8c>)
    288c:	685b      	ldr	r3, [r3, #4]
    288e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2890:	2214      	movs	r2, #20
    2892:	2100      	movs	r1, #0
    2894:	6820      	ldr	r0, [r4, #0]
    2896:	f005 f9f0 	bl	7c7a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    289a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    289e:	6063      	str	r3, [r4, #4]
    28a0:	e008      	b.n	28b4 <mutex_init_platform+0x68>
    switch(flags){
    28a2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    28a6:	d80d      	bhi.n	28c4 <mutex_init_platform+0x78>
    28a8:	2b3a      	cmp	r3, #58	; 0x3a
    28aa:	d003      	beq.n	28b4 <mutex_init_platform+0x68>
    28ac:	f640 62ba 	movw	r2, #3770	; 0xeba
    28b0:	4293      	cmp	r3, r2
    28b2:	d1de      	bne.n	2872 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    28b4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    28b6:	f005 fe10 	bl	84da <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    28ba:	6863      	ldr	r3, [r4, #4]
    28bc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    28c0:	6063      	str	r3, [r4, #4]
}
    28c2:	bd10      	pop	{r4, pc}
    switch(flags){
    28c4:	4a05      	ldr	r2, [pc, #20]	; (28dc <mutex_init_platform+0x90>)
    28c6:	e7f3      	b.n	28b0 <mutex_init_platform+0x64>
    28c8:	20000180 	.word	0x20000180
    28cc:	000092b3 	.word	0x000092b3
    28d0:	a95c5f2c 	.word	0xa95c5f2c
    28d4:	20000e78 	.word	0x20000e78
    28d8:	000092d9 	.word	0x000092d9
    28dc:	3a00003a 	.word	0x3a00003a

000028e0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    28e0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    28e2:	4906      	ldr	r1, [pc, #24]	; (28fc <nrf_cc3xx_platform_mutex_init+0x1c>)
    28e4:	2340      	movs	r3, #64	; 0x40
    28e6:	2214      	movs	r2, #20
    28e8:	4805      	ldr	r0, [pc, #20]	; (2900 <nrf_cc3xx_platform_mutex_init+0x20>)
    28ea:	f005 fda3 	bl	8434 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    28ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    28f2:	4904      	ldr	r1, [pc, #16]	; (2904 <nrf_cc3xx_platform_mutex_init+0x24>)
    28f4:	4804      	ldr	r0, [pc, #16]	; (2908 <nrf_cc3xx_platform_mutex_init+0x28>)
    28f6:	f004 bc15 	b.w	7124 <nrf_cc3xx_platform_set_mutexes>
    28fa:	bf00      	nop
    28fc:	20000978 	.word	0x20000978
    2900:	20000e78 	.word	0x20000e78
    2904:	00008d88 	.word	0x00008d88
    2908:	00008d9c 	.word	0x00008d9c

0000290c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    290c:	4901      	ldr	r1, [pc, #4]	; (2914 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    290e:	2210      	movs	r2, #16
	str	r2, [r1]
    2910:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2912:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2914:	e000ed10 	.word	0xe000ed10

00002918 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2918:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    291a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    291c:	f380 8811 	msr	BASEPRI, r0
	isb
    2920:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2924:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2928:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    292a:	b662      	cpsie	i
	isb
    292c:	f3bf 8f6f 	isb	sy

	bx	lr
    2930:	4770      	bx	lr
    2932:	bf00      	nop

00002934 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2934:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2936:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2938:	f381 8811 	msr	BASEPRI, r1

	wfe
    293c:	bf20      	wfe

	msr	BASEPRI, r0
    293e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2942:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2944:	4770      	bx	lr
    2946:	bf00      	nop

00002948 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    294c:	4681      	mov	r9, r0

	if (esf != NULL) {
    294e:	460c      	mov	r4, r1
{
    2950:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    2952:	2900      	cmp	r1, #0
    2954:	d04c      	beq.n	29f0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2956:	e9d1 1200 	ldrd	r1, r2, [r1]
    295a:	466e      	mov	r6, sp
    295c:	b08a      	sub	sp, #40	; 0x28
    295e:	68a3      	ldr	r3, [r4, #8]
    2960:	466d      	mov	r5, sp
    2962:	f04f 0a05 	mov.w	sl, #5
    2966:	46a8      	mov	r8, r5
    2968:	4825      	ldr	r0, [pc, #148]	; (2a00 <z_arm_fatal_error+0xb8>)
    296a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    296e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2972:	f848 af10 	str.w	sl, [r8, #16]!
    2976:	2300      	movs	r3, #0
    2978:	4642      	mov	r2, r8
    297a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    297e:	4821      	ldr	r0, [pc, #132]	; (2a04 <z_arm_fatal_error+0xbc>)
    2980:	f7ff fad6 	bl	1f30 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2984:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2988:	46b5      	mov	sp, r6
    298a:	6963      	ldr	r3, [r4, #20]
    298c:	46ad      	mov	sp, r5
    298e:	481e      	ldr	r0, [pc, #120]	; (2a08 <z_arm_fatal_error+0xc0>)
    2990:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2994:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2998:	f8c5 a010 	str.w	sl, [r5, #16]
    299c:	2300      	movs	r3, #0
    299e:	4642      	mov	r2, r8
    29a0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    29a4:	4817      	ldr	r0, [pc, #92]	; (2a04 <z_arm_fatal_error+0xbc>)
    29a6:	f7ff fac3 	bl	1f30 <z_impl_z_log_msg_static_create>
    29aa:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    29ac:	b088      	sub	sp, #32
    29ae:	69e3      	ldr	r3, [r4, #28]
    29b0:	466d      	mov	r5, sp
    29b2:	f04f 0a03 	mov.w	sl, #3
    29b6:	46a8      	mov	r8, r5
    29b8:	4a14      	ldr	r2, [pc, #80]	; (2a0c <z_arm_fatal_error+0xc4>)
    29ba:	e9c5 2305 	strd	r2, r3, [r5, #20]
    29be:	f848 af10 	str.w	sl, [r8, #16]!
    29c2:	2300      	movs	r3, #0
    29c4:	4642      	mov	r2, r8
    29c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29ca:	480e      	ldr	r0, [pc, #56]	; (2a04 <z_arm_fatal_error+0xbc>)
    29cc:	f7ff fab0 	bl	1f30 <z_impl_z_log_msg_static_create>
    29d0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    29d2:	69a3      	ldr	r3, [r4, #24]
    29d4:	46ad      	mov	sp, r5
    29d6:	4a0e      	ldr	r2, [pc, #56]	; (2a10 <z_arm_fatal_error+0xc8>)
    29d8:	f8c5 a010 	str.w	sl, [r5, #16]
    29dc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    29e0:	2300      	movs	r3, #0
    29e2:	4642      	mov	r2, r8
    29e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29e8:	4806      	ldr	r0, [pc, #24]	; (2a04 <z_arm_fatal_error+0xbc>)
    29ea:	f7ff faa1 	bl	1f30 <z_impl_z_log_msg_static_create>
    29ee:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    29f0:	4621      	mov	r1, r4
    29f2:	4648      	mov	r0, r9
    29f4:	f003 f870 	bl	5ad8 <z_fatal_error>
}
    29f8:	46bd      	mov	sp, r7
    29fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29fe:	bf00      	nop
    2a00:	00009306 	.word	0x00009306
    2a04:	00008cac 	.word	0x00008cac
    2a08:	00009335 	.word	0x00009335
    2a0c:	00009364 	.word	0x00009364
    2a10:	00009373 	.word	0x00009373

00002a14 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2a14:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a16:	2800      	cmp	r0, #0
    2a18:	db07      	blt.n	2a2a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a1a:	2301      	movs	r3, #1
    2a1c:	0941      	lsrs	r1, r0, #5
    2a1e:	4a03      	ldr	r2, [pc, #12]	; (2a2c <arch_irq_enable+0x18>)
    2a20:	f000 001f 	and.w	r0, r0, #31
    2a24:	4083      	lsls	r3, r0
    2a26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2a2a:	4770      	bx	lr
    2a2c:	e000e100 	.word	0xe000e100

00002a30 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2a30:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a32:	2800      	cmp	r0, #0
    2a34:	db0c      	blt.n	2a50 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a36:	2201      	movs	r2, #1
    2a38:	4906      	ldr	r1, [pc, #24]	; (2a54 <arch_irq_disable+0x24>)
    2a3a:	0943      	lsrs	r3, r0, #5
    2a3c:	f000 001f 	and.w	r0, r0, #31
    2a40:	4082      	lsls	r2, r0
    2a42:	3320      	adds	r3, #32
    2a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    2a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a4c:	f3bf 8f6f 	isb	sy
}
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop
    2a54:	e000e100 	.word	0xe000e100

00002a58 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a58:	4b05      	ldr	r3, [pc, #20]	; (2a70 <arch_irq_is_enabled+0x18>)
    2a5a:	0942      	lsrs	r2, r0, #5
    2a5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a60:	2301      	movs	r3, #1
    2a62:	f000 001f 	and.w	r0, r0, #31
    2a66:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a6a:	4010      	ands	r0, r2
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop
    2a70:	e000e100 	.word	0xe000e100

00002a74 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2a74:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2a76:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2a78:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a7c:	bfac      	ite	ge
    2a7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a82:	4b06      	ldrlt	r3, [pc, #24]	; (2a9c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a84:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2a88:	b2c9      	uxtb	r1, r1
    2a8a:	bfab      	itete	ge
    2a8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a90:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a94:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a98:	5419      	strblt	r1, [r3, r0]
}
    2a9a:	4770      	bx	lr
    2a9c:	e000ed14 	.word	0xe000ed14

00002aa0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2aa0:	bf30      	wfi
    b z_SysNmiOnReset
    2aa2:	f7ff bffd 	b.w	2aa0 <z_SysNmiOnReset>
    2aa6:	bf00      	nop

00002aa8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2aa8:	4a0b      	ldr	r2, [pc, #44]	; (2ad8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2aaa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <z_arm_prep_c+0x34>)
    2aae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2ab2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2ab4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ab8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2abc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ac0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2ac8:	f003 f8c0 	bl	5c4c <z_bss_zero>
	z_data_copy();
    2acc:	f003 fee0 	bl	6890 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2ad0:	f000 fb9a 	bl	3208 <z_arm_interrupt_init>
	z_cstart();
    2ad4:	f003 f8fa 	bl	5ccc <z_cstart>
    2ad8:	00000000 	.word	0x00000000
    2adc:	e000ed00 	.word	0xe000ed00

00002ae0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ae0:	4a09      	ldr	r2, [pc, #36]	; (2b08 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ae2:	490a      	ldr	r1, [pc, #40]	; (2b0c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2ae4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ae6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2ae8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    2aea:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2aec:	4908      	ldr	r1, [pc, #32]	; (2b10 <arch_swap+0x30>)
    2aee:	684b      	ldr	r3, [r1, #4]
    2af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2af4:	604b      	str	r3, [r1, #4]
    2af6:	2300      	movs	r3, #0
    2af8:	f383 8811 	msr	BASEPRI, r3
    2afc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2b00:	6893      	ldr	r3, [r2, #8]
}
    2b02:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2b04:	4770      	bx	lr
    2b06:	bf00      	nop
    2b08:	20000fb8 	.word	0x20000fb8
    2b0c:	00008f24 	.word	0x00008f24
    2b10:	e000ed00 	.word	0xe000ed00

00002b14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b14:	4913      	ldr	r1, [pc, #76]	; (2b64 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b16:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b18:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2b1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b26:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2b28:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b2c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b30:	4f0d      	ldr	r7, [pc, #52]	; (2b68 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b32:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b36:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2b38:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b3a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b3c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2b3e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b40:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b42:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b46:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2b4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2b4e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2b52:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2b56:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2b58:	f005 f844 	bl	7be4 <configure_builtin_stack_guard>
    pop {r2, lr}
    2b5c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2b60:	4770      	bx	lr
    2b62:	0000      	.short	0x0000
    ldr r1, =_kernel
    2b64:	20000fb8 	.word	0x20000fb8
    ldr v4, =_SCS_ICSR
    2b68:	e000ed04 	.word	0xe000ed04

00002b6c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2b6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b76:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b7a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2b7c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2b80:	2902      	cmp	r1, #2
    beq _oops
    2b82:	d0ff      	beq.n	2b84 <_oops>

00002b84 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2b84:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2b86:	f005 f81e 	bl	7bc6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2b8a:	bd01      	pop	{r0, pc}

00002b8c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2b8c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2b90:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2b92:	490b      	ldr	r1, [pc, #44]	; (2bc0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2b94:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2b98:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2b9a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2b9e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2ba2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2ba4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2ba8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2bb0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2bb4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2bb6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2bb8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2bba:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2bbc:	4770      	bx	lr
    2bbe:	bf00      	nop
    2bc0:	000073cf 	.word	0x000073cf

00002bc4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2bc4:	4b08      	ldr	r3, [pc, #32]	; (2be8 <arch_switch_to_main_thread+0x24>)
    2bc6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2bc8:	6e83      	ldr	r3, [r0, #104]	; 0x68
    2bca:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2bce:	4610      	mov	r0, r2
    2bd0:	f381 8809 	msr	PSP, r1
    2bd4:	2100      	movs	r1, #0
    2bd6:	b663      	cpsie	if
    2bd8:	f381 8811 	msr	BASEPRI, r1
    2bdc:	f3bf 8f6f 	isb	sy
    2be0:	2200      	movs	r2, #0
    2be2:	2300      	movs	r3, #0
    2be4:	f004 fbf3 	bl	73ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2be8:	20000fb8 	.word	0x20000fb8

00002bec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2bec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2bee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2bf0:	4a0b      	ldr	r2, [pc, #44]	; (2c20 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2bf2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2bf4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2bf6:	bf1e      	ittt	ne
	movne	r1, #0
    2bf8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2bfa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2bfc:	f005 fc5e 	blne	84bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c00:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c06:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c0a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c0e:	4905      	ldr	r1, [pc, #20]	; (2c24 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c10:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c12:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c14:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c1a:	4903      	ldr	r1, [pc, #12]	; (2c28 <_isr_wrapper+0x3c>)
	bx r1
    2c1c:	4708      	bx	r1
    2c1e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c20:	20000fb8 	.word	0x20000fb8
	ldr r1, =_sw_isr_table
    2c24:	000089f8 	.word	0x000089f8
	ldr r1, =z_arm_int_exit
    2c28:	00002c2d 	.word	0x00002c2d

00002c2c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2c2c:	4b04      	ldr	r3, [pc, #16]	; (2c40 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2c2e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2c30:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2c32:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2c34:	d003      	beq.n	2c3e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2c36:	4903      	ldr	r1, [pc, #12]	; (2c44 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2c3c:	600a      	str	r2, [r1, #0]

00002c3e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2c3e:	4770      	bx	lr
	ldr r3, =_kernel
    2c40:	20000fb8 	.word	0x20000fb8
	ldr r1, =_SCS_ICSR
    2c44:	e000ed04 	.word	0xe000ed04

00002c48 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c4c:	b086      	sub	sp, #24
    2c4e:	4606      	mov	r6, r0
    2c50:	460d      	mov	r5, r1
    2c52:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    2c54:	2402      	movs	r4, #2
    2c56:	4b41      	ldr	r3, [pc, #260]	; (2d5c <mem_manage_fault.constprop.0+0x114>)
    2c58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c5c:	617b      	str	r3, [r7, #20]
    2c5e:	4840      	ldr	r0, [pc, #256]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2c60:	613c      	str	r4, [r7, #16]
    2c62:	f107 0210 	add.w	r2, r7, #16
    2c66:	f004 ffc1 	bl	7bec <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2c6a:	4b3e      	ldr	r3, [pc, #248]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)
    2c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c6e:	06db      	lsls	r3, r3, #27
    2c70:	d509      	bpl.n	2c86 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2c72:	4b3d      	ldr	r3, [pc, #244]	; (2d68 <mem_manage_fault.constprop.0+0x120>)
    2c74:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c78:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2c7c:	4838      	ldr	r0, [pc, #224]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2c7e:	f107 0210 	add.w	r2, r7, #16
    2c82:	f004 ffb3 	bl	7bec <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2c86:	4b37      	ldr	r3, [pc, #220]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)
    2c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c8a:	0718      	lsls	r0, r3, #28
    2c8c:	d50a      	bpl.n	2ca4 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2c8e:	4b37      	ldr	r3, [pc, #220]	; (2d6c <mem_manage_fault.constprop.0+0x124>)
    2c90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c94:	617b      	str	r3, [r7, #20]
    2c96:	2302      	movs	r3, #2
    2c98:	4831      	ldr	r0, [pc, #196]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2c9a:	613b      	str	r3, [r7, #16]
    2c9c:	f107 0210 	add.w	r2, r7, #16
    2ca0:	f004 ffa4 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2ca4:	4c2f      	ldr	r4, [pc, #188]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)
    2ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ca8:	0799      	lsls	r1, r3, #30
    2caa:	d522      	bpl.n	2cf2 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    2cac:	46e8      	mov	r8, sp
    2cae:	4b30      	ldr	r3, [pc, #192]	; (2d70 <mem_manage_fault.constprop.0+0x128>)
    2cb0:	f107 0210 	add.w	r2, r7, #16
    2cb4:	617b      	str	r3, [r7, #20]
    2cb6:	2302      	movs	r3, #2
    2cb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cbc:	613b      	str	r3, [r7, #16]
    2cbe:	4828      	ldr	r0, [pc, #160]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2cc0:	f004 ff94 	bl	7bec <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2cc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2cc8:	0612      	lsls	r2, r2, #24
    2cca:	d512      	bpl.n	2cf2 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2ccc:	b088      	sub	sp, #32
    2cce:	466a      	mov	r2, sp
    2cd0:	4928      	ldr	r1, [pc, #160]	; (2d74 <mem_manage_fault.constprop.0+0x12c>)
    2cd2:	4823      	ldr	r0, [pc, #140]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2cd4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2cd8:	2303      	movs	r3, #3
    2cda:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2cde:	f842 3f10 	str.w	r3, [r2, #16]!
    2ce2:	f004 ff83 	bl	7bec <z_log_msg_static_create.constprop.0>
    2ce6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2ce8:	b11e      	cbz	r6, 2cf2 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2cf0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2cf2:	4b1c      	ldr	r3, [pc, #112]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)
    2cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cf6:	07dc      	lsls	r4, r3, #31
    2cf8:	d50a      	bpl.n	2d10 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    2cfa:	4b1f      	ldr	r3, [pc, #124]	; (2d78 <mem_manage_fault.constprop.0+0x130>)
    2cfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d00:	617b      	str	r3, [r7, #20]
    2d02:	2302      	movs	r3, #2
    2d04:	4816      	ldr	r0, [pc, #88]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2d06:	613b      	str	r3, [r7, #16]
    2d08:	f107 0210 	add.w	r2, r7, #16
    2d0c:	f004 ff6e 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d10:	4b14      	ldr	r3, [pc, #80]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)
    2d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d14:	0698      	lsls	r0, r3, #26
    2d16:	d50a      	bpl.n	2d2e <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    2d18:	4b18      	ldr	r3, [pc, #96]	; (2d7c <mem_manage_fault.constprop.0+0x134>)
    2d1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d1e:	617b      	str	r3, [r7, #20]
    2d20:	2302      	movs	r3, #2
    2d22:	480f      	ldr	r0, [pc, #60]	; (2d60 <mem_manage_fault.constprop.0+0x118>)
    2d24:	613b      	str	r3, [r7, #16]
    2d26:	f107 0210 	add.w	r2, r7, #16
    2d2a:	f004 ff5f 	bl	7bec <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2d2e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d30:	4b0c      	ldr	r3, [pc, #48]	; (2d64 <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
    2d32:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d36:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2d38:	bf58      	it	pl
    2d3a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d3e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2d40:	bf42      	ittt	mi
    2d42:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2d44:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2d48:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2d4c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2d50:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2d52:	7028      	strb	r0, [r5, #0]
}
    2d54:	46bd      	mov	sp, r7
    2d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d5a:	bf00      	nop
    2d5c:	000093a1 	.word	0x000093a1
    2d60:	00008cac 	.word	0x00008cac
    2d64:	e000ed00 	.word	0xe000ed00
    2d68:	000093b7 	.word	0x000093b7
    2d6c:	000093ea 	.word	0x000093ea
    2d70:	000093fd 	.word	0x000093fd
    2d74:	00009415 	.word	0x00009415
    2d78:	0000942b 	.word	0x0000942b
    2d7c:	0000944a 	.word	0x0000944a

00002d80 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d84:	b086      	sub	sp, #24
    2d86:	4606      	mov	r6, r0
    2d88:	460d      	mov	r5, r1
    2d8a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2d8c:	2402      	movs	r4, #2
    2d8e:	4b3e      	ldr	r3, [pc, #248]	; (2e88 <bus_fault.constprop.0+0x108>)
    2d90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d94:	617b      	str	r3, [r7, #20]
    2d96:	483d      	ldr	r0, [pc, #244]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2d98:	613c      	str	r4, [r7, #16]
    2d9a:	f107 0210 	add.w	r2, r7, #16
    2d9e:	f004 ff25 	bl	7bec <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2da2:	4b3b      	ldr	r3, [pc, #236]	; (2e90 <bus_fault.constprop.0+0x110>)
    2da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2da6:	04d9      	lsls	r1, r3, #19
    2da8:	d509      	bpl.n	2dbe <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2daa:	4b3a      	ldr	r3, [pc, #232]	; (2e94 <bus_fault.constprop.0+0x114>)
    2dac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2db0:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2db4:	4835      	ldr	r0, [pc, #212]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2db6:	f107 0210 	add.w	r2, r7, #16
    2dba:	f004 ff17 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2dbe:	4b34      	ldr	r3, [pc, #208]	; (2e90 <bus_fault.constprop.0+0x110>)
    2dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dc2:	051a      	lsls	r2, r3, #20
    2dc4:	d50a      	bpl.n	2ddc <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2dc6:	4b34      	ldr	r3, [pc, #208]	; (2e98 <bus_fault.constprop.0+0x118>)
    2dc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2dcc:	617b      	str	r3, [r7, #20]
    2dce:	2302      	movs	r3, #2
    2dd0:	482e      	ldr	r0, [pc, #184]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2dd2:	613b      	str	r3, [r7, #16]
    2dd4:	f107 0210 	add.w	r2, r7, #16
    2dd8:	f004 ff08 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2ddc:	4c2c      	ldr	r4, [pc, #176]	; (2e90 <bus_fault.constprop.0+0x110>)
    2dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2de0:	059b      	lsls	r3, r3, #22
    2de2:	d522      	bpl.n	2e2a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2de4:	46e8      	mov	r8, sp
    2de6:	4b2d      	ldr	r3, [pc, #180]	; (2e9c <bus_fault.constprop.0+0x11c>)
    2de8:	4828      	ldr	r0, [pc, #160]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2dea:	617b      	str	r3, [r7, #20]
    2dec:	2302      	movs	r3, #2
    2dee:	f107 0210 	add.w	r2, r7, #16
    2df2:	613b      	str	r3, [r7, #16]
    2df4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2df8:	f004 fef8 	bl	7bec <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2dfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2e00:	0410      	lsls	r0, r2, #16
    2e02:	d512      	bpl.n	2e2a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2e04:	b088      	sub	sp, #32
    2e06:	466a      	mov	r2, sp
    2e08:	4925      	ldr	r1, [pc, #148]	; (2ea0 <bus_fault.constprop.0+0x120>)
    2e0a:	4820      	ldr	r0, [pc, #128]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2e0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2e10:	2303      	movs	r3, #3
    2e12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2e16:	f842 3f10 	str.w	r3, [r2, #16]!
    2e1a:	f004 fee7 	bl	7bec <z_log_msg_static_create.constprop.0>
    2e1e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2e20:	b11e      	cbz	r6, 2e2a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2e28:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2e2a:	4b19      	ldr	r3, [pc, #100]	; (2e90 <bus_fault.constprop.0+0x110>)
    2e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e2e:	0559      	lsls	r1, r3, #21
    2e30:	d50a      	bpl.n	2e48 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2e32:	4b1c      	ldr	r3, [pc, #112]	; (2ea4 <bus_fault.constprop.0+0x124>)
    2e34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e38:	617b      	str	r3, [r7, #20]
    2e3a:	2302      	movs	r3, #2
    2e3c:	4813      	ldr	r0, [pc, #76]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2e3e:	613b      	str	r3, [r7, #16]
    2e40:	f107 0210 	add.w	r2, r7, #16
    2e44:	f004 fed2 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2e48:	4b11      	ldr	r3, [pc, #68]	; (2e90 <bus_fault.constprop.0+0x110>)
    2e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e4c:	05d2      	lsls	r2, r2, #23
    2e4e:	d515      	bpl.n	2e7c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2e50:	4b15      	ldr	r3, [pc, #84]	; (2ea8 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2e52:	617b      	str	r3, [r7, #20]
    2e54:	2302      	movs	r3, #2
    2e56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e5a:	480c      	ldr	r0, [pc, #48]	; (2e8c <bus_fault.constprop.0+0x10c>)
    2e5c:	613b      	str	r3, [r7, #16]
    2e5e:	f107 0210 	add.w	r2, r7, #16
    2e62:	f004 fec3 	bl	7bec <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2e66:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e68:	4a09      	ldr	r2, [pc, #36]	; (2e90 <bus_fault.constprop.0+0x110>)

	return reason;
}
    2e6a:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2e6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2e72:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2e74:	7028      	strb	r0, [r5, #0]
}
    2e76:	46bd      	mov	sp, r7
    2e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e7e:	049b      	lsls	r3, r3, #18
    2e80:	d5f1      	bpl.n	2e66 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2e82:	4b0a      	ldr	r3, [pc, #40]	; (2eac <bus_fault.constprop.0+0x12c>)
    2e84:	e7e5      	b.n	2e52 <bus_fault.constprop.0+0xd2>
    2e86:	bf00      	nop
    2e88:	00009479 	.word	0x00009479
    2e8c:	00008cac 	.word	0x00008cac
    2e90:	e000ed00 	.word	0xe000ed00
    2e94:	0000948f 	.word	0x0000948f
    2e98:	000093ea 	.word	0x000093ea
    2e9c:	000094a0 	.word	0x000094a0
    2ea0:	000094b9 	.word	0x000094b9
    2ea4:	000094ce 	.word	0x000094ce
    2ea8:	000094e9 	.word	0x000094e9
    2eac:	0000944a 	.word	0x0000944a

00002eb0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2eb0:	b510      	push	{r4, lr}
    2eb2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2eb4:	2402      	movs	r4, #2
    2eb6:	4b3a      	ldr	r3, [pc, #232]	; (2fa0 <usage_fault.constprop.0+0xf0>)
    2eb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ebc:	4839      	ldr	r0, [pc, #228]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2ebe:	aa04      	add	r2, sp, #16
    2ec0:	9305      	str	r3, [sp, #20]
    2ec2:	9404      	str	r4, [sp, #16]
    2ec4:	f004 fe92 	bl	7bec <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2ec8:	4b37      	ldr	r3, [pc, #220]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ecc:	019b      	lsls	r3, r3, #6
    2ece:	d508      	bpl.n	2ee2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2ed0:	4b36      	ldr	r3, [pc, #216]	; (2fac <usage_fault.constprop.0+0xfc>)
    2ed2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ed6:	4833      	ldr	r0, [pc, #204]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2ed8:	aa04      	add	r2, sp, #16
    2eda:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2ede:	f004 fe85 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2ee2:	4b31      	ldr	r3, [pc, #196]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ee6:	01dc      	lsls	r4, r3, #7
    2ee8:	d509      	bpl.n	2efe <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2eea:	4b31      	ldr	r3, [pc, #196]	; (2fb0 <usage_fault.constprop.0+0x100>)
    2eec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ef0:	9305      	str	r3, [sp, #20]
    2ef2:	2302      	movs	r3, #2
    2ef4:	482b      	ldr	r0, [pc, #172]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2ef6:	aa04      	add	r2, sp, #16
    2ef8:	9304      	str	r3, [sp, #16]
    2efa:	f004 fe77 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2efe:	4b2a      	ldr	r3, [pc, #168]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2f00:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    2f02:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2f06:	d009      	beq.n	2f1c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2f08:	2402      	movs	r4, #2
    2f0a:	4b2a      	ldr	r3, [pc, #168]	; (2fb4 <usage_fault.constprop.0+0x104>)
    2f0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f10:	4824      	ldr	r0, [pc, #144]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2f12:	aa04      	add	r2, sp, #16
    2f14:	9305      	str	r3, [sp, #20]
    2f16:	9404      	str	r4, [sp, #16]
    2f18:	f004 fe68 	bl	7bec <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f1c:	4b22      	ldr	r3, [pc, #136]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f20:	0318      	lsls	r0, r3, #12
    2f22:	d509      	bpl.n	2f38 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    2f24:	4b24      	ldr	r3, [pc, #144]	; (2fb8 <usage_fault.constprop.0+0x108>)
    2f26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f2a:	9305      	str	r3, [sp, #20]
    2f2c:	2302      	movs	r3, #2
    2f2e:	481d      	ldr	r0, [pc, #116]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2f30:	aa04      	add	r2, sp, #16
    2f32:	9304      	str	r3, [sp, #16]
    2f34:	f004 fe5a 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f38:	4b1b      	ldr	r3, [pc, #108]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f3c:	0359      	lsls	r1, r3, #13
    2f3e:	d509      	bpl.n	2f54 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2f40:	4b1e      	ldr	r3, [pc, #120]	; (2fbc <usage_fault.constprop.0+0x10c>)
    2f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f46:	9305      	str	r3, [sp, #20]
    2f48:	2302      	movs	r3, #2
    2f4a:	4816      	ldr	r0, [pc, #88]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2f4c:	aa04      	add	r2, sp, #16
    2f4e:	9304      	str	r3, [sp, #16]
    2f50:	f004 fe4c 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f54:	4b14      	ldr	r3, [pc, #80]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f58:	039a      	lsls	r2, r3, #14
    2f5a:	d509      	bpl.n	2f70 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2f5c:	4b18      	ldr	r3, [pc, #96]	; (2fc0 <usage_fault.constprop.0+0x110>)
    2f5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f62:	9305      	str	r3, [sp, #20]
    2f64:	2302      	movs	r3, #2
    2f66:	480f      	ldr	r0, [pc, #60]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2f68:	aa04      	add	r2, sp, #16
    2f6a:	9304      	str	r3, [sp, #16]
    2f6c:	f004 fe3e 	bl	7bec <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f70:	4b0d      	ldr	r3, [pc, #52]	; (2fa8 <usage_fault.constprop.0+0xf8>)
    2f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f74:	03db      	lsls	r3, r3, #15
    2f76:	d509      	bpl.n	2f8c <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2f78:	4b12      	ldr	r3, [pc, #72]	; (2fc4 <usage_fault.constprop.0+0x114>)
    2f7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f7e:	9305      	str	r3, [sp, #20]
    2f80:	2302      	movs	r3, #2
    2f82:	4808      	ldr	r0, [pc, #32]	; (2fa4 <usage_fault.constprop.0+0xf4>)
    2f84:	aa04      	add	r2, sp, #16
    2f86:	9304      	str	r3, [sp, #16]
    2f88:	f004 fe30 	bl	7bec <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f8c:	4a06      	ldr	r2, [pc, #24]	; (2fa8 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    2f8e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f90:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f92:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2f96:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2f9a:	6293      	str	r3, [r2, #40]	; 0x28
}
    2f9c:	b006      	add	sp, #24
    2f9e:	bd10      	pop	{r4, pc}
    2fa0:	00009501 	.word	0x00009501
    2fa4:	00008cac 	.word	0x00008cac
    2fa8:	e000ed00 	.word	0xe000ed00
    2fac:	00009519 	.word	0x00009519
    2fb0:	0000952c 	.word	0x0000952c
    2fb4:	00009546 	.word	0x00009546
    2fb8:	00009570 	.word	0x00009570
    2fbc:	0000958e 	.word	0x0000958e
    2fc0:	000095b3 	.word	0x000095b3
    2fc4:	000095cd 	.word	0x000095cd

00002fc8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fcc:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2fce:	4b76      	ldr	r3, [pc, #472]	; (31a8 <z_arm_fault+0x1e0>)
{
    2fd0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2fd2:	f8d3 8004 	ldr.w	r8, [r3, #4]
    2fd6:	2600      	movs	r6, #0
{
    2fd8:	af00      	add	r7, sp, #0
    2fda:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2fde:	f386 8811 	msr	BASEPRI, r6
    2fe2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2fe6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2fea:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2fee:	d10e      	bne.n	300e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2ff0:	f002 030c 	and.w	r3, r2, #12
    2ff4:	2b08      	cmp	r3, #8
    2ff6:	d119      	bne.n	302c <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2ff8:	4b6c      	ldr	r3, [pc, #432]	; (31ac <z_arm_fault+0x1e4>)
    2ffa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ffe:	61fb      	str	r3, [r7, #28]
    3000:	2302      	movs	r3, #2
    3002:	486b      	ldr	r0, [pc, #428]	; (31b0 <z_arm_fault+0x1e8>)
    3004:	61bb      	str	r3, [r7, #24]
    3006:	f107 0218 	add.w	r2, r7, #24
    300a:	f004 fdef 	bl	7bec <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    300e:	2600      	movs	r6, #0
		return NULL;
    3010:	4635      	mov	r5, r6
	*recoverable = false;
    3012:	2300      	movs	r3, #0
    3014:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    3016:	1ee3      	subs	r3, r4, #3
    3018:	2b09      	cmp	r3, #9
    301a:	f200 80a5 	bhi.w	3168 <z_arm_fault+0x1a0>
    301e:	e8df f003 	tbb	[pc, r3]
    3022:	980a      	.short	0x980a
    3024:	a3a3949b 	.word	0xa3a3949b
    3028:	9ea3a3a3 	.word	0x9ea3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    302c:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    302e:	bf4c      	ite	mi
    3030:	460d      	movmi	r5, r1
			*nested_exc = true;
    3032:	2601      	movpl	r6, #1
    3034:	e7ed      	b.n	3012 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3036:	46e9      	mov	r9, sp
    3038:	f04f 0802 	mov.w	r8, #2
    303c:	4b5d      	ldr	r3, [pc, #372]	; (31b4 <z_arm_fault+0x1ec>)
    303e:	f107 0218 	add.w	r2, r7, #24
    3042:	61fb      	str	r3, [r7, #28]
    3044:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3048:	4859      	ldr	r0, [pc, #356]	; (31b0 <z_arm_fault+0x1e8>)
    304a:	f8c7 8018 	str.w	r8, [r7, #24]
    304e:	f004 fdcd 	bl	7bec <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    3052:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3054:	4c54      	ldr	r4, [pc, #336]	; (31a8 <z_arm_fault+0x1e0>)
	*recoverable = false;
    3056:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    305a:	079a      	lsls	r2, r3, #30
    305c:	d50b      	bpl.n	3076 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    305e:	4b56      	ldr	r3, [pc, #344]	; (31b8 <z_arm_fault+0x1f0>)
		PR_EXC("  Debug event");
    3060:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    3064:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3068:	4851      	ldr	r0, [pc, #324]	; (31b0 <z_arm_fault+0x1e8>)
    306a:	f107 0218 	add.w	r2, r7, #24
    306e:	f004 fdbd 	bl	7bec <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3072:	2400      	movs	r4, #0
    3074:	e040      	b.n	30f8 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3076:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3078:	2b00      	cmp	r3, #0
    307a:	da01      	bge.n	3080 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    307c:	4b4f      	ldr	r3, [pc, #316]	; (31bc <z_arm_fault+0x1f4>)
    307e:	e7ef      	b.n	3060 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3082:	005b      	lsls	r3, r3, #1
    3084:	d5f5      	bpl.n	3072 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    3086:	4b4e      	ldr	r3, [pc, #312]	; (31c0 <z_arm_fault+0x1f8>)
    3088:	f107 0218 	add.w	r2, r7, #24
    308c:	e9c7 8306 	strd	r8, r3, [r7, #24]
    3090:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3094:	4846      	ldr	r0, [pc, #280]	; (31b0 <z_arm_fault+0x1e8>)
    3096:	f004 fda9 	bl	7bec <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    309a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    309c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30a2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    30a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30a8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    30ac:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    30ae:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    30b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    30b6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    30b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30bc:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    30c0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    30c4:	429a      	cmp	r2, r3
    30c6:	d007      	beq.n	30d8 <z_arm_fault+0x110>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    30c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30ca:	b2db      	uxtb	r3, r3
    30cc:	b383      	cbz	r3, 3130 <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
    30ce:	2001      	movs	r0, #1
    30d0:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    30d2:	f7ff fdb9 	bl	2c48 <mem_manage_fault.constprop.0>
    30d6:	e03a      	b.n	314e <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    30d8:	b088      	sub	sp, #32
    30da:	682b      	ldr	r3, [r5, #0]
    30dc:	466a      	mov	r2, sp
    30de:	4939      	ldr	r1, [pc, #228]	; (31c4 <z_arm_fault+0x1fc>)
    30e0:	4833      	ldr	r0, [pc, #204]	; (31b0 <z_arm_fault+0x1e8>)
    30e2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    30e6:	2303      	movs	r3, #3
    30e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    30ec:	f842 3f10 	str.w	r3, [r2, #16]!
    30f0:	f004 fd7c 	bl	7bec <z_log_msg_static_create.constprop.0>
    30f4:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    30f6:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    30f8:	79fb      	ldrb	r3, [r7, #7]
    30fa:	b9ab      	cbnz	r3, 3128 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    30fc:	2220      	movs	r2, #32
    30fe:	4629      	mov	r1, r5
    3100:	f107 0008 	add.w	r0, r7, #8
    3104:	f004 fdae 	bl	7c64 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    310a:	2e00      	cmp	r6, #0
    310c:	d047      	beq.n	319e <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    310e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3112:	b922      	cbnz	r2, 311e <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3114:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3118:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    311c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    311e:	4620      	mov	r0, r4
    3120:	f107 0108 	add.w	r1, r7, #8
    3124:	f7ff fc10 	bl	2948 <z_arm_fatal_error>
}
    3128:	372c      	adds	r7, #44	; 0x2c
    312a:	46bd      	mov	sp, r7
    312c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3132:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3136:	d004      	beq.n	3142 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    3138:	2001      	movs	r0, #1
    313a:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    313c:	f7ff fe20 	bl	2d80 <bus_fault.constprop.0>
    3140:	e005      	b.n	314e <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3148:	d393      	bcc.n	3072 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    314a:	f7ff feb1 	bl	2eb0 <usage_fault.constprop.0>
    314e:	4604      	mov	r4, r0
    3150:	e7d2      	b.n	30f8 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    3152:	2000      	movs	r0, #0
    3154:	1df9      	adds	r1, r7, #7
    3156:	e7bc      	b.n	30d2 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    3158:	2000      	movs	r0, #0
    315a:	1df9      	adds	r1, r7, #7
    315c:	e7ee      	b.n	313c <z_arm_fault+0x174>
	PR_FAULT_INFO(
    315e:	4b1a      	ldr	r3, [pc, #104]	; (31c8 <z_arm_fault+0x200>)
    3160:	61fb      	str	r3, [r7, #28]
    3162:	2302      	movs	r3, #2
    3164:	61bb      	str	r3, [r7, #24]
    3166:	e77d      	b.n	3064 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    3168:	4a18      	ldr	r2, [pc, #96]	; (31cc <z_arm_fault+0x204>)
    316a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    316e:	46e8      	mov	r8, sp
    3170:	b08a      	sub	sp, #40	; 0x28
    3172:	4b17      	ldr	r3, [pc, #92]	; (31d0 <z_arm_fault+0x208>)
    3174:	bf18      	it	ne
    3176:	4613      	movne	r3, r2
    3178:	466a      	mov	r2, sp
    317a:	4916      	ldr	r1, [pc, #88]	; (31d4 <z_arm_fault+0x20c>)
    317c:	3c10      	subs	r4, #16
    317e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3182:	f44f 7300 	mov.w	r3, #512	; 0x200
    3186:	8413      	strh	r3, [r2, #32]
    3188:	4b13      	ldr	r3, [pc, #76]	; (31d8 <z_arm_fault+0x210>)
    318a:	61d4      	str	r4, [r2, #28]
    318c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3190:	4807      	ldr	r0, [pc, #28]	; (31b0 <z_arm_fault+0x1e8>)
    3192:	f842 3f10 	str.w	r3, [r2, #16]!
    3196:	f004 fd29 	bl	7bec <z_log_msg_static_create.constprop.0>
    319a:	46c5      	mov	sp, r8
}
    319c:	e769      	b.n	3072 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    319e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    31a2:	f023 0301 	bic.w	r3, r3, #1
    31a6:	e7b9      	b.n	311c <z_arm_fault+0x154>
    31a8:	e000ed00 	.word	0xe000ed00
    31ac:	00009626 	.word	0x00009626
    31b0:	00008cac 	.word	0x00008cac
    31b4:	00009651 	.word	0x00009651
    31b8:	00009668 	.word	0x00009668
    31bc:	00009689 	.word	0x00009689
    31c0:	00009697 	.word	0x00009697
    31c4:	000096b6 	.word	0x000096b6
    31c8:	000096d2 	.word	0x000096d2
    31cc:	0000960d 	.word	0x0000960d
    31d0:	000095f8 	.word	0x000095f8
    31d4:	000096f6 	.word	0x000096f6
    31d8:	01000004 	.word	0x01000004

000031dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    31dc:	4b04      	ldr	r3, [pc, #16]	; (31f0 <z_arm_fault_init+0x14>)
    31de:	695a      	ldr	r2, [r3, #20]
    31e0:	f042 0210 	orr.w	r2, r2, #16
    31e4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    31e6:	695a      	ldr	r2, [r3, #20]
    31e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    31ec:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    31ee:	4770      	bx	lr
    31f0:	e000ed00 	.word	0xe000ed00

000031f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    31f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    31f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    31fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    31fe:	4672      	mov	r2, lr
	bl z_arm_fault
    3200:	f7ff fee2 	bl	2fc8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3204:	bd01      	pop	{r0, pc}
    3206:	bf00      	nop

00003208 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3208:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    320a:	2120      	movs	r1, #32
    320c:	4803      	ldr	r0, [pc, #12]	; (321c <z_arm_interrupt_init+0x14>)
    320e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3210:	3301      	adds	r3, #1
    3212:	2b45      	cmp	r3, #69	; 0x45
    3214:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3218:	d1f9      	bne.n	320e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    321a:	4770      	bx	lr
    321c:	e000e100 	.word	0xe000e100

00003220 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3220:	2000      	movs	r0, #0
    msr CONTROL, r0
    3222:	f380 8814 	msr	CONTROL, r0
    isb
    3226:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    322a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    322c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    3230:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3234:	f7fe fbf4 	bl	1a20 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3238:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    323a:	490e      	ldr	r1, [pc, #56]	; (3274 <__start+0x54>)
    str r0, [r1]
    323c:	6008      	str	r0, [r1, #0]
    dsb
    323e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3242:	480d      	ldr	r0, [pc, #52]	; (3278 <__start+0x58>)
    msr msp, r0
    3244:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3248:	f000 f83e 	bl	32c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    324c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    324e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3252:	480a      	ldr	r0, [pc, #40]	; (327c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3254:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3258:	1840      	adds	r0, r0, r1
    msr PSP, r0
    325a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    325e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3262:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3264:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3266:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    326a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    326e:	f7ff fc1b 	bl	2aa8 <z_arm_prep_c>
    3272:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    3274:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3278:	20002240 	.word	0x20002240
    ldr r0, =z_interrupt_stacks
    327c:	20001500 	.word	0x20001500

00003280 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3280:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3284:	4905      	ldr	r1, [pc, #20]	; (329c <sys_arch_reboot+0x1c>)
    3286:	4b06      	ldr	r3, [pc, #24]	; (32a0 <sys_arch_reboot+0x20>)
    3288:	68ca      	ldr	r2, [r1, #12]
    328a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    328e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3290:	60cb      	str	r3, [r1, #12]
    3292:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3296:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3298:	e7fd      	b.n	3296 <sys_arch_reboot+0x16>
    329a:	bf00      	nop
    329c:	e000ed00 	.word	0xe000ed00
    32a0:	05fa0004 	.word	0x05fa0004

000032a4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    32a4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    32a6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    32a8:	4906      	ldr	r1, [pc, #24]	; (32c4 <z_arm_clear_arm_mpu_config+0x20>)
    32aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    32ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    32b2:	4293      	cmp	r3, r2
    32b4:	db00      	blt.n	32b8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    32b6:	4770      	bx	lr
  mpu->RNR = rnr;
    32b8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    32bc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    32c0:	3301      	adds	r3, #1
    32c2:	e7f6      	b.n	32b2 <z_arm_clear_arm_mpu_config+0xe>
    32c4:	e000ed00 	.word	0xe000ed00

000032c8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    32c8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    32ca:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    32cc:	2400      	movs	r4, #0
    32ce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    32d2:	f7ff ffe7 	bl	32a4 <z_arm_clear_arm_mpu_config>
    32d6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    32d8:	f04f 30ff 	mov.w	r0, #4294967295
    32dc:	4a0c      	ldr	r2, [pc, #48]	; (3310 <z_arm_init_arch_hw_at_boot+0x48>)
    32de:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32e2:	3301      	adds	r3, #1
    32e4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    32e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32ea:	d1f8      	bne.n	32de <z_arm_init_arch_hw_at_boot+0x16>
    32ec:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32ee:	f04f 30ff 	mov.w	r0, #4294967295
    32f2:	4a07      	ldr	r2, [pc, #28]	; (3310 <z_arm_init_arch_hw_at_boot+0x48>)
    32f4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    32f8:	3301      	adds	r3, #1
    32fa:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32fc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3300:	d1f8      	bne.n	32f4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3302:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3304:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3308:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    330c:	bd10      	pop	{r4, pc}
    330e:	bf00      	nop
    3310:	e000e100 	.word	0xe000e100

00003314 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3314:	4b08      	ldr	r3, [pc, #32]	; (3338 <z_impl_k_thread_abort+0x24>)
    3316:	689b      	ldr	r3, [r3, #8]
    3318:	4283      	cmp	r3, r0
    331a:	d10b      	bne.n	3334 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    331c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3320:	b143      	cbz	r3, 3334 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3322:	4b06      	ldr	r3, [pc, #24]	; (333c <z_impl_k_thread_abort+0x28>)
    3324:	685a      	ldr	r2, [r3, #4]
    3326:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    332a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    332c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    332e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3332:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3334:	f003 ba3a 	b.w	67ac <z_thread_abort>
    3338:	20000fb8 	.word	0x20000fb8
    333c:	e000ed00 	.word	0xe000ed00

00003340 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3342:	4c09      	ldr	r4, [pc, #36]	; (3368 <z_arm_configure_static_mpu_regions+0x28>)
    3344:	4a09      	ldr	r2, [pc, #36]	; (336c <z_arm_configure_static_mpu_regions+0x2c>)
    3346:	4623      	mov	r3, r4
    3348:	2101      	movs	r1, #1
    334a:	4809      	ldr	r0, [pc, #36]	; (3370 <z_arm_configure_static_mpu_regions+0x30>)
    334c:	f000 f92a 	bl	35a4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3350:	2300      	movs	r3, #0
    3352:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    3354:	4b07      	ldr	r3, [pc, #28]	; (3374 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3356:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    3358:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    335a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    335c:	9301      	str	r3, [sp, #4]
    335e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3360:	f000 f92a 	bl	35b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3364:	b004      	add	sp, #16
    3366:	bd10      	pop	{r4, pc}
    3368:	20070000 	.word	0x20070000
    336c:	20000000 	.word	0x20000000
    3370:	00008dac 	.word	0x00008dac
    3374:	20000298 	.word	0x20000298

00003378 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3378:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    337a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    337c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    337e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    3382:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    3386:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3388:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    338a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    338c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    3390:	4905      	ldr	r1, [pc, #20]	; (33a8 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3392:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3396:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    339a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    339e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    33a2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    33a6:	bd10      	pop	{r4, pc}
    33a8:	e000ed00 	.word	0xe000ed00

000033ac <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    33ac:	b580      	push	{r7, lr}
    33ae:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    33b0:	b088      	sub	sp, #32
    33b2:	466a      	mov	r2, sp
    33b4:	4b07      	ldr	r3, [pc, #28]	; (33d4 <region_allocate_and_init.part.0+0x28>)
    33b6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    33ba:	2303      	movs	r3, #3
    33bc:	f842 3f10 	str.w	r3, [r2, #16]!
    33c0:	2300      	movs	r3, #0
    33c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33c6:	4804      	ldr	r0, [pc, #16]	; (33d8 <region_allocate_and_init.part.0+0x2c>)
    33c8:	f7fe fdb2 	bl	1f30 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    33cc:	f06f 0015 	mvn.w	r0, #21
    33d0:	46bd      	mov	sp, r7
    33d2:	bd80      	pop	{r7, pc}
    33d4:	0000970d 	.word	0x0000970d
    33d8:	00008c9c 	.word	0x00008c9c

000033dc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    33dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33e0:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    33e2:	4606      	mov	r6, r0
    33e4:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    33e8:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    33ea:	4d5f      	ldr	r5, [pc, #380]	; (3568 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    33ec:	af00      	add	r7, sp, #0
    33ee:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	4599      	cmp	r9, r3
    33f4:	da35      	bge.n	3462 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    33f6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    33fa:	f1b8 0f00 	cmp.w	r8, #0
    33fe:	d054      	beq.n	34aa <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    3400:	f1b8 0f1f 	cmp.w	r8, #31
    3404:	d91b      	bls.n	343e <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    3406:	f018 0f1f 	tst.w	r8, #31
    340a:	d118      	bne.n	343e <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    340c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    3410:	f01b 0f1f 	tst.w	fp, #31
    3414:	d113      	bne.n	343e <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3416:	4658      	mov	r0, fp
    3418:	f004 fbeb 	bl	7bf2 <arm_cmse_mpu_region_get>
    341c:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    341e:	eb08 000b 	add.w	r0, r8, fp
    3422:	3801      	subs	r0, #1
    3424:	f004 fbe5 	bl	7bf2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3428:	4582      	cmp	sl, r0
    342a:	d01f      	beq.n	346c <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    342c:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    3430:	466c      	mov	r4, sp
    3432:	b088      	sub	sp, #32
    3434:	466a      	mov	r2, sp
    3436:	494d      	ldr	r1, [pc, #308]	; (356c <mpu_configure_regions_and_partition.constprop.0+0x190>)
    3438:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    343c:	e005      	b.n	344a <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    343e:	466c      	mov	r4, sp
    3440:	b088      	sub	sp, #32
    3442:	466a      	mov	r2, sp
    3444:	4b4a      	ldr	r3, [pc, #296]	; (3570 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    3446:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    344a:	2303      	movs	r3, #3
    344c:	f842 3f10 	str.w	r3, [r2, #16]!
    3450:	2300      	movs	r3, #0
    3452:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3456:	4847      	ldr	r0, [pc, #284]	; (3574 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    3458:	f7fe fd6a 	bl	1f30 <z_impl_z_log_msg_static_create>
    345c:	46a5      	mov	sp, r4
			return -EINVAL;
    345e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3462:	4620      	mov	r0, r4
    3464:	371c      	adds	r7, #28
    3466:	46bd      	mov	sp, r7
    3468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    346c:	f11a 0f16 	cmn.w	sl, #22
    3470:	d0de      	beq.n	3430 <mpu_configure_regions_and_partition.constprop.0+0x54>
    3472:	4554      	cmp	r4, sl
    3474:	dddc      	ble.n	3430 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    3476:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    347a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    347e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    3482:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    3486:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    348a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    348e:	e9d6 2100 	ldrd	r2, r1, [r6]
    3492:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    3494:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3496:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    349a:	d11e      	bne.n	34da <mpu_configure_regions_and_partition.constprop.0+0xfe>
    349c:	45d8      	cmp	r8, fp
    349e:	d108      	bne.n	34b2 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    34a0:	4631      	mov	r1, r6
    34a2:	fa5f f08a 	uxtb.w	r0, sl
    34a6:	f004 fbad 	bl	7c04 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    34aa:	f109 0901 	add.w	r9, r9, #1
    34ae:	360c      	adds	r6, #12
    34b0:	e79e      	b.n	33f0 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    34b2:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    34b6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    34ba:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    34be:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    34c2:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    34c4:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    34c6:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    34ca:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    34cc:	f004 fb9a 	bl	7c04 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    34d0:	f110 0f16 	cmn.w	r0, #22
    34d4:	d0c3      	beq.n	345e <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    34d6:	1c44      	adds	r4, r0, #1
    34d8:	e7e7      	b.n	34aa <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    34da:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    34dc:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    34de:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    34e0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    34e4:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    34e8:	d108      	bne.n	34fc <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    34ea:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    34ee:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    34f0:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    34f4:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    34f6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    34fa:	e7e7      	b.n	34cc <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    34fc:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3500:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    3504:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    3506:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    350a:	4631      	mov	r1, r6
    350c:	f004 fb7a 	bl	7c04 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3510:	f110 0f16 	cmn.w	r0, #22
    3514:	d0a3      	beq.n	345e <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    3516:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    351a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    351e:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    3520:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    3524:	f362 0304 	bfi	r3, r2, #0, #5
    3528:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    352a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    352e:	7c3a      	ldrb	r2, [r7, #16]
    3530:	085b      	lsrs	r3, r3, #1
    3532:	f363 1247 	bfi	r2, r3, #5, #3
    3536:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    3538:	e9d6 3200 	ldrd	r3, r2, [r6]
    353c:	4413      	add	r3, r2
    353e:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    3540:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    3544:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    3546:	4443      	add	r3, r8
    3548:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    354c:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    354e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    3552:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    3554:	617b      	str	r3, [r7, #20]
    3556:	d902      	bls.n	355e <mpu_configure_regions_and_partition.constprop.0+0x182>
    3558:	f7ff ff28 	bl	33ac <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    355c:	e7b8      	b.n	34d0 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    355e:	f107 0108 	add.w	r1, r7, #8
    3562:	f7ff ff09 	bl	3378 <region_init>
    3566:	e7b6      	b.n	34d6 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    3568:	e000ed00 	.word	0xe000ed00
    356c:	00009756 	.word	0x00009756
    3570:	00009733 	.word	0x00009733
    3574:	00008c9c 	.word	0x00008c9c

00003578 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3578:	2205      	movs	r2, #5
    357a:	4b04      	ldr	r3, [pc, #16]	; (358c <arm_core_mpu_enable+0x14>)
    357c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3584:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3588:	4770      	bx	lr
    358a:	bf00      	nop
    358c:	e000ed00 	.word	0xe000ed00

00003590 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3590:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3594:	2200      	movs	r2, #0
    3596:	4b02      	ldr	r3, [pc, #8]	; (35a0 <arm_core_mpu_disable+0x10>)
    3598:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    359c:	4770      	bx	lr
    359e:	bf00      	nop
    35a0:	e000ed00 	.word	0xe000ed00

000035a4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    35a4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    35a6:	4c03      	ldr	r4, [pc, #12]	; (35b4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    35a8:	7822      	ldrb	r2, [r4, #0]
    35aa:	f7ff ff17 	bl	33dc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    35ae:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    35b0:	bd10      	pop	{r4, pc}
    35b2:	bf00      	nop
    35b4:	200011ed 	.word	0x200011ed

000035b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    35b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35bc:	4d29      	ldr	r5, [pc, #164]	; (3664 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    35be:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    35c0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    35c2:	f04f 0800 	mov.w	r8, #0
    35c6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    35c8:	4f27      	ldr	r7, [pc, #156]	; (3668 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    35ca:	45d0      	cmp	r8, sl
    35cc:	da1b      	bge.n	3606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    35ce:	f8d6 9004 	ldr.w	r9, [r6, #4]
    35d2:	f1b9 0f00 	cmp.w	r9, #0
    35d6:	d03f      	beq.n	3658 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    35d8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    35da:	4608      	mov	r0, r1
    35dc:	9101      	str	r1, [sp, #4]
    35de:	f004 fb08 	bl	7bf2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35e2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    35e4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35e6:	eb09 0001 	add.w	r0, r9, r1
    35ea:	3801      	subs	r0, #1
    35ec:	f004 fb01 	bl	7bf2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    35f0:	4284      	cmp	r4, r0
    35f2:	f04f 0214 	mov.w	r2, #20
    35f6:	4b1d      	ldr	r3, [pc, #116]	; (366c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    35f8:	d008      	beq.n	360c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    35fa:	fb02 f308 	mul.w	r3, r2, r8
    35fe:	f06f 0215 	mvn.w	r2, #21
    3602:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    3606:	b003      	add	sp, #12
    3608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    360c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    3610:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    3612:	d0f8      	beq.n	3606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    3614:	7819      	ldrb	r1, [r3, #0]
    3616:	42a1      	cmp	r1, r4
    3618:	ddf5      	ble.n	3606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    361a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    361e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    3622:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    3626:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    362a:	f100 0108 	add.w	r1, r0, #8
    362e:	7b00      	ldrb	r0, [r0, #12]
    3630:	f364 0004 	bfi	r0, r4, #0, #5
    3634:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    3636:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    363a:	790c      	ldrb	r4, [r1, #4]
    363c:	0840      	lsrs	r0, r0, #1
    363e:	f360 1447 	bfi	r4, r0, #5, #3
    3642:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    3644:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    3648:	f021 011f 	bic.w	r1, r1, #31
    364c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    364e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    3652:	f021 011f 	bic.w	r1, r1, #31
    3656:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3658:	f108 0801 	add.w	r8, r8, #1
    365c:	3514      	adds	r5, #20
    365e:	360c      	adds	r6, #12
    3660:	e7b3      	b.n	35ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    3662:	bf00      	nop
    3664:	20000e94 	.word	0x20000e94
    3668:	e000ed00 	.word	0xe000ed00
    366c:	200011ed 	.word	0x200011ed

00003670 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3670:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3672:	4d0e      	ldr	r5, [pc, #56]	; (36ac <z_arm_mpu_init+0x3c>)
    3674:	682c      	ldr	r4, [r5, #0]
    3676:	2c08      	cmp	r4, #8
    3678:	d815      	bhi.n	36a6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    367a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    367c:	f7ff ff88 	bl	3590 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    3680:	4b0b      	ldr	r3, [pc, #44]	; (36b0 <z_arm_mpu_init+0x40>)
    3682:	4a0c      	ldr	r2, [pc, #48]	; (36b4 <z_arm_mpu_init+0x44>)
    3684:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3688:	4284      	cmp	r4, r0
    368a:	d105      	bne.n	3698 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    368c:	4b0a      	ldr	r3, [pc, #40]	; (36b8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    368e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3690:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3692:	f7ff ff71 	bl	3578 <arm_core_mpu_enable>
}
    3696:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3698:	6869      	ldr	r1, [r5, #4]
    369a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    369e:	f7ff fe6b 	bl	3378 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36a2:	3001      	adds	r0, #1
    36a4:	e7f0      	b.n	3688 <z_arm_mpu_init+0x18>
		return -1;
    36a6:	f04f 30ff 	mov.w	r0, #4294967295
    36aa:	e7f4      	b.n	3696 <z_arm_mpu_init+0x26>
    36ac:	00008db8 	.word	0x00008db8
    36b0:	e000ed00 	.word	0xe000ed00
    36b4:	0044ffaa 	.word	0x0044ffaa
    36b8:	200011ed 	.word	0x200011ed

000036bc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    36bc:	4b01      	ldr	r3, [pc, #4]	; (36c4 <__stdout_hook_install+0x8>)
    36be:	6018      	str	r0, [r3, #0]
}
    36c0:	4770      	bx	lr
    36c2:	bf00      	nop
    36c4:	20000054 	.word	0x20000054

000036c8 <remoteproc_mgr_boot>:

#if !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	/* Retain nRF5340 Network MCU in Secure domain (bus
	 * accesses by Network MCU will have Secure attribute set).
	 */
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    36c8:	2210      	movs	r2, #16
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <remoteproc_mgr_boot+0x14>)
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    36cc:	2000      	movs	r0, #0
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    36ce:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    36d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36d6:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    36da:	4770      	bx	lr
    36dc:	50003000 	.word	0x50003000

000036e0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    36e0:	4b08      	ldr	r3, [pc, #32]	; (3704 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    36e2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    36e4:	1ac3      	subs	r3, r0, r3
{
    36e6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    36e8:	4907      	ldr	r1, [pc, #28]	; (3708 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    36ea:	109b      	asrs	r3, r3, #2
{
    36ec:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    36ee:	4359      	muls	r1, r3
    36f0:	2240      	movs	r2, #64	; 0x40
    36f2:	4806      	ldr	r0, [pc, #24]	; (370c <onoff_stop+0x2c>)
    36f4:	f004 fae9 	bl	7cca <stop>
	notify(mgr, res);
    36f8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    36fa:	4601      	mov	r1, r0
	notify(mgr, res);
    36fc:	4620      	mov	r0, r4
}
    36fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3702:	4718      	bx	r3
    3704:	20000ebc 	.word	0x20000ebc
    3708:	b6db6db7 	.word	0xb6db6db7
    370c:	00008980 	.word	0x00008980

00003710 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3710:	2340      	movs	r3, #64	; 0x40
{
    3712:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3714:	4c0b      	ldr	r4, [pc, #44]	; (3744 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3716:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    3718:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    371a:	460b      	mov	r3, r1
{
    371c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    371e:	490a      	ldr	r1, [pc, #40]	; (3748 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    3720:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3722:	4361      	muls	r1, r4
{
    3724:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3726:	4a09      	ldr	r2, [pc, #36]	; (374c <onoff_start+0x3c>)
    3728:	4809      	ldr	r0, [pc, #36]	; (3750 <onoff_start+0x40>)
    372a:	f004 fafa 	bl	7d22 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    372e:	1e01      	subs	r1, r0, #0
    3730:	da05      	bge.n	373e <onoff_start+0x2e>
		notify(mgr, err);
    3732:	4630      	mov	r0, r6
    3734:	462b      	mov	r3, r5
	}
}
    3736:	b002      	add	sp, #8
    3738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    373c:	4718      	bx	r3
}
    373e:	b002      	add	sp, #8
    3740:	bd70      	pop	{r4, r5, r6, pc}
    3742:	bf00      	nop
    3744:	20000ebc 	.word	0x20000ebc
    3748:	b6db6db7 	.word	0xb6db6db7
    374c:	00007d8d 	.word	0x00007d8d
    3750:	00008980 	.word	0x00008980

00003754 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3758:	2200      	movs	r2, #0
    375a:	2101      	movs	r1, #1
{
    375c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    375e:	2005      	movs	r0, #5
    3760:	f7ff f988 	bl	2a74 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3764:	4811      	ldr	r0, [pc, #68]	; (37ac <clk_init+0x58>)
    3766:	f001 fb5d 	bl	4e24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    376a:	4b11      	ldr	r3, [pc, #68]	; (37b0 <clk_init+0x5c>)
    376c:	4298      	cmp	r0, r3
    376e:	d119      	bne.n	37a4 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3770:	f004 fd53 	bl	821a <nrfx_clock_enable>
    3774:	2400      	movs	r4, #0
	return &data->mgr[type];
    3776:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    377a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    377c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 37b4 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    3780:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3782:	4641      	mov	r1, r8
    3784:	fb09 5004 	mla	r0, r9, r4, r5
    3788:	f003 fe7b 	bl	7482 <onoff_manager_init>
		if (err < 0) {
    378c:	2800      	cmp	r0, #0
    378e:	db07      	blt.n	37a0 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3790:	2301      	movs	r3, #1
    3792:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3796:	441c      	add	r4, r3
    3798:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    379a:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    379c:	d1f0      	bne.n	3780 <clk_init+0x2c>
	}

	return 0;
    379e:	2000      	movs	r0, #0
}
    37a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    37a4:	f06f 0004 	mvn.w	r0, #4
    37a8:	e7fa      	b.n	37a0 <clk_init+0x4c>
    37aa:	bf00      	nop
    37ac:	000037ed 	.word	0x000037ed
    37b0:	0bad0000 	.word	0x0bad0000
    37b4:	00008de0 	.word	0x00008de0

000037b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    37b8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    37ba:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    37bc:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    37be:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    37c0:	434b      	muls	r3, r1
    37c2:	4808      	ldr	r0, [pc, #32]	; (37e4 <clkstarted_handle.constprop.0+0x2c>)
    37c4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    37c6:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    37c8:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    37cc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    37ce:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    37d0:	f004 fa68 	bl	7ca4 <set_on_state>
	if (callback) {
    37d4:	b12d      	cbz	r5, 37e2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    37d6:	4632      	mov	r2, r6
    37d8:	462b      	mov	r3, r5
}
    37da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    37de:	4802      	ldr	r0, [pc, #8]	; (37e8 <clkstarted_handle.constprop.0+0x30>)
    37e0:	4718      	bx	r3
}
    37e2:	bd70      	pop	{r4, r5, r6, pc}
    37e4:	20000ebc 	.word	0x20000ebc
    37e8:	00008980 	.word	0x00008980

000037ec <clock_event_handler>:
	switch (event) {
    37ec:	2805      	cmp	r0, #5
    37ee:	d811      	bhi.n	3814 <clock_event_handler+0x28>
    37f0:	e8df f000 	tbb	[pc, r0]
    37f4:	10100e03 	.word	0x10100e03
    37f8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    37fa:	4b07      	ldr	r3, [pc, #28]	; (3818 <clock_event_handler+0x2c>)
    37fc:	6f98      	ldr	r0, [r3, #120]	; 0x78
    37fe:	f010 0007 	ands.w	r0, r0, #7
    3802:	d107      	bne.n	3814 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3804:	f7ff bfd8 	b.w	37b8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    3808:	2002      	movs	r0, #2
    380a:	e7fb      	b.n	3804 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    380c:	2003      	movs	r0, #3
    380e:	e7f9      	b.n	3804 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3810:	2001      	movs	r0, #1
    3812:	e7f7      	b.n	3804 <clock_event_handler+0x18>
}
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	20000ebc 	.word	0x20000ebc

0000381c <generic_hfclk_start>:
{
    381c:	b508      	push	{r3, lr}
	__asm__ volatile(
    381e:	f04f 0320 	mov.w	r3, #32
    3822:	f3ef 8111 	mrs	r1, BASEPRI
    3826:	f383 8812 	msr	BASEPRI_MAX, r3
    382a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    382e:	4a12      	ldr	r2, [pc, #72]	; (3878 <generic_hfclk_start+0x5c>)
    3830:	6813      	ldr	r3, [r2, #0]
    3832:	f043 0002 	orr.w	r0, r3, #2
    3836:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3838:	07da      	lsls	r2, r3, #31
    383a:	d408      	bmi.n	384e <generic_hfclk_start+0x32>
	__asm__ volatile(
    383c:	f381 8811 	msr	BASEPRI, r1
    3840:	f3bf 8f6f 	isb	sy
}
    3844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3848:	2001      	movs	r0, #1
    384a:	f004 bcf8 	b.w	823e <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    384e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3852:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3856:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    385a:	07d3      	lsls	r3, r2, #31
    385c:	d5ee      	bpl.n	383c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    385e:	4807      	ldr	r0, [pc, #28]	; (387c <generic_hfclk_start+0x60>)
    3860:	f004 fa20 	bl	7ca4 <set_on_state>
    3864:	f381 8811 	msr	BASEPRI, r1
    3868:	f3bf 8f6f 	isb	sy
}
    386c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3870:	2000      	movs	r0, #0
    3872:	f7ff bfa1 	b.w	37b8 <clkstarted_handle.constprop.0>
    3876:	bf00      	nop
    3878:	20000f5c 	.word	0x20000f5c
    387c:	20000f34 	.word	0x20000f34

00003880 <api_blocking_start>:
{
    3880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3882:	2200      	movs	r2, #0
    3884:	2301      	movs	r3, #1
    3886:	e9cd 2302 	strd	r2, r3, [sp, #8]
    388a:	ab04      	add	r3, sp, #16
    388c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3890:	4a09      	ldr	r2, [pc, #36]	; (38b8 <api_blocking_start+0x38>)
    3892:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3894:	f8cd d000 	str.w	sp, [sp]
    3898:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    389c:	f004 fa6f 	bl	7d7e <api_start>
	if (err < 0) {
    38a0:	2800      	cmp	r0, #0
    38a2:	db05      	blt.n	38b0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    38a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    38a8:	2300      	movs	r3, #0
    38aa:	4668      	mov	r0, sp
    38ac:	f002 fc6e 	bl	618c <z_impl_k_sem_take>
}
    38b0:	b007      	add	sp, #28
    38b2:	f85d fb04 	ldr.w	pc, [sp], #4
    38b6:	bf00      	nop
    38b8:	00007dc3 	.word	0x00007dc3

000038bc <generic_hfclk_stop>:
{
    38bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    38be:	f04f 0320 	mov.w	r3, #32
    38c2:	f3ef 8411 	mrs	r4, BASEPRI
    38c6:	f383 8812 	msr	BASEPRI_MAX, r3
    38ca:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    38ce:	4a07      	ldr	r2, [pc, #28]	; (38ec <generic_hfclk_stop+0x30>)
    38d0:	6813      	ldr	r3, [r2, #0]
    38d2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    38d6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    38d8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    38da:	d402      	bmi.n	38e2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    38dc:	2001      	movs	r0, #1
    38de:	f004 fd0d 	bl	82fc <nrfx_clock_stop>
	__asm__ volatile(
    38e2:	f384 8811 	msr	BASEPRI, r4
    38e6:	f3bf 8f6f 	isb	sy
}
    38ea:	bd10      	pop	{r4, pc}
    38ec:	20000f5c 	.word	0x20000f5c

000038f0 <z_nrf_clock_control_lf_on>:
{
    38f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    38f4:	2201      	movs	r2, #1
    38f6:	4607      	mov	r7, r0
    38f8:	4937      	ldr	r1, [pc, #220]	; (39d8 <z_nrf_clock_control_lf_on+0xe8>)
    38fa:	e8d1 3fef 	ldaex	r3, [r1]
    38fe:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3902:	2800      	cmp	r0, #0
    3904:	d1f9      	bne.n	38fa <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    3906:	b933      	cbnz	r3, 3916 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3908:	4934      	ldr	r1, [pc, #208]	; (39dc <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    390a:	4835      	ldr	r0, [pc, #212]	; (39e0 <z_nrf_clock_control_lf_on+0xf0>)
    390c:	604b      	str	r3, [r1, #4]
    390e:	60cb      	str	r3, [r1, #12]
    3910:	608a      	str	r2, [r1, #8]
    3912:	f003 fdc9 	bl	74a8 <onoff_request>
	switch (start_mode) {
    3916:	1e7b      	subs	r3, r7, #1
    3918:	2b01      	cmp	r3, #1
    391a:	d82b      	bhi.n	3974 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    391c:	2f01      	cmp	r7, #1
    391e:	d107      	bne.n	3930 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3920:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3924:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3928:	f003 0303 	and.w	r3, r3, #3
    392c:	2b02      	cmp	r3, #2
    392e:	d021      	beq.n	3974 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3930:	f004 fdb7 	bl	84a2 <k_is_in_isr>
    3934:	4605      	mov	r5, r0
    3936:	b9f8      	cbnz	r0, 3978 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    3938:	4b2a      	ldr	r3, [pc, #168]	; (39e4 <z_nrf_clock_control_lf_on+0xf4>)
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	b1e3      	cbz	r3, 3978 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    393e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3942:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3944:	4606      	mov	r6, r0
    3946:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    394a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    394e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 39e8 <z_nrf_clock_control_lf_on+0xf8>
    3952:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3956:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    395a:	03d2      	lsls	r2, r2, #15
    395c:	d516      	bpl.n	398c <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    395e:	f003 0303 	and.w	r3, r3, #3
    3962:	2b02      	cmp	r3, #2
    3964:	d001      	beq.n	396a <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3966:	2f01      	cmp	r7, #1
    3968:	d110      	bne.n	398c <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    396a:	b375      	cbz	r5, 39ca <z_nrf_clock_control_lf_on+0xda>
    396c:	f386 8811 	msr	BASEPRI, r6
    3970:	f3bf 8f6f 	isb	sy
}
    3974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    3978:	f04f 0320 	mov.w	r3, #32
    397c:	f3ef 8611 	mrs	r6, BASEPRI
    3980:	f383 8812 	msr	BASEPRI_MAX, r3
    3984:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3988:	2501      	movs	r5, #1
    398a:	e7de      	b.n	394a <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    398c:	b1c5      	cbz	r5, 39c0 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    398e:	4630      	mov	r0, r6
    3990:	f7fe ffd0 	bl	2934 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3994:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3998:	b2db      	uxtb	r3, r3
    399a:	2b01      	cmp	r3, #1
    399c:	d1d9      	bne.n	3952 <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    399e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    39a2:	2a00      	cmp	r2, #0
    39a4:	d0d5      	beq.n	3952 <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39a6:	2200      	movs	r2, #0
    39a8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    39ac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    39b0:	2202      	movs	r2, #2
    39b2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    39b6:	2220      	movs	r2, #32
    39b8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39bc:	60a3      	str	r3, [r4, #8]
}
    39be:	e7c8      	b.n	3952 <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    39c0:	2100      	movs	r1, #0
    39c2:	2021      	movs	r0, #33	; 0x21
    39c4:	f002 fed2 	bl	676c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    39c8:	e7e4      	b.n	3994 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    39ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    39ce:	2202      	movs	r2, #2
    39d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    39d4:	e7ce      	b.n	3974 <z_nrf_clock_control_lf_on+0x84>
    39d6:	bf00      	nop
    39d8:	20000eb8 	.word	0x20000eb8
    39dc:	20000ea8 	.word	0x20000ea8
    39e0:	20000ed8 	.word	0x20000ed8
    39e4:	200011f8 	.word	0x200011f8
    39e8:	e000e100 	.word	0xe000e100

000039ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    39ec:	b508      	push	{r3, lr}
    39ee:	4807      	ldr	r0, [pc, #28]	; (3a0c <uart_console_init+0x20>)
    39f0:	f004 fcfb 	bl	83ea <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    39f4:	b138      	cbz	r0, 3a06 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    39f6:	4806      	ldr	r0, [pc, #24]	; (3a10 <uart_console_init+0x24>)
    39f8:	f7ff fe60 	bl	36bc <__stdout_hook_install>
	__printk_hook_install(console_out);
    39fc:	4804      	ldr	r0, [pc, #16]	; (3a10 <uart_console_init+0x24>)
    39fe:	f7fd fab1 	bl	f64 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3a02:	2000      	movs	r0, #0
}
    3a04:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3a06:	f06f 0012 	mvn.w	r0, #18
    3a0a:	e7fb      	b.n	3a04 <uart_console_init+0x18>
    3a0c:	000089c8 	.word	0x000089c8
    3a10:	00003a15 	.word	0x00003a15

00003a14 <console_out>:
	if ('\n' == c) {
    3a14:	280a      	cmp	r0, #10
{
    3a16:	b538      	push	{r3, r4, r5, lr}
    3a18:	4604      	mov	r4, r0
    3a1a:	4d07      	ldr	r5, [pc, #28]	; (3a38 <console_out+0x24>)
	if ('\n' == c) {
    3a1c:	d104      	bne.n	3a28 <console_out+0x14>
    3a1e:	68ab      	ldr	r3, [r5, #8]
    3a20:	210d      	movs	r1, #13
    3a22:	4628      	mov	r0, r5
    3a24:	685b      	ldr	r3, [r3, #4]
    3a26:	4798      	blx	r3
    3a28:	68ab      	ldr	r3, [r5, #8]
    3a2a:	4803      	ldr	r0, [pc, #12]	; (3a38 <console_out+0x24>)
    3a2c:	685b      	ldr	r3, [r3, #4]
    3a2e:	b2e1      	uxtb	r1, r4
    3a30:	4798      	blx	r3
}
    3a32:	4620      	mov	r0, r4
    3a34:	bd38      	pop	{r3, r4, r5, pc}
    3a36:	bf00      	nop
    3a38:	000089c8 	.word	0x000089c8

00003a3c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3a3c:	b530      	push	{r4, r5, lr}
	return port->config;
    3a3e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3a40:	f001 041f 	and.w	r4, r1, #31
    3a44:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3a46:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3a4a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3a4c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3a50:	d105      	bne.n	3a5e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3a52:	4620      	mov	r0, r4
    3a54:	f001 fc96 	bl	5384 <nrfx_gpiote_trigger_disable>

		return 0;
    3a58:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3a5a:	b005      	add	sp, #20
    3a5c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a5e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3a60:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a64:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3a68:	d114      	bne.n	3a94 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a6e:	bf0c      	ite	eq
    3a70:	2304      	moveq	r3, #4
    3a72:	2305      	movne	r3, #5
    3a74:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a78:	2300      	movs	r3, #0
    3a7a:	4620      	mov	r0, r4
    3a7c:	4619      	mov	r1, r3
    3a7e:	aa02      	add	r2, sp, #8
    3a80:	f001 fabe 	bl	5000 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3a84:	4b1f      	ldr	r3, [pc, #124]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3a86:	4298      	cmp	r0, r3
    3a88:	d138      	bne.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3a8a:	2101      	movs	r1, #1
    3a8c:	4620      	mov	r0, r4
    3a8e:	f001 fc33 	bl	52f8 <nrfx_gpiote_trigger_enable>
	return 0;
    3a92:	e7e1      	b.n	3a58 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3a94:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3a98:	d025      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3a9e:	bf14      	ite	ne
    3aa0:	2301      	movne	r3, #1
    3aa2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3aa4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3aa8:	6883      	ldr	r3, [r0, #8]
    3aaa:	40cb      	lsrs	r3, r1
    3aac:	07d9      	lsls	r1, r3, #31
    3aae:	d4e3      	bmi.n	3a78 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3ab0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3ab4:	d1e0      	bne.n	3a78 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    3ab6:	4a14      	ldr	r2, [pc, #80]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3ab8:	4814      	ldr	r0, [pc, #80]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    return pin_number >> 5;
    3aba:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    3abc:	2901      	cmp	r1, #1
    3abe:	bf08      	it	eq
    3ac0:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    3ac2:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3ac6:	3380      	adds	r3, #128	; 0x80
    3ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3acc:	07db      	lsls	r3, r3, #31
    3ace:	d4d3      	bmi.n	3a78 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3ad0:	f10d 0507 	add.w	r5, sp, #7
    3ad4:	4629      	mov	r1, r5
    3ad6:	4620      	mov	r0, r4
    3ad8:	f001 fbba 	bl	5250 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3adc:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3ade:	4298      	cmp	r0, r3
    3ae0:	d003      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
		trigger_config.p_in_channel = &ch;
    3ae2:	9503      	str	r5, [sp, #12]
    3ae4:	e7c8      	b.n	3a78 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3ae6:	2303      	movs	r3, #3
    3ae8:	e7dc      	b.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
			err = nrfx_gpiote_channel_alloc(&ch);
    3aea:	4628      	mov	r0, r5
    3aec:	f001 fbfe 	bl	52ec <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3af0:	4b04      	ldr	r3, [pc, #16]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3af2:	4298      	cmp	r0, r3
    3af4:	d0f5      	beq.n	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
				return -ENOMEM;
    3af6:	f06f 000b 	mvn.w	r0, #11
    3afa:	e7ae      	b.n	3a5a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3afc:	f06f 0015 	mvn.w	r0, #21
    3b00:	e7ab      	b.n	3a5a <gpio_nrfx_pin_interrupt_configure+0x1e>
    3b02:	bf00      	nop
    3b04:	0bad0000 	.word	0x0bad0000
    3b08:	50842500 	.word	0x50842500
    3b0c:	50842800 	.word	0x50842800
    3b10:	0bad0004 	.word	0x0bad0004

00003b14 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3b14:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3b16:	f001 fbd9 	bl	52cc <nrfx_gpiote_is_init>
    3b1a:	4604      	mov	r4, r0
    3b1c:	b968      	cbnz	r0, 3b3a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3b1e:	f001 fbad 	bl	527c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3b22:	4b08      	ldr	r3, [pc, #32]	; (3b44 <gpio_nrfx_init+0x30>)
    3b24:	4298      	cmp	r0, r3
    3b26:	d10a      	bne.n	3b3e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3b28:	4621      	mov	r1, r4
    3b2a:	4807      	ldr	r0, [pc, #28]	; (3b48 <gpio_nrfx_init+0x34>)
    3b2c:	f001 fb8a 	bl	5244 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3b30:	4622      	mov	r2, r4
    3b32:	2105      	movs	r1, #5
    3b34:	200d      	movs	r0, #13
    3b36:	f7fe ff9d 	bl	2a74 <z_arm_irq_priority_set>
		return 0;
    3b3a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3b3c:	bd10      	pop	{r4, pc}
		return -EIO;
    3b3e:	f06f 0004 	mvn.w	r0, #4
    3b42:	e7fb      	b.n	3b3c <gpio_nrfx_init+0x28>
    3b44:	0bad0000 	.word	0x0bad0000
    3b48:	00003b4d 	.word	0x00003b4d

00003b4c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b4c:	0942      	lsrs	r2, r0, #5
{
    3b4e:	4603      	mov	r3, r0
    3b50:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b52:	d002      	beq.n	3b5a <nrfx_gpio_handler+0xe>
    3b54:	2a01      	cmp	r2, #1
    3b56:	d017      	beq.n	3b88 <nrfx_gpio_handler+0x3c>
}
    3b58:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b5a:	4e0d      	ldr	r6, [pc, #52]	; (3b90 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3b5c:	6932      	ldr	r2, [r6, #16]
    3b5e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b60:	2900      	cmp	r1, #0
    3b62:	d0f9      	beq.n	3b58 <nrfx_gpio_handler+0xc>
    3b64:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    3b66:	f003 031f 	and.w	r3, r3, #31
    3b6a:	680c      	ldr	r4, [r1, #0]
    3b6c:	409d      	lsls	r5, r3
    3b6e:	2900      	cmp	r1, #0
    3b70:	d0f2      	beq.n	3b58 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    3b72:	688a      	ldr	r2, [r1, #8]
    3b74:	402a      	ands	r2, r5
    3b76:	d002      	beq.n	3b7e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3b78:	4630      	mov	r0, r6
    3b7a:	684b      	ldr	r3, [r1, #4]
    3b7c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b7e:	b12c      	cbz	r4, 3b8c <nrfx_gpio_handler+0x40>
    3b80:	6823      	ldr	r3, [r4, #0]
    3b82:	4621      	mov	r1, r4
    3b84:	461c      	mov	r4, r3
    3b86:	e7f2      	b.n	3b6e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b88:	4e02      	ldr	r6, [pc, #8]	; (3b94 <nrfx_gpio_handler+0x48>)
    3b8a:	e7e7      	b.n	3b5c <nrfx_gpio_handler+0x10>
    3b8c:	4623      	mov	r3, r4
    3b8e:	e7f8      	b.n	3b82 <nrfx_gpio_handler+0x36>
    3b90:	000089b0 	.word	0x000089b0
    3b94:	00008998 	.word	0x00008998

00003b98 <gpio_nrfx_pin_configure>:
{
    3b98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3b9c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b9e:	f001 051f 	and.w	r5, r1, #31
    3ba2:	7b3b      	ldrb	r3, [r7, #12]
{
    3ba4:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3ba6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3baa:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3bac:	4628      	mov	r0, r5
    3bae:	f10d 0103 	add.w	r1, sp, #3
    3bb2:	f001 fb4d 	bl	5250 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3bb6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3bba:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3bbc:	d10b      	bne.n	3bd6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3bbe:	4628      	mov	r0, r5
    3bc0:	f001 fc08 	bl	53d4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3bc4:	4b3c      	ldr	r3, [pc, #240]	; (3cb8 <gpio_nrfx_pin_configure+0x120>)
    3bc6:	4598      	cmp	r8, r3
    3bc8:	d103      	bne.n	3bd2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3bca:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3bce:	f001 fb87 	bl	52e0 <nrfx_gpiote_channel_free>
		return 0;
    3bd2:	2000      	movs	r0, #0
    3bd4:	e00c      	b.n	3bf0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3bd6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3bd8:	4628      	mov	r0, r5
    3bda:	4619      	mov	r1, r3
    3bdc:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    3bde:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3be2:	f001 fa0d 	bl	5000 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3be6:	4b34      	ldr	r3, [pc, #208]	; (3cb8 <gpio_nrfx_pin_configure+0x120>)
    3be8:	4298      	cmp	r0, r3
    3bea:	d004      	beq.n	3bf6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3bec:	f06f 0015 	mvn.w	r0, #21
}
    3bf0:	b004      	add	sp, #16
    3bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3bf6:	4580      	cmp	r8, r0
    3bf8:	d103      	bne.n	3c02 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3bfe:	f001 fb6f 	bl	52e0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3c02:	03a3      	lsls	r3, r4, #14
    3c04:	d549      	bpl.n	3c9a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c06:	f240 3306 	movw	r3, #774	; 0x306
    3c0a:	4023      	ands	r3, r4
    3c0c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3c10:	d019      	beq.n	3c46 <gpio_nrfx_pin_configure+0xae>
    3c12:	d80c      	bhi.n	3c2e <gpio_nrfx_pin_configure+0x96>
    3c14:	2b06      	cmp	r3, #6
    3c16:	d017      	beq.n	3c48 <gpio_nrfx_pin_configure+0xb0>
    3c18:	d804      	bhi.n	3c24 <gpio_nrfx_pin_configure+0x8c>
    3c1a:	b1ab      	cbz	r3, 3c48 <gpio_nrfx_pin_configure+0xb0>
    3c1c:	2b02      	cmp	r3, #2
    3c1e:	d1e5      	bne.n	3bec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3c20:	2304      	movs	r3, #4
    3c22:	e011      	b.n	3c48 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3c28:	d1e0      	bne.n	3bec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3c2a:	2301      	movs	r3, #1
    3c2c:	e00c      	b.n	3c48 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c2e:	f240 2202 	movw	r2, #514	; 0x202
    3c32:	4293      	cmp	r3, r2
    3c34:	d026      	beq.n	3c84 <gpio_nrfx_pin_configure+0xec>
    3c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3c3a:	d025      	beq.n	3c88 <gpio_nrfx_pin_configure+0xf0>
    3c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3c40:	d1d4      	bne.n	3bec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3c42:	2302      	movs	r3, #2
    3c44:	e000      	b.n	3c48 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3c46:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3c48:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3c4c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3c50:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3c54:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3c56:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3c5a:	bf4c      	ite	mi
    3c5c:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3c5e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3c62:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3c64:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3c68:	d510      	bpl.n	3c8c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3c6a:	2301      	movs	r3, #1
    3c6c:	687a      	ldr	r2, [r7, #4]
    3c6e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3c70:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3c72:	2200      	movs	r2, #0
    3c74:	4628      	mov	r0, r5
    3c76:	a901      	add	r1, sp, #4
    3c78:	f001 fa70 	bl	515c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3c7c:	4b0e      	ldr	r3, [pc, #56]	; (3cb8 <gpio_nrfx_pin_configure+0x120>)
    3c7e:	4298      	cmp	r0, r3
    3c80:	d0a7      	beq.n	3bd2 <gpio_nrfx_pin_configure+0x3a>
    3c82:	e7b3      	b.n	3bec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3c84:	2305      	movs	r3, #5
    3c86:	e7df      	b.n	3c48 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c88:	2303      	movs	r3, #3
    3c8a:	e7dd      	b.n	3c48 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3c8c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3c8e:	bf41      	itttt	mi
    3c90:	2301      	movmi	r3, #1
    3c92:	687a      	ldrmi	r2, [r7, #4]
    3c94:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3c96:	60d3      	strmi	r3, [r2, #12]
}
    3c98:	e7eb      	b.n	3c72 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    3c9a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3c9c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3ca0:	bf4c      	ite	mi
    3ca2:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3ca4:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ca8:	461a      	mov	r2, r3
    3caa:	4628      	mov	r0, r5
    3cac:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    3cae:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3cb2:	f001 f9a5 	bl	5000 <nrfx_gpiote_input_configure>
    3cb6:	e7e1      	b.n	3c7c <gpio_nrfx_pin_configure+0xe4>
    3cb8:	0bad0000 	.word	0x0bad0000

00003cbc <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    3cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cc0:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    3cc2:	6844      	ldr	r4, [r0, #4]
{
    3cc4:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    3cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
    3cc8:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3cca:	2100      	movs	r1, #0
    3ccc:	4630      	mov	r0, r6
    3cce:	1d3a      	adds	r2, r7, #4
    3cd0:	f004 f9bf 	bl	8052 <pinctrl_lookup_state>
	if (ret < 0) {
    3cd4:	2800      	cmp	r0, #0
    3cd6:	db32      	blt.n	3d3e <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3cd8:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3cda:	6832      	ldr	r2, [r6, #0]
    3cdc:	7919      	ldrb	r1, [r3, #4]
    3cde:	6818      	ldr	r0, [r3, #0]
    3ce0:	f000 febc 	bl	4a5c <pinctrl_configure_pins>
	if (err < 0) {
    3ce4:	2800      	cmp	r0, #0
    3ce6:	db2a      	blt.n	3d3e <spi_nrfx_init+0x82>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3ce8:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
    3cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3cec:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3cee:	68ac      	ldr	r4, [r5, #8]
    3cf0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    3cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3cf8:	429c      	cmp	r4, r3
    3cfa:	d304      	bcc.n	3d06 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    3cfc:	4628      	mov	r0, r5
    3cfe:	f004 f901 	bl	7f04 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    3d02:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    3d04:	e01b      	b.n	3d3e <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    3d06:	6820      	ldr	r0, [r4, #0]
    3d08:	f004 fb6f 	bl	83ea <z_device_is_ready>
    3d0c:	b9d8      	cbnz	r0, 3d46 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    3d0e:	6823      	ldr	r3, [r4, #0]
    3d10:	6819      	ldr	r1, [r3, #0]
    3d12:	7923      	ldrb	r3, [r4, #4]
    3d14:	466c      	mov	r4, sp
    3d16:	b08a      	sub	sp, #40	; 0x28
    3d18:	466a      	mov	r2, sp
    3d1a:	61d3      	str	r3, [r2, #28]
    3d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3d20:	481a      	ldr	r0, [pc, #104]	; (3d8c <spi_nrfx_init+0xd0>)
    3d22:	8413      	strh	r3, [r2, #32]
    3d24:	4b1a      	ldr	r3, [pc, #104]	; (3d90 <spi_nrfx_init+0xd4>)
    3d26:	e9c2 0105 	strd	r0, r1, [r2, #20]
    3d2a:	481a      	ldr	r0, [pc, #104]	; (3d94 <spi_nrfx_init+0xd8>)
    3d2c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3d30:	f842 3f10 	str.w	r3, [r2, #16]!
    3d34:	f004 f8ad 	bl	7e92 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    3d38:	f06f 0012 	mvn.w	r0, #18
    3d3c:	46a5      	mov	sp, r4
#endif
}
    3d3e:	370c      	adds	r7, #12
    3d40:	46bd      	mov	sp, r7
    3d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    3d46:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    3d48:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    3d4a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    3d4c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3d50:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    3d52:	bf54      	ite	pl
    3d54:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3d58:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3d5c:	f8de c000 	ldr.w	ip, [lr]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3d60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3d64:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3d68:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3d6a:	bf4c      	ite	mi
    3d6c:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3d70:	ea2c 0308 	bicpl.w	r3, ip, r8
	const struct gpio_driver_api *api =
    3d74:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3d78:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    3d7c:	f8d9 3000 	ldr.w	r3, [r9]
    3d80:	4798      	blx	r3
		if (ret < 0) {
    3d82:	2800      	cmp	r0, #0
    3d84:	dbdb      	blt.n	3d3e <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3d86:	3408      	adds	r4, #8
    3d88:	e7b2      	b.n	3cf0 <spi_nrfx_init+0x34>
    3d8a:	bf00      	nop
    3d8c:	000097f3 	.word	0x000097f3
    3d90:	01000004 	.word	0x01000004
    3d94:	00008cc4 	.word	0x00008cc4

00003d98 <transfer_next_chunk>:
{
    3d98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    3d9a:	6904      	ldr	r4, [r0, #16]
{
    3d9c:	4606      	mov	r6, r0
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3d9e:	6e67      	ldr	r7, [r4, #100]	; 0x64
	const struct spi_nrfx_config *dev_config = dev->config;
    3da0:	6845      	ldr	r5, [r0, #4]
		return ctx->rx_len;
    3da2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
{
    3da4:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    3da6:	b9af      	cbnz	r7, 3dd4 <transfer_next_chunk+0x3c>
	if (chunk_len > 0) {
    3da8:	2b00      	cmp	r3, #0
    3daa:	d13b      	bne.n	3e24 <transfer_next_chunk+0x8c>
	int error = 0;
    3dac:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
    3dae:	2200      	movs	r2, #0
    3db0:	4620      	mov	r0, r4
    3db2:	4611      	mov	r1, r2
    3db4:	f004 f884 	bl	7ec0 <_spi_context_cs_control>
	if (!ctx->asynchronous) {
    3db8:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d142      	bne.n	3e46 <transfer_next_chunk+0xae>
		ctx->sync_status = status;
    3dc0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
    3dc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3dc6:	f002 f9bb 	bl	6140 <z_impl_k_sem_give>
	dev_data->busy = false;
    3dca:	2300      	movs	r3, #0
    3dcc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
    3dd0:	b005      	add	sp, #20
    3dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
    3dd4:	6e21      	ldr	r1, [r4, #96]	; 0x60
	} else if (!ctx->rx_len) {
    3dd6:	bb0b      	cbnz	r3, 3e1c <transfer_next_chunk+0x84>
	return !!(ctx->tx_buf && ctx->tx_len);
    3dd8:	bb39      	cbnz	r1, 3e2a <transfer_next_chunk+0x92>
		if (chunk_len > MAX_CHUNK_LEN) {
    3dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3dde:	42ba      	cmp	r2, r7
    3de0:	bf28      	it	cs
    3de2:	463a      	movcs	r2, r7
    3de4:	6e23      	ldr	r3, [r4, #96]	; 0x60
		dev_data->chunk_len = chunk_len;
    3de6:	6762      	str	r2, [r4, #116]	; 0x74
		xfer.p_tx_buffer = tx_buf;
    3de8:	9100      	str	r1, [sp, #0]
    3dea:	b11b      	cbz	r3, 3df4 <transfer_next_chunk+0x5c>
    3dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3dee:	2b00      	cmp	r3, #0
    3df0:	bf18      	it	ne
    3df2:	4613      	movne	r3, r2
    3df4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    3df6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3df8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3dfa:	b11b      	cbz	r3, 3e04 <transfer_next_chunk+0x6c>
    3dfc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3dfe:	2b00      	cmp	r3, #0
    3e00:	bf18      	it	ne
    3e02:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3e04:	2200      	movs	r2, #0
    3e06:	4669      	mov	r1, sp
    3e08:	4628      	mov	r0, r5
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3e0a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3e0c:	f001 fdca 	bl	59a4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    3e10:	4b14      	ldr	r3, [pc, #80]	; (3e64 <transfer_next_chunk+0xcc>)
    3e12:	4298      	cmp	r0, r3
    3e14:	d0dc      	beq.n	3dd0 <transfer_next_chunk+0x38>
			error = -EIO;
    3e16:	f06f 0504 	mvn.w	r5, #4
    3e1a:	e7c8      	b.n	3dae <transfer_next_chunk+0x16>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    3e1c:	429f      	cmp	r7, r3
    3e1e:	bf28      	it	cs
    3e20:	461f      	movcs	r7, r3
    3e22:	e7d9      	b.n	3dd8 <transfer_next_chunk+0x40>
		const uint8_t *tx_buf = ctx->tx_buf;
    3e24:	461f      	mov	r7, r3
    3e26:	6e21      	ldr	r1, [r4, #96]	; 0x60
	return !!(ctx->tx_buf && ctx->tx_len);
    3e28:	e7d7      	b.n	3dda <transfer_next_chunk+0x42>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3e2a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    3e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3e32:	d0d2      	beq.n	3dda <transfer_next_chunk+0x42>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    3e34:	2f08      	cmp	r7, #8
    3e36:	bf28      	it	cs
    3e38:	2708      	movcs	r7, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    3e3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    3e3c:	463a      	mov	r2, r7
    3e3e:	f003 ff11 	bl	7c64 <memcpy>
			tx_buf = dev_data->buffer;
    3e42:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    3e44:	e7c9      	b.n	3dda <transfer_next_chunk+0x42>
		if (ctx->callback) {
    3e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3e48:	b11b      	cbz	r3, 3e52 <transfer_next_chunk+0xba>
			ctx->callback(dev, status, ctx->callback_data);
    3e4a:	4629      	mov	r1, r5
    3e4c:	4630      	mov	r0, r6
    3e4e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3e50:	4798      	blx	r3
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
    3e52:	6823      	ldr	r3, [r4, #0]
    3e54:	889b      	ldrh	r3, [r3, #4]
    3e56:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    3e5a:	d1b6      	bne.n	3dca <transfer_next_chunk+0x32>
			ctx->owner = NULL;
    3e5c:	6063      	str	r3, [r4, #4]
    3e5e:	f104 0010 	add.w	r0, r4, #16
    3e62:	e7b0      	b.n	3dc6 <transfer_next_chunk+0x2e>
    3e64:	0bad0000 	.word	0x0bad0000

00003e68 <transceive>:
{
    3e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e6c:	b08b      	sub	sp, #44	; 0x2c
    3e6e:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3e70:	888b      	ldrh	r3, [r1, #4]
    3e72:	af00      	add	r7, sp, #0
    3e74:	049b      	lsls	r3, r3, #18
    3e76:	4680      	mov	r8, r0
    3e78:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
    3e7a:	6904      	ldr	r4, [r0, #16]
{
    3e7c:	60ba      	str	r2, [r7, #8]
    3e7e:	d438      	bmi.n	3ef2 <transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    3e80:	f04f 33ff 	mov.w	r3, #4294967295
    3e84:	f04f 32ff 	mov.w	r2, #4294967295
    3e88:	f104 0010 	add.w	r0, r4, #16
    3e8c:	f002 f97e 	bl	618c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3e90:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
	ctx->owner = spi_cfg;
    3e94:	6066      	str	r6, [r4, #4]
	ctx->asynchronous = asynchronous;
    3e96:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	ctx->callback = callback;
    3e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e9c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->callback_data = callback_data;
    3e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3ea0:	64a3      	str	r3, [r4, #72]	; 0x48
	const struct spi_nrfx_config *dev_config = dev->config;
    3ea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3ea6:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
    3eaa:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
    3eac:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3eae:	f899 3079 	ldrb.w	r3, [r9, #121]	; 0x79
    3eb2:	607b      	str	r3, [r7, #4]
    3eb4:	b123      	cbz	r3, 3ec0 <transceive+0x58>
    3eb6:	f8d9 3000 	ldr.w	r3, [r9]
    3eba:	429e      	cmp	r6, r3
    3ebc:	f000 80e1 	beq.w	4082 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x82>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    3ec0:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    3ec4:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    3ec8:	d01a      	beq.n	3f00 <transceive+0x98>
		LOG_ERR("Half-duplex not supported");
    3eca:	4bac      	ldr	r3, [pc, #688]	; (417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>)
		return -ENOTSUP;
    3ecc:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    3ed0:	627b      	str	r3, [r7, #36]	; 0x24
    3ed2:	2302      	movs	r3, #2
    3ed4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ed8:	48a9      	ldr	r0, [pc, #676]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    3eda:	623b      	str	r3, [r7, #32]
    3edc:	f107 0220 	add.w	r2, r7, #32
    3ee0:	f003 ffd7 	bl	7e92 <z_log_msg_static_create.constprop.0>
		ctx->owner = NULL;
    3ee4:	2300      	movs	r3, #0
    3ee6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    3ee8:	f104 0010 	add.w	r0, r4, #16
    3eec:	f002 f928 	bl	6140 <z_impl_k_sem_give>
}
    3ef0:	e13e      	b.n	4170 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x170>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3ef2:	69a3      	ldr	r3, [r4, #24]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d1c3      	bne.n	3e80 <transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    3ef8:	6863      	ldr	r3, [r4, #4]
    3efa:	4299      	cmp	r1, r3
    3efc:	d1c0      	bne.n	3e80 <transceive+0x18>
    3efe:	e7d0      	b.n	3ea2 <transceive+0x3a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    3f00:	f01c 0f01 	tst.w	ip, #1
    3f04:	d016      	beq.n	3f34 <transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    3f06:	466d      	mov	r5, sp
    3f08:	b088      	sub	sp, #32
    3f0a:	f8d8 3000 	ldr.w	r3, [r8]
    3f0e:	466a      	mov	r2, sp
    3f10:	499c      	ldr	r1, [pc, #624]	; (4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>)
    3f12:	489b      	ldr	r0, [pc, #620]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    3f14:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3f18:	f44f 7300 	mov.w	r3, #512	; 0x200
    3f1c:	8393      	strh	r3, [r2, #28]
    3f1e:	4b9a      	ldr	r3, [pc, #616]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
    3f20:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    3f24:	f842 3f10 	str.w	r3, [r2, #16]!
    3f28:	f003 ffb3 	bl	7e92 <z_log_msg_static_create.constprop.0>
    3f2c:	46ad      	mov	sp, r5
		return -EINVAL;
    3f2e:	f06f 0515 	mvn.w	r5, #21
    3f32:	e7d7      	b.n	3ee4 <transceive+0x7c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3f34:	f01c 0f08 	tst.w	ip, #8
    3f38:	d00b      	beq.n	3f52 <transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
    3f3a:	4b94      	ldr	r3, [pc, #592]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    3f3c:	627b      	str	r3, [r7, #36]	; 0x24
    3f3e:	2302      	movs	r3, #2
    3f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f44:	488e      	ldr	r0, [pc, #568]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    3f46:	623b      	str	r3, [r7, #32]
    3f48:	f107 0220 	add.w	r2, r7, #32
    3f4c:	f003 ffa1 	bl	7e92 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    3f50:	e7ed      	b.n	3f2e <transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    3f52:	f3cc 1345 	ubfx	r3, ip, #5, #6
    3f56:	2b08      	cmp	r3, #8
    3f58:	d001      	beq.n	3f5e <transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    3f5a:	4b8d      	ldr	r3, [pc, #564]	; (4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>)
    3f5c:	e7ee      	b.n	3f3c <transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
    3f5e:	6833      	ldr	r3, [r6, #0]
    3f60:	603b      	str	r3, [r7, #0]
    3f62:	683a      	ldr	r2, [r7, #0]
    3f64:	4b8b      	ldr	r3, [pc, #556]	; (4194 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x194>)
    3f66:	429a      	cmp	r2, r3
    3f68:	d801      	bhi.n	3f6e <transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3f6a:	4b8b      	ldr	r3, [pc, #556]	; (4198 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x198>)
    3f6c:	e7e6      	b.n	3f3c <transceive+0xd4>
	if (max_freq > 16000000 &&
    3f6e:	4b8b      	ldr	r3, [pc, #556]	; (419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>)
    3f70:	429d      	cmp	r5, r3
    3f72:	d907      	bls.n	3f84 <transceive+0x11c>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
    3f74:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3f78:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
    3f7c:	f012 0f03 	tst.w	r2, #3
    3f80:	bf18      	it	ne
    3f82:	461d      	movne	r5, r3
	config = dev_config->def_config;
    3f84:	68fb      	ldr	r3, [r7, #12]
    3f86:	f107 0e10 	add.w	lr, r7, #16
    3f8a:	f103 0b0c 	add.w	fp, r3, #12
    3f8e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    3f92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3f96:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
    3f98:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3f9c:	42ab      	cmp	r3, r5
    3f9e:	bf28      	it	cs
    3fa0:	462b      	movcs	r3, r5
    3fa2:	461d      	mov	r5, r3
	if (frequency < 250000) {
    3fa4:	4b7e      	ldr	r3, [pc, #504]	; (41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>)
	config = dev_config->def_config;
    3fa6:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    3faa:	429d      	cmp	r5, r3
    3fac:	d94b      	bls.n	4046 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x46>
	} else if (frequency < 500000) {
    3fae:	4b7d      	ldr	r3, [pc, #500]	; (41a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a4>)
    3fb0:	429d      	cmp	r5, r3
    3fb2:	d94b      	bls.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
	} else if (frequency < 1000000) {
    3fb4:	4b7c      	ldr	r3, [pc, #496]	; (41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>)
    3fb6:	429d      	cmp	r5, r3
    3fb8:	d94b      	bls.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
	} else if (frequency < 2000000) {
    3fba:	4b7c      	ldr	r3, [pc, #496]	; (41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>)
    3fbc:	429d      	cmp	r5, r3
    3fbe:	d94b      	bls.n	4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>
	} else if (frequency < 4000000) {
    3fc0:	4b7b      	ldr	r3, [pc, #492]	; (41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>)
    3fc2:	429d      	cmp	r5, r3
    3fc4:	d94b      	bls.n	405e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e>
	} else if (frequency < 8000000) {
    3fc6:	4b7b      	ldr	r3, [pc, #492]	; (41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>)
    3fc8:	429d      	cmp	r5, r3
    3fca:	d34b      	bcc.n	4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
	} else if (frequency < 16000000) {
    3fcc:	4b73      	ldr	r3, [pc, #460]	; (419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>)
    3fce:	429d      	cmp	r5, r3
    3fd0:	d34b      	bcc.n	406a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a>
		return NRF_SPIM_FREQ_16M;
    3fd2:	4b79      	ldr	r3, [pc, #484]	; (41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>)
    3fd4:	429d      	cmp	r5, r3
    3fd6:	bf2c      	ite	cs
    3fd8:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
    3fdc:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3fe0:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3fe4:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3fe6:	f00c 0304 	and.w	r3, ip, #4
    3fea:	d041      	beq.n	4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>
			return NRF_SPIM_MODE_2;
    3fec:	2b00      	cmp	r3, #0
    3fee:	bf14      	ite	ne
    3ff0:	2303      	movne	r3, #3
    3ff2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    3ff4:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    3ff6:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    3ff8:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    3ffc:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    4000:	b12b      	cbz	r3, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
		nrfx_spim_uninit(&dev_config->spim);
    4002:	68f8      	ldr	r0, [r7, #12]
    4004:	f001 fc7c 	bl	5900 <nrfx_spim_uninit>
		dev_data->initialized = false;
    4008:	2300      	movs	r3, #0
    400a:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
	result = nrfx_spim_init(&dev_config->spim, &config,
    400e:	464b      	mov	r3, r9
    4010:	4a6a      	ldr	r2, [pc, #424]	; (41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>)
    4012:	68f8      	ldr	r0, [r7, #12]
    4014:	f107 0110 	add.w	r1, r7, #16
    4018:	f001 fb54 	bl	56c4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    401c:	4b68      	ldr	r3, [pc, #416]	; (41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>)
    401e:	4298      	cmp	r0, r3
    4020:	d02a      	beq.n	4078 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    4022:	466d      	mov	r5, sp
    4024:	b088      	sub	sp, #32
    4026:	466a      	mov	r2, sp
    4028:	4b66      	ldr	r3, [pc, #408]	; (41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>)
    402a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    402e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4032:	2303      	movs	r3, #3
    4034:	4852      	ldr	r0, [pc, #328]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    4036:	f842 3f10 	str.w	r3, [r2, #16]!
    403a:	f003 ff2a 	bl	7e92 <z_log_msg_static_create.constprop.0>
    403e:	46ad      	mov	sp, r5
		return -EIO;
    4040:	f06f 0504 	mvn.w	r5, #4
    4044:	e74e      	b.n	3ee4 <transceive+0x7c>
		return NRF_SPIM_FREQ_125K;
    4046:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    404a:	e7c9      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_250K;
    404c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    4050:	e7c6      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_500K;
    4052:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    4056:	e7c3      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_1M;
    4058:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    405c:	e7c0      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_2M;
    405e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    4062:	e7bd      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_4M;
    4064:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4068:	e7ba      	b.n	3fe0 <transceive+0x178>
		return NRF_SPIM_FREQ_8M;
    406a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    406e:	e7b7      	b.n	3fe0 <transceive+0x178>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    4070:	3b00      	subs	r3, #0
    4072:	bf18      	it	ne
    4074:	2301      	movne	r3, #1
    4076:	e7bd      	b.n	3ff4 <transceive+0x18c>
	dev_data->initialized = true;
    4078:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
    407a:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
    407e:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
		dev_data->busy = true;
    4082:	2301      	movs	r3, #1
    4084:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    4088:	68bb      	ldr	r3, [r7, #8]
    408a:	2b00      	cmp	r3, #0
    408c:	d157      	bne.n	413e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13e>
    408e:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    4090:	2300      	movs	r3, #0
    4092:	6563      	str	r3, [r4, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    4094:	f104 0264 	add.w	r2, r4, #100	; 0x64
    4098:	f104 0154 	add.w	r1, r4, #84	; 0x54
    409c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    40a0:	f003 fee4 	bl	7e6c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    40a4:	6620      	str	r0, [r4, #96]	; 0x60
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    40a6:	f1ba 0f00 	cmp.w	sl, #0
    40aa:	d150      	bne.n	414e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14e>
    40ac:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    40b0:	2300      	movs	r3, #0
    40b2:	65e3      	str	r3, [r4, #92]	; 0x5c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    40b4:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    40b8:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    40bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    40c0:	f003 fed4 	bl	7e6c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    40c4:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    40c6:	2101      	movs	r1, #1
    40c8:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    40ca:	66a0      	str	r0, [r4, #104]	; 0x68
	ctx->sync_status = 0;
    40cc:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    40ce:	4620      	mov	r0, r4
    40d0:	f003 fef6 	bl	7ec0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    40d4:	4640      	mov	r0, r8
    40d6:	f7ff fe5f 	bl	3d98 <transfer_next_chunk>
	if (!ctx->asynchronous) {
    40da:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
    40de:	2900      	cmp	r1, #0
    40e0:	d146      	bne.n	4170 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x170>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    40e2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    40e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
			     ctx->config->frequency;
    40e6:	4626      	mov	r6, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    40e8:	429d      	cmp	r5, r3
    40ea:	bf38      	it	cc
    40ec:	461d      	movcc	r5, r3
    40ee:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    40f2:	435d      	muls	r5, r3
			     ctx->config->frequency;
    40f4:	f856 3b28 	ldr.w	r3, [r6], #40
			return ((t * to_hz + off) / from_hz);
    40f8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	f240 30e7 	movw	r0, #999	; 0x3e7
    4102:	fbb5 f5f3 	udiv	r5, r5, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    4106:	35c8      	adds	r5, #200	; 0xc8
    4108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    410c:	2300      	movs	r3, #0
    410e:	fbe5 010c 	umlal	r0, r1, r5, ip
    4112:	f7fc f81f 	bl	154 <__aeabi_uldivmod>
    4116:	4602      	mov	r2, r0
    4118:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    411a:	4630      	mov	r0, r6
    411c:	f002 f836 	bl	618c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    4120:	b1e8      	cbz	r0, 415e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15e>
			LOG_ERR("Timeout waiting for transfer complete");
    4122:	4b29      	ldr	r3, [pc, #164]	; (41c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c8>)
    4124:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4128:	627b      	str	r3, [r7, #36]	; 0x24
    412a:	2302      	movs	r3, #2
    412c:	4814      	ldr	r0, [pc, #80]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    412e:	623b      	str	r3, [r7, #32]
    4130:	f107 0220 	add.w	r2, r7, #32
    4134:	f003 fead 	bl	7e92 <z_log_msg_static_create.constprop.0>
			return -ETIMEDOUT;
    4138:	f06f 0573 	mvn.w	r5, #115	; 0x73
    413c:	e6d2      	b.n	3ee4 <transceive+0x7c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    413e:	68bb      	ldr	r3, [r7, #8]
    4140:	681b      	ldr	r3, [r3, #0]
    4142:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    4144:	2b00      	cmp	r3, #0
    4146:	d0a3      	beq.n	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    4148:	68bb      	ldr	r3, [r7, #8]
    414a:	685b      	ldr	r3, [r3, #4]
    414c:	e7a1      	b.n	4092 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x92>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    414e:	f8da 3000 	ldr.w	r3, [sl]
    4152:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    4154:	2b00      	cmp	r3, #0
    4156:	d0ab      	beq.n	40b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb0>
    4158:	f8da 3004 	ldr.w	r3, [sl, #4]
    415c:	e7a9      	b.n	40b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb2>
	if (!ctx->asynchronous || (status < 0)) {
    415e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
		status = ctx->sync_status;
    4162:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if (!ctx->asynchronous || (status < 0)) {
    4164:	2b00      	cmp	r3, #0
    4166:	f43f aebd 	beq.w	3ee4 <transceive+0x7c>
    416a:	2d00      	cmp	r5, #0
    416c:	f6ff aeba 	blt.w	3ee4 <transceive+0x7c>
}
    4170:	4628      	mov	r0, r5
    4172:	372c      	adds	r7, #44	; 0x2c
    4174:	46bd      	mov	sp, r7
    4176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    417a:	bf00      	nop
    417c:	00009817 	.word	0x00009817
    4180:	00008cc4 	.word	0x00008cc4
    4184:	00009831 	.word	0x00009831
    4188:	01000003 	.word	0x01000003
    418c:	00009853 	.word	0x00009853
    4190:	00009872 	.word	0x00009872
    4194:	0001e847 	.word	0x0001e847
    4198:	000098a1 	.word	0x000098a1
    419c:	00f42400 	.word	0x00f42400
    41a0:	0003d08f 	.word	0x0003d08f
    41a4:	0007a11f 	.word	0x0007a11f
    41a8:	000f423f 	.word	0x000f423f
    41ac:	001e847f 	.word	0x001e847f
    41b0:	003d08ff 	.word	0x003d08ff
    41b4:	007a1200 	.word	0x007a1200
    41b8:	01e84800 	.word	0x01e84800
    41bc:	000041cd 	.word	0x000041cd
    41c0:	0bad0000 	.word	0x0bad0000
    41c4:	000098d2 	.word	0x000098d2
    41c8:	000098f9 	.word	0x000098f9

000041cc <event_handler>:
{
    41cc:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    41ce:	7803      	ldrb	r3, [r0, #0]
{
    41d0:	460c      	mov	r4, r1
    41d2:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    41d4:	2b00      	cmp	r3, #0
    41d6:	d154      	bne.n	4282 <event_handler+0xb6>
	if (!ctx->tx_len) {
    41d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    41da:	6f4a      	ldr	r2, [r1, #116]	; 0x74
    41dc:	b15b      	cbz	r3, 41f6 <event_handler+0x2a>
	if (len > ctx->tx_len) {
    41de:	429a      	cmp	r2, r3
    41e0:	d91e      	bls.n	4220 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    41e2:	4b29      	ldr	r3, [pc, #164]	; (4288 <event_handler+0xbc>)
    41e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41e8:	9305      	str	r3, [sp, #20]
    41ea:	2302      	movs	r3, #2
    41ec:	4827      	ldr	r0, [pc, #156]	; (428c <event_handler+0xc0>)
    41ee:	aa04      	add	r2, sp, #16
    41f0:	9304      	str	r3, [sp, #16]
    41f2:	f003 fe4e 	bl	7e92 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    41f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    41f8:	6f62      	ldr	r2, [r4, #116]	; 0x74
    41fa:	b15b      	cbz	r3, 4214 <event_handler+0x48>
	if (len > ctx->rx_len) {
    41fc:	429a      	cmp	r2, r3
    41fe:	d927      	bls.n	4250 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    4200:	4b21      	ldr	r3, [pc, #132]	; (4288 <event_handler+0xbc>)
    4202:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4206:	9305      	str	r3, [sp, #20]
    4208:	2302      	movs	r3, #2
    420a:	4820      	ldr	r0, [pc, #128]	; (428c <event_handler+0xc0>)
    420c:	aa04      	add	r2, sp, #16
    420e:	9304      	str	r3, [sp, #16]
    4210:	f003 fe3f 	bl	7e92 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    4214:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    4216:	b006      	add	sp, #24
    4218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    421c:	f7ff bdbc 	b.w	3d98 <transfer_next_chunk>
	ctx->tx_len -= len;
    4220:	1a9b      	subs	r3, r3, r2
    4222:	664b      	str	r3, [r1, #100]	; 0x64
	if (!ctx->tx_len) {
    4224:	b973      	cbnz	r3, 4244 <event_handler+0x78>
		++ctx->current_tx;
    4226:	6d0b      	ldr	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
    4228:	f101 0264 	add.w	r2, r1, #100	; 0x64
		++ctx->current_tx;
    422c:	3308      	adds	r3, #8
    422e:	650b      	str	r3, [r1, #80]	; 0x50
		--ctx->tx_count;
    4230:	6d4b      	ldr	r3, [r1, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_tx,
    4232:	f104 0050 	add.w	r0, r4, #80	; 0x50
		--ctx->tx_count;
    4236:	3b01      	subs	r3, #1
    4238:	654b      	str	r3, [r1, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_tx,
    423a:	3154      	adds	r1, #84	; 0x54
    423c:	f003 fe16 	bl	7e6c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    4240:	6620      	str	r0, [r4, #96]	; 0x60
    4242:	e7d8      	b.n	41f6 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    4244:	6e0b      	ldr	r3, [r1, #96]	; 0x60
    4246:	2b00      	cmp	r3, #0
    4248:	d0d5      	beq.n	41f6 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    424a:	4413      	add	r3, r2
    424c:	660b      	str	r3, [r1, #96]	; 0x60
    424e:	e7d2      	b.n	41f6 <event_handler+0x2a>
	ctx->rx_len -= len;
    4250:	1a9b      	subs	r3, r3, r2
    4252:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (!ctx->rx_len) {
    4254:	b97b      	cbnz	r3, 4276 <event_handler+0xaa>
		++ctx->current_rx;
    4256:	6da3      	ldr	r3, [r4, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
    4258:	f104 026c 	add.w	r2, r4, #108	; 0x6c
		++ctx->current_rx;
    425c:	3308      	adds	r3, #8
    425e:	65a3      	str	r3, [r4, #88]	; 0x58
		--ctx->rx_count;
    4260:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			spi_context_get_next_buf(&ctx->current_rx,
    4262:	f104 015c 	add.w	r1, r4, #92	; 0x5c
		--ctx->rx_count;
    4266:	3b01      	subs	r3, #1
    4268:	65e3      	str	r3, [r4, #92]	; 0x5c
			spi_context_get_next_buf(&ctx->current_rx,
    426a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    426e:	f003 fdfd 	bl	7e6c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    4272:	66a0      	str	r0, [r4, #104]	; 0x68
    4274:	e7ce      	b.n	4214 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    4276:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    4278:	2b00      	cmp	r3, #0
    427a:	d0cb      	beq.n	4214 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    427c:	4413      	add	r3, r2
    427e:	66a3      	str	r3, [r4, #104]	; 0x68
    4280:	e7c8      	b.n	4214 <event_handler+0x48>
}
    4282:	b006      	add	sp, #24
    4284:	bd10      	pop	{r4, pc}
    4286:	bf00      	nop
    4288:	0000991f 	.word	0x0000991f
    428c:	00008cc4 	.word	0x00008cc4

00004290 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4290:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4292:	794b      	ldrb	r3, [r1, #5]
    4294:	2b01      	cmp	r3, #1
    4296:	d029      	beq.n	42ec <uarte_nrfx_configure+0x5c>
    4298:	2b03      	cmp	r3, #3
    429a:	d124      	bne.n	42e6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    429c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    429e:	798b      	ldrb	r3, [r1, #6]
    42a0:	2b03      	cmp	r3, #3
    42a2:	d120      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    42a4:	79ce      	ldrb	r6, [r1, #7]
    42a6:	b10e      	cbz	r6, 42ac <uarte_nrfx_configure+0x1c>
    42a8:	2e01      	cmp	r6, #1
    42aa:	d11c      	bne.n	42e6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    42ac:	790a      	ldrb	r2, [r1, #4]
    42ae:	2a01      	cmp	r2, #1
    42b0:	d01e      	beq.n	42f0 <uarte_nrfx_configure+0x60>
    42b2:	2a02      	cmp	r2, #2
    42b4:	d020      	beq.n	42f8 <uarte_nrfx_configure+0x68>
    42b6:	b9b2      	cbnz	r2, 42e6 <uarte_nrfx_configure+0x56>
    42b8:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    42ba:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    42bc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    42be:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    42c2:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    42c6:	d06e      	beq.n	43a6 <uarte_nrfx_configure+0x116>
    42c8:	d833      	bhi.n	4332 <uarte_nrfx_configure+0xa2>
    42ca:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    42ce:	d06d      	beq.n	43ac <uarte_nrfx_configure+0x11c>
    42d0:	d81c      	bhi.n	430c <uarte_nrfx_configure+0x7c>
    42d2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    42d6:	d06b      	beq.n	43b0 <uarte_nrfx_configure+0x120>
    42d8:	d810      	bhi.n	42fc <uarte_nrfx_configure+0x6c>
    42da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    42de:	d06a      	beq.n	43b6 <uarte_nrfx_configure+0x126>
    42e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    42e4:	d06a      	beq.n	43bc <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    42e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    42ea:	e05b      	b.n	43a4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    42ec:	2700      	movs	r7, #0
    42ee:	e7d6      	b.n	429e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    42f0:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    42f4:	220e      	movs	r2, #14
    42f6:	e7e0      	b.n	42ba <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    42f8:	2400      	movs	r4, #0
    42fa:	e7fb      	b.n	42f4 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    42fc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4300:	d05f      	beq.n	43c2 <uarte_nrfx_configure+0x132>
    4302:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4306:	d1ee      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4308:	4b38      	ldr	r3, [pc, #224]	; (43ec <uarte_nrfx_configure+0x15c>)
    430a:	e03c      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    430c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4310:	d05a      	beq.n	43c8 <uarte_nrfx_configure+0x138>
    4312:	d807      	bhi.n	4324 <uarte_nrfx_configure+0x94>
    4314:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4318:	d058      	beq.n	43cc <uarte_nrfx_configure+0x13c>
    431a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    431e:	d1e2      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4320:	4b33      	ldr	r3, [pc, #204]	; (43f0 <uarte_nrfx_configure+0x160>)
    4322:	e030      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    4324:	f647 2512 	movw	r5, #31250	; 0x7a12
    4328:	42ab      	cmp	r3, r5
    432a:	d1dc      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    432c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4330:	e029      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    4332:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4336:	d04b      	beq.n	43d0 <uarte_nrfx_configure+0x140>
    4338:	d813      	bhi.n	4362 <uarte_nrfx_configure+0xd2>
    433a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    433e:	d04a      	beq.n	43d6 <uarte_nrfx_configure+0x146>
    4340:	d809      	bhi.n	4356 <uarte_nrfx_configure+0xc6>
    4342:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    4346:	42ab      	cmp	r3, r5
    4348:	d047      	beq.n	43da <uarte_nrfx_configure+0x14a>
    434a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    434e:	d1ca      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4350:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4354:	e017      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    4356:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    435a:	d1c4      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    435c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4360:	e011      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    4362:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4366:	d03b      	beq.n	43e0 <uarte_nrfx_configure+0x150>
    4368:	d808      	bhi.n	437c <uarte_nrfx_configure+0xec>
    436a:	4d22      	ldr	r5, [pc, #136]	; (43f4 <uarte_nrfx_configure+0x164>)
    436c:	42ab      	cmp	r3, r5
    436e:	d03a      	beq.n	43e6 <uarte_nrfx_configure+0x156>
    4370:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4374:	d1b7      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4376:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    437a:	e004      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    437c:	4d1e      	ldr	r5, [pc, #120]	; (43f8 <uarte_nrfx_configure+0x168>)
    437e:	42ab      	cmp	r3, r5
    4380:	d1b1      	bne.n	42e6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4382:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    4386:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4388:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    438c:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    438e:	433a      	orrs	r2, r7
    4390:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    4392:	4334      	orrs	r4, r6
    4394:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4396:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    439a:	1d2b      	adds	r3, r5, #4
    439c:	c903      	ldmia	r1, {r0, r1}
    439e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    43a2:	2000      	movs	r0, #0
}
    43a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    43a6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    43aa:	e7ec      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    43ac:	4b13      	ldr	r3, [pc, #76]	; (43fc <uarte_nrfx_configure+0x16c>)
    43ae:	e7ea      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    43b0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    43b4:	e7e7      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    43b6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    43ba:	e7e4      	b.n	4386 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    43bc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    43c0:	e7e1      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    43c2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    43c6:	e7de      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    43c8:	4b0d      	ldr	r3, [pc, #52]	; (4400 <uarte_nrfx_configure+0x170>)
    43ca:	e7dc      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    43cc:	4b0d      	ldr	r3, [pc, #52]	; (4404 <uarte_nrfx_configure+0x174>)
    43ce:	e7da      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    43d0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    43d4:	e7d7      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    43d6:	4b0c      	ldr	r3, [pc, #48]	; (4408 <uarte_nrfx_configure+0x178>)
    43d8:	e7d5      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    43da:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    43de:	e7d2      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    43e0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    43e4:	e7cf      	b.n	4386 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    43e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    43ea:	e7cc      	b.n	4386 <uarte_nrfx_configure+0xf6>
    43ec:	0013b000 	.word	0x0013b000
    43f0:	004ea000 	.word	0x004ea000
    43f4:	0003d090 	.word	0x0003d090
    43f8:	000f4240 	.word	0x000f4240
    43fc:	00275000 	.word	0x00275000
    4400:	0075c000 	.word	0x0075c000
    4404:	003af000 	.word	0x003af000
    4408:	013a9000 	.word	0x013a9000

0000440c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    440c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4410:	4680      	mov	r8, r0
    4412:	b087      	sub	sp, #28
    4414:	2200      	movs	r2, #0
    4416:	2101      	movs	r1, #1
    4418:	2008      	movs	r0, #8
    441a:	f7fe fb2b 	bl	2a74 <z_arm_irq_priority_set>
    441e:	2008      	movs	r0, #8
    4420:	f7fe faf8 	bl	2a14 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4424:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    4426:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    442a:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    442e:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    4430:	466a      	mov	r2, sp
    4432:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    4436:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    443a:	f8d7 900c 	ldr.w	r9, [r7, #12]
    443e:	4648      	mov	r0, r9
    4440:	f003 fe07 	bl	8052 <pinctrl_lookup_state>
	if (ret < 0) {
    4444:	1e05      	subs	r5, r0, #0
    4446:	db25      	blt.n	4494 <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
    4448:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    444a:	f8d9 2000 	ldr.w	r2, [r9]
    444e:	7919      	ldrb	r1, [r3, #4]
    4450:	6818      	ldr	r0, [r3, #0]
    4452:	f000 fb03 	bl	4a5c <pinctrl_configure_pins>
	if (err < 0) {
    4456:	1e05      	subs	r5, r0, #0
    4458:	db1c      	blt.n	4494 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    445a:	4640      	mov	r0, r8
    445c:	1d31      	adds	r1, r6, #4
    445e:	f7ff ff17 	bl	4290 <uarte_nrfx_configure>
	if (err) {
    4462:	4605      	mov	r5, r0
    4464:	b9b0      	cbnz	r0, 4494 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4466:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4468:	0799      	lsls	r1, r3, #30
    446a:	d524      	bpl.n	44b6 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    446c:	f106 0018 	add.w	r0, r6, #24
    4470:	f000 fd40 	bl	4ef4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4474:	4b24      	ldr	r3, [pc, #144]	; (4508 <uarte_0_init+0xfc>)
    4476:	4298      	cmp	r0, r3
    4478:	d010      	beq.n	449c <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    447a:	4b24      	ldr	r3, [pc, #144]	; (450c <uarte_0_init+0x100>)
    447c:	9305      	str	r3, [sp, #20]
    447e:	2302      	movs	r3, #2
    4480:	9304      	str	r3, [sp, #16]
    4482:	462b      	mov	r3, r5
		return -EIO;
    4484:	f06f 0504 	mvn.w	r5, #4
    4488:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    448c:	4820      	ldr	r0, [pc, #128]	; (4510 <uarte_0_init+0x104>)
    448e:	aa04      	add	r2, sp, #16
    4490:	f7fd fd4e 	bl	1f30 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    4494:	4628      	mov	r0, r5
    4496:	b007      	add	sp, #28
    4498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    449c:	7e33      	ldrb	r3, [r6, #24]
    449e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    44a2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    44a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    44aa:	2301      	movs	r3, #1
    44ac:	7e32      	ldrb	r2, [r6, #24]
    44ae:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    44b0:	4a18      	ldr	r2, [pc, #96]	; (4514 <uarte_0_init+0x108>)
    44b2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    44b6:	2308      	movs	r3, #8
    44b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    44bc:	7a3b      	ldrb	r3, [r7, #8]
    44be:	b953      	cbnz	r3, 44d6 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44c0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    44c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    44c8:	6973      	ldr	r3, [r6, #20]
    44ca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    44ce:	2301      	movs	r3, #1
    44d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44d4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    44da:	bf5c      	itt	pl
    44dc:	f44f 7380 	movpl.w	r3, #256	; 0x100
    44e0:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	06db      	lsls	r3, r3, #27
    44e8:	bf44      	itt	mi
    44ea:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    44ee:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    44f2:	6933      	ldr	r3, [r6, #16]
    44f4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    44f8:	2300      	movs	r3, #0
    44fa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44fe:	2301      	movs	r3, #1
    4500:	60a3      	str	r3, [r4, #8]
    4502:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    4504:	e7c6      	b.n	4494 <uarte_0_init+0x88>
    4506:	bf00      	nop
    4508:	0bad0000 	.word	0x0bad0000
    450c:	00009954 	.word	0x00009954
    4510:	00008ccc 	.word	0x00008ccc
    4514:	50017000 	.word	0x50017000

00004518 <uarte_nrfx_poll_out>:
{
    4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451a:	4604      	mov	r4, r0
    451c:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    451e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4520:	f003 ffbf 	bl	84a2 <k_is_in_isr>
    4524:	b9b0      	cbnz	r0, 4554 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    4526:	4b2e      	ldr	r3, [pc, #184]	; (45e0 <uarte_nrfx_poll_out+0xc8>)
    4528:	781b      	ldrb	r3, [r3, #0]
    452a:	b19b      	cbz	r3, 4554 <uarte_nrfx_poll_out+0x3c>
{
    452c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    452e:	6860      	ldr	r0, [r4, #4]
    4530:	f003 fd41 	bl	7fb6 <is_tx_ready.isra.0>
    4534:	bb00      	cbnz	r0, 4578 <uarte_nrfx_poll_out+0x60>
    4536:	2001      	movs	r0, #1
    4538:	f003 fdaa 	bl	8090 <nrfx_busy_wait>
    453c:	3e01      	subs	r6, #1
    453e:	d1f6      	bne.n	452e <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    4540:	2100      	movs	r1, #0
    4542:	2021      	movs	r0, #33	; 0x21
    4544:	f002 f912 	bl	676c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4548:	e7f0      	b.n	452c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    454a:	f386 8811 	msr	BASEPRI, r6
    454e:	f3bf 8f6f 	isb	sy
}
    4552:	e7f5      	b.n	4540 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    4554:	f04f 0320 	mov.w	r3, #32
    4558:	f3ef 8611 	mrs	r6, BASEPRI
    455c:	f383 8812 	msr	BASEPRI_MAX, r3
    4560:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4564:	6860      	ldr	r0, [r4, #4]
    4566:	4631      	mov	r1, r6
    4568:	f003 fd25 	bl	7fb6 <is_tx_ready.isra.0>
    456c:	b990      	cbnz	r0, 4594 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    456e:	f386 8811 	msr	BASEPRI, r6
    4572:	f3bf 8f6f 	isb	sy
}
    4576:	e7ed      	b.n	4554 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    4578:	f04f 0320 	mov.w	r3, #32
    457c:	f3ef 8611 	mrs	r6, BASEPRI
    4580:	f383 8812 	msr	BASEPRI_MAX, r3
    4584:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4588:	6860      	ldr	r0, [r4, #4]
    458a:	4631      	mov	r1, r6
    458c:	f003 fd13 	bl	7fb6 <is_tx_ready.isra.0>
    4590:	2800      	cmp	r0, #0
    4592:	d0da      	beq.n	454a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    4594:	693b      	ldr	r3, [r7, #16]
    4596:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    4598:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    459a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    459c:	6813      	ldr	r3, [r2, #0]
    459e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    45a2:	2001      	movs	r0, #1
    45a4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45a8:	2000      	movs	r0, #0
    45aa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    45ae:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    45b2:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    45b6:	6852      	ldr	r2, [r2, #4]
    45b8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    45bc:	06d2      	lsls	r2, r2, #27
    45be:	d508      	bpl.n	45d2 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    45c0:	2008      	movs	r0, #8
	return config->uarte_regs;
    45c2:	6862      	ldr	r2, [r4, #4]
    45c4:	6812      	ldr	r2, [r2, #0]
    45c6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    45ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    45ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45d2:	2201      	movs	r2, #1
    45d4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    45d6:	f381 8811 	msr	BASEPRI, r1
    45da:	f3bf 8f6f 	isb	sy
}
    45de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e0:	200011f8 	.word	0x200011f8

000045e4 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    45e4:	2301      	movs	r3, #1
    45e6:	4083      	lsls	r3, r0
{
    45e8:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    45ea:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    45ec:	4a0b      	ldr	r2, [pc, #44]	; (461c <compare_int_lock+0x38>)
    45ee:	e8d2 1fef 	ldaex	r1, [r2]
    45f2:	ea01 0504 	and.w	r5, r1, r4
    45f6:	e8c2 5fe6 	stlex	r6, r5, [r2]
    45fa:	2e00      	cmp	r6, #0
    45fc:	d1f7      	bne.n	45ee <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4602:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4604:	4806      	ldr	r0, [pc, #24]	; (4620 <compare_int_lock+0x3c>)
    4606:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    460a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    460e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4612:	420b      	tst	r3, r1
}
    4614:	bf14      	ite	ne
    4616:	2001      	movne	r0, #1
    4618:	2000      	moveq	r0, #0
    461a:	bd70      	pop	{r4, r5, r6, pc}
    461c:	20000f7c 	.word	0x20000f7c
    4620:	50015000 	.word	0x50015000

00004624 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    4624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4626:	491b      	ldr	r1, [pc, #108]	; (4694 <sys_clock_timeout_handler+0x70>)
{
    4628:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    462a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    462e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4630:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4634:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4638:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    463a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    463e:	d30f      	bcc.n	4660 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4640:	f002 fa0c 	bl	6a5c <sys_clock_announce>
    return p_reg->CC[ch];
    4644:	00a3      	lsls	r3, r4, #2
    4646:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    464a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    464e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4652:	4295      	cmp	r5, r2
    4654:	d11d      	bne.n	4692 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    4656:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    465a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    465e:	e012      	b.n	4686 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4660:	4b0d      	ldr	r3, [pc, #52]	; (4698 <sys_clock_timeout_handler+0x74>)
    4662:	681b      	ldr	r3, [r3, #0]
    4664:	0a1a      	lsrs	r2, r3, #8
    4666:	061b      	lsls	r3, r3, #24
    4668:	195e      	adds	r6, r3, r5
    466a:	4b0c      	ldr	r3, [pc, #48]	; (469c <sys_clock_timeout_handler+0x78>)
    466c:	f142 0700 	adc.w	r7, r2, #0
    4670:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4674:	f002 f9f2 	bl	6a5c <sys_clock_announce>
    return p_reg->CC[ch];
    4678:	4a09      	ldr	r2, [pc, #36]	; (46a0 <sys_clock_timeout_handler+0x7c>)
    467a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    4682:	429d      	cmp	r5, r3
    4684:	d105      	bne.n	4692 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    468a:	4a05      	ldr	r2, [pc, #20]	; (46a0 <sys_clock_timeout_handler+0x7c>)
    468c:	40a3      	lsls	r3, r4
    468e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4694:	20000768 	.word	0x20000768
    4698:	20000f80 	.word	0x20000f80
    469c:	20000770 	.word	0x20000770
    46a0:	50015000 	.word	0x50015000

000046a4 <compare_int_unlock>:
	if (key) {
    46a4:	b1d9      	cbz	r1, 46de <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    46a6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46a8:	4a0d      	ldr	r2, [pc, #52]	; (46e0 <compare_int_unlock+0x3c>)
    46aa:	4083      	lsls	r3, r0
    46ac:	e8d2 cfef 	ldaex	ip, [r2]
    46b0:	ea4c 0c03 	orr.w	ip, ip, r3
    46b4:	e8c2 cfe1 	stlex	r1, ip, [r2]
    46b8:	2900      	cmp	r1, #0
    46ba:	d1f7      	bne.n	46ac <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    46c0:	4a08      	ldr	r2, [pc, #32]	; (46e4 <compare_int_unlock+0x40>)
    46c2:	4083      	lsls	r3, r0
    46c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    46c8:	4b07      	ldr	r3, [pc, #28]	; (46e8 <compare_int_unlock+0x44>)
    46ca:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    46ce:	40c3      	lsrs	r3, r0
    46d0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    46d2:	bf42      	ittt	mi
    46d4:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    46d8:	4b04      	ldrmi	r3, [pc, #16]	; (46ec <compare_int_unlock+0x48>)
    46da:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    46de:	4770      	bx	lr
    46e0:	20000f7c 	.word	0x20000f7c
    46e4:	50015000 	.word	0x50015000
    46e8:	20000f78 	.word	0x20000f78
    46ec:	e000e100 	.word	0xe000e100

000046f0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    46f0:	4b0d      	ldr	r3, [pc, #52]	; (4728 <z_nrf_rtc_timer_read+0x38>)
    46f2:	6818      	ldr	r0, [r3, #0]
    46f4:	0a01      	lsrs	r1, r0, #8
    46f6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    46f8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    46fc:	4b0b      	ldr	r3, [pc, #44]	; (472c <z_nrf_rtc_timer_read+0x3c>)
    46fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4702:	1818      	adds	r0, r3, r0
    4704:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    470c:	d20a      	bcs.n	4724 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    470e:	4b08      	ldr	r3, [pc, #32]	; (4730 <z_nrf_rtc_timer_read+0x40>)
    4710:	e9d3 2300 	ldrd	r2, r3, [r3]
    4714:	4290      	cmp	r0, r2
    4716:	eb71 0303 	sbcs.w	r3, r1, r3
    471a:	d203      	bcs.n	4724 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    471c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4720:	f141 0100 	adc.w	r1, r1, #0
}
    4724:	4770      	bx	lr
    4726:	bf00      	nop
    4728:	20000f80 	.word	0x20000f80
    472c:	50015000 	.word	0x50015000
    4730:	20000770 	.word	0x20000770

00004734 <compare_set>:
{
    4734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4738:	b085      	sub	sp, #20
    473a:	4614      	mov	r4, r2
    473c:	461d      	mov	r5, r3
    473e:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    4740:	f7ff ff50 	bl	45e4 <compare_int_lock>
    4744:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4746:	f7ff ffd3 	bl	46f0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    474a:	42a0      	cmp	r0, r4
    474c:	eb71 0305 	sbcs.w	r3, r1, r5
    4750:	f080 8086 	bcs.w	4860 <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
    4754:	4b49      	ldr	r3, [pc, #292]	; (487c <compare_set+0x148>)
    4756:	1a20      	subs	r0, r4, r0
    4758:	eb65 0101 	sbc.w	r1, r5, r1
    475c:	4298      	cmp	r0, r3
    475e:	f171 0100 	sbcs.w	r1, r1, #0
    4762:	f080 8088 	bcs.w	4876 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
    4766:	4b46      	ldr	r3, [pc, #280]	; (4880 <compare_set+0x14c>)
    4768:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    476c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4770:	429d      	cmp	r5, r3
    4772:	bf08      	it	eq
    4774:	4294      	cmpeq	r4, r2
    4776:	d05e      	beq.n	4836 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    477c:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4780:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
    4782:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
    4786:	f06f 0101 	mvn.w	r1, #1
    478a:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    478e:	f107 0850 	add.w	r8, r7, #80	; 0x50
    4792:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    4796:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    479a:	40bb      	lsls	r3, r7
    479c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    47a0:	fa1f f888 	uxth.w	r8, r8
    47a4:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    47a8:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
    47aa:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    47ae:	4b35      	ldr	r3, [pc, #212]	; (4884 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    47b0:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
     return p_reg->COUNTER;
    47b4:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    47b8:	eba0 000a 	sub.w	r0, r0, sl
    47bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    47c0:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    47c4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    47c6:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    47ca:	d107      	bne.n	47dc <compare_set+0xa8>
    47cc:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    47ce:	2013      	movs	r0, #19
    47d0:	f003 ffde 	bl	8790 <z_impl_k_busy_wait>
    47d4:	f06f 0101 	mvn.w	r1, #1
    47d8:	4b2a      	ldr	r3, [pc, #168]	; (4884 <compare_set+0x150>)
    47da:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
    47dc:	eba1 000a 	sub.w	r0, r1, sl
    47e0:	4430      	add	r0, r6
    47e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    47e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    47ea:	f04f 0000 	mov.w	r0, #0
    47ee:	f8c8 0000 	str.w	r0, [r8]
    47f2:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    47f6:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
    47f8:	bf88      	it	hi
    47fa:	eb0a 060b 	addhi.w	r6, sl, fp
    47fe:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4802:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4806:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    480a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
    480e:	bf88      	it	hi
    4810:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
    4814:	4582      	cmp	sl, r0
    4816:	d006      	beq.n	4826 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
    4818:	1a08      	subs	r0, r1, r0
    481a:	4430      	add	r0, r6
    481c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4820:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4824:	d81a      	bhi.n	485c <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
    4826:	1ab6      	subs	r6, r6, r2
    4828:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    482c:	1936      	adds	r6, r6, r4
    482e:	f145 0300 	adc.w	r3, r5, #0
    4832:	4634      	mov	r4, r6
    4834:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    4836:	4912      	ldr	r1, [pc, #72]	; (4880 <compare_set+0x14c>)
	cc_data[chan].callback = handler;
    4838:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    483a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    483e:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    4842:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    4844:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    4846:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    484a:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    484c:	4638      	mov	r0, r7
    484e:	9901      	ldr	r1, [sp, #4]
    4850:	f7ff ff28 	bl	46a4 <compare_int_unlock>
}
    4854:	4620      	mov	r0, r4
    4856:	b005      	add	sp, #20
    4858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    485c:	4630      	mov	r0, r6
    485e:	e7a9      	b.n	47b4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    4860:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4862:	4a09      	ldr	r2, [pc, #36]	; (4888 <compare_set+0x154>)
    4864:	40bb      	lsls	r3, r7
    4866:	e8d2 0fef 	ldaex	r0, [r2]
    486a:	4318      	orrs	r0, r3
    486c:	e8c2 0fe1 	stlex	r1, r0, [r2]
    4870:	2900      	cmp	r1, #0
    4872:	d0e0      	beq.n	4836 <compare_set+0x102>
    4874:	e7f7      	b.n	4866 <compare_set+0x132>
			return -EINVAL;
    4876:	f06f 0415 	mvn.w	r4, #21
    487a:	e7e7      	b.n	484c <compare_set+0x118>
    487c:	01000001 	.word	0x01000001
    4880:	20000758 	.word	0x20000758
    4884:	50015000 	.word	0x50015000
    4888:	20000f78 	.word	0x20000f78

0000488c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    488c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    488e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4890:	f04f 30ff 	mov.w	r0, #4294967295
    4894:	f04f 31ff 	mov.w	r1, #4294967295
    4898:	4d16      	ldr	r5, [pc, #88]	; (48f4 <sys_clock_driver_init+0x68>)
    489a:	4b17      	ldr	r3, [pc, #92]	; (48f8 <sys_clock_driver_init+0x6c>)
    489c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    48a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    48a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    48a8:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    48ae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    48b2:	4b12      	ldr	r3, [pc, #72]	; (48fc <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    48b4:	2101      	movs	r1, #1
    48b6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    48ba:	2015      	movs	r0, #21
    48bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    48c0:	4622      	mov	r2, r4
    48c2:	f7fe f8d7 	bl	2a74 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    48c6:	2015      	movs	r0, #21
    48c8:	f7fe f8a4 	bl	2a14 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    48cc:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    48ce:	4a0c      	ldr	r2, [pc, #48]	; (4900 <sys_clock_driver_init+0x74>)
    48d0:	60ab      	str	r3, [r5, #8]
    48d2:	602b      	str	r3, [r5, #0]
    48d4:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    48d6:	4b0b      	ldr	r3, [pc, #44]	; (4904 <sys_clock_driver_init+0x78>)
    48d8:	4a0b      	ldr	r2, [pc, #44]	; (4908 <sys_clock_driver_init+0x7c>)
    48da:	9300      	str	r3, [sp, #0]
    48dc:	4620      	mov	r0, r4
    48de:	2300      	movs	r3, #0
    48e0:	9401      	str	r4, [sp, #4]
    48e2:	f7ff ff27 	bl	4734 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    48e6:	4630      	mov	r0, r6
    48e8:	f7ff f802 	bl	38f0 <z_nrf_clock_control_lf_on>

	return 0;
}
    48ec:	4620      	mov	r0, r4
    48ee:	b002      	add	sp, #8
    48f0:	bd70      	pop	{r4, r5, r6, pc}
    48f2:	bf00      	nop
    48f4:	50015000 	.word	0x50015000
    48f8:	20000758 	.word	0x20000758
    48fc:	e000e100 	.word	0xe000e100
    4900:	20000f7c 	.word	0x20000f7c
    4904:	00004625 	.word	0x00004625
    4908:	007fffff 	.word	0x007fffff

0000490c <rtc_nrf_isr>:
{
    490c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4910:	4b31      	ldr	r3, [pc, #196]	; (49d8 <rtc_nrf_isr+0xcc>)
    4912:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4916:	0792      	lsls	r2, r2, #30
    4918:	d50b      	bpl.n	4932 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    491a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    491e:	b142      	cbz	r2, 4932 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4920:	2200      	movs	r2, #0
    4922:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    4926:	4a2d      	ldr	r2, [pc, #180]	; (49dc <rtc_nrf_isr+0xd0>)
    4928:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    492c:	6813      	ldr	r3, [r2, #0]
    492e:	3301      	adds	r3, #1
    4930:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4932:	f04f 0320 	mov.w	r3, #32
    4936:	f3ef 8211 	mrs	r2, BASEPRI
    493a:	f383 8812 	msr	BASEPRI_MAX, r3
    493e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4942:	4c25      	ldr	r4, [pc, #148]	; (49d8 <rtc_nrf_isr+0xcc>)
    4944:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4948:	03db      	lsls	r3, r3, #15
    494a:	d525      	bpl.n	4998 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    494c:	4b24      	ldr	r3, [pc, #144]	; (49e0 <rtc_nrf_isr+0xd4>)
    494e:	e8d3 1fef 	ldaex	r1, [r3]
    4952:	f021 0001 	bic.w	r0, r1, #1
    4956:	e8c3 0fe5 	stlex	r5, r0, [r3]
    495a:	2d00      	cmp	r5, #0
    495c:	d1f7      	bne.n	494e <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    495e:	b911      	cbnz	r1, 4966 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4960:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4964:	b1c3      	cbz	r3, 4998 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4966:	2500      	movs	r5, #0
    4968:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    496c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    4970:	f382 8811 	msr	BASEPRI, r2
    4974:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    4978:	f7ff feba 	bl	46f0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    497c:	f04f 0320 	mov.w	r3, #32
    4980:	f3ef 8211 	mrs	r2, BASEPRI
    4984:	f383 8812 	msr	BASEPRI_MAX, r3
    4988:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    498c:	4b15      	ldr	r3, [pc, #84]	; (49e4 <rtc_nrf_isr+0xd8>)
    498e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4992:	42b0      	cmp	r0, r6
    4994:	41b9      	sbcs	r1, r7
    4996:	d206      	bcs.n	49a6 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
    4998:	f382 8811 	msr	BASEPRI, r2
    499c:	f3bf 8f6f 	isb	sy
}
    49a0:	b003      	add	sp, #12
    49a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    49a6:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    49aa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    49ae:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    49b2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    49b4:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    49b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    49bc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    49c0:	f382 8811 	msr	BASEPRI, r2
    49c4:	f3bf 8f6f 	isb	sy
		if (handler) {
    49c8:	2900      	cmp	r1, #0
    49ca:	d0e9      	beq.n	49a0 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    49cc:	9000      	str	r0, [sp, #0]
    49ce:	4632      	mov	r2, r6
    49d0:	463b      	mov	r3, r7
    49d2:	4628      	mov	r0, r5
    49d4:	4788      	blx	r1
}
    49d6:	e7e3      	b.n	49a0 <rtc_nrf_isr+0x94>
    49d8:	50015000 	.word	0x50015000
    49dc:	20000f80 	.word	0x20000f80
    49e0:	20000f78 	.word	0x20000f78
    49e4:	20000758 	.word	0x20000758

000049e8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49e8:	1c43      	adds	r3, r0, #1
{
    49ea:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49ec:	d020      	beq.n	4a30 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    49ee:	2801      	cmp	r0, #1
    49f0:	dd20      	ble.n	4a34 <sys_clock_set_timeout+0x4c>
    49f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    49f6:	da1f      	bge.n	4a38 <sys_clock_set_timeout+0x50>
    49f8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    49fa:	f7ff fe79 	bl	46f0 <z_nrf_rtc_timer_read>
    49fe:	4b0f      	ldr	r3, [pc, #60]	; (4a3c <sys_clock_set_timeout+0x54>)
    4a00:	e9d3 1300 	ldrd	r1, r3, [r3]
    4a04:	1a42      	subs	r2, r0, r1
		ticks = 0;
    4a06:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4a0a:	bf28      	it	cs
    4a0c:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    4a0e:	480c      	ldr	r0, [pc, #48]	; (4a40 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4a10:	3201      	adds	r2, #1
    4a12:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    4a14:	4282      	cmp	r2, r0
    4a16:	bf28      	it	cs
    4a18:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    4a1a:	2000      	movs	r0, #0
    4a1c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4a1e:	4909      	ldr	r1, [pc, #36]	; (4a44 <sys_clock_set_timeout+0x5c>)
    4a20:	9001      	str	r0, [sp, #4]
    4a22:	9100      	str	r1, [sp, #0]
    4a24:	f143 0300 	adc.w	r3, r3, #0
    4a28:	f7ff fe84 	bl	4734 <compare_set>
}
    4a2c:	b002      	add	sp, #8
    4a2e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4a30:	4803      	ldr	r0, [pc, #12]	; (4a40 <sys_clock_set_timeout+0x58>)
    4a32:	e7e1      	b.n	49f8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4a34:	2400      	movs	r4, #0
    4a36:	e7e0      	b.n	49fa <sys_clock_set_timeout+0x12>
    4a38:	4c01      	ldr	r4, [pc, #4]	; (4a40 <sys_clock_set_timeout+0x58>)
    4a3a:	e7de      	b.n	49fa <sys_clock_set_timeout+0x12>
    4a3c:	20000768 	.word	0x20000768
    4a40:	007fffff 	.word	0x007fffff
    4a44:	00004625 	.word	0x00004625

00004a48 <sys_clock_elapsed>:
{
    4a48:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4a4a:	f7ff fe51 	bl	46f0 <z_nrf_rtc_timer_read>
    4a4e:	4b02      	ldr	r3, [pc, #8]	; (4a58 <sys_clock_elapsed+0x10>)
    4a50:	681b      	ldr	r3, [r3, #0]
}
    4a52:	1ac0      	subs	r0, r0, r3
    4a54:	bd08      	pop	{r3, pc}
    4a56:	bf00      	nop
    4a58:	20000768 	.word	0x20000768

00004a5c <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4a5c:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    4a64:	4e5b      	ldr	r6, [pc, #364]	; (4bd4 <pinctrl_configure_pins+0x178>)
    4a66:	4f5c      	ldr	r7, [pc, #368]	; (4bd8 <pinctrl_configure_pins+0x17c>)
    4a68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4a6c:	4281      	cmp	r1, r0
    4a6e:	d102      	bne.n	4a76 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4a70:	2000      	movs	r0, #0
}
    4a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4a76:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4a78:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4a7c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    4a80:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4a82:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    4a86:	bf08      	it	eq
    4a88:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    4a8c:	2c22      	cmp	r4, #34	; 0x22
    4a8e:	f200 809d 	bhi.w	4bcc <pinctrl_configure_pins+0x170>
    4a92:	e8df f004 	tbb	[pc, r4]
    4a96:	2312      	.short	0x2312
    4a98:	3e2b4228 	.word	0x3e2b4228
    4a9c:	9b9b9b42 	.word	0x9b9b9b42
    4aa0:	9b72459b 	.word	0x9b72459b
    4aa4:	9b9b9b9b 	.word	0x9b9b9b9b
    4aa8:	9b9b9b9b 	.word	0x9b9b9b9b
    4aac:	83807d75 	.word	0x83807d75
    4ab0:	869b9b9b 	.word	0x869b9b9b
    4ab4:	95928f8c 	.word	0x95928f8c
    4ab8:	98          	.byte	0x98
    4ab9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    4aba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    4abe:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    4ac2:	f1b8 0f01 	cmp.w	r8, #1
    4ac6:	bf14      	ite	ne
    4ac8:	46b6      	movne	lr, r6
    4aca:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    4acc:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ad0:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    4ad4:	f8ce 4008 	str.w	r4, [lr, #8]
    4ad8:	2401      	movs	r4, #1
    4ada:	e002      	b.n	4ae2 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    4adc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4ae0:	2400      	movs	r4, #0
    4ae2:	46a6      	mov	lr, r4
    4ae4:	e023      	b.n	4b2e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    4ae6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4aea:	e7e8      	b.n	4abe <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4aec:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4aee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    4af2:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    4af6:	f1b9 0f01 	cmp.w	r9, #1
    4afa:	bf14      	ite	ne
    4afc:	46b0      	movne	r8, r6
    4afe:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    4b00:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4b04:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    4b08:	f8c8 e00c 	str.w	lr, [r8, #12]
    4b0c:	f04f 0e01 	mov.w	lr, #1
    4b10:	e00d      	b.n	4b2e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    4b12:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    4b16:	2401      	movs	r4, #1
    4b18:	e7eb      	b.n	4af2 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    4b1a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4b1e:	e7df      	b.n	4ae0 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4b20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    4b24:	2d00      	cmp	r5, #0
    4b26:	d1db      	bne.n	4ae0 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4b28:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    4b2a:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4b2c:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4b2e:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    4b32:	f003 091f 	and.w	r9, r3, #31
    4b36:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4b3a:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    4b3e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4b42:	bf1c      	itt	ne
    4b44:	2401      	movne	r4, #1
    4b46:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    4b4a:	2b01      	cmp	r3, #1
    4b4c:	bf0c      	ite	eq
    4b4e:	46b8      	moveq	r8, r7
    4b50:	46b0      	movne	r8, r6
    4b52:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4b56:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    4b5a:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    4b5e:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4b62:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4b64:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    4b68:	ea43 030e 	orr.w	r3, r3, lr
    4b6c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4b70:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    4b74:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4b78:	e778      	b.n	4a6c <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    4b7a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4b7e:	e7d1      	b.n	4b24 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    4b80:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    4b84:	6804      	ldr	r4, [r0, #0]
    4b86:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    4b8a:	2c00      	cmp	r4, #0
    4b8c:	d0c3      	beq.n	4b16 <pinctrl_configure_pins+0xba>
    4b8e:	e796      	b.n	4abe <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    4b90:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    4b94:	e7f6      	b.n	4b84 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    4b96:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    4b9a:	e7f3      	b.n	4b84 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4b9c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    4ba0:	e7f0      	b.n	4b84 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    4ba2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4ba6:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4ba8:	f04f 0e00 	mov.w	lr, #0
    4bac:	e7bf      	b.n	4b2e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    4bae:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    4bb2:	e784      	b.n	4abe <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    4bb4:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    4bb8:	e7f5      	b.n	4ba6 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    4bba:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    4bbe:	e7f2      	b.n	4ba6 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    4bc0:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    4bc4:	e7ef      	b.n	4ba6 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    4bc6:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    4bca:	e7ec      	b.n	4ba6 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    4bcc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4bd0:	e74f      	b.n	4a72 <pinctrl_configure_pins+0x16>
    4bd2:	bf00      	nop
    4bd4:	50842500 	.word	0x50842500
    4bd8:	50842800 	.word	0x50842800

00004bdc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    4bde:	f7fd f8c7 	bl	1d70 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4be2:	4b07      	ldr	r3, [pc, #28]	; (4c00 <k_sys_fatal_error_handler+0x24>)
    4be4:	9305      	str	r3, [sp, #20]
    4be6:	2302      	movs	r3, #2
    4be8:	9304      	str	r3, [sp, #16]
    4bea:	4806      	ldr	r0, [pc, #24]	; (4c04 <k_sys_fatal_error_handler+0x28>)
    4bec:	2300      	movs	r3, #0
    4bee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4bf2:	aa04      	add	r2, sp, #16
    4bf4:	f7fd f99c 	bl	1f30 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    4bf8:	2000      	movs	r0, #0
    4bfa:	f7fe fb41 	bl	3280 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4bfe:	bf00      	nop
    4c00:	0000998d 	.word	0x0000998d
    4c04:	00008c74 	.word	0x00008c74

00004c08 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4c08:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4c0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4c10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4c14:	2a07      	cmp	r2, #7
    4c16:	d105      	bne.n	4c24 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    4c18:	3b02      	subs	r3, #2
    4c1a:	2b03      	cmp	r3, #3
    4c1c:	d802      	bhi.n	4c24 <nrf53_errata_42+0x1c>
    4c1e:	4a02      	ldr	r2, [pc, #8]	; (4c28 <nrf53_errata_42+0x20>)
    4c20:	5cd0      	ldrb	r0, [r2, r3]
    4c22:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    4c24:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    4c26:	4770      	bx	lr
    4c28:	000099ae 	.word	0x000099ae

00004c2c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    4c2c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c30:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    4c34:	4b03      	ldr	r3, [pc, #12]	; (4c44 <SystemCoreClockUpdate+0x18>)
    4c36:	f002 0203 	and.w	r2, r2, #3
    4c3a:	40d3      	lsrs	r3, r2
    4c3c:	4a02      	ldr	r2, [pc, #8]	; (4c48 <SystemCoreClockUpdate+0x1c>)
    4c3e:	6013      	str	r3, [r2, #0]
#endif
}
    4c40:	4770      	bx	lr
    4c42:	bf00      	nop
    4c44:	07a12000 	.word	0x07a12000
    4c48:	200000f4 	.word	0x200000f4

00004c4c <SystemInit>:

void SystemInit(void)
{
    4c4c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    4c4e:	f7ff ffdb 	bl	4c08 <nrf53_errata_42>
    4c52:	b158      	cbz	r0, 4c6c <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    4c54:	4b4f      	ldr	r3, [pc, #316]	; (4d94 <SystemInit+0x148>)
    4c56:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    4c5a:	b93a      	cbnz	r2, 4c6c <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    4c5c:	210d      	movs	r1, #13
    4c5e:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    4c62:	2101      	movs	r1, #1
    4c64:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    4c68:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    4c6c:	2200      	movs	r2, #0
    4c6e:	00d3      	lsls	r3, r2, #3
    4c70:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4c74:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    4c78:	3101      	adds	r1, #1
    4c7a:	d007      	beq.n	4c8c <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4c7c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4c80:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4c82:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4c86:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4c88:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4c8a:	d1f0      	bne.n	4c6e <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    4c8c:	f7ff ffbc 	bl	4c08 <nrf53_errata_42>
    4c90:	2800      	cmp	r0, #0
    4c92:	d176      	bne.n	4d82 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    4c94:	f7ff ffb8 	bl	4c08 <nrf53_errata_42>
    4c98:	b140      	cbz	r0, 4cac <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    4c9a:	4b3f      	ldr	r3, [pc, #252]	; (4d98 <SystemInit+0x14c>)
    4c9c:	4a3f      	ldr	r2, [pc, #252]	; (4d9c <SystemInit+0x150>)
    4c9e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    4ca2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ca6:	2201      	movs	r2, #1
    4ca8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4cac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4cb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4cb8:	2a07      	cmp	r2, #7
    4cba:	d109      	bne.n	4cd0 <SystemInit+0x84>
                {
                    switch(var2)
    4cbc:	3b02      	subs	r3, #2
    4cbe:	2b03      	cmp	r3, #3
    4cc0:	d806      	bhi.n	4cd0 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    4cc2:	4a37      	ldr	r2, [pc, #220]	; (4da0 <SystemInit+0x154>)
    4cc4:	5cd3      	ldrb	r3, [r2, r3]
    4cc6:	b11b      	cbz	r3, 4cd0 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    4cc8:	2200      	movs	r2, #0
    4cca:	4b36      	ldr	r3, [pc, #216]	; (4da4 <SystemInit+0x158>)
    4ccc:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    4cd0:	f7ff ff9a 	bl	4c08 <nrf53_errata_42>
    4cd4:	b150      	cbz	r0, 4cec <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    4cd6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4cde:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    4ce0:	bf42      	ittt	mi
    4ce2:	2200      	movmi	r2, #0
    4ce4:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    4ce8:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4cec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4cf0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4cf4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    4cf8:	2a07      	cmp	r2, #7
    4cfa:	d109      	bne.n	4d10 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    4cfc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4d04:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    4d06:	bf44      	itt	mi
    4d08:	f06f 0201 	mvnmi.w	r2, #1
    4d0c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    4d10:	f7ff ff7a 	bl	4c08 <nrf53_errata_42>
    4d14:	b118      	cbz	r0, 4d1e <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    4d16:	2265      	movs	r2, #101	; 0x65
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <SystemInit+0x148>)
    4d1a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4d1e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4d22:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4d26:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    4d2a:	2a07      	cmp	r2, #7
    4d2c:	d116      	bne.n	4d5c <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    4d2e:	4b1d      	ldr	r3, [pc, #116]	; (4da4 <SystemInit+0x158>)
    4d30:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    4d34:	2b00      	cmp	r3, #0
    4d36:	da11      	bge.n	4d5c <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    4d38:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d3c:	2203      	movs	r2, #3
    4d3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    4d42:	2201      	movs	r2, #1
    4d44:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    4d46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4d4a:	2a00      	cmp	r2, #0
    4d4c:	d0fb      	beq.n	4d46 <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    4d4e:	2200      	movs	r2, #0
    4d50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    4d54:	2201      	movs	r2, #1
    4d56:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    4d58:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    4d5c:	4a12      	ldr	r2, [pc, #72]	; (4da8 <SystemInit+0x15c>)
    4d5e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4d62:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    4d66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    4d6a:	4a10      	ldr	r2, [pc, #64]	; (4dac <SystemInit+0x160>)
    4d6c:	4b10      	ldr	r3, [pc, #64]	; (4db0 <SystemInit+0x164>)
    4d6e:	6811      	ldr	r1, [r2, #0]
    4d70:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    4d74:	69d2      	ldr	r2, [r2, #28]
    4d76:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    4d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    4d7e:	f7ff bf55 	b.w	4c2c <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    4d82:	2229      	movs	r2, #41	; 0x29
    4d84:	4b03      	ldr	r3, [pc, #12]	; (4d94 <SystemInit+0x148>)
    4d86:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    4d8a:	2203      	movs	r2, #3
    4d8c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    4d90:	e780      	b.n	4c94 <SystemInit+0x48>
    4d92:	bf00      	nop
    4d94:	50004000 	.word	0x50004000
    4d98:	50039000 	.word	0x50039000
    4d9c:	beef0044 	.word	0xbeef0044
    4da0:	000099aa 	.word	0x000099aa
    4da4:	50032000 	.word	0x50032000
    4da8:	e000ed00 	.word	0xe000ed00
    4dac:	00ff8000 	.word	0x00ff8000
    4db0:	50006000 	.word	0x50006000

00004db4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4db4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4db6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4db8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4dba:	fab2 f382 	clz	r3, r2
    4dbe:	f1c3 031f 	rsb	r3, r3, #31
    4dc2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4dc4:	fa05 f403 	lsl.w	r4, r5, r3
    4dc8:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4dcc:	e8d0 6fef 	ldaex	r6, [r0]
    4dd0:	4296      	cmp	r6, r2
    4dd2:	d104      	bne.n	4dde <nrfx_flag32_alloc+0x2a>
    4dd4:	e8c0 4fec 	stlex	ip, r4, [r0]
    4dd8:	f1bc 0f00 	cmp.w	ip, #0
    4ddc:	d1f6      	bne.n	4dcc <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4dde:	d1eb      	bne.n	4db8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4de0:	4801      	ldr	r0, [pc, #4]	; (4de8 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    4de2:	700b      	strb	r3, [r1, #0]
}
    4de4:	bd70      	pop	{r4, r5, r6, pc}
    4de6:	bf00      	nop
    4de8:	0bad0000 	.word	0x0bad0000

00004dec <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4dec:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4dee:	6803      	ldr	r3, [r0, #0]
    4df0:	40cb      	lsrs	r3, r1
    4df2:	07db      	lsls	r3, r3, #31
    4df4:	d410      	bmi.n	4e18 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4df6:	2301      	movs	r3, #1
    4df8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4dfa:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4dfc:	ea43 0102 	orr.w	r1, r3, r2
    4e00:	e8d0 4fef 	ldaex	r4, [r0]
    4e04:	4294      	cmp	r4, r2
    4e06:	d104      	bne.n	4e12 <nrfx_flag32_free+0x26>
    4e08:	e8c0 1fec 	stlex	ip, r1, [r0]
    4e0c:	f1bc 0f00 	cmp.w	ip, #0
    4e10:	d1f6      	bne.n	4e00 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4e12:	d1f2      	bne.n	4dfa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4e14:	4801      	ldr	r0, [pc, #4]	; (4e1c <nrfx_flag32_free+0x30>)
}
    4e16:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e18:	4801      	ldr	r0, [pc, #4]	; (4e20 <nrfx_flag32_free+0x34>)
    4e1a:	e7fc      	b.n	4e16 <nrfx_flag32_free+0x2a>
    4e1c:	0bad0000 	.word	0x0bad0000
    4e20:	0bad0004 	.word	0x0bad0004

00004e24 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4e24:	4b04      	ldr	r3, [pc, #16]	; (4e38 <nrfx_clock_init+0x14>)
    4e26:	791a      	ldrb	r2, [r3, #4]
    4e28:	b922      	cbnz	r2, 4e34 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4e2a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4e2c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4e2e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4e30:	4802      	ldr	r0, [pc, #8]	; (4e3c <nrfx_clock_init+0x18>)
    4e32:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4e34:	4802      	ldr	r0, [pc, #8]	; (4e40 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4e36:	4770      	bx	lr
    4e38:	20000f84 	.word	0x20000f84
    4e3c:	0bad0000 	.word	0x0bad0000
    4e40:	0bad000c 	.word	0x0bad000c

00004e44 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4e48:	b510      	push	{r4, lr}
    4e4a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4e4e:	b152      	cbz	r2, 4e66 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e50:	2000      	movs	r0, #0
    4e52:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4e56:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4e5a:	2201      	movs	r2, #1
    4e5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4e60:	4b23      	ldr	r3, [pc, #140]	; (4ef0 <nrfx_power_clock_irq_handler+0xac>)
    4e62:	681b      	ldr	r3, [r3, #0]
    4e64:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e66:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4e6e:	b18a      	cbz	r2, 4e94 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e70:	2200      	movs	r2, #0
    4e72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4e76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4e7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4e7e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4e82:	f002 0203 	and.w	r2, r2, #3
    4e86:	2a01      	cmp	r2, #1
    4e88:	f04f 0102 	mov.w	r1, #2
    4e8c:	d128      	bne.n	4ee0 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e8e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e92:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e98:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    4e9c:	b162      	cbz	r2, 4eb8 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e9e:	2200      	movs	r2, #0
    4ea0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4ea4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    4ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
    4eac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    4eb0:	4b0f      	ldr	r3, [pc, #60]	; (4ef0 <nrfx_power_clock_irq_handler+0xac>)
    4eb2:	2004      	movs	r0, #4
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4eb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ebc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    4ec0:	b1aa      	cbz	r2, 4eee <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ec2:	2200      	movs	r2, #0
    4ec4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ec8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    4ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ed0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4ed4:	4b06      	ldr	r3, [pc, #24]	; (4ef0 <nrfx_power_clock_irq_handler+0xac>)
    4ed6:	2005      	movs	r0, #5
    }
#endif
}
    4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	4718      	bx	r3
    4ee0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4ee4:	4b02      	ldr	r3, [pc, #8]	; (4ef0 <nrfx_power_clock_irq_handler+0xac>)
    4ee6:	2001      	movs	r0, #1
    4ee8:	681b      	ldr	r3, [r3, #0]
    4eea:	4798      	blx	r3
    4eec:	e7d2      	b.n	4e94 <nrfx_power_clock_irq_handler+0x50>
}
    4eee:	bd10      	pop	{r4, pc}
    4ef0:	20000f84 	.word	0x20000f84

00004ef4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4ef4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4ef6:	4801      	ldr	r0, [pc, #4]	; (4efc <nrfx_dppi_channel_alloc+0x8>)
    4ef8:	f7ff bf5c 	b.w	4db4 <nrfx_flag32_alloc>
    4efc:	200000f8 	.word	0x200000f8

00004f00 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4f00:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4f02:	f003 021f 	and.w	r2, r3, #31
    4f06:	6002      	str	r2, [r0, #0]
}
    4f08:	4a03      	ldr	r2, [pc, #12]	; (4f18 <nrf_gpio_pin_port_decode+0x18>)
    4f0a:	4804      	ldr	r0, [pc, #16]	; (4f1c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    4f0c:	095b      	lsrs	r3, r3, #5
}
    4f0e:	2b01      	cmp	r3, #1
    4f10:	bf18      	it	ne
    4f12:	4610      	movne	r0, r2
    4f14:	4770      	bx	lr
    4f16:	bf00      	nop
    4f18:	50842500 	.word	0x50842500
    4f1c:	50842800 	.word	0x50842800

00004f20 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4f20:	4b03      	ldr	r3, [pc, #12]	; (4f30 <pin_in_use_by_te+0x10>)
    4f22:	3008      	adds	r0, #8
    4f24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4f28:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4f2c:	4770      	bx	lr
    4f2e:	bf00      	nop
    4f30:	200000fc 	.word	0x200000fc

00004f34 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4f34:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f36:	4c0d      	ldr	r4, [pc, #52]	; (4f6c <call_handler+0x38>)
    4f38:	f100 0308 	add.w	r3, r0, #8
    4f3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4f40:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f42:	05da      	lsls	r2, r3, #23
{
    4f44:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f46:	d507      	bpl.n	4f58 <call_handler+0x24>
    4f48:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4f4c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4f50:	6852      	ldr	r2, [r2, #4]
    4f52:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4f56:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4f58:	68a3      	ldr	r3, [r4, #8]
    4f5a:	b12b      	cbz	r3, 4f68 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4f5c:	4631      	mov	r1, r6
    4f5e:	4628      	mov	r0, r5
    4f60:	68e2      	ldr	r2, [r4, #12]
    }
}
    4f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4f66:	4718      	bx	r3
}
    4f68:	bd70      	pop	{r4, r5, r6, pc}
    4f6a:	bf00      	nop
    4f6c:	200000fc 	.word	0x200000fc

00004f70 <release_handler>:
{
    4f70:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4f72:	4a12      	ldr	r2, [pc, #72]	; (4fbc <release_handler+0x4c>)
    4f74:	3008      	adds	r0, #8
    4f76:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4f7a:	05d9      	lsls	r1, r3, #23
    4f7c:	d51b      	bpl.n	4fb6 <release_handler+0x46>
    4f7e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4f82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4f86:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4f8a:	2000      	movs	r0, #0
    4f8c:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4f90:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4f94:	f413 7f80 	tst.w	r3, #256	; 0x100
    4f98:	d003      	beq.n	4fa2 <release_handler+0x32>
    4f9a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4f9e:	4299      	cmp	r1, r3
    4fa0:	d009      	beq.n	4fb6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4fa2:	3001      	adds	r0, #1
    4fa4:	2830      	cmp	r0, #48	; 0x30
    4fa6:	d1f3      	bne.n	4f90 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4fa8:	2300      	movs	r3, #0
    4faa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4fae:	4804      	ldr	r0, [pc, #16]	; (4fc0 <release_handler+0x50>)
}
    4fb0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4fb2:	f7ff bf1b 	b.w	4dec <nrfx_flag32_free>
}
    4fb6:	bc10      	pop	{r4}
    4fb8:	4770      	bx	lr
    4fba:	bf00      	nop
    4fbc:	200000fc 	.word	0x200000fc
    4fc0:	20000170 	.word	0x20000170

00004fc4 <pin_handler_trigger_uninit>:
{
    4fc4:	b538      	push	{r3, r4, r5, lr}
    4fc6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4fc8:	f7ff ffaa 	bl	4f20 <pin_in_use_by_te>
    4fcc:	4c0b      	ldr	r4, [pc, #44]	; (4ffc <pin_handler_trigger_uninit+0x38>)
    4fce:	f102 0508 	add.w	r5, r2, #8
    4fd2:	b160      	cbz	r0, 4fee <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4fd4:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4fd6:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4fda:	0b5b      	lsrs	r3, r3, #13
    4fdc:	009b      	lsls	r3, r3, #2
    4fde:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4fe2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4fe6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4fea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4fee:	4610      	mov	r0, r2
    4ff0:	f7ff ffbe 	bl	4f70 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4ff4:	2300      	movs	r3, #0
    4ff6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4ffa:	bd38      	pop	{r3, r4, r5, pc}
    4ffc:	200000fc 	.word	0x200000fc

00005000 <nrfx_gpiote_input_configure>:
{
    5000:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5004:	4604      	mov	r4, r0
    5006:	4690      	mov	r8, r2
    5008:	461d      	mov	r5, r3
    if (p_input_config)
    500a:	b301      	cbz	r1, 504e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    500c:	4e4f      	ldr	r6, [pc, #316]	; (514c <nrfx_gpiote_input_configure+0x14c>)
    500e:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5012:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5016:	079b      	lsls	r3, r3, #30
    5018:	d502      	bpl.n	5020 <nrfx_gpiote_input_configure+0x20>
    501a:	f7ff ff81 	bl	4f20 <pin_in_use_by_te>
    501e:	bb28      	cbnz	r0, 506c <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5020:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5022:	4620      	mov	r0, r4
    5024:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5028:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    502c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5030:	f10d 020f 	add.w	r2, sp, #15
    5034:	460b      	mov	r3, r1
    5036:	f10d 010e 	add.w	r1, sp, #14
    503a:	f003 f961 	bl	8300 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    503e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5042:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5046:	f043 0301 	orr.w	r3, r3, #1
    504a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    504e:	f1b8 0f00 	cmp.w	r8, #0
    5052:	d02d      	beq.n	50b0 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5054:	4e3d      	ldr	r6, [pc, #244]	; (514c <nrfx_gpiote_input_configure+0x14c>)
    5056:	f104 0708 	add.w	r7, r4, #8
    505a:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    505e:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    5062:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5064:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    5068:	d502      	bpl.n	5070 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    506a:	b1cb      	cbz	r3, 50a0 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    506c:	4838      	ldr	r0, [pc, #224]	; (5150 <nrfx_gpiote_input_configure+0x150>)
    506e:	e021      	b.n	50b4 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5070:	f021 0120 	bic.w	r1, r1, #32
    5074:	04c9      	lsls	r1, r1, #19
    5076:	0cc9      	lsrs	r1, r1, #19
    5078:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    507c:	b183      	cbz	r3, 50a0 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    507e:	2803      	cmp	r0, #3
    5080:	d8f4      	bhi.n	506c <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5082:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5086:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    508a:	4662      	mov	r2, ip
    508c:	0092      	lsls	r2, r2, #2
    508e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    5092:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    5096:	b980      	cbnz	r0, 50ba <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    5098:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    509c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    50a0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    50a4:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    50a8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    50ac:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    50b0:	bb1d      	cbnz	r5, 50fa <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    50b2:	4828      	ldr	r0, [pc, #160]	; (5154 <nrfx_gpiote_input_configure+0x154>)
}
    50b4:	b004      	add	sp, #16
    50b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    50ba:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    50be:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    50c2:	f023 0303 	bic.w	r3, r3, #3
    50c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    50ca:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    50ce:	f041 0120 	orr.w	r1, r1, #32
    50d2:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    50d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    50da:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    50de:	0223      	lsls	r3, r4, #8
    50e0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    50e4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    50e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    50ec:	ea43 030e 	orr.w	r3, r3, lr
    50f0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    50f4:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    50f8:	e7d2      	b.n	50a0 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    50fa:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    50fc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5100:	f7ff ff36 	bl	4f70 <release_handler>
    if (!handler)
    5104:	2e00      	cmp	r6, #0
    5106:	d0d4      	beq.n	50b2 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5108:	4d10      	ldr	r5, [pc, #64]	; (514c <nrfx_gpiote_input_configure+0x14c>)
    510a:	e9d5 2300 	ldrd	r2, r3, [r5]
    510e:	4296      	cmp	r6, r2
    5110:	d101      	bne.n	5116 <nrfx_gpiote_input_configure+0x116>
    5112:	429f      	cmp	r7, r3
    5114:	d018      	beq.n	5148 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5116:	4810      	ldr	r0, [pc, #64]	; (5158 <nrfx_gpiote_input_configure+0x158>)
    5118:	f10d 010f 	add.w	r1, sp, #15
    511c:	f7ff fe4a 	bl	4db4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5120:	4b0c      	ldr	r3, [pc, #48]	; (5154 <nrfx_gpiote_input_configure+0x154>)
    5122:	4298      	cmp	r0, r3
    5124:	d1c6      	bne.n	50b4 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    5126:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    512a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    512e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5130:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5132:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    5136:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    513a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5142:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5146:	e7b4      	b.n	50b2 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5148:	2200      	movs	r2, #0
    514a:	e7ee      	b.n	512a <nrfx_gpiote_input_configure+0x12a>
    514c:	200000fc 	.word	0x200000fc
    5150:	0bad0004 	.word	0x0bad0004
    5154:	0bad0000 	.word	0x0bad0000
    5158:	20000170 	.word	0x20000170

0000515c <nrfx_gpiote_output_configure>:
{
    515c:	b5f0      	push	{r4, r5, r6, r7, lr}
    515e:	4604      	mov	r4, r0
    5160:	4615      	mov	r5, r2
    5162:	b085      	sub	sp, #20
    if (p_config)
    5164:	b319      	cbz	r1, 51ae <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5166:	4e34      	ldr	r6, [pc, #208]	; (5238 <nrfx_gpiote_output_configure+0xdc>)
    5168:	f100 0708 	add.w	r7, r0, #8
    516c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5170:	0793      	lsls	r3, r2, #30
    5172:	d403      	bmi.n	517c <nrfx_gpiote_output_configure+0x20>
    5174:	f7ff fed4 	bl	4f20 <pin_in_use_by_te>
    5178:	2800      	cmp	r0, #0
    517a:	d15a      	bne.n	5232 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    517c:	f012 0f1c 	tst.w	r2, #28
    5180:	d002      	beq.n	5188 <nrfx_gpiote_output_configure+0x2c>
    5182:	784b      	ldrb	r3, [r1, #1]
    5184:	2b01      	cmp	r3, #1
    5186:	d054      	beq.n	5232 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5188:	2301      	movs	r3, #1
    518a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    518e:	2300      	movs	r3, #0
    5190:	1c4a      	adds	r2, r1, #1
    5192:	e9cd 1300 	strd	r1, r3, [sp]
    5196:	4620      	mov	r0, r4
    5198:	1c8b      	adds	r3, r1, #2
    519a:	f10d 010f 	add.w	r1, sp, #15
    519e:	f003 f8af 	bl	8300 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    51a2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    51a6:	f043 0303 	orr.w	r3, r3, #3
    51aa:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    51ae:	b915      	cbnz	r5, 51b6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    51b0:	4822      	ldr	r0, [pc, #136]	; (523c <nrfx_gpiote_output_configure+0xe0>)
}
    51b2:	b005      	add	sp, #20
    51b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    51b6:	4e20      	ldr	r6, [pc, #128]	; (5238 <nrfx_gpiote_output_configure+0xdc>)
    51b8:	f104 0708 	add.w	r7, r4, #8
    51bc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    51c0:	0783      	lsls	r3, r0, #30
    51c2:	d536      	bpl.n	5232 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    51c4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    51c8:	2300      	movs	r3, #0
    51ca:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    51cc:	f020 0020 	bic.w	r0, r0, #32
    51d0:	0089      	lsls	r1, r1, #2
    51d2:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    51d6:	04c0      	lsls	r0, r0, #19
    51d8:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    51dc:	0cc0      	lsrs	r0, r0, #19
    51de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    51e2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    51e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    51ea:	786a      	ldrb	r2, [r5, #1]
    51ec:	2a00      	cmp	r2, #0
    51ee:	d0df      	beq.n	51b0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    51f0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    51f4:	78ad      	ldrb	r5, [r5, #2]
    51f6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    51fa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    51fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5202:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5206:	0223      	lsls	r3, r4, #8
    5208:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    520c:	0412      	lsls	r2, r2, #16
    520e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5212:	ea43 030e 	orr.w	r3, r3, lr
    5216:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5218:	052a      	lsls	r2, r5, #20
    521a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    521e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5222:	4313      	orrs	r3, r2
    5224:	f040 0020 	orr.w	r0, r0, #32
    5228:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    522c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5230:	e7be      	b.n	51b0 <nrfx_gpiote_output_configure+0x54>
{
    5232:	4803      	ldr	r0, [pc, #12]	; (5240 <nrfx_gpiote_output_configure+0xe4>)
    5234:	e7bd      	b.n	51b2 <nrfx_gpiote_output_configure+0x56>
    5236:	bf00      	nop
    5238:	200000fc 	.word	0x200000fc
    523c:	0bad0000 	.word	0x0bad0000
    5240:	0bad0004 	.word	0x0bad0004

00005244 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5244:	4b01      	ldr	r3, [pc, #4]	; (524c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5246:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    524a:	4770      	bx	lr
    524c:	200000fc 	.word	0x200000fc

00005250 <nrfx_gpiote_channel_get>:
{
    5250:	b508      	push	{r3, lr}
    5252:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5254:	f7ff fe64 	bl	4f20 <pin_in_use_by_te>
    5258:	b138      	cbz	r0, 526a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    525a:	4b05      	ldr	r3, [pc, #20]	; (5270 <nrfx_gpiote_channel_get+0x20>)
    525c:	3208      	adds	r2, #8
    525e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    5262:	4804      	ldr	r0, [pc, #16]	; (5274 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5264:	0b5b      	lsrs	r3, r3, #13
    5266:	700b      	strb	r3, [r1, #0]
}
    5268:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    526a:	4803      	ldr	r0, [pc, #12]	; (5278 <nrfx_gpiote_channel_get+0x28>)
    526c:	e7fc      	b.n	5268 <nrfx_gpiote_channel_get+0x18>
    526e:	bf00      	nop
    5270:	200000fc 	.word	0x200000fc
    5274:	0bad0000 	.word	0x0bad0000
    5278:	0bad0004 	.word	0x0bad0004

0000527c <nrfx_gpiote_init>:
{
    527c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    527e:	4c0f      	ldr	r4, [pc, #60]	; (52bc <nrfx_gpiote_init+0x40>)
    5280:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5284:	b9bd      	cbnz	r5, 52b6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5286:	2260      	movs	r2, #96	; 0x60
    5288:	4629      	mov	r1, r5
    528a:	f104 0010 	add.w	r0, r4, #16
    528e:	f002 fcf4 	bl	7c7a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5292:	200d      	movs	r0, #13
    5294:	f7fd fbbe 	bl	2a14 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5298:	4b09      	ldr	r3, [pc, #36]	; (52c0 <nrfx_gpiote_init+0x44>)
    return err_code;
    529a:	480a      	ldr	r0, [pc, #40]	; (52c4 <nrfx_gpiote_init+0x48>)
    529c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    52a0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    52a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    52a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    52ac:	2301      	movs	r3, #1
    52ae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    52b2:	6763      	str	r3, [r4, #116]	; 0x74
}
    52b4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    52b6:	4804      	ldr	r0, [pc, #16]	; (52c8 <nrfx_gpiote_init+0x4c>)
    52b8:	e7fc      	b.n	52b4 <nrfx_gpiote_init+0x38>
    52ba:	bf00      	nop
    52bc:	200000fc 	.word	0x200000fc
    52c0:	5000d000 	.word	0x5000d000
    52c4:	0bad0000 	.word	0x0bad0000
    52c8:	0bad0005 	.word	0x0bad0005

000052cc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    52cc:	4b03      	ldr	r3, [pc, #12]	; (52dc <nrfx_gpiote_is_init+0x10>)
    52ce:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    52d2:	3800      	subs	r0, #0
    52d4:	bf18      	it	ne
    52d6:	2001      	movne	r0, #1
    52d8:	4770      	bx	lr
    52da:	bf00      	nop
    52dc:	200000fc 	.word	0x200000fc

000052e0 <nrfx_gpiote_channel_free>:
{
    52e0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    52e2:	4801      	ldr	r0, [pc, #4]	; (52e8 <nrfx_gpiote_channel_free+0x8>)
    52e4:	f7ff bd82 	b.w	4dec <nrfx_flag32_free>
    52e8:	2000016c 	.word	0x2000016c

000052ec <nrfx_gpiote_channel_alloc>:
{
    52ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    52ee:	4801      	ldr	r0, [pc, #4]	; (52f4 <nrfx_gpiote_channel_alloc+0x8>)
    52f0:	f7ff bd60 	b.w	4db4 <nrfx_flag32_alloc>
    52f4:	2000016c 	.word	0x2000016c

000052f8 <nrfx_gpiote_trigger_enable>:
{
    52f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    52fa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    52fc:	f7ff fe10 	bl	4f20 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5300:	4b1e      	ldr	r3, [pc, #120]	; (537c <nrfx_gpiote_trigger_enable+0x84>)
    5302:	f104 0208 	add.w	r2, r4, #8
    5306:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    530a:	b1e8      	cbz	r0, 5348 <nrfx_gpiote_trigger_enable+0x50>
    530c:	f013 0502 	ands.w	r5, r3, #2
    5310:	d11a      	bne.n	5348 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5312:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5314:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5316:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    531a:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    531e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5322:	6005      	str	r5, [r0, #0]
    5324:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    5328:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    532a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    532e:	f040 0001 	orr.w	r0, r0, #1
    5332:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5336:	b129      	cbz	r1, 5344 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5338:	2201      	movs	r2, #1
    533a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    533e:	4a10      	ldr	r2, [pc, #64]	; (5380 <nrfx_gpiote_trigger_enable+0x88>)
    5340:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5344:	b003      	add	sp, #12
    5346:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5348:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    534c:	2b04      	cmp	r3, #4
    534e:	d011      	beq.n	5374 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5350:	2b05      	cmp	r3, #5
    5352:	d011      	beq.n	5378 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5354:	a801      	add	r0, sp, #4
    5356:	9401      	str	r4, [sp, #4]
    5358:	f7ff fdd2 	bl	4f00 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    535c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    535e:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5360:	40d9      	lsrs	r1, r3
    5362:	f001 0101 	and.w	r1, r1, #1
    5366:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5368:	4620      	mov	r0, r4
}
    536a:	b003      	add	sp, #12
    536c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5370:	f003 b80f 	b.w	8392 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5374:	2103      	movs	r1, #3
    5376:	e7f7      	b.n	5368 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5378:	2102      	movs	r1, #2
    537a:	e7f5      	b.n	5368 <nrfx_gpiote_trigger_enable+0x70>
    537c:	200000fc 	.word	0x200000fc
    5380:	5000d000 	.word	0x5000d000

00005384 <nrfx_gpiote_trigger_disable>:
{
    5384:	b508      	push	{r3, lr}
    5386:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5388:	f7ff fdca 	bl	4f20 <pin_in_use_by_te>
    538c:	b1c0      	cbz	r0, 53c0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    538e:	4b0f      	ldr	r3, [pc, #60]	; (53cc <nrfx_gpiote_trigger_disable+0x48>)
    5390:	f102 0108 	add.w	r1, r2, #8
    5394:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5398:	0799      	lsls	r1, r3, #30
    539a:	d411      	bmi.n	53c0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    539c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    539e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    53a0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    53a2:	490b      	ldr	r1, [pc, #44]	; (53d0 <nrfx_gpiote_trigger_disable+0x4c>)
    53a4:	009b      	lsls	r3, r3, #2
    53a6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    53aa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    53ae:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    53b2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    53b6:	f022 0203 	bic.w	r2, r2, #3
    53ba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    53be:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    53c0:	2100      	movs	r1, #0
}
    53c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    53c6:	4610      	mov	r0, r2
    53c8:	f002 bfe3 	b.w	8392 <nrf_gpio_cfg_sense_set>
    53cc:	200000fc 	.word	0x200000fc
    53d0:	5000d000 	.word	0x5000d000

000053d4 <nrfx_gpiote_pin_uninit>:
{
    53d4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    53d6:	4b10      	ldr	r3, [pc, #64]	; (5418 <nrfx_gpiote_pin_uninit+0x44>)
    53d8:	f100 0208 	add.w	r2, r0, #8
    53dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    53e0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    53e2:	07db      	lsls	r3, r3, #31
    53e4:	d516      	bpl.n	5414 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    53e6:	f7ff ffcd 	bl	5384 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    53ea:	4620      	mov	r0, r4
    53ec:	f7ff fdea 	bl	4fc4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    53f0:	a801      	add	r0, sp, #4
    53f2:	9401      	str	r4, [sp, #4]
    53f4:	f7ff fd84 	bl	4f00 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    53fe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    5402:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5406:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    540a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    540e:	4803      	ldr	r0, [pc, #12]	; (541c <nrfx_gpiote_pin_uninit+0x48>)
}
    5410:	b002      	add	sp, #8
    5412:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5414:	4802      	ldr	r0, [pc, #8]	; (5420 <nrfx_gpiote_pin_uninit+0x4c>)
    5416:	e7fb      	b.n	5410 <nrfx_gpiote_pin_uninit+0x3c>
    5418:	200000fc 	.word	0x200000fc
    541c:	0bad0000 	.word	0x0bad0000
    5420:	0bad0004 	.word	0x0bad0004

00005424 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    5428:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    542a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    542c:	4634      	mov	r4, r6
{
    542e:	4b63      	ldr	r3, [pc, #396]	; (55bc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    5430:	4863      	ldr	r0, [pc, #396]	; (55c0 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5432:	4964      	ldr	r1, [pc, #400]	; (55c4 <nrfx_gpiote_irq_handler+0x1a0>)
{
    5434:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5436:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5438:	b135      	cbz	r5, 5448 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    543a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    543e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5440:	bf1e      	ittt	ne
    5442:	601c      	strne	r4, [r3, #0]
    5444:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5446:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5448:	3304      	adds	r3, #4
    544a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    544c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5450:	d1f1      	bne.n	5436 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5452:	f8df a16c 	ldr.w	sl, [pc, #364]	; 55c0 <nrfx_gpiote_irq_handler+0x19c>
    5456:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    545a:	2b00      	cmp	r3, #0
    545c:	f000 8091 	beq.w	5582 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    5460:	f8df 8164 	ldr.w	r8, [pc, #356]	; 55c8 <nrfx_gpiote_irq_handler+0x1a4>
    5464:	f8d8 3020 	ldr.w	r3, [r8, #32]
    5468:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    546a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    546e:	4b57      	ldr	r3, [pc, #348]	; (55cc <nrfx_gpiote_irq_handler+0x1a8>)
    5470:	6a1a      	ldr	r2, [r3, #32]
    5472:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5474:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5476:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    547a:	f10d 0b10 	add.w	fp, sp, #16
    547e:	ea4f 1349 	mov.w	r3, r9, lsl #5
    5482:	9300      	str	r3, [sp, #0]
    5484:	e048      	b.n	5518 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    5486:	fa94 f4a4 	rbit	r4, r4
    548a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    548e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5490:	4a4f      	ldr	r2, [pc, #316]	; (55d0 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    5492:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5494:	f104 0308 	add.w	r3, r4, #8
    5498:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    549c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    549e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    54a0:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    54a4:	fa03 f202 	lsl.w	r2, r3, r2
    54a8:	f81b 3000 	ldrb.w	r3, [fp, r0]
    54ac:	9403      	str	r4, [sp, #12]
    54ae:	ea23 0302 	bic.w	r3, r3, r2
    54b2:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    54b6:	a803      	add	r0, sp, #12
    54b8:	f7ff fd22 	bl	4f00 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    54bc:	9b03      	ldr	r3, [sp, #12]
    54be:	08b9      	lsrs	r1, r7, #2
    54c0:	3380      	adds	r3, #128	; 0x80
    54c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    54c6:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    54ca:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    54cc:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    54ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    54d2:	d52b      	bpl.n	552c <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    54d4:	4620      	mov	r0, r4
    54d6:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    54d8:	b2dd      	uxtb	r5, r3
    54da:	f7ff fd2b 	bl	4f34 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    54de:	a803      	add	r0, sp, #12
    54e0:	9403      	str	r4, [sp, #12]
    54e2:	f7ff fd0d 	bl	4f00 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    54e6:	9b03      	ldr	r3, [sp, #12]
    54e8:	3380      	adds	r3, #128	; 0x80
    54ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    54ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
    54f2:	429d      	cmp	r5, r3
    54f4:	d107      	bne.n	5506 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    54f6:	2100      	movs	r1, #0
    54f8:	4620      	mov	r0, r4
    54fa:	f002 ff4a 	bl	8392 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    54fe:	4629      	mov	r1, r5
    5500:	4620      	mov	r0, r4
    5502:	f002 ff46 	bl	8392 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5506:	a803      	add	r0, sp, #12
    5508:	9403      	str	r4, [sp, #12]
    550a:	f7ff fcf9 	bl	4f00 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    550e:	2201      	movs	r2, #1
    5510:	9b03      	ldr	r3, [sp, #12]
    5512:	fa02 f303 	lsl.w	r3, r2, r3
    5516:	6203      	str	r3, [r0, #32]
            while (latch[i])
    5518:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    551c:	2c00      	cmp	r4, #0
    551e:	d1b2      	bne.n	5486 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5520:	f1b9 0f00 	cmp.w	r9, #0
    5524:	d11d      	bne.n	5562 <nrfx_gpiote_irq_handler+0x13e>
    5526:	f04f 0901 	mov.w	r9, #1
    552a:	e7a8      	b.n	547e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    552c:	2b02      	cmp	r3, #2
    552e:	d10c      	bne.n	554a <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5530:	2103      	movs	r1, #3
    5532:	4620      	mov	r0, r4
    5534:	f002 ff2d 	bl	8392 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5538:	f005 0305 	and.w	r3, r5, #5
    553c:	2b01      	cmp	r3, #1
    553e:	d1e2      	bne.n	5506 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    5540:	4639      	mov	r1, r7
    5542:	4620      	mov	r0, r4
    5544:	f7ff fcf6 	bl	4f34 <call_handler>
    5548:	e7dd      	b.n	5506 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    554a:	2102      	movs	r1, #2
    554c:	4620      	mov	r0, r4
    554e:	9301      	str	r3, [sp, #4]
    5550:	f002 ff1f 	bl	8392 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5554:	2d03      	cmp	r5, #3
    5556:	d0f3      	beq.n	5540 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5558:	9b01      	ldr	r3, [sp, #4]
    555a:	2b03      	cmp	r3, #3
    555c:	d1d3      	bne.n	5506 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    555e:	2d02      	cmp	r5, #2
    5560:	e7ed      	b.n	553e <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5562:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    5566:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    556a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    556e:	4917      	ldr	r1, [pc, #92]	; (55cc <nrfx_gpiote_irq_handler+0x1a8>)
    5570:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5572:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    5576:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    5578:	4313      	orrs	r3, r2
    557a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    557c:	620a      	str	r2, [r1, #32]
    557e:	f47f af7a 	bne.w	5476 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    5582:	2401      	movs	r4, #1
    while (mask)
    5584:	b916      	cbnz	r6, 558c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5586:	b007      	add	sp, #28
    5588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    558c:	fa96 f3a6 	rbit	r3, r6
    5590:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5594:	fa04 f203 	lsl.w	r2, r4, r3
    5598:	009b      	lsls	r3, r3, #2
    559a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    559e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    55a2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    55a6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    55aa:	f3c0 2005 	ubfx	r0, r0, #8, #6
    55ae:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    55b2:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    55b6:	f7ff fcbd 	bl	4f34 <call_handler>
    55ba:	e7e3      	b.n	5584 <nrfx_gpiote_irq_handler+0x160>
    55bc:	5000d100 	.word	0x5000d100
    55c0:	5000d000 	.word	0x5000d000
    55c4:	5000d120 	.word	0x5000d120
    55c8:	50842500 	.word	0x50842500
    55cc:	50842800 	.word	0x50842800
    55d0:	200000fc 	.word	0x200000fc

000055d4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    55d4:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    55d6:	4c08      	ldr	r4, [pc, #32]	; (55f8 <nrfx_ipc_init+0x24>)
{
    55d8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    55da:	7923      	ldrb	r3, [r4, #4]
{
    55dc:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    55de:	b943      	cbnz	r3, 55f2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    55e0:	202a      	movs	r0, #42	; 0x2a
    55e2:	f7fd fa17 	bl	2a14 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    55e6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    55e8:	4804      	ldr	r0, [pc, #16]	; (55fc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    55ea:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    55ec:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    55ee:	60a5      	str	r5, [r4, #8]
}
    55f0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    55f2:	4803      	ldr	r0, [pc, #12]	; (5600 <nrfx_ipc_init+0x2c>)
    55f4:	e7fc      	b.n	55f0 <nrfx_ipc_init+0x1c>
    55f6:	bf00      	nop
    55f8:	20000f8c 	.word	0x20000f8c
    55fc:	0bad0000 	.word	0x0bad0000
    5600:	0bad000c 	.word	0x0bad000c

00005604 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    5604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    5606:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5608:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    560a:	4b0b      	ldr	r3, [pc, #44]	; (5638 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    560c:	4d0b      	ldr	r5, [pc, #44]	; (563c <nrfx_ipc_irq_handler+0x38>)
    560e:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    5612:	b904      	cbnz	r4, 5616 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    5614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    5616:	fa94 f0a4 	rbit	r0, r4
    561a:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    561e:	fa06 f300 	lsl.w	r3, r6, r0
    5622:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5626:	4b06      	ldr	r3, [pc, #24]	; (5640 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    5628:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    562a:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    562c:	682b      	ldr	r3, [r5, #0]
    562e:	2b00      	cmp	r3, #0
    5630:	d0ef      	beq.n	5612 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    5632:	68a9      	ldr	r1, [r5, #8]
    5634:	4798      	blx	r3
    5636:	e7ec      	b.n	5612 <nrfx_ipc_irq_handler+0xe>
    5638:	5002a000 	.word	0x5002a000
    563c:	20000f8c 	.word	0x20000f8c
    5640:	5002a100 	.word	0x5002a100

00005644 <nrf_gpio_pin_clear>:
        case 0: return NRF_P0;
    5644:	4a05      	ldr	r2, [pc, #20]	; (565c <nrf_gpio_pin_clear+0x18>)
    5646:	4b06      	ldr	r3, [pc, #24]	; (5660 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
    5648:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    564c:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    564e:	2801      	cmp	r0, #1
    5650:	bf18      	it	ne
    5652:	4613      	movne	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5654:	2201      	movs	r2, #1
    5656:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    5658:	60da      	str	r2, [r3, #12]
}
    565a:	4770      	bx	lr
    565c:	50842500 	.word	0x50842500
    5660:	50842800 	.word	0x50842800

00005664 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    5664:	b570      	push	{r4, r5, r6, lr}
        case 0: return NRF_P0;
    5666:	4c0d      	ldr	r4, [pc, #52]	; (569c <nrf_gpio_cfg.constprop.0+0x38>)
    5668:	4e0d      	ldr	r6, [pc, #52]	; (56a0 <nrf_gpio_cfg.constprop.0+0x3c>)
    *p_pin = pin_number & 0x1F;
    566a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    566e:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    5670:	2801      	cmp	r0, #1
    5672:	bf18      	it	ne
    5674:	4634      	movne	r4, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    5676:	f89d 0010 	ldrb.w	r0, [sp, #16]
    567a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    567e:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5680:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5684:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
    5688:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    568a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    568e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5692:	4328      	orrs	r0, r5
    reg->PIN_CNF[pin_number] = cnf;
    5694:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
    5698:	bd70      	pop	{r4, r5, r6, pc}
    569a:	bf00      	nop
    569c:	50842800 	.word	0x50842800
    56a0:	50842500 	.word	0x50842500

000056a4 <nrf_gpio_pin_set>:
        case 0: return NRF_P0;
    56a4:	4a05      	ldr	r2, [pc, #20]	; (56bc <nrf_gpio_pin_set+0x18>)
    56a6:	4b06      	ldr	r3, [pc, #24]	; (56c0 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    56a8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    56ac:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    56ae:	2801      	cmp	r0, #1
    56b0:	bf18      	it	ne
    56b2:	4613      	movne	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    56b4:	2201      	movs	r2, #1
    56b6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    56b8:	609a      	str	r2, [r3, #8]
}
    56ba:	4770      	bx	lr
    56bc:	50842500 	.word	0x50842500
    56c0:	50842800 	.word	0x50842800

000056c4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    56c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    56c8:	4d87      	ldr	r5, [pc, #540]	; (58e8 <nrfx_spim_init+0x224>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    56ca:	7907      	ldrb	r7, [r0, #4]
{
    56cc:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    56ce:	eb05 1147 	add.w	r1, r5, r7, lsl #5
    56d2:	7f09      	ldrb	r1, [r1, #28]
{
    56d4:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    56d6:	2900      	cmp	r1, #0
    56d8:	f040 8100 	bne.w	58dc <nrfx_spim_init+0x218>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    56dc:	2f00      	cmp	r7, #0
    56de:	f040 80ff 	bne.w	58e0 <nrfx_spim_init+0x21c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    56e2:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    56e6:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
    56e8:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    56ea:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    56ee:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
    56f0:	d027      	beq.n	5742 <nrfx_spim_init+0x7e>
    56f2:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
    56f6:	d124      	bne.n	5742 <nrfx_spim_init+0x7e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    56f8:	b119      	cbz	r1, 5702 <nrfx_spim_init+0x3e>
    56fa:	7d20      	ldrb	r0, [r4, #20]
    56fc:	2800      	cmp	r0, #0
    56fe:	f040 80d5 	bne.w	58ac <nrfx_spim_init+0x1e8>
    5702:	487a      	ldr	r0, [pc, #488]	; (58ec <nrfx_spim_init+0x228>)
    5704:	4581      	cmp	r9, r0
    5706:	d11c      	bne.n	5742 <nrfx_spim_init+0x7e>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    5708:	7820      	ldrb	r0, [r4, #0]
    570a:	28ff      	cmp	r0, #255	; 0xff
    570c:	d002      	beq.n	5714 <nrfx_spim_init+0x50>
    570e:	2808      	cmp	r0, #8
    5710:	f040 80e8 	bne.w	58e4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    5714:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
    5716:	28ff      	cmp	r0, #255	; 0xff
    5718:	d002      	beq.n	5720 <nrfx_spim_init+0x5c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
    571a:	280b      	cmp	r0, #11
    571c:	f040 80e2 	bne.w	58e4 <nrfx_spim_init+0x220>
    5720:	2eff      	cmp	r6, #255	; 0xff
    5722:	d002      	beq.n	572a <nrfx_spim_init+0x66>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
    5724:	2e0c      	cmp	r6, #12
    5726:	f040 80dd 	bne.w	58e4 <nrfx_spim_init+0x220>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    572a:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
    572c:	28ff      	cmp	r0, #255	; 0xff
    572e:	d002      	beq.n	5736 <nrfx_spim_init+0x72>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    5730:	2809      	cmp	r0, #9
    5732:	f040 80d7 	bne.w	58e4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    5736:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
    5738:	28ff      	cmp	r0, #255	; 0xff
    573a:	d002      	beq.n	5742 <nrfx_spim_init+0x7e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
    573c:	280a      	cmp	r0, #10
    573e:	f040 80d1 	bne.w	58e4 <nrfx_spim_init+0x220>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    5742:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5746:	7fab      	ldrb	r3, [r5, #30]
    5748:	f361 0300 	bfi	r3, r1, #0, #1
    574c:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    574e:	7922      	ldrb	r2, [r4, #4]
    5750:	b2db      	uxtb	r3, r3
    5752:	f362 0341 	bfi	r3, r2, #1, #1
    5756:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
    5758:	7c62      	ldrb	r2, [r4, #17]
    575a:	b2db      	uxtb	r3, r3
    575c:	f362 0382 	bfi	r3, r2, #2, #1
    5760:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
    5762:	78e3      	ldrb	r3, [r4, #3]
    5764:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
    5766:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    5768:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
    576c:	2b00      	cmp	r3, #0
    576e:	d142      	bne.n	57f6 <nrfx_spim_init+0x132>
                    : NRF_GPIO_PIN_S0S1;
    5770:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
    5772:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
    5774:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
    5778:	7b23      	ldrb	r3, [r4, #12]
    577a:	bf08      	it	eq
    577c:	2703      	moveq	r7, #3
    577e:	2b01      	cmp	r3, #1
    5780:	f200 8096 	bhi.w	58b0 <nrfx_spim_init+0x1ec>
        nrf_gpio_pin_clear(pin_number);
    5784:	f7ff ff5e 	bl	5644 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    5788:	2300      	movs	r3, #0
    578a:	9700      	str	r7, [sp, #0]
    578c:	7820      	ldrb	r0, [r4, #0]
    578e:	461a      	mov	r2, r3
    5790:	2101      	movs	r1, #1
    5792:	f7ff ff67 	bl	5664 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    5796:	7860      	ldrb	r0, [r4, #1]
    5798:	28ff      	cmp	r0, #255	; 0xff
    579a:	d008      	beq.n	57ae <nrfx_spim_init+0xea>
    579c:	f7ff ff52 	bl	5644 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
    57a0:	2201      	movs	r2, #1
    57a2:	9700      	str	r7, [sp, #0]
    57a4:	2300      	movs	r3, #0
    57a6:	4611      	mov	r1, r2
    57a8:	7860      	ldrb	r0, [r4, #1]
    57aa:	f7ff ff5b 	bl	5664 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    57ae:	78a0      	ldrb	r0, [r4, #2]
    57b0:	28ff      	cmp	r0, #255	; 0xff
    57b2:	d005      	beq.n	57c0 <nrfx_spim_init+0xfc>
            nrf_gpio_cfg(p_config->miso_pin,
    57b4:	2200      	movs	r2, #0
    57b6:	9700      	str	r7, [sp, #0]
    57b8:	4611      	mov	r1, r2
    57ba:	7ba3      	ldrb	r3, [r4, #14]
    57bc:	f7ff ff52 	bl	5664 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    57c0:	78e0      	ldrb	r0, [r4, #3]
    57c2:	28ff      	cmp	r0, #255	; 0xff
    57c4:	d00b      	beq.n	57de <nrfx_spim_init+0x11a>
    if (value == 0)
    57c6:	7923      	ldrb	r3, [r4, #4]
    57c8:	2b00      	cmp	r3, #0
    57ca:	d074      	beq.n	58b6 <nrfx_spim_init+0x1f2>
        nrf_gpio_pin_clear(pin_number);
    57cc:	f7ff ff3a 	bl	5644 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
    57d0:	2201      	movs	r2, #1
    57d2:	9700      	str	r7, [sp, #0]
    57d4:	2300      	movs	r3, #0
    57d6:	4611      	mov	r1, r2
    57d8:	78e0      	ldrb	r0, [r4, #3]
    57da:	f7ff ff43 	bl	5664 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    57de:	7be0      	ldrb	r0, [r4, #15]
    57e0:	28ff      	cmp	r0, #255	; 0xff
    57e2:	d008      	beq.n	57f6 <nrfx_spim_init+0x132>
        nrf_gpio_pin_set(pin_number);
    57e4:	f7ff ff5e 	bl	56a4 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
    57e8:	2201      	movs	r2, #1
    57ea:	9700      	str	r7, [sp, #0]
    57ec:	2300      	movs	r3, #0
    57ee:	4611      	mov	r1, r2
    57f0:	7be0      	ldrb	r0, [r4, #15]
    57f2:	f7ff ff37 	bl	5664 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    57f6:	7d23      	ldrb	r3, [r4, #20]
    57f8:	bb6b      	cbnz	r3, 5856 <nrfx_spim_init+0x192>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    57fa:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    57fc:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    57fe:	2bff      	cmp	r3, #255	; 0xff
    5800:	bf18      	it	ne
    5802:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    5804:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    5806:	bf08      	it	eq
    5808:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    580c:	2bff      	cmp	r3, #255	; 0xff
    580e:	bf08      	it	eq
    5810:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    5814:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    5818:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    581c:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    5820:	f898 3004 	ldrb.w	r3, [r8, #4]
    5824:	b9bb      	cbnz	r3, 5856 <nrfx_spim_init+0x192>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
    5826:	78e3      	ldrb	r3, [r4, #3]
    5828:	2bff      	cmp	r3, #255	; 0xff
    582a:	d047      	beq.n	58bc <nrfx_spim_init+0x1f8>
    582c:	7c62      	ldrb	r2, [r4, #17]
    582e:	2a00      	cmp	r2, #0
    5830:	d044      	beq.n	58bc <nrfx_spim_init+0x1f8>
                                    (p_config->ss_active_high == true
    5832:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
    5834:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    5836:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    583a:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    583e:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    5842:	f898 3004 	ldrb.w	r3, [r8, #4]
    5846:	b933      	cbnz	r3, 5856 <nrfx_spim_init+0x192>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    5848:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
    584a:	2bff      	cmp	r3, #255	; 0xff
    584c:	bf08      	it	eq
    584e:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    5852:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    5856:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    5858:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    585c:	68a3      	ldr	r3, [r4, #8]
    585e:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    5862:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    5864:	7b22      	ldrb	r2, [r4, #12]
    5866:	3b00      	subs	r3, #0
    5868:	bf18      	it	ne
    586a:	2301      	movne	r3, #1
    switch (spi_mode)
    586c:	2a02      	cmp	r2, #2
    586e:	d02f      	beq.n	58d0 <nrfx_spim_init+0x20c>
    5870:	2a03      	cmp	r2, #3
    5872:	d030      	beq.n	58d6 <nrfx_spim_init+0x212>
    5874:	2a01      	cmp	r2, #1
    5876:	d101      	bne.n	587c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    5878:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    587c:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    5880:	79a3      	ldrb	r3, [r4, #6]
    5882:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    5886:	2307      	movs	r3, #7
    5888:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    588c:	682b      	ldr	r3, [r5, #0]
    588e:	b12b      	cbz	r3, 589c <nrfx_spim_init+0x1d8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    5890:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    5894:	f340 3007 	sbfx	r0, r0, #12, #8
    5898:	f7fd f8bc 	bl	2a14 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    589c:	2300      	movs	r3, #0
    589e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    58a0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    58a2:	4813      	ldr	r0, [pc, #76]	; (58f0 <nrfx_spim_init+0x22c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    58a4:	772b      	strb	r3, [r5, #28]
}
    58a6:	b003      	add	sp, #12
    58a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
    58ac:	4601      	mov	r1, r0
    58ae:	e748      	b.n	5742 <nrfx_spim_init+0x7e>
    58b0:	f7ff fef8 	bl	56a4 <nrf_gpio_pin_set>
    58b4:	e768      	b.n	5788 <nrfx_spim_init+0xc4>
    58b6:	f7ff fef5 	bl	56a4 <nrf_gpio_pin_set>
    58ba:	e789      	b.n	57d0 <nrfx_spim_init+0x10c>
    p_reg->PSEL.CSN = pin;
    58bc:	f04f 33ff 	mov.w	r3, #4294967295
    58c0:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    58c4:	2300      	movs	r3, #0
    58c6:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    58ca:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
    58ce:	e7b8      	b.n	5842 <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    58d0:	f043 0304 	orr.w	r3, r3, #4
        break;
    58d4:	e7d2      	b.n	587c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    58d6:	f043 0306 	orr.w	r3, r3, #6
        break;
    58da:	e7cf      	b.n	587c <nrfx_spim_init+0x1b8>
        return err_code;
    58dc:	4805      	ldr	r0, [pc, #20]	; (58f4 <nrfx_spim_init+0x230>)
    58de:	e7e2      	b.n	58a6 <nrfx_spim_init+0x1e2>
        return err_code;
    58e0:	4805      	ldr	r0, [pc, #20]	; (58f8 <nrfx_spim_init+0x234>)
    58e2:	e7e0      	b.n	58a6 <nrfx_spim_init+0x1e2>
            return err_code;
    58e4:	4805      	ldr	r0, [pc, #20]	; (58fc <nrfx_spim_init+0x238>)
    58e6:	e7de      	b.n	58a6 <nrfx_spim_init+0x1e2>
    58e8:	20000f98 	.word	0x20000f98
    58ec:	5000a000 	.word	0x5000a000
    58f0:	0bad0000 	.word	0x0bad0000
    58f4:	0bad0005 	.word	0x0bad0005
    58f8:	0bad0003 	.word	0x0bad0003
    58fc:	0bad0004 	.word	0x0bad0004

00005900 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    5900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5904:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    5906:	4d25      	ldr	r5, [pc, #148]	; (599c <nrfx_spim_uninit+0x9c>)
    5908:	015e      	lsls	r6, r3, #5
    590a:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    590e:	59ab      	ldr	r3, [r5, r6]
{
    5910:	4607      	mov	r7, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    5912:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    5914:	b1cb      	cbz	r3, 594a <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    5916:	f344 3007 	sbfx	r0, r4, #12, #8
    591a:	f7fd f889 	bl	2a30 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    591e:	4b20      	ldr	r3, [pc, #128]	; (59a0 <nrfx_spim_uninit+0xa0>)
    5920:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    5924:	f898 301d 	ldrb.w	r3, [r8, #29]
    5928:	b17b      	cbz	r3, 594a <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    592a:	2301      	movs	r3, #1
    592c:	f04f 0864 	mov.w	r8, #100	; 0x64
    5930:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5932:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    5936:	b92b      	cbnz	r3, 5944 <nrfx_spim_uninit+0x44>
    5938:	2001      	movs	r0, #1
    593a:	f002 fba9 	bl	8090 <nrfx_busy_wait>
    593e:	f1b8 0801 	subs.w	r8, r8, #1
    5942:	d1f6      	bne.n	5932 <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
    5944:	2200      	movs	r2, #0
    5946:	19ab      	adds	r3, r5, r6
    5948:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    594a:	2300      	movs	r3, #0
    594c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    5950:	19ab      	adds	r3, r5, r6
    5952:	7f9b      	ldrb	r3, [r3, #30]
    5954:	07db      	lsls	r3, r3, #31
    5956:	d41b      	bmi.n	5990 <nrfx_spim_uninit+0x90>
    return p_reg->PSEL.SCK;
    5958:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    595c:	f002 fd28 	bl	83b0 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    5960:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    5964:	f002 fd24 	bl	83b0 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    5968:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    596c:	f002 fd20 	bl	83b0 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    5970:	793b      	ldrb	r3, [r7, #4]
    5972:	b91b      	cbnz	r3, 597c <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
    5974:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    5978:	f002 fd1a 	bl	83b0 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    597c:	19ab      	adds	r3, r5, r6
    597e:	7fd8      	ldrb	r0, [r3, #31]
    5980:	28ff      	cmp	r0, #255	; 0xff
    5982:	d005      	beq.n	5990 <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg(
    5984:	2300      	movs	r3, #0
    5986:	2201      	movs	r2, #1
    5988:	4619      	mov	r1, r3
    598a:	9300      	str	r3, [sp, #0]
    598c:	f7ff fe6a 	bl	5664 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    5990:	2300      	movs	r3, #0
    5992:	4435      	add	r5, r6
    5994:	772b      	strb	r3, [r5, #28]
}
    5996:	b002      	add	sp, #8
    5998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    599c:	20000f98 	.word	0x20000f98
    59a0:	00080152 	.word	0x00080152

000059a4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    59a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    59a8:	4f38      	ldr	r7, [pc, #224]	; (5a8c <nrfx_spim_xfer+0xe8>)
    59aa:	7903      	ldrb	r3, [r0, #4]
{
    59ac:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    59ae:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    59b2:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    59b6:	4681      	mov	r9, r0
    59b8:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    59ba:	015e      	lsls	r6, r3, #5
    59bc:	2a00      	cmp	r2, #0
    59be:	d163      	bne.n	5a88 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    59c0:	59ba      	ldr	r2, [r7, r6]
    59c2:	b12a      	cbz	r2, 59d0 <nrfx_spim_xfer+0x2c>
    59c4:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    59c8:	bf04      	itt	eq
    59ca:	2201      	moveq	r2, #1
    59cc:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    59d0:	eb07 0c06 	add.w	ip, r7, r6
    59d4:	f10c 0c0c 	add.w	ip, ip, #12
    59d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    59dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    59e0:	2101      	movs	r1, #1
    59e2:	4640      	mov	r0, r8
    59e4:	f002 fcf0 	bl	83c8 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    59e8:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    59ea:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    59ee:	b121      	cbz	r1, 59fa <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    59f0:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    59f4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    59f8:	d106      	bne.n	5a08 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    59fa:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    59fc:	b152      	cbz	r2, 5a14 <nrfx_spim_xfer+0x70>
    59fe:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    5a02:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    5a06:	d005      	beq.n	5a14 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    5a08:	2300      	movs	r3, #0
    5a0a:	443e      	add	r6, r7
        return err_code;
    5a0c:	4820      	ldr	r0, [pc, #128]	; (5a90 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    5a0e:	7773      	strb	r3, [r6, #29]
}
    5a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    5a14:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5a16:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5a1a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5a1e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    5a22:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5a26:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a2a:	2200      	movs	r2, #0
    5a2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5a30:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    5a34:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    5a38:	bf18      	it	ne
    5a3a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    5a3c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    5a40:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    5a44:	bf18      	it	ne
    5a46:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    5a48:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    5a4c:	072a      	lsls	r2, r5, #28
    5a4e:	d507      	bpl.n	5a60 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    5a50:	59ba      	ldr	r2, [r7, r6]
    5a52:	b972      	cbnz	r2, 5a72 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    5a54:	2100      	movs	r1, #0
    5a56:	4640      	mov	r0, r8
    5a58:	f002 fcb6 	bl	83c8 <set_ss_pin_state>
    return err_code;
    5a5c:	480d      	ldr	r0, [pc, #52]	; (5a94 <nrfx_spim_xfer+0xf0>)
    5a5e:	e7d7      	b.n	5a10 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a60:	2201      	movs	r2, #1
    5a62:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    5a64:	59ba      	ldr	r2, [r7, r6]
    5a66:	b922      	cbnz	r2, 5a72 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a68:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    5a6c:	2a00      	cmp	r2, #0
    5a6e:	d0fb      	beq.n	5a68 <nrfx_spim_xfer+0xc4>
    5a70:	e7f0      	b.n	5a54 <nrfx_spim_xfer+0xb0>
    if (!enable)
    5a72:	f015 0f04 	tst.w	r5, #4
    5a76:	f04f 0240 	mov.w	r2, #64	; 0x40
    5a7a:	d002      	beq.n	5a82 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    5a7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5a80:	e7ec      	b.n	5a5c <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    5a82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5a86:	e7e9      	b.n	5a5c <nrfx_spim_xfer+0xb8>
        return err_code;
    5a88:	4803      	ldr	r0, [pc, #12]	; (5a98 <nrfx_spim_xfer+0xf4>)
    5a8a:	e7c1      	b.n	5a10 <nrfx_spim_xfer+0x6c>
    5a8c:	20000f98 	.word	0x20000f98
    5a90:	0bad000a 	.word	0x0bad000a
    5a94:	0bad0000 	.word	0x0bad0000
    5a98:	0bad000b 	.word	0x0bad000b

00005a9c <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
    5a9c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a9e:	4b0c      	ldr	r3, [pc, #48]	; (5ad0 <nrfx_spim_4_irq_handler+0x34>)
    5aa0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    5aa4:	b192      	cbz	r2, 5acc <nrfx_spim_4_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5aa6:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
    5aa8:	4c0a      	ldr	r4, [pc, #40]	; (5ad4 <nrfx_spim_4_irq_handler+0x38>)
    5aaa:	4629      	mov	r1, r5
    5aac:	4620      	mov	r0, r4
    5aae:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    5ab2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    5ab6:	f002 fc87 	bl	83c8 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5aba:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
    5abe:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    5ac0:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5ac2:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
    5ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5aca:	4718      	bx	r3
}
    5acc:	bd70      	pop	{r4, r5, r6, pc}
    5ace:	bf00      	nop
    5ad0:	5000a000 	.word	0x5000a000
    5ad4:	20000f98 	.word	0x20000f98

00005ad8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5adc:	b086      	sub	sp, #24
    5ade:	4605      	mov	r5, r0
    5ae0:	460e      	mov	r6, r1
    5ae2:	af00      	add	r7, sp, #0
	__asm__ volatile(
    5ae4:	f04f 0320 	mov.w	r3, #32
    5ae8:	f3ef 8811 	mrs	r8, BASEPRI
    5aec:	f383 8812 	msr	BASEPRI_MAX, r3
    5af0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5af4:	f000 fe54 	bl	67a0 <z_impl_z_current_get>
    5af8:	2d04      	cmp	r5, #4
    5afa:	bf98      	it	ls
    5afc:	4b2c      	ldrls	r3, [pc, #176]	; (5bb0 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5afe:	46e9      	mov	r9, sp
    5b00:	b08a      	sub	sp, #40	; 0x28
    5b02:	4604      	mov	r4, r0
    5b04:	466a      	mov	r2, sp
    5b06:	bf94      	ite	ls
    5b08:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    5b0c:	4b29      	ldrhi	r3, [pc, #164]	; (5bb4 <z_fatal_error+0xdc>)
    5b0e:	61d3      	str	r3, [r2, #28]
    5b10:	f240 3301 	movw	r3, #769	; 0x301
    5b14:	f04f 0a00 	mov.w	sl, #0
    5b18:	8493      	strh	r3, [r2, #36]	; 0x24
    5b1a:	4927      	ldr	r1, [pc, #156]	; (5bb8 <z_fatal_error+0xe0>)
    5b1c:	4b27      	ldr	r3, [pc, #156]	; (5bbc <z_fatal_error+0xe4>)
    5b1e:	e9c2 1505 	strd	r1, r5, [r2, #20]
    5b22:	f8c2 a020 	str.w	sl, [r2, #32]
    5b26:	f842 3f10 	str.w	r3, [r2, #16]!
    5b2a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    5b2e:	4653      	mov	r3, sl
    5b30:	4823      	ldr	r0, [pc, #140]	; (5bc0 <z_fatal_error+0xe8>)
    5b32:	f7fc f9fd 	bl	1f30 <z_impl_z_log_msg_static_create>
    5b36:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5b38:	b17e      	cbz	r6, 5b5a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5b3a:	69f3      	ldr	r3, [r6, #28]
    5b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5b40:	b15b      	cbz	r3, 5b5a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
    5b42:	4b20      	ldr	r3, [pc, #128]	; (5bc4 <z_fatal_error+0xec>)
    5b44:	617b      	str	r3, [r7, #20]
    5b46:	2302      	movs	r3, #2
    5b48:	613b      	str	r3, [r7, #16]
    5b4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5b4e:	4653      	mov	r3, sl
    5b50:	481b      	ldr	r0, [pc, #108]	; (5bc0 <z_fatal_error+0xe8>)
    5b52:	f107 0210 	add.w	r2, r7, #16
    5b56:	f7fc f9eb 	bl	1f30 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5b5a:	b12c      	cbz	r4, 5b68 <z_fatal_error+0x90>
    5b5c:	4620      	mov	r0, r4
    5b5e:	f002 fca9 	bl	84b4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5b62:	b108      	cbz	r0, 5b68 <z_fatal_error+0x90>
    5b64:	7803      	ldrb	r3, [r0, #0]
    5b66:	b903      	cbnz	r3, 5b6a <z_fatal_error+0x92>
		thread_name = "unknown";
    5b68:	4817      	ldr	r0, [pc, #92]	; (5bc8 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5b6a:	46e9      	mov	r9, sp
    5b6c:	b08a      	sub	sp, #40	; 0x28
    5b6e:	466a      	mov	r2, sp
    5b70:	4b16      	ldr	r3, [pc, #88]	; (5bcc <z_fatal_error+0xf4>)
    5b72:	61d0      	str	r0, [r2, #28]
    5b74:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5b78:	f240 3301 	movw	r3, #769	; 0x301
    5b7c:	8413      	strh	r3, [r2, #32]
    5b7e:	4b14      	ldr	r3, [pc, #80]	; (5bd0 <z_fatal_error+0xf8>)
    5b80:	f842 3f10 	str.w	r3, [r2, #16]!
    5b84:	2300      	movs	r3, #0
    5b86:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    5b8a:	480d      	ldr	r0, [pc, #52]	; (5bc0 <z_fatal_error+0xe8>)
    5b8c:	f7fc f9d0 	bl	1f30 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5b90:	4631      	mov	r1, r6
    5b92:	46cd      	mov	sp, r9
    5b94:	4628      	mov	r0, r5
    5b96:	f7ff f821 	bl	4bdc <k_sys_fatal_error_handler>
	__asm__ volatile(
    5b9a:	f388 8811 	msr	BASEPRI, r8
    5b9e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5ba2:	4620      	mov	r0, r4
    5ba4:	f7fd fbb6 	bl	3314 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5ba8:	3718      	adds	r7, #24
    5baa:	46bd      	mov	sp, r7
    5bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bb0:	00008f28 	.word	0x00008f28
    5bb4:	000099dd 	.word	0x000099dd
    5bb8:	000099f3 	.word	0x000099f3
    5bbc:	01000005 	.word	0x01000005
    5bc0:	00008cac 	.word	0x00008cac
    5bc4:	00009a1b 	.word	0x00009a1b
    5bc8:	000099eb 	.word	0x000099eb
    5bcc:	00009a3c 	.word	0x00009a3c
    5bd0:	01000004 	.word	0x01000004

00005bd4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5bd4:	4b0f      	ldr	r3, [pc, #60]	; (5c14 <z_sys_init_run_level+0x40>)
{
    5bd6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5bd8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5bdc:	3001      	adds	r0, #1
    5bde:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5be2:	42a6      	cmp	r6, r4
    5be4:	d800      	bhi.n	5be8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5be6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5be8:	e9d4 3500 	ldrd	r3, r5, [r4]
    5bec:	4628      	mov	r0, r5
    5bee:	4798      	blx	r3
		if (dev != NULL) {
    5bf0:	b16d      	cbz	r5, 5c0e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    5bf2:	b138      	cbz	r0, 5c04 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5bf4:	2800      	cmp	r0, #0
    5bf6:	bfb8      	it	lt
    5bf8:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    5bfa:	28ff      	cmp	r0, #255	; 0xff
    5bfc:	bfa8      	it	ge
    5bfe:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    5c00:	68eb      	ldr	r3, [r5, #12]
    5c02:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5c04:	68ea      	ldr	r2, [r5, #12]
    5c06:	7853      	ldrb	r3, [r2, #1]
    5c08:	f043 0301 	orr.w	r3, r3, #1
    5c0c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5c0e:	3408      	adds	r4, #8
    5c10:	e7e7      	b.n	5be2 <z_sys_init_run_level+0xe>
    5c12:	bf00      	nop
    5c14:	00008f3c 	.word	0x00008f3c

00005c18 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5c18:	2201      	movs	r2, #1
{
    5c1a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5c1c:	4b09      	ldr	r3, [pc, #36]	; (5c44 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5c1e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5c20:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5c22:	f7ff ffd7 	bl	5bd4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5c26:	f001 f86d 	bl	6d04 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    5c2a:	2004      	movs	r0, #4
    5c2c:	f7ff ffd2 	bl	5bd4 <z_sys_init_run_level>

	z_init_static_threads();
    5c30:	f000 f958 	bl	5ee4 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    5c34:	f7fa fcd6 	bl	5e4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5c38:	4a03      	ldr	r2, [pc, #12]	; (5c48 <bg_thread_main+0x30>)
    5c3a:	7b13      	ldrb	r3, [r2, #12]
    5c3c:	f023 0301 	bic.w	r3, r3, #1
    5c40:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5c42:	bd08      	pop	{r3, pc}
    5c44:	200011f8 	.word	0x200011f8
    5c48:	200007f8 	.word	0x200007f8

00005c4c <z_bss_zero>:
{
    5c4c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5c4e:	4803      	ldr	r0, [pc, #12]	; (5c5c <z_bss_zero+0x10>)
    5c50:	4a03      	ldr	r2, [pc, #12]	; (5c60 <z_bss_zero+0x14>)
    5c52:	2100      	movs	r1, #0
    5c54:	1a12      	subs	r2, r2, r0
    5c56:	f002 fbd3 	bl	8400 <z_early_memset>
}
    5c5a:	bd08      	pop	{r3, pc}
    5c5c:	20000298 	.word	0x20000298
    5c60:	200011fc 	.word	0x200011fc

00005c64 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    5c64:	2300      	movs	r3, #0
    5c66:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5c68:	b570      	push	{r4, r5, r6, lr}
    5c6a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5c70:	220f      	movs	r2, #15
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5c78:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    5c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5c7e:	4d0e      	ldr	r5, [pc, #56]	; (5cb8 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    5c80:	4e0e      	ldr	r6, [pc, #56]	; (5cbc <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5c82:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    5c86:	490e      	ldr	r1, [pc, #56]	; (5cc0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    5c88:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5c8c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5c8e:	fb02 1100 	mla	r1, r2, r0, r1
    5c92:	4b0c      	ldr	r3, [pc, #48]	; (5cc4 <z_init_cpu+0x60>)
    5c94:	4630      	mov	r0, r6
    5c96:	9500      	str	r5, [sp, #0]
    5c98:	f000 f8c8 	bl	5e2c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5c9c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    5c9e:	752c      	strb	r4, [r5, #20]
    5ca0:	f023 0304 	bic.w	r3, r3, #4
    5ca4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5ca6:	4b08      	ldr	r3, [pc, #32]	; (5cc8 <z_init_cpu+0x64>)
    5ca8:	3401      	adds	r4, #1
    5caa:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5cae:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5cb0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5cb2:	b006      	add	sp, #24
    5cb4:	bd70      	pop	{r4, r5, r6, pc}
    5cb6:	bf00      	nop
    5cb8:	20000fb8 	.word	0x20000fb8
    5cbc:	20000778 	.word	0x20000778
    5cc0:	20001d00 	.word	0x20001d00
    5cc4:	00005f9d 	.word	0x00005f9d
    5cc8:	20001500 	.word	0x20001500

00005ccc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5ccc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5cce:	2000      	movs	r0, #0
{
    5cd0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5cd2:	f7ff ff7f 	bl	5bd4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    5cd6:	4b2e      	ldr	r3, [pc, #184]	; (5d90 <z_cstart+0xc4>)
	uint32_t msp =
    5cd8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5cdc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5ce0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ce4:	2400      	movs	r4, #0
    5ce6:	23e0      	movs	r3, #224	; 0xe0
    5ce8:	4d2a      	ldr	r5, [pc, #168]	; (5d94 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    5cea:	4e2b      	ldr	r6, [pc, #172]	; (5d98 <z_cstart+0xcc>)
    5cec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5cf0:	77ec      	strb	r4, [r5, #31]
    5cf2:	762c      	strb	r4, [r5, #24]
    5cf4:	766c      	strb	r4, [r5, #25]
    5cf6:	76ac      	strb	r4, [r5, #26]
    5cf8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5cfc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5cfe:	4f27      	ldr	r7, [pc, #156]	; (5d9c <z_cstart+0xd0>)
    5d00:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5d04:	626b      	str	r3, [r5, #36]	; 0x24
    5d06:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5d0a:	f7fd fa67 	bl	31dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5d0e:	f7fc fdfd 	bl	290c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5d12:	f04f 33ff 	mov.w	r3, #4294967295
    5d16:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5d18:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5d1a:	f7fd fca9 	bl	3670 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5d1e:	f7fd fb0f 	bl	3340 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5d22:	f7fb ff99 	bl	1c58 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5d26:	f240 1301 	movw	r3, #257	; 0x101
    5d2a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5d2e:	ab06      	add	r3, sp, #24
    5d30:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5d32:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    5d36:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5d38:	f002 fb56 	bl	83e8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5d3c:	2001      	movs	r0, #1
    5d3e:	f7ff ff49 	bl	5bd4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5d42:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    5d44:	4d16      	ldr	r5, [pc, #88]	; (5da0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5d46:	f7ff ff45 	bl	5bd4 <z_sys_init_run_level>
	z_sched_init();
    5d4a:	f000 fc81 	bl	6650 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d4e:	4b15      	ldr	r3, [pc, #84]	; (5da4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5d50:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d52:	9305      	str	r3, [sp, #20]
    5d54:	2301      	movs	r3, #1
    5d56:	4914      	ldr	r1, [pc, #80]	; (5da8 <z_cstart+0xdc>)
    5d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5d5c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5d60:	4628      	mov	r0, r5
    5d62:	463b      	mov	r3, r7
    5d64:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5d68:	9400      	str	r4, [sp, #0]
    5d6a:	f000 f85f 	bl	5e2c <z_setup_new_thread>
    5d6e:	4606      	mov	r6, r0
    5d70:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    5d72:	4628      	mov	r0, r5
    5d74:	f022 0204 	bic.w	r2, r2, #4
    5d78:	736a      	strb	r2, [r5, #13]
    5d7a:	f002 fc21 	bl	85c0 <z_ready_thread>
	z_init_cpu(0);
    5d7e:	4620      	mov	r0, r4
    5d80:	f7ff ff70 	bl	5c64 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5d84:	463a      	mov	r2, r7
    5d86:	4631      	mov	r1, r6
    5d88:	4628      	mov	r0, r5
    5d8a:	f7fc ff1b 	bl	2bc4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5d8e:	bf00      	nop
    5d90:	20001500 	.word	0x20001500
    5d94:	e000ed00 	.word	0xe000ed00
    5d98:	20000fb8 	.word	0x20000fb8
    5d9c:	00005c19 	.word	0x00005c19
    5da0:	200007f8 	.word	0x200007f8
    5da4:	00009a9e 	.word	0x00009a9e
    5da8:	20001e40 	.word	0x20001e40

00005dac <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    5dac:	2000      	movs	r0, #0
{
    5dae:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5db0:	4c05      	ldr	r4, [pc, #20]	; (5dc8 <init_mem_slab_module+0x1c>)
    5db2:	4d06      	ldr	r5, [pc, #24]	; (5dcc <init_mem_slab_module+0x20>)
    5db4:	42ac      	cmp	r4, r5
    5db6:	d300      	bcc.n	5dba <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    5db8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    5dba:	4620      	mov	r0, r4
    5dbc:	f002 fb24 	bl	8408 <create_free_list>
		if (rc < 0) {
    5dc0:	2800      	cmp	r0, #0
    5dc2:	dbf9      	blt.n	5db8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5dc4:	341c      	adds	r4, #28
    5dc6:	e7f5      	b.n	5db4 <init_mem_slab_module+0x8>
    5dc8:	20000230 	.word	0x20000230
    5dcc:	20000230 	.word	0x20000230

00005dd0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5dd2:	460c      	mov	r4, r1
	__asm__ volatile(
    5dd4:	f04f 0520 	mov.w	r5, #32
    5dd8:	f3ef 8111 	mrs	r1, BASEPRI
    5ddc:	f385 8812 	msr	BASEPRI_MAX, r5
    5de0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5de4:	6945      	ldr	r5, [r0, #20]
    5de6:	b15d      	cbz	r5, 5e00 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5de8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5dea:	682b      	ldr	r3, [r5, #0]
    5dec:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5dee:	6983      	ldr	r3, [r0, #24]
    5df0:	3301      	adds	r3, #1
    5df2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5df4:	2000      	movs	r0, #0
	__asm__ volatile(
    5df6:	f381 8811 	msr	BASEPRI, r1
    5dfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5dfe:	e011      	b.n	5e24 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5e00:	ea52 0603 	orrs.w	r6, r2, r3
    5e04:	d103      	bne.n	5e0e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    5e06:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    5e0a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5e0c:	e7f3      	b.n	5df6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5e0e:	e9cd 2300 	strd	r2, r3, [sp]
    5e12:	4602      	mov	r2, r0
    5e14:	3008      	adds	r0, #8
    5e16:	f000 fb25 	bl	6464 <z_pend_curr>
		if (result == 0) {
    5e1a:	b918      	cbnz	r0, 5e24 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5e1c:	4b02      	ldr	r3, [pc, #8]	; (5e28 <k_mem_slab_alloc+0x58>)
    5e1e:	689b      	ldr	r3, [r3, #8]
    5e20:	695b      	ldr	r3, [r3, #20]
    5e22:	6023      	str	r3, [r4, #0]
}
    5e24:	b002      	add	sp, #8
    5e26:	bd70      	pop	{r4, r5, r6, pc}
    5e28:	20000fb8 	.word	0x20000fb8

00005e2c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5e2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5e30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5e32:	f100 0558 	add.w	r5, r0, #88	; 0x58
    5e36:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5e38:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5e3a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    5e3e:	2500      	movs	r5, #0
{
    5e40:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    5e42:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5e44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5e46:	e9c0 5506 	strd	r5, r5, [r0, #24]
    5e4a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5e4c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5e50:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    5e54:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    5e58:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5e5a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5e5c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5e5e:	9202      	str	r2, [sp, #8]
    5e60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    5e62:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5e66:	9201      	str	r2, [sp, #4]
    5e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5e6a:	9200      	str	r2, [sp, #0]
    5e6c:	4642      	mov	r2, r8
    5e6e:	f7fc fe8d 	bl	2b8c <arch_new_thread>
	if (!_current) {
    5e72:	4b05      	ldr	r3, [pc, #20]	; (5e88 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5e74:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5e76:	689b      	ldr	r3, [r3, #8]
    5e78:	b103      	cbz	r3, 5e7c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    5e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    5e7c:	4640      	mov	r0, r8
    5e7e:	6763      	str	r3, [r4, #116]	; 0x74
    5e80:	b004      	add	sp, #16
    5e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e86:	bf00      	nop
    5e88:	20000fb8 	.word	0x20000fb8

00005e8c <z_impl_k_thread_create>:
{
    5e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5e8e:	2500      	movs	r5, #0
{
    5e90:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5e92:	9505      	str	r5, [sp, #20]
    5e94:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    5e96:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5e9a:	9504      	str	r5, [sp, #16]
    5e9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    5e9e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5ea0:	9503      	str	r5, [sp, #12]
    5ea2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5ea4:	9502      	str	r5, [sp, #8]
    5ea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5ea8:	9501      	str	r5, [sp, #4]
    5eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5eac:	9500      	str	r5, [sp, #0]
    5eae:	f7ff ffbd 	bl	5e2c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5eb2:	f1b6 3fff 	cmp.w	r6, #4294967295
    5eb6:	bf08      	it	eq
    5eb8:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    5ebc:	d005      	beq.n	5eca <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5ebe:	ea56 0307 	orrs.w	r3, r6, r7
    5ec2:	d105      	bne.n	5ed0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5ec4:	4620      	mov	r0, r4
    5ec6:	f000 fb43 	bl	6550 <z_sched_start>
}
    5eca:	4620      	mov	r0, r4
    5ecc:	b007      	add	sp, #28
    5ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5ed0:	463a      	mov	r2, r7
    5ed2:	4633      	mov	r3, r6
    5ed4:	4902      	ldr	r1, [pc, #8]	; (5ee0 <z_impl_k_thread_create+0x54>)
    5ed6:	f104 0018 	add.w	r0, r4, #24
    5eda:	f000 fd41 	bl	6960 <z_add_timeout>
    5ede:	e7f4      	b.n	5eca <z_impl_k_thread_create+0x3e>
    5ee0:	0000852d 	.word	0x0000852d

00005ee4 <z_init_static_threads>:
{
    5ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ee8:	4c29      	ldr	r4, [pc, #164]	; (5f90 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5eea:	4d2a      	ldr	r5, [pc, #168]	; (5f94 <z_init_static_threads+0xb0>)
{
    5eec:	b087      	sub	sp, #28
    5eee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5ef0:	42ae      	cmp	r6, r5
    5ef2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5ef6:	d30f      	bcc.n	5f18 <z_init_static_threads+0x34>
	k_sched_lock();
    5ef8:	f000 fb7a 	bl	65f0 <k_sched_lock>
    5efc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5f00:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5f04:	4c22      	ldr	r4, [pc, #136]	; (5f90 <z_init_static_threads+0xac>)
    5f06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5f98 <z_init_static_threads+0xb4>
    5f0a:	42ac      	cmp	r4, r5
    5f0c:	d320      	bcc.n	5f50 <z_init_static_threads+0x6c>
}
    5f0e:	b007      	add	sp, #28
    5f10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5f14:	f000 bb80 	b.w	6618 <k_sched_unlock>
		z_setup_new_thread(
    5f18:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5f1c:	9305      	str	r3, [sp, #20]
    5f1e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5f22:	9304      	str	r3, [sp, #16]
    5f24:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5f28:	9303      	str	r3, [sp, #12]
    5f2a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5f2e:	9302      	str	r3, [sp, #8]
    5f30:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5f34:	9301      	str	r3, [sp, #4]
    5f36:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5f3a:	9300      	str	r3, [sp, #0]
    5f3c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5f40:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5f44:	f7ff ff72 	bl	5e2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5f48:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5f4c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5f4e:	e7ce      	b.n	5eee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5f52:	1c5a      	adds	r2, r3, #1
    5f54:	d00d      	beq.n	5f72 <z_init_static_threads+0x8e>
    5f56:	2100      	movs	r1, #0
    5f58:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    5f5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5f5e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5f62:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5f66:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5f6a:	d104      	bne.n	5f76 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5f6c:	4640      	mov	r0, r8
    5f6e:	f000 faef 	bl	6550 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5f72:	3430      	adds	r4, #48	; 0x30
    5f74:	e7c9      	b.n	5f0a <z_init_static_threads+0x26>
    5f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f7a:	2300      	movs	r3, #0
    5f7c:	f7fa f8ea 	bl	154 <__aeabi_uldivmod>
    5f80:	4602      	mov	r2, r0
    5f82:	460b      	mov	r3, r1
    5f84:	f108 0018 	add.w	r0, r8, #24
    5f88:	4649      	mov	r1, r9
    5f8a:	f000 fce9 	bl	6960 <z_add_timeout>
    5f8e:	e7f0      	b.n	5f72 <z_init_static_threads+0x8e>
    5f90:	00008c20 	.word	0x00008c20
    5f94:	00008c20 	.word	0x00008c20
    5f98:	0000852d 	.word	0x0000852d

00005f9c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5f9c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5f9e:	4c0b      	ldr	r4, [pc, #44]	; (5fcc <idle+0x30>)
	return !z_sys_post_kernel;
    5fa0:	4d0b      	ldr	r5, [pc, #44]	; (5fd0 <idle+0x34>)
	__asm__ volatile(
    5fa2:	f04f 0220 	mov.w	r2, #32
    5fa6:	f3ef 8311 	mrs	r3, BASEPRI
    5faa:	f382 8812 	msr	BASEPRI_MAX, r2
    5fae:	f3bf 8f6f 	isb	sy
    5fb2:	f002 fbbb 	bl	872c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5fb6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5fb8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5fba:	b913      	cbnz	r3, 5fc2 <idle+0x26>
	arch_cpu_idle();
    5fbc:	f7fc fcac 	bl	2918 <arch_cpu_idle>
}
    5fc0:	e7ef      	b.n	5fa2 <idle+0x6>
    5fc2:	f7fc fadd 	bl	2580 <pm_system_suspend>
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d1eb      	bne.n	5fa2 <idle+0x6>
    5fca:	e7f7      	b.n	5fbc <idle+0x20>
    5fcc:	20000fb8 	.word	0x20000fb8
    5fd0:	200011f8 	.word	0x200011f8

00005fd4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5fd8:	4604      	mov	r4, r0
    5fda:	4617      	mov	r7, r2
    5fdc:	461e      	mov	r6, r3
    5fde:	f04f 0320 	mov.w	r3, #32
    5fe2:	f3ef 8811 	mrs	r8, BASEPRI
    5fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    5fea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5fee:	68c3      	ldr	r3, [r0, #12]
    5ff0:	4a33      	ldr	r2, [pc, #204]	; (60c0 <z_impl_k_mutex_lock+0xec>)
    5ff2:	b17b      	cbz	r3, 6014 <z_impl_k_mutex_lock+0x40>
    5ff4:	6880      	ldr	r0, [r0, #8]
    5ff6:	6891      	ldr	r1, [r2, #8]
    5ff8:	4288      	cmp	r0, r1
    5ffa:	d019      	beq.n	6030 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5ffc:	ea57 0306 	orrs.w	r3, r7, r6
    6000:	d118      	bne.n	6034 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    6002:	f388 8811 	msr	BASEPRI, r8
    6006:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    600a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    600e:	b002      	add	sp, #8
    6010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6014:	6891      	ldr	r1, [r2, #8]
    6016:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    601a:	3301      	adds	r3, #1
    601c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    601e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6020:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    6022:	60a3      	str	r3, [r4, #8]
    6024:	f388 8811 	msr	BASEPRI, r8
    6028:	f3bf 8f6f 	isb	sy
		return 0;
    602c:	2000      	movs	r0, #0
    602e:	e7ee      	b.n	600e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    6030:	6921      	ldr	r1, [r4, #16]
    6032:	e7f2      	b.n	601a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6034:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6038:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    603c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6040:	4299      	cmp	r1, r3
    6042:	bfa8      	it	ge
    6044:	4619      	movge	r1, r3
    6046:	4291      	cmp	r1, r2
    6048:	bfb8      	it	lt
    604a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    604c:	428b      	cmp	r3, r1
    604e:	dd2e      	ble.n	60ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    6050:	f002 fa3b 	bl	84ca <adjust_owner_prio.isra.0>
    6054:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6056:	4622      	mov	r2, r4
    6058:	4641      	mov	r1, r8
    605a:	e9cd 7600 	strd	r7, r6, [sp]
    605e:	4819      	ldr	r0, [pc, #100]	; (60c4 <z_impl_k_mutex_lock+0xf0>)
    6060:	f000 fa00 	bl	6464 <z_pend_curr>
	if (got_mutex == 0) {
    6064:	2800      	cmp	r0, #0
    6066:	d0e1      	beq.n	602c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    6068:	f04f 0320 	mov.w	r3, #32
    606c:	f3ef 8611 	mrs	r6, BASEPRI
    6070:	f383 8812 	msr	BASEPRI_MAX, r3
    6074:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    6078:	68a0      	ldr	r0, [r4, #8]
    607a:	b1d0      	cbz	r0, 60b2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    607c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    607e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6080:	429c      	cmp	r4, r3
    6082:	d00a      	beq.n	609a <z_impl_k_mutex_lock+0xc6>
    6084:	b14b      	cbz	r3, 609a <z_impl_k_mutex_lock+0xc6>
    6086:	f993 300e 	ldrsb.w	r3, [r3, #14]
    608a:	4299      	cmp	r1, r3
    608c:	bfa8      	it	ge
    608e:	4619      	movge	r1, r3
    6090:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6094:	4299      	cmp	r1, r3
    6096:	bfb8      	it	lt
    6098:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    609a:	f002 fa16 	bl	84ca <adjust_owner_prio.isra.0>
    609e:	b140      	cbz	r0, 60b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    60a0:	4631      	mov	r1, r6
    60a2:	4808      	ldr	r0, [pc, #32]	; (60c4 <z_impl_k_mutex_lock+0xf0>)
    60a4:	f000 fa42 	bl	652c <z_reschedule>
	return -EAGAIN;
    60a8:	f06f 000a 	mvn.w	r0, #10
    60ac:	e7af      	b.n	600e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    60ae:	2500      	movs	r5, #0
    60b0:	e7d1      	b.n	6056 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    60b2:	2d00      	cmp	r5, #0
    60b4:	d1f4      	bne.n	60a0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    60b6:	f386 8811 	msr	BASEPRI, r6
    60ba:	f3bf 8f6f 	isb	sy
    60be:	e7f3      	b.n	60a8 <z_impl_k_mutex_lock+0xd4>
    60c0:	20000fb8 	.word	0x20000fb8
    60c4:	200011f9 	.word	0x200011f9

000060c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    60c8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    60ca:	6883      	ldr	r3, [r0, #8]
{
    60cc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    60ce:	b36b      	cbz	r3, 612c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    60d0:	4a19      	ldr	r2, [pc, #100]	; (6138 <z_impl_k_mutex_unlock+0x70>)
    60d2:	6892      	ldr	r2, [r2, #8]
    60d4:	4293      	cmp	r3, r2
    60d6:	d12c      	bne.n	6132 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    60d8:	68c3      	ldr	r3, [r0, #12]
    60da:	2b01      	cmp	r3, #1
    60dc:	d903      	bls.n	60e6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    60de:	3b01      	subs	r3, #1
    60e0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    60e2:	2000      	movs	r0, #0
}
    60e4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    60e6:	f04f 0320 	mov.w	r3, #32
    60ea:	f3ef 8511 	mrs	r5, BASEPRI
    60ee:	f383 8812 	msr	BASEPRI_MAX, r3
    60f2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    60f6:	6901      	ldr	r1, [r0, #16]
    60f8:	6880      	ldr	r0, [r0, #8]
    60fa:	f002 f9e6 	bl	84ca <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    60fe:	4620      	mov	r0, r4
    6100:	f002 fa95 	bl	862e <z_unpend_first_thread>
	mutex->owner = new_owner;
    6104:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6106:	b158      	cbz	r0, 6120 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    6108:	f990 200e 	ldrsb.w	r2, [r0, #14]
    610c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    610e:	2200      	movs	r2, #0
    6110:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    6112:	f002 fa55 	bl	85c0 <z_ready_thread>
		z_reschedule(&lock, key);
    6116:	4629      	mov	r1, r5
    6118:	4808      	ldr	r0, [pc, #32]	; (613c <z_impl_k_mutex_unlock+0x74>)
    611a:	f000 fa07 	bl	652c <z_reschedule>
    611e:	e7e0      	b.n	60e2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    6120:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6122:	f385 8811 	msr	BASEPRI, r5
    6126:	f3bf 8f6f 	isb	sy
    612a:	e7da      	b.n	60e2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    612c:	f06f 0015 	mvn.w	r0, #21
    6130:	e7d8      	b.n	60e4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    6132:	f04f 30ff 	mov.w	r0, #4294967295
    6136:	e7d5      	b.n	60e4 <z_impl_k_mutex_unlock+0x1c>
    6138:	20000fb8 	.word	0x20000fb8
    613c:	200011f9 	.word	0x200011f9

00006140 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6140:	b538      	push	{r3, r4, r5, lr}
    6142:	4604      	mov	r4, r0
	__asm__ volatile(
    6144:	f04f 0320 	mov.w	r3, #32
    6148:	f3ef 8511 	mrs	r5, BASEPRI
    614c:	f383 8812 	msr	BASEPRI_MAX, r3
    6150:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6154:	f002 fa6b 	bl	862e <z_unpend_first_thread>

	if (thread != NULL) {
    6158:	b148      	cbz	r0, 616e <z_impl_k_sem_give+0x2e>
    615a:	2200      	movs	r2, #0
    615c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    615e:	f002 fa2f 	bl	85c0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6162:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6168:	4807      	ldr	r0, [pc, #28]	; (6188 <z_impl_k_sem_give+0x48>)
    616a:	f000 b9df 	b.w	652c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    616e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6172:	429a      	cmp	r2, r3
    6174:	bf18      	it	ne
    6176:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6178:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    617a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    617c:	f104 0010 	add.w	r0, r4, #16
    6180:	f002 fb8d 	bl	889e <z_handle_obj_poll_events>
}
    6184:	e7ed      	b.n	6162 <z_impl_k_sem_give+0x22>
    6186:	bf00      	nop
    6188:	200011f9 	.word	0x200011f9

0000618c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    618c:	b513      	push	{r0, r1, r4, lr}
    618e:	f04f 0420 	mov.w	r4, #32
    6192:	f3ef 8111 	mrs	r1, BASEPRI
    6196:	f384 8812 	msr	BASEPRI_MAX, r4
    619a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    619e:	6884      	ldr	r4, [r0, #8]
    61a0:	b144      	cbz	r4, 61b4 <z_impl_k_sem_take+0x28>
		sem->count--;
    61a2:	3c01      	subs	r4, #1
    61a4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    61a6:	f381 8811 	msr	BASEPRI, r1
    61aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    61ae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    61b0:	b002      	add	sp, #8
    61b2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    61b4:	ea52 0403 	orrs.w	r4, r2, r3
    61b8:	d106      	bne.n	61c8 <z_impl_k_sem_take+0x3c>
    61ba:	f381 8811 	msr	BASEPRI, r1
    61be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    61c2:	f06f 000f 	mvn.w	r0, #15
    61c6:	e7f3      	b.n	61b0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    61c8:	e9cd 2300 	strd	r2, r3, [sp]
    61cc:	4602      	mov	r2, r0
    61ce:	4802      	ldr	r0, [pc, #8]	; (61d8 <z_impl_k_sem_take+0x4c>)
    61d0:	f000 f948 	bl	6464 <z_pend_curr>
	return ret;
    61d4:	e7ec      	b.n	61b0 <z_impl_k_sem_take+0x24>
    61d6:	bf00      	nop
    61d8:	200011f9 	.word	0x200011f9

000061dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    61dc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    61de:	4d07      	ldr	r5, [pc, #28]	; (61fc <z_reset_time_slice+0x20>)
    61e0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    61e2:	b154      	cbz	r4, 61fa <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    61e4:	f7fe fc30 	bl	4a48 <sys_clock_elapsed>
    61e8:	4b05      	ldr	r3, [pc, #20]	; (6200 <z_reset_time_slice+0x24>)
    61ea:	4404      	add	r4, r0
    61ec:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    61ee:	6828      	ldr	r0, [r5, #0]
    61f0:	2100      	movs	r1, #0
	}
}
    61f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    61f6:	f002 baa9 	b.w	874c <z_set_timeout_expiry>
}
    61fa:	bd38      	pop	{r3, r4, r5, pc}
    61fc:	20000fe8 	.word	0x20000fe8
    6200:	20000fb8 	.word	0x20000fb8

00006204 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    6204:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6206:	4d0d      	ldr	r5, [pc, #52]	; (623c <update_cache+0x38>)
    6208:	462b      	mov	r3, r5
    620a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    620e:	429c      	cmp	r4, r3
    6210:	d000      	beq.n	6214 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6212:	b904      	cbnz	r4, 6216 <update_cache+0x12>
    6214:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    6216:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6218:	b938      	cbnz	r0, 622a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    621a:	7b5a      	ldrb	r2, [r3, #13]
    621c:	06d2      	lsls	r2, r2, #27
    621e:	d104      	bne.n	622a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6220:	69a2      	ldr	r2, [r4, #24]
    6222:	b912      	cbnz	r2, 622a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    6224:	89da      	ldrh	r2, [r3, #14]
    6226:	2a7f      	cmp	r2, #127	; 0x7f
    6228:	d805      	bhi.n	6236 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    622a:	429c      	cmp	r4, r3
    622c:	d002      	beq.n	6234 <update_cache+0x30>
			z_reset_time_slice(thread);
    622e:	4620      	mov	r0, r4
    6230:	f7ff ffd4 	bl	61dc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    6234:	4623      	mov	r3, r4
    6236:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    6238:	bd38      	pop	{r3, r4, r5, pc}
    623a:	bf00      	nop
    623c:	20000fb8 	.word	0x20000fb8

00006240 <move_thread_to_end_of_prio_q>:
{
    6240:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6242:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    6246:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6248:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    624a:	7b43      	ldrb	r3, [r0, #13]
    624c:	da04      	bge.n	6258 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    624e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6252:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    6254:	f002 f958 	bl	8508 <sys_dlist_remove>
	return list->head == list;
    6258:	4a15      	ldr	r2, [pc, #84]	; (62b0 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    625a:	7b4b      	ldrb	r3, [r1, #13]
    625c:	4610      	mov	r0, r2
    625e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6262:	734b      	strb	r3, [r1, #13]
    6264:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    6268:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    626a:	4283      	cmp	r3, r0
    626c:	bf08      	it	eq
    626e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6270:	b923      	cbnz	r3, 627c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    6272:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    6276:	6021      	str	r1, [r4, #0]
	list->tail = node;
    6278:	6251      	str	r1, [r2, #36]	; 0x24
}
    627a:	e00c      	b.n	6296 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    627c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    6280:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6284:	42b5      	cmp	r5, r6
    6286:	d00e      	beq.n	62a6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6288:	42ae      	cmp	r6, r5
    628a:	dd0c      	ble.n	62a6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    628c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    628e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    6292:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    6294:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    6296:	6890      	ldr	r0, [r2, #8]
}
    6298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    629c:	1a43      	subs	r3, r0, r1
    629e:	4258      	negs	r0, r3
    62a0:	4158      	adcs	r0, r3
    62a2:	f7ff bfaf 	b.w	6204 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    62a6:	429c      	cmp	r4, r3
    62a8:	d0e3      	beq.n	6272 <move_thread_to_end_of_prio_q+0x32>
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	e7e0      	b.n	6270 <move_thread_to_end_of_prio_q+0x30>
    62ae:	bf00      	nop
    62b0:	20000fb8 	.word	0x20000fb8

000062b4 <ready_thread>:
{
    62b4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    62b6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    62ba:	7b42      	ldrb	r2, [r0, #13]
    62bc:	2b00      	cmp	r3, #0
    62be:	db29      	blt.n	6314 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    62c0:	06d3      	lsls	r3, r2, #27
    62c2:	d127      	bne.n	6314 <ready_thread+0x60>
	return node->next != NULL;
    62c4:	6983      	ldr	r3, [r0, #24]
    62c6:	bb2b      	cbnz	r3, 6314 <ready_thread+0x60>
	return list->head == list;
    62c8:	4913      	ldr	r1, [pc, #76]	; (6318 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    62ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
    62ce:	7342      	strb	r2, [r0, #13]
    62d0:	460a      	mov	r2, r1
    62d2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62d6:	4294      	cmp	r4, r2
    62d8:	bf18      	it	ne
    62da:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    62dc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    62de:	b923      	cbnz	r3, 62ea <ready_thread+0x36>
	node->prev = tail;
    62e0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    62e4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    62e6:	6248      	str	r0, [r1, #36]	; 0x24
}
    62e8:	e00c      	b.n	6304 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    62ea:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    62ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    62f2:	42b5      	cmp	r5, r6
    62f4:	d00a      	beq.n	630c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    62f6:	42ae      	cmp	r6, r5
    62f8:	dd08      	ble.n	630c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    62fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    62fc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    6300:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    6302:	6058      	str	r0, [r3, #4]
		update_cache(0);
    6304:	2000      	movs	r0, #0
}
    6306:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    6308:	f7ff bf7c 	b.w	6204 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    630c:	42a3      	cmp	r3, r4
    630e:	d0e7      	beq.n	62e0 <ready_thread+0x2c>
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	e7e4      	b.n	62de <ready_thread+0x2a>
}
    6314:	bc70      	pop	{r4, r5, r6}
    6316:	4770      	bx	lr
    6318:	20000fb8 	.word	0x20000fb8

0000631c <unready_thread>:
{
    631c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    631e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    6322:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6324:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    6326:	7b43      	ldrb	r3, [r0, #13]
    6328:	da04      	bge.n	6334 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    632a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    632e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6330:	f002 f8ea 	bl	8508 <sys_dlist_remove>
	update_cache(thread == _current);
    6334:	4b04      	ldr	r3, [pc, #16]	; (6348 <unready_thread+0x2c>)
    6336:	6898      	ldr	r0, [r3, #8]
    6338:	1a43      	subs	r3, r0, r1
    633a:	4258      	negs	r0, r3
    633c:	4158      	adcs	r0, r3
}
    633e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    6342:	f7ff bf5f 	b.w	6204 <update_cache>
    6346:	bf00      	nop
    6348:	20000fb8 	.word	0x20000fb8

0000634c <pend_locked>:
{
    634c:	b570      	push	{r4, r5, r6, lr}
    634e:	4615      	mov	r5, r2
    6350:	461c      	mov	r4, r3
    6352:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    6354:	f002 f90c 	bl	8570 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6358:	f1b4 3fff 	cmp.w	r4, #4294967295
    635c:	bf08      	it	eq
    635e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    6362:	d008      	beq.n	6376 <pend_locked+0x2a>
    6364:	462a      	mov	r2, r5
    6366:	4623      	mov	r3, r4
    6368:	f106 0018 	add.w	r0, r6, #24
    636c:	4902      	ldr	r1, [pc, #8]	; (6378 <pend_locked+0x2c>)
}
    636e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6372:	f000 baf5 	b.w	6960 <z_add_timeout>
    6376:	bd70      	pop	{r4, r5, r6, pc}
    6378:	0000852d 	.word	0x0000852d

0000637c <k_sched_time_slice_set>:
{
    637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637e:	4604      	mov	r4, r0
    6380:	460d      	mov	r5, r1
	__asm__ volatile(
    6382:	f04f 0320 	mov.w	r3, #32
    6386:	f3ef 8711 	mrs	r7, BASEPRI
    638a:	f383 8812 	msr	BASEPRI_MAX, r3
    638e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    6392:	2600      	movs	r6, #0
    6394:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6398:	f240 30e7 	movw	r0, #999	; 0x3e7
    639c:	4631      	mov	r1, r6
    639e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    63a2:	2300      	movs	r3, #0
    63a4:	fbe4 010c 	umlal	r0, r1, r4, ip
    63a8:	f7f9 fed4 	bl	154 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    63ac:	42b4      	cmp	r4, r6
    63ae:	dd02      	ble.n	63b6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    63b0:	2802      	cmp	r0, #2
    63b2:	bfb8      	it	lt
    63b4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    63b6:	4a07      	ldr	r2, [pc, #28]	; (63d4 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    63b8:	4b07      	ldr	r3, [pc, #28]	; (63d8 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    63ba:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    63bc:	4a07      	ldr	r2, [pc, #28]	; (63dc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    63be:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    63c0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    63c2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    63c4:	f7ff ff0a 	bl	61dc <z_reset_time_slice>
	__asm__ volatile(
    63c8:	f387 8811 	msr	BASEPRI, r7
    63cc:	f3bf 8f6f 	isb	sy
}
    63d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63d2:	bf00      	nop
    63d4:	20000fe8 	.word	0x20000fe8
    63d8:	20000fb8 	.word	0x20000fb8
    63dc:	20000fe4 	.word	0x20000fe4

000063e0 <z_time_slice>:
{
    63e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    63e2:	f04f 0320 	mov.w	r3, #32
    63e6:	f3ef 8511 	mrs	r5, BASEPRI
    63ea:	f383 8812 	msr	BASEPRI_MAX, r3
    63ee:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    63f2:	4b17      	ldr	r3, [pc, #92]	; (6450 <z_time_slice+0x70>)
    63f4:	4a17      	ldr	r2, [pc, #92]	; (6454 <z_time_slice+0x74>)
    63f6:	689c      	ldr	r4, [r3, #8]
    63f8:	6811      	ldr	r1, [r2, #0]
    63fa:	428c      	cmp	r4, r1
    63fc:	d107      	bne.n	640e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    63fe:	4620      	mov	r0, r4
    6400:	f7ff feec 	bl	61dc <z_reset_time_slice>
	__asm__ volatile(
    6404:	f385 8811 	msr	BASEPRI, r5
    6408:	f3bf 8f6f 	isb	sy
}
    640c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    640e:	2100      	movs	r1, #0
    6410:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    6412:	4a11      	ldr	r2, [pc, #68]	; (6458 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    6414:	6812      	ldr	r2, [r2, #0]
    6416:	b1c2      	cbz	r2, 644a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6418:	89e2      	ldrh	r2, [r4, #14]
    641a:	2a7f      	cmp	r2, #127	; 0x7f
    641c:	d815      	bhi.n	644a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    641e:	7b62      	ldrb	r2, [r4, #13]
    6420:	06d2      	lsls	r2, r2, #27
    6422:	d112      	bne.n	644a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6424:	4a0d      	ldr	r2, [pc, #52]	; (645c <z_time_slice+0x7c>)
    6426:	f994 100e 	ldrsb.w	r1, [r4, #14]
    642a:	6812      	ldr	r2, [r2, #0]
    642c:	4291      	cmp	r1, r2
    642e:	db0c      	blt.n	644a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6430:	4a0b      	ldr	r2, [pc, #44]	; (6460 <z_time_slice+0x80>)
    6432:	4294      	cmp	r4, r2
    6434:	d009      	beq.n	644a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    6436:	691a      	ldr	r2, [r3, #16]
    6438:	4282      	cmp	r2, r0
    643a:	dc03      	bgt.n	6444 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    643c:	4620      	mov	r0, r4
    643e:	f7ff feff 	bl	6240 <move_thread_to_end_of_prio_q>
    6442:	e7dc      	b.n	63fe <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    6444:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    6446:	611a      	str	r2, [r3, #16]
    6448:	e7dc      	b.n	6404 <z_time_slice+0x24>
    644a:	2200      	movs	r2, #0
    644c:	e7fb      	b.n	6446 <z_time_slice+0x66>
    644e:	bf00      	nop
    6450:	20000fb8 	.word	0x20000fb8
    6454:	20000fe0 	.word	0x20000fe0
    6458:	20000fe8 	.word	0x20000fe8
    645c:	20000fe4 	.word	0x20000fe4
    6460:	20000778 	.word	0x20000778

00006464 <z_pend_curr>:
{
    6464:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    6466:	480c      	ldr	r0, [pc, #48]	; (6498 <z_pend_curr+0x34>)
    6468:	4d0c      	ldr	r5, [pc, #48]	; (649c <z_pend_curr+0x38>)
    646a:	6886      	ldr	r6, [r0, #8]
{
    646c:	460c      	mov	r4, r1
	pending_current = _current;
    646e:	602e      	str	r6, [r5, #0]
{
    6470:	4611      	mov	r1, r2
    6472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    6476:	f04f 0620 	mov.w	r6, #32
    647a:	f3ef 8511 	mrs	r5, BASEPRI
    647e:	f386 8812 	msr	BASEPRI_MAX, r6
    6482:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    6486:	6880      	ldr	r0, [r0, #8]
    6488:	f7ff ff60 	bl	634c <pend_locked>
	ret = arch_swap(key);
    648c:	4620      	mov	r0, r4
}
    648e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6492:	f7fc bb25 	b.w	2ae0 <arch_swap>
    6496:	bf00      	nop
    6498:	20000fb8 	.word	0x20000fb8
    649c:	20000fe0 	.word	0x20000fe0

000064a0 <z_set_prio>:
{
    64a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64a2:	4604      	mov	r4, r0
    64a4:	f04f 0320 	mov.w	r3, #32
    64a8:	f3ef 8611 	mrs	r6, BASEPRI
    64ac:	f383 8812 	msr	BASEPRI_MAX, r3
    64b0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    64b4:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    64b6:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    64b8:	06da      	lsls	r2, r3, #27
    64ba:	d119      	bne.n	64f0 <z_set_prio+0x50>
	return node->next != NULL;
    64bc:	6985      	ldr	r5, [r0, #24]
    64be:	b9bd      	cbnz	r5, 64f0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    64c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    64c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    64c6:	f002 f81f 	bl	8508 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    64ca:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    64cc:	4a16      	ldr	r2, [pc, #88]	; (6528 <z_set_prio+0x88>)
    64ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64d2:	7343      	strb	r3, [r0, #13]
    64d4:	4613      	mov	r3, r2
				thread->base.prio = prio;
    64d6:	7381      	strb	r1, [r0, #14]
    64d8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64dc:	4298      	cmp	r0, r3
    64de:	bf18      	it	ne
    64e0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    64e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    64e4:	b95d      	cbnz	r5, 64fe <z_set_prio+0x5e>
	node->prev = tail;
    64e6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    64ea:	6004      	str	r4, [r0, #0]
	list->tail = node;
    64ec:	6254      	str	r4, [r2, #36]	; 0x24
}
    64ee:	e011      	b.n	6514 <z_set_prio+0x74>
    64f0:	2000      	movs	r0, #0
			thread->base.prio = prio;
    64f2:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    64f4:	f386 8811 	msr	BASEPRI, r6
    64f8:	f3bf 8f6f 	isb	sy
}
    64fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    64fe:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    6502:	42b9      	cmp	r1, r7
    6504:	d00b      	beq.n	651e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6506:	428f      	cmp	r7, r1
    6508:	dd09      	ble.n	651e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    650a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    650c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6510:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6512:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6514:	2001      	movs	r0, #1
    6516:	f7ff fe75 	bl	6204 <update_cache>
    651a:	2001      	movs	r0, #1
    651c:	e7ea      	b.n	64f4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    651e:	42a8      	cmp	r0, r5
    6520:	d0e1      	beq.n	64e6 <z_set_prio+0x46>
    6522:	682d      	ldr	r5, [r5, #0]
    6524:	e7de      	b.n	64e4 <z_set_prio+0x44>
    6526:	bf00      	nop
    6528:	20000fb8 	.word	0x20000fb8

0000652c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    652c:	b949      	cbnz	r1, 6542 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    652e:	f3ef 8005 	mrs	r0, IPSR
    6532:	b930      	cbnz	r0, 6542 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    6534:	4b05      	ldr	r3, [pc, #20]	; (654c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    6536:	69da      	ldr	r2, [r3, #28]
    6538:	689b      	ldr	r3, [r3, #8]
    653a:	429a      	cmp	r2, r3
    653c:	d001      	beq.n	6542 <z_reschedule+0x16>
    653e:	f7fc bacf 	b.w	2ae0 <arch_swap>
    6542:	f381 8811 	msr	BASEPRI, r1
    6546:	f3bf 8f6f 	isb	sy
}
    654a:	4770      	bx	lr
    654c:	20000fb8 	.word	0x20000fb8

00006550 <z_sched_start>:
{
    6550:	b510      	push	{r4, lr}
	__asm__ volatile(
    6552:	f04f 0220 	mov.w	r2, #32
    6556:	f3ef 8411 	mrs	r4, BASEPRI
    655a:	f382 8812 	msr	BASEPRI_MAX, r2
    655e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6562:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    6564:	0751      	lsls	r1, r2, #29
    6566:	d404      	bmi.n	6572 <z_sched_start+0x22>
	__asm__ volatile(
    6568:	f384 8811 	msr	BASEPRI, r4
    656c:	f3bf 8f6f 	isb	sy
}
    6570:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6572:	f022 0204 	bic.w	r2, r2, #4
    6576:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6578:	f7ff fe9c 	bl	62b4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    657c:	4621      	mov	r1, r4
}
    657e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6582:	4801      	ldr	r0, [pc, #4]	; (6588 <z_sched_start+0x38>)
    6584:	f7ff bfd2 	b.w	652c <z_reschedule>
    6588:	200011f9 	.word	0x200011f9

0000658c <z_impl_k_thread_suspend>:
{
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6590:	3018      	adds	r0, #24
    6592:	f002 f8b5 	bl	8700 <z_abort_timeout>
	__asm__ volatile(
    6596:	f04f 0320 	mov.w	r3, #32
    659a:	f3ef 8611 	mrs	r6, BASEPRI
    659e:	f383 8812 	msr	BASEPRI_MAX, r3
    65a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    65a6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    65aa:	7b63      	ldrb	r3, [r4, #13]
    65ac:	2a00      	cmp	r2, #0
    65ae:	da05      	bge.n	65bc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    65b4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65b6:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    65b8:	f001 ffa6 	bl	8508 <sys_dlist_remove>
		update_cache(thread == _current);
    65bc:	4d0b      	ldr	r5, [pc, #44]	; (65ec <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    65be:	7b63      	ldrb	r3, [r4, #13]
    65c0:	68a8      	ldr	r0, [r5, #8]
    65c2:	f043 0310 	orr.w	r3, r3, #16
    65c6:	7363      	strb	r3, [r4, #13]
    65c8:	1b03      	subs	r3, r0, r4
    65ca:	4258      	negs	r0, r3
    65cc:	4158      	adcs	r0, r3
    65ce:	f7ff fe19 	bl	6204 <update_cache>
	__asm__ volatile(
    65d2:	f386 8811 	msr	BASEPRI, r6
    65d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    65da:	68ab      	ldr	r3, [r5, #8]
    65dc:	42a3      	cmp	r3, r4
    65de:	d103      	bne.n	65e8 <z_impl_k_thread_suspend+0x5c>
}
    65e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    65e4:	f002 b85f 	b.w	86a6 <z_reschedule_unlocked>
}
    65e8:	bd70      	pop	{r4, r5, r6, pc}
    65ea:	bf00      	nop
    65ec:	20000fb8 	.word	0x20000fb8

000065f0 <k_sched_lock>:
	__asm__ volatile(
    65f0:	f04f 0320 	mov.w	r3, #32
    65f4:	f3ef 8111 	mrs	r1, BASEPRI
    65f8:	f383 8812 	msr	BASEPRI_MAX, r3
    65fc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6600:	4b04      	ldr	r3, [pc, #16]	; (6614 <k_sched_lock+0x24>)
    6602:	689a      	ldr	r2, [r3, #8]
    6604:	7bd3      	ldrb	r3, [r2, #15]
    6606:	3b01      	subs	r3, #1
    6608:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    660a:	f381 8811 	msr	BASEPRI, r1
    660e:	f3bf 8f6f 	isb	sy
}
    6612:	4770      	bx	lr
    6614:	20000fb8 	.word	0x20000fb8

00006618 <k_sched_unlock>:
{
    6618:	b510      	push	{r4, lr}
	__asm__ volatile(
    661a:	f04f 0320 	mov.w	r3, #32
    661e:	f3ef 8411 	mrs	r4, BASEPRI
    6622:	f383 8812 	msr	BASEPRI_MAX, r3
    6626:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    662a:	4b08      	ldr	r3, [pc, #32]	; (664c <k_sched_unlock+0x34>)
		update_cache(0);
    662c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    662e:	689a      	ldr	r2, [r3, #8]
    6630:	7bd3      	ldrb	r3, [r2, #15]
    6632:	3301      	adds	r3, #1
    6634:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6636:	f7ff fde5 	bl	6204 <update_cache>
	__asm__ volatile(
    663a:	f384 8811 	msr	BASEPRI, r4
    663e:	f3bf 8f6f 	isb	sy
}
    6642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6646:	f002 b82e 	b.w	86a6 <z_reschedule_unlocked>
    664a:	bf00      	nop
    664c:	20000fb8 	.word	0x20000fb8

00006650 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6650:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    6652:	4b04      	ldr	r3, [pc, #16]	; (6664 <z_sched_init+0x14>)
    6654:	4608      	mov	r0, r1
    6656:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    665a:	e9c3 2208 	strd	r2, r2, [r3, #32]
    665e:	f7ff be8d 	b.w	637c <k_sched_time_slice_set>
    6662:	bf00      	nop
    6664:	20000fb8 	.word	0x20000fb8

00006668 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    6668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    666a:	f04f 0320 	mov.w	r3, #32
    666e:	f3ef 8511 	mrs	r5, BASEPRI
    6672:	f383 8812 	msr	BASEPRI_MAX, r3
    6676:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    667a:	4919      	ldr	r1, [pc, #100]	; (66e0 <z_impl_k_yield+0x78>)
    667c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    667e:	7b43      	ldrb	r3, [r0, #13]
    6680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6684:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6686:	f001 ff3f 	bl	8508 <sys_dlist_remove>
	return list->head == list;
    668a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    668c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    668e:	7b5a      	ldrb	r2, [r3, #13]
    6690:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6694:	735a      	strb	r2, [r3, #13]
    6696:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    669a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    669c:	4282      	cmp	r2, r0
    669e:	bf08      	it	eq
    66a0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    66a2:	b922      	cbnz	r2, 66ae <z_impl_k_yield+0x46>
	node->prev = tail;
    66a4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    66a8:	6023      	str	r3, [r4, #0]
	list->tail = node;
    66aa:	624b      	str	r3, [r1, #36]	; 0x24
}
    66ac:	e00c      	b.n	66c8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    66ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    66b2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    66b6:	42be      	cmp	r6, r7
    66b8:	d00e      	beq.n	66d8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    66ba:	42b7      	cmp	r7, r6
    66bc:	dd0c      	ble.n	66d8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    66be:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    66c0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    66c4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    66c6:	6053      	str	r3, [r2, #4]
	update_cache(1);
    66c8:	2001      	movs	r0, #1
    66ca:	f7ff fd9b 	bl	6204 <update_cache>
    66ce:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    66d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    66d4:	f7fc ba04 	b.w	2ae0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    66d8:	42a2      	cmp	r2, r4
    66da:	d0e3      	beq.n	66a4 <z_impl_k_yield+0x3c>
    66dc:	6812      	ldr	r2, [r2, #0]
    66de:	e7e0      	b.n	66a2 <z_impl_k_yield+0x3a>
    66e0:	20000fb8 	.word	0x20000fb8

000066e4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    66e4:	ea50 0301 	orrs.w	r3, r0, r1
{
    66e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66ec:	4605      	mov	r5, r0
    66ee:	460e      	mov	r6, r1
	if (ticks == 0) {
    66f0:	d103      	bne.n	66fa <z_tick_sleep+0x16>
	z_impl_k_yield();
    66f2:	f7ff ffb9 	bl	6668 <z_impl_k_yield>
		k_yield();
		return 0;
    66f6:	2000      	movs	r0, #0
    66f8:	e02c      	b.n	6754 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    66fa:	1c83      	adds	r3, r0, #2
    66fc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6700:	db2a      	blt.n	6758 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6702:	f002 f83f 	bl	8784 <sys_clock_tick_get_32>
    6706:	182c      	adds	r4, r5, r0
    6708:	f04f 0320 	mov.w	r3, #32
    670c:	f3ef 8811 	mrs	r8, BASEPRI
    6710:	f383 8812 	msr	BASEPRI_MAX, r3
    6714:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6718:	4f11      	ldr	r7, [pc, #68]	; (6760 <z_tick_sleep+0x7c>)
    671a:	4b12      	ldr	r3, [pc, #72]	; (6764 <z_tick_sleep+0x80>)
    671c:	68b8      	ldr	r0, [r7, #8]
    671e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6720:	f7ff fdfc 	bl	631c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6724:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6726:	4910      	ldr	r1, [pc, #64]	; (6768 <z_tick_sleep+0x84>)
    6728:	462a      	mov	r2, r5
    672a:	4633      	mov	r3, r6
    672c:	3018      	adds	r0, #24
    672e:	f000 f917 	bl	6960 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6732:	68ba      	ldr	r2, [r7, #8]
    6734:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6736:	7b53      	ldrb	r3, [r2, #13]
    6738:	f043 0310 	orr.w	r3, r3, #16
    673c:	7353      	strb	r3, [r2, #13]
    673e:	f7fc f9cf 	bl	2ae0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6742:	f002 f81f 	bl	8784 <sys_clock_tick_get_32>
    6746:	1a20      	subs	r0, r4, r0
    6748:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    674c:	2801      	cmp	r0, #1
    674e:	f173 0300 	sbcs.w	r3, r3, #0
    6752:	dbd0      	blt.n	66f6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    6754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6758:	f06f 0401 	mvn.w	r4, #1
    675c:	1a24      	subs	r4, r4, r0
    675e:	e7d3      	b.n	6708 <z_tick_sleep+0x24>
    6760:	20000fb8 	.word	0x20000fb8
    6764:	20000fe0 	.word	0x20000fe0
    6768:	0000852d 	.word	0x0000852d

0000676c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    676c:	f1b1 3fff 	cmp.w	r1, #4294967295
    6770:	bf08      	it	eq
    6772:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6776:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6778:	d106      	bne.n	6788 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    677a:	4b08      	ldr	r3, [pc, #32]	; (679c <z_impl_k_sleep+0x30>)
    677c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    677e:	f7ff ff05 	bl	658c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6782:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6786:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6788:	f7ff ffac 	bl	66e4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    678c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6790:	fb80 0303 	smull	r0, r3, r0, r3
    6794:	0bc0      	lsrs	r0, r0, #15
    6796:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    679a:	e7f4      	b.n	6786 <z_impl_k_sleep+0x1a>
    679c:	20000fb8 	.word	0x20000fb8

000067a0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    67a0:	4b01      	ldr	r3, [pc, #4]	; (67a8 <z_impl_z_current_get+0x8>)
    67a2:	6898      	ldr	r0, [r3, #8]
    67a4:	4770      	bx	lr
    67a6:	bf00      	nop
    67a8:	20000fb8 	.word	0x20000fb8

000067ac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    67ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67b0:	4604      	mov	r4, r0
    67b2:	f04f 0320 	mov.w	r3, #32
    67b6:	f3ef 8611 	mrs	r6, BASEPRI
    67ba:	f383 8812 	msr	BASEPRI_MAX, r3
    67be:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    67c2:	7b03      	ldrb	r3, [r0, #12]
    67c4:	07d9      	lsls	r1, r3, #31
    67c6:	d50b      	bpl.n	67e0 <z_thread_abort+0x34>
	__asm__ volatile(
    67c8:	f386 8811 	msr	BASEPRI, r6
    67cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    67d0:	4040      	eors	r0, r0
    67d2:	f380 8811 	msr	BASEPRI, r0
    67d6:	f04f 0004 	mov.w	r0, #4
    67da:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    67dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    67e0:	7b43      	ldrb	r3, [r0, #13]
    67e2:	071a      	lsls	r2, r3, #28
    67e4:	d504      	bpl.n	67f0 <z_thread_abort+0x44>
    67e6:	f386 8811 	msr	BASEPRI, r6
    67ea:	f3bf 8f6f 	isb	sy
    67ee:	e7f5      	b.n	67dc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    67f0:	f023 0220 	bic.w	r2, r3, #32
    67f4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    67f8:	09d2      	lsrs	r2, r2, #7
    67fa:	d120      	bne.n	683e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    67fc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    67fe:	68a3      	ldr	r3, [r4, #8]
    6800:	b113      	cbz	r3, 6808 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6802:	4620      	mov	r0, r4
    6804:	f001 fe88 	bl	8518 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6808:	f104 0018 	add.w	r0, r4, #24
    680c:	f001 ff78 	bl	8700 <z_abort_timeout>
    6810:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6814:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    6818:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    681a:	42bd      	cmp	r5, r7
    681c:	d000      	beq.n	6820 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    681e:	b9b5      	cbnz	r5, 684e <z_thread_abort+0xa2>
		update_cache(1);
    6820:	2001      	movs	r0, #1
    6822:	f7ff fcef 	bl	6204 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6826:	4b10      	ldr	r3, [pc, #64]	; (6868 <z_thread_abort+0xbc>)
    6828:	689b      	ldr	r3, [r3, #8]
    682a:	42a3      	cmp	r3, r4
    682c:	d1db      	bne.n	67e6 <z_thread_abort+0x3a>
    682e:	f3ef 8305 	mrs	r3, IPSR
    6832:	2b00      	cmp	r3, #0
    6834:	d1d7      	bne.n	67e6 <z_thread_abort+0x3a>
    6836:	4630      	mov	r0, r6
    6838:	f7fc f952 	bl	2ae0 <arch_swap>
	return ret;
    683c:	e7d3      	b.n	67e6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    683e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6842:	f043 0308 	orr.w	r3, r3, #8
    6846:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6848:	f001 fe5e 	bl	8508 <sys_dlist_remove>
}
    684c:	e7d7      	b.n	67fe <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    684e:	4628      	mov	r0, r5
    6850:	f001 fe62 	bl	8518 <unpend_thread_no_timeout>
    6854:	f105 0018 	add.w	r0, r5, #24
    6858:	f001 ff52 	bl	8700 <z_abort_timeout>
		ready_thread(thread);
    685c:	4628      	mov	r0, r5
    685e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
    6862:	f7ff fd27 	bl	62b4 <ready_thread>
    6866:	e7d7      	b.n	6818 <z_thread_abort+0x6c>
    6868:	20000fb8 	.word	0x20000fb8

0000686c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    686c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    686e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6872:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6874:	e9cd 6700 	strd	r6, r7, [sp]
    6878:	f7ff fdf4 	bl	6464 <z_pend_curr>

	if (data != NULL) {
    687c:	b11c      	cbz	r4, 6886 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    687e:	4b03      	ldr	r3, [pc, #12]	; (688c <z_sched_wait+0x20>)
    6880:	689b      	ldr	r3, [r3, #8]
    6882:	695b      	ldr	r3, [r3, #20]
    6884:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6886:	b002      	add	sp, #8
    6888:	bdd0      	pop	{r4, r6, r7, pc}
    688a:	bf00      	nop
    688c:	20000fb8 	.word	0x20000fb8

00006890 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6890:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6892:	4806      	ldr	r0, [pc, #24]	; (68ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6894:	4a06      	ldr	r2, [pc, #24]	; (68b0 <z_data_copy+0x20>)
    6896:	4907      	ldr	r1, [pc, #28]	; (68b4 <z_data_copy+0x24>)
    6898:	1a12      	subs	r2, r2, r0
    689a:	f001 fdb3 	bl	8404 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    689e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    68a2:	4a05      	ldr	r2, [pc, #20]	; (68b8 <z_data_copy+0x28>)
    68a4:	4905      	ldr	r1, [pc, #20]	; (68bc <z_data_copy+0x2c>)
    68a6:	4806      	ldr	r0, [pc, #24]	; (68c0 <z_data_copy+0x30>)
    68a8:	f001 bdac 	b.w	8404 <z_early_memcpy>
    68ac:	20000000 	.word	0x20000000
    68b0:	20000298 	.word	0x20000298
    68b4:	00009af0 	.word	0x00009af0
    68b8:	00000000 	.word	0x00000000
    68bc:	00009af0 	.word	0x00009af0
    68c0:	20000000 	.word	0x20000000

000068c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    68c4:	4b03      	ldr	r3, [pc, #12]	; (68d4 <elapsed+0x10>)
    68c6:	681b      	ldr	r3, [r3, #0]
    68c8:	b90b      	cbnz	r3, 68ce <elapsed+0xa>
    68ca:	f7fe b8bd 	b.w	4a48 <sys_clock_elapsed>
}
    68ce:	2000      	movs	r0, #0
    68d0:	4770      	bx	lr
    68d2:	bf00      	nop
    68d4:	20000fec 	.word	0x20000fec

000068d8 <next_timeout>:

static int32_t next_timeout(void)
{
    68d8:	b510      	push	{r4, lr}
	return list->head == list;
    68da:	4b11      	ldr	r3, [pc, #68]	; (6920 <next_timeout+0x48>)
    68dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68de:	429c      	cmp	r4, r3
    68e0:	d10a      	bne.n	68f8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    68e2:	f7ff ffef 	bl	68c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    68e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    68ea:	4b0e      	ldr	r3, [pc, #56]	; (6924 <next_timeout+0x4c>)
    68ec:	691b      	ldr	r3, [r3, #16]
    68ee:	b113      	cbz	r3, 68f6 <next_timeout+0x1e>
    68f0:	4298      	cmp	r0, r3
    68f2:	bfa8      	it	ge
    68f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    68f6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    68f8:	f7ff ffe4 	bl	68c4 <elapsed>
	if ((to == NULL) ||
    68fc:	2c00      	cmp	r4, #0
    68fe:	d0f2      	beq.n	68e6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6900:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6904:	1a1b      	subs	r3, r3, r0
    6906:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    690a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    690e:	f172 0100 	sbcs.w	r1, r2, #0
    6912:	dae8      	bge.n	68e6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    6914:	2a00      	cmp	r2, #0
    6916:	bfac      	ite	ge
    6918:	4618      	movge	r0, r3
    691a:	2000      	movlt	r0, #0
    691c:	e7e5      	b.n	68ea <next_timeout+0x12>
    691e:	bf00      	nop
    6920:	20000178 	.word	0x20000178
    6924:	20000fb8 	.word	0x20000fb8

00006928 <remove_timeout>:
{
    6928:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    692a:	b170      	cbz	r0, 694a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    692c:	4b0b      	ldr	r3, [pc, #44]	; (695c <remove_timeout+0x34>)
    692e:	685b      	ldr	r3, [r3, #4]
    6930:	4298      	cmp	r0, r3
    6932:	d00a      	beq.n	694a <remove_timeout+0x22>
    6934:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    6936:	b143      	cbz	r3, 694a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6938:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    693c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6940:	1912      	adds	r2, r2, r4
    6942:	eb41 0105 	adc.w	r1, r1, r5
    6946:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    694a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    694e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6950:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6952:	2300      	movs	r3, #0
	node->prev = NULL;
    6954:	e9c0 3300 	strd	r3, r3, [r0]
}
    6958:	bd30      	pop	{r4, r5, pc}
    695a:	bf00      	nop
    695c:	20000178 	.word	0x20000178

00006960 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6960:	f1b3 3fff 	cmp.w	r3, #4294967295
    6964:	bf08      	it	eq
    6966:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696c:	4604      	mov	r4, r0
    696e:	461d      	mov	r5, r3
    6970:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6972:	d061      	beq.n	6a38 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6974:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6976:	f04f 0320 	mov.w	r3, #32
    697a:	f3ef 8711 	mrs	r7, BASEPRI
    697e:	f383 8812 	msr	BASEPRI_MAX, r3
    6982:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6986:	3201      	adds	r2, #1
    6988:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    698c:	da24      	bge.n	69d8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    698e:	f06f 0301 	mvn.w	r3, #1
    6992:	492f      	ldr	r1, [pc, #188]	; (6a50 <z_add_timeout+0xf0>)
    6994:	e9d1 2000 	ldrd	r2, r0, [r1]
    6998:	1a9b      	subs	r3, r3, r2
    699a:	f04f 32ff 	mov.w	r2, #4294967295
    699e:	eb62 0000 	sbc.w	r0, r2, r0
    69a2:	1b9e      	subs	r6, r3, r6
    69a4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    69a8:	2e01      	cmp	r6, #1
    69aa:	f170 0300 	sbcs.w	r3, r0, #0
    69ae:	da01      	bge.n	69b4 <z_add_timeout+0x54>
    69b0:	2601      	movs	r6, #1
    69b2:	2000      	movs	r0, #0
    69b4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    69b8:	4e26      	ldr	r6, [pc, #152]	; (6a54 <z_add_timeout+0xf4>)
    69ba:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    69be:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    69c0:	45b4      	cmp	ip, r6
    69c2:	bf08      	it	eq
    69c4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    69c8:	f1bc 0f00 	cmp.w	ip, #0
    69cc:	d10d      	bne.n	69ea <z_add_timeout+0x8a>
	node->prev = tail;
    69ce:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    69d2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    69d4:	6074      	str	r4, [r6, #4]
}
    69d6:	e01c      	b.n	6a12 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    69d8:	f7ff ff74 	bl	68c4 <elapsed>
    69dc:	3601      	adds	r6, #1
    69de:	f145 0500 	adc.w	r5, r5, #0
    69e2:	1836      	adds	r6, r6, r0
    69e4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    69e8:	e7e4      	b.n	69b4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    69ea:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    69ee:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    69f2:	4293      	cmp	r3, r2
    69f4:	eb71 0e00 	sbcs.w	lr, r1, r0
    69f8:	da1f      	bge.n	6a3a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    69fa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    69fc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6a00:	eb60 0001 	sbc.w	r0, r0, r1
    6a04:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    6a08:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    6a0c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6a0e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    6a12:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a14:	42b3      	cmp	r3, r6
    6a16:	d00b      	beq.n	6a30 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6a18:	429c      	cmp	r4, r3
    6a1a:	d109      	bne.n	6a30 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6a1c:	f7ff ff5c 	bl	68d8 <next_timeout>

			if (next_time == 0 ||
    6a20:	b118      	cbz	r0, 6a2a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    6a22:	4b0d      	ldr	r3, [pc, #52]	; (6a58 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    6a24:	691b      	ldr	r3, [r3, #16]
    6a26:	4283      	cmp	r3, r0
    6a28:	d002      	beq.n	6a30 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    6a2a:	2100      	movs	r1, #0
    6a2c:	f7fd ffdc 	bl	49e8 <sys_clock_set_timeout>
	__asm__ volatile(
    6a30:	f387 8811 	msr	BASEPRI, r7
    6a34:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    6a3a:	1a9b      	subs	r3, r3, r2
    6a3c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    6a40:	45ac      	cmp	ip, r5
    6a42:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6a46:	d0c2      	beq.n	69ce <z_add_timeout+0x6e>
    6a48:	f8dc c000 	ldr.w	ip, [ip]
    6a4c:	e7bc      	b.n	69c8 <z_add_timeout+0x68>
    6a4e:	bf00      	nop
    6a50:	20000878 	.word	0x20000878
    6a54:	20000178 	.word	0x20000178
    6a58:	20000fb8 	.word	0x20000fb8

00006a5c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a60:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6a62:	f7ff fcbd 	bl	63e0 <z_time_slice>
	__asm__ volatile(
    6a66:	f04f 0320 	mov.w	r3, #32
    6a6a:	f3ef 8611 	mrs	r6, BASEPRI
    6a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a72:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6a76:	4f24      	ldr	r7, [pc, #144]	; (6b08 <sys_clock_announce+0xac>)
	return list->head == list;
    6a78:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6b0c <sys_clock_announce+0xb0>
    6a7c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6a80:	4a23      	ldr	r2, [pc, #140]	; (6b10 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a82:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    6a84:	603c      	str	r4, [r7, #0]
	return list->head == list;
    6a86:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    6a8a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a8e:	d00b      	beq.n	6aa8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6a90:	b150      	cbz	r0, 6aa8 <sys_clock_announce+0x4c>
    6a92:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    6a96:	42ac      	cmp	r4, r5
    6a98:	eb71 090c 	sbcs.w	r9, r1, ip
    6a9c:	da17      	bge.n	6ace <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6a9e:	1b2d      	subs	r5, r5, r4
    6aa0:	eb6c 0c01 	sbc.w	ip, ip, r1
    6aa4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    6aa8:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    6aaa:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    6aae:	eb4e 0101 	adc.w	r1, lr, r1
    6ab2:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    6ab6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6ab8:	f7ff ff0e 	bl	68d8 <next_timeout>
    6abc:	4621      	mov	r1, r4
    6abe:	f7fd ff93 	bl	49e8 <sys_clock_set_timeout>
	__asm__ volatile(
    6ac2:	f386 8811 	msr	BASEPRI, r6
    6ac6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6ace:	18eb      	adds	r3, r5, r3
    6ad0:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    6ad4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    6ad8:	2200      	movs	r2, #0
    6ada:	2300      	movs	r3, #0
    6adc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    6ae0:	f7ff ff22 	bl	6928 <remove_timeout>
    6ae4:	f386 8811 	msr	BASEPRI, r6
    6ae8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6aec:	6883      	ldr	r3, [r0, #8]
    6aee:	4798      	blx	r3
	__asm__ volatile(
    6af0:	f04f 0320 	mov.w	r3, #32
    6af4:	f3ef 8611 	mrs	r6, BASEPRI
    6af8:	f383 8812 	msr	BASEPRI_MAX, r3
    6afc:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    6b00:	683c      	ldr	r4, [r7, #0]
    6b02:	1b64      	subs	r4, r4, r5
    6b04:	e7ba      	b.n	6a7c <sys_clock_announce+0x20>
    6b06:	bf00      	nop
    6b08:	20000fec 	.word	0x20000fec
    6b0c:	20000178 	.word	0x20000178
    6b10:	20000878 	.word	0x20000878

00006b14 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6b14:	b510      	push	{r4, lr}
    6b16:	f04f 0320 	mov.w	r3, #32
    6b1a:	f3ef 8411 	mrs	r4, BASEPRI
    6b1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b22:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    6b26:	f7ff fecd 	bl	68c4 <elapsed>
    6b2a:	4603      	mov	r3, r0
    6b2c:	4a05      	ldr	r2, [pc, #20]	; (6b44 <sys_clock_tick_get+0x30>)
    6b2e:	e9d2 0100 	ldrd	r0, r1, [r2]
    6b32:	1818      	adds	r0, r3, r0
    6b34:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    6b38:	f384 8811 	msr	BASEPRI, r4
    6b3c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6b40:	bd10      	pop	{r4, pc}
    6b42:	bf00      	nop
    6b44:	20000878 	.word	0x20000878

00006b48 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6b48:	b570      	push	{r4, r5, r6, lr}
    6b4a:	4604      	mov	r4, r0
	__asm__ volatile(
    6b4c:	f04f 0320 	mov.w	r3, #32
    6b50:	f3ef 8511 	mrs	r5, BASEPRI
    6b54:	f383 8812 	msr	BASEPRI_MAX, r3
    6b58:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6b5c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    6b60:	3301      	adds	r3, #1
    6b62:	f142 0200 	adc.w	r2, r2, #0
    6b66:	2b02      	cmp	r3, #2
    6b68:	f172 0200 	sbcs.w	r2, r2, #0
    6b6c:	d322      	bcc.n	6bb4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    6b6e:	f001 fe0d 	bl	878c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6b72:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    6b76:	3001      	adds	r0, #1
    6b78:	f141 0100 	adc.w	r1, r1, #0
    6b7c:	18c0      	adds	r0, r0, r3
    6b7e:	eb41 0102 	adc.w	r1, r1, r2
    6b82:	2801      	cmp	r0, #1
    6b84:	f171 0100 	sbcs.w	r1, r1, #0
    6b88:	db32      	blt.n	6bf0 <z_timer_expiration_handler+0xa8>
    6b8a:	f001 fdff 	bl	878c <z_impl_k_uptime_ticks>
    6b8e:	3001      	adds	r0, #1
    6b90:	f141 0300 	adc.w	r3, r1, #0
    6b94:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    6b98:	1880      	adds	r0, r0, r2
    6b9a:	f06f 0201 	mvn.w	r2, #1
    6b9e:	eb43 0301 	adc.w	r3, r3, r1
    6ba2:	f04f 31ff 	mov.w	r1, #4294967295
    6ba6:	1a12      	subs	r2, r2, r0
    6ba8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6bac:	4620      	mov	r0, r4
    6bae:	491a      	ldr	r1, [pc, #104]	; (6c18 <z_timer_expiration_handler+0xd0>)
    6bb0:	f7ff fed6 	bl	6960 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    6bb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6bb6:	3301      	adds	r3, #1
    6bb8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    6bba:	6a23      	ldr	r3, [r4, #32]
    6bbc:	b173      	cbz	r3, 6bdc <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    6bbe:	f385 8811 	msr	BASEPRI, r5
    6bc2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6bc6:	4620      	mov	r0, r4
    6bc8:	6a23      	ldr	r3, [r4, #32]
    6bca:	4798      	blx	r3
	__asm__ volatile(
    6bcc:	f04f 0320 	mov.w	r3, #32
    6bd0:	f3ef 8511 	mrs	r5, BASEPRI
    6bd4:	f383 8812 	msr	BASEPRI_MAX, r3
    6bd8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6bdc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6be0:	42a6      	cmp	r6, r4
    6be2:	d000      	beq.n	6be6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6be4:	b94e      	cbnz	r6, 6bfa <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    6be6:	f385 8811 	msr	BASEPRI, r5
    6bea:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    6bee:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6bf0:	f06f 0201 	mvn.w	r2, #1
    6bf4:	f04f 33ff 	mov.w	r3, #4294967295
    6bf8:	e7d8      	b.n	6bac <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    6bfa:	4630      	mov	r0, r6
    6bfc:	f001 fcf0 	bl	85e0 <z_unpend_thread_no_timeout>
    6c00:	2300      	movs	r3, #0
    6c02:	67f3      	str	r3, [r6, #124]	; 0x7c
    6c04:	f385 8811 	msr	BASEPRI, r5
    6c08:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    6c0c:	4630      	mov	r0, r6
}
    6c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6c12:	f001 bcd5 	b.w	85c0 <z_ready_thread>
    6c16:	bf00      	nop
    6c18:	00006b49 	.word	0x00006b49

00006c1c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c20:	bf08      	it	eq
    6c22:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c2a:	4619      	mov	r1, r3
    6c2c:	4605      	mov	r5, r0
    6c2e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    6c32:	4614      	mov	r4, r2
    6c34:	4691      	mov	r9, r2
    6c36:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6c38:	d037      	beq.n	6caa <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6c3a:	f1b0 3fff 	cmp.w	r0, #4294967295
    6c3e:	bf08      	it	eq
    6c40:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6c44:	4637      	mov	r7, r6
    6c46:	4682      	mov	sl, r0
    6c48:	d011      	beq.n	6c6e <z_impl_k_timer_start+0x52>
    6c4a:	ea50 0306 	orrs.w	r3, r0, r6
    6c4e:	d00e      	beq.n	6c6e <z_impl_k_timer_start+0x52>
    6c50:	1c72      	adds	r2, r6, #1
    6c52:	f170 33ff 	sbcs.w	r3, r0, #4294967295
    6c56:	db0a      	blt.n	6c6e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    6c58:	2e02      	cmp	r6, #2
    6c5a:	4684      	mov	ip, r0
    6c5c:	f170 0000 	sbcs.w	r0, r0, #0
    6c60:	bfbc      	itt	lt
    6c62:	2702      	movlt	r7, #2
    6c64:	f04f 0c00 	movlt.w	ip, #0
    6c68:	3f01      	subs	r7, #1
    6c6a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6c6e:	1c63      	adds	r3, r4, #1
    6c70:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6c74:	db0a      	blt.n	6c8c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6c76:	2c01      	cmp	r4, #1
    6c78:	f171 0300 	sbcs.w	r3, r1, #0
    6c7c:	4622      	mov	r2, r4
    6c7e:	bfbc      	itt	lt
    6c80:	2201      	movlt	r2, #1
    6c82:	2100      	movlt	r1, #0
    6c84:	f112 39ff 	adds.w	r9, r2, #4294967295
    6c88:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    6c8c:	4628      	mov	r0, r5
    6c8e:	f001 fd37 	bl	8700 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6c92:	2300      	movs	r3, #0
	timer->period = period;
    6c94:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    6c98:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6c9a:	464a      	mov	r2, r9
    6c9c:	4643      	mov	r3, r8
    6c9e:	4628      	mov	r0, r5
		     duration);
}
    6ca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6ca4:	4902      	ldr	r1, [pc, #8]	; (6cb0 <z_impl_k_timer_start+0x94>)
    6ca6:	f7ff be5b 	b.w	6960 <z_add_timeout>
}
    6caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cae:	bf00      	nop
    6cb0:	00006b49 	.word	0x00006b49

00006cb4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    6cb4:	b538      	push	{r3, r4, r5, lr}
    6cb6:	4603      	mov	r3, r0
	__asm__ volatile(
    6cb8:	f04f 0220 	mov.w	r2, #32
    6cbc:	f3ef 8511 	mrs	r5, BASEPRI
    6cc0:	f382 8812 	msr	BASEPRI_MAX, r2
    6cc4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    6cc8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    6cca:	2101      	movs	r1, #1
    6ccc:	6081      	str	r1, [r0, #8]
	return list->head == list;
    6cce:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    6cd0:	4283      	cmp	r3, r0
    6cd2:	d106      	bne.n	6ce2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    6cd4:	f385 8811 	msr	BASEPRI, r5
    6cd8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    6cdc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    6cde:	4620      	mov	r0, r4
    6ce0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    6ce2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6ce6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6ce8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6cea:	2300      	movs	r3, #0
	node->prev = NULL;
    6cec:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6cf0:	f001 fd7b 	bl	87ea <signal_poll_event>
	z_reschedule(&lock, key);
    6cf4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6cf6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    6cf8:	4801      	ldr	r0, [pc, #4]	; (6d00 <z_impl_k_poll_signal_raise+0x4c>)
    6cfa:	f7ff fc17 	bl	652c <z_reschedule>
	return rc;
    6cfe:	e7ee      	b.n	6cde <z_impl_k_poll_signal_raise+0x2a>
    6d00:	200011f9 	.word	0x200011f9

00006d04 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6d04:	4801      	ldr	r0, [pc, #4]	; (6d0c <boot_banner+0x8>)
    6d06:	f000 bb48 	b.w	739a <printk>
    6d0a:	bf00      	nop
    6d0c:	00009aa6 	.word	0x00009aa6

00006d10 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6d12:	2400      	movs	r4, #0
    6d14:	4b08      	ldr	r3, [pc, #32]	; (6d38 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    6d1a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    6d1c:	ab02      	add	r3, sp, #8
    6d1e:	9300      	str	r3, [sp, #0]
    6d20:	4906      	ldr	r1, [pc, #24]	; (6d3c <k_sys_work_q_init+0x2c>)
    6d22:	f04f 33ff 	mov.w	r3, #4294967295
    6d26:	4806      	ldr	r0, [pc, #24]	; (6d40 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6d28:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6d2c:	f000 f900 	bl	6f30 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6d30:	4620      	mov	r0, r4
    6d32:	b004      	add	sp, #16
    6d34:	bd10      	pop	{r4, pc}
    6d36:	bf00      	nop
    6d38:	00009ae7 	.word	0x00009ae7
    6d3c:	20002240 	.word	0x20002240
    6d40:	20000880 	.word	0x20000880

00006d44 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    6d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d48:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    6d4a:	f04f 38ff 	mov.w	r8, #4294967295
    6d4e:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
    6d52:	4e48      	ldr	r6, [pc, #288]	; (6e74 <work_queue_main+0x130>)
{
    6d54:	b085      	sub	sp, #20
	__asm__ volatile(
    6d56:	f04f 0320 	mov.w	r3, #32
    6d5a:	f3ef 8711 	mrs	r7, BASEPRI
    6d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    6d62:	f3bf 8f6f 	isb	sy
    6d66:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6d6a:	b98d      	cbnz	r5, 6d90 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    6d6c:	2102      	movs	r1, #2
    6d6e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6d72:	f001 fda2 	bl	88ba <flag_test_and_clear>
    6d76:	2800      	cmp	r0, #0
    6d78:	d143      	bne.n	6e02 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    6d7a:	2300      	movs	r3, #0
    6d7c:	4639      	mov	r1, r7
    6d7e:	e9cd 8900 	strd	r8, r9, [sp]
    6d82:	9302      	str	r3, [sp, #8]
    6d84:	f104 0288 	add.w	r2, r4, #136	; 0x88
    6d88:	483b      	ldr	r0, [pc, #236]	; (6e78 <work_queue_main+0x134>)
    6d8a:	f7ff fd6f 	bl	686c <z_sched_wait>
			continue;
    6d8e:	e7e2      	b.n	6d56 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d90:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    6d94:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d96:	4295      	cmp	r5, r2
	list->head = node;
    6d98:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = node;
    6d9c:	bf08      	it	eq
    6d9e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    6da2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6da6:	f043 0302 	orr.w	r3, r3, #2
    6daa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    6dae:	68eb      	ldr	r3, [r5, #12]
    6db0:	f023 0304 	bic.w	r3, r3, #4
    6db4:	f043 0301 	orr.w	r3, r3, #1
    6db8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    6dba:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    6dbc:	f387 8811 	msr	BASEPRI, r7
    6dc0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    6dc4:	4628      	mov	r0, r5
    6dc6:	4798      	blx	r3
	__asm__ volatile(
    6dc8:	f04f 0320 	mov.w	r3, #32
    6dcc:	f3ef 8b11 	mrs	fp, BASEPRI
    6dd0:	f383 8812 	msr	BASEPRI_MAX, r3
    6dd4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    6dd8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6dda:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    6ddc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6de0:	d419      	bmi.n	6e16 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    6de2:	60ea      	str	r2, [r5, #12]
    6de4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6de8:	f023 0302 	bic.w	r3, r3, #2
    6dec:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    6df0:	f38b 8811 	msr	BASEPRI, fp
    6df4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    6df8:	05db      	lsls	r3, r3, #23
    6dfa:	d4ac      	bmi.n	6d56 <work_queue_main+0x12>
	z_impl_k_yield();
    6dfc:	f7ff fc34 	bl	6668 <z_impl_k_yield>
}
    6e00:	e7a9      	b.n	6d56 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    6e02:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    6e06:	2200      	movs	r2, #0
    6e08:	2101      	movs	r1, #1
    6e0a:	4628      	mov	r0, r5
    6e0c:	f001 fc55 	bl	86ba <z_sched_wake>
    6e10:	2800      	cmp	r0, #0
    6e12:	d1f8      	bne.n	6e06 <work_queue_main+0xc2>
    6e14:	e7b1      	b.n	6d7a <work_queue_main+0x36>
	return list->head;
    6e16:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    6e18:	f023 0303 	bic.w	r3, r3, #3
    6e1c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6e1e:	2800      	cmp	r0, #0
    6e20:	d0e0      	beq.n	6de4 <work_queue_main+0xa0>
	return node->next;
    6e22:	2700      	movs	r7, #0
	parent->next = child;
    6e24:	463b      	mov	r3, r7
	return node->next;
    6e26:	f8d0 a000 	ldr.w	sl, [r0]
    6e2a:	2800      	cmp	r0, #0
    6e2c:	d0da      	beq.n	6de4 <work_queue_main+0xa0>
		if (wc->work == work) {
    6e2e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    6e30:	4601      	mov	r1, r0
		if (wc->work == work) {
    6e32:	4295      	cmp	r5, r2
    6e34:	d10c      	bne.n	6e50 <work_queue_main+0x10c>
    6e36:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6e38:	b99f      	cbnz	r7, 6e62 <work_queue_main+0x11e>
    6e3a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    6e3c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    6e3e:	4282      	cmp	r2, r0
    6e40:	d100      	bne.n	6e44 <work_queue_main+0x100>
	list->tail = node;
    6e42:	6071      	str	r1, [r6, #4]
	parent->next = child;
    6e44:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    6e48:	f7ff f97a 	bl	6140 <z_impl_k_sem_give>
}
    6e4c:	4639      	mov	r1, r7
    6e4e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6e50:	f1ba 0f00 	cmp.w	sl, #0
    6e54:	d00b      	beq.n	6e6e <work_queue_main+0x12a>
	return node->next;
    6e56:	f8da 2000 	ldr.w	r2, [sl]
    6e5a:	4650      	mov	r0, sl
    6e5c:	460f      	mov	r7, r1
    6e5e:	4692      	mov	sl, r2
    6e60:	e7e3      	b.n	6e2a <work_queue_main+0xe6>
	parent->next = child;
    6e62:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    6e64:	6872      	ldr	r2, [r6, #4]
    6e66:	4282      	cmp	r2, r0
	list->tail = node;
    6e68:	bf08      	it	eq
    6e6a:	6077      	streq	r7, [r6, #4]
}
    6e6c:	e7ea      	b.n	6e44 <work_queue_main+0x100>
    6e6e:	4652      	mov	r2, sl
    6e70:	e7f3      	b.n	6e5a <work_queue_main+0x116>
    6e72:	bf00      	nop
    6e74:	20000ff0 	.word	0x20000ff0
    6e78:	200011f9 	.word	0x200011f9

00006e7c <submit_to_queue_locked>:
{
    6e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    6e7e:	68c3      	ldr	r3, [r0, #12]
{
    6e80:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6e82:	079a      	lsls	r2, r3, #30
{
    6e84:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6e86:	f3c3 0640 	ubfx	r6, r3, #1, #1
    6e8a:	d42c      	bmi.n	6ee6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    6e8c:	075b      	lsls	r3, r3, #29
    6e8e:	d41a      	bmi.n	6ec6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    6e90:	680b      	ldr	r3, [r1, #0]
    6e92:	b90b      	cbnz	r3, 6e98 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    6e94:	6883      	ldr	r3, [r0, #8]
    6e96:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    6e98:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    6e9a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    6e9c:	bf42      	ittt	mi
    6e9e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    6ea0:	2602      	movmi	r6, #2
			*queuep = work->queue;
    6ea2:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    6ea4:	683d      	ldr	r5, [r7, #0]
		ret = 1;
    6ea6:	bf58      	it	pl
    6ea8:	2601      	movpl	r6, #1
	if (queue == NULL) {
    6eaa:	2d00      	cmp	r5, #0
    6eac:	d03a      	beq.n	6f24 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6eae:	4b1f      	ldr	r3, [pc, #124]	; (6f2c <submit_to_queue_locked+0xb0>)
    6eb0:	689b      	ldr	r3, [r3, #8]
    6eb2:	42ab      	cmp	r3, r5
    6eb4:	d00a      	beq.n	6ecc <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    6eb6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6eba:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    6ebc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6ec0:	d414      	bmi.n	6eec <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    6ec2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    6ec6:	2300      	movs	r3, #0
    6ec8:	603b      	str	r3, [r7, #0]
	return ret;
    6eca:	e025      	b.n	6f18 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6ecc:	f001 fae9 	bl	84a2 <k_is_in_isr>
    6ed0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    6ed4:	2800      	cmp	r0, #0
    6ed6:	d1f0      	bne.n	6eba <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6ed8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    6eda:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6ede:	d5f0      	bpl.n	6ec2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    6ee0:	b152      	cbz	r2, 6ef8 <submit_to_queue_locked+0x7c>
    6ee2:	075b      	lsls	r3, r3, #29
    6ee4:	d408      	bmi.n	6ef8 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    6ee6:	f06f 060f 	mvn.w	r6, #15
    6eea:	e7ec      	b.n	6ec6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    6eec:	2a00      	cmp	r2, #0
    6eee:	d1fa      	bne.n	6ee6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    6ef0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d1f6      	bne.n	6ee6 <submit_to_queue_locked+0x6a>
	parent->next = child;
    6ef8:	2300      	movs	r3, #0
    6efa:	6023      	str	r3, [r4, #0]
	return list->tail;
    6efc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    6f00:	b963      	cbnz	r3, 6f1c <submit_to_queue_locked+0xa0>
	list->head = node;
    6f02:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    6f06:	4628      	mov	r0, r5
    6f08:	f001 fce2 	bl	88d0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    6f0c:	68e3      	ldr	r3, [r4, #12]
    6f0e:	f043 0304 	orr.w	r3, r3, #4
    6f12:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    6f14:	683b      	ldr	r3, [r7, #0]
    6f16:	60a3      	str	r3, [r4, #8]
}
    6f18:	4630      	mov	r0, r6
    6f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    6f1c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6f1e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    6f22:	e7f0      	b.n	6f06 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    6f24:	f06f 0615 	mvn.w	r6, #21
    6f28:	e7cd      	b.n	6ec6 <submit_to_queue_locked+0x4a>
    6f2a:	bf00      	nop
    6f2c:	20000fb8 	.word	0x20000fb8

00006f30 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    6f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f32:	4604      	mov	r4, r0
	list->head = NULL;
    6f34:	2000      	movs	r0, #0
    6f36:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    6f38:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    6f3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    6f3e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    6f42:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    6f46:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6f4a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    6f4e:	b31d      	cbz	r5, 6f98 <k_work_queue_start+0x68>
    6f50:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    6f52:	2800      	cmp	r0, #0
    6f54:	f240 1001 	movw	r0, #257	; 0x101
    6f58:	bf08      	it	eq
    6f5a:	2001      	moveq	r0, #1
	*flagp = flags;
    6f5c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6f60:	2000      	movs	r0, #0
    6f62:	f04f 36ff 	mov.w	r6, #4294967295
    6f66:	f04f 37ff 	mov.w	r7, #4294967295
    6f6a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    6f6e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    6f72:	e9cd 6706 	strd	r6, r7, [sp, #24]
    6f76:	4620      	mov	r0, r4
    6f78:	4b08      	ldr	r3, [pc, #32]	; (6f9c <k_work_queue_start+0x6c>)
    6f7a:	9400      	str	r4, [sp, #0]
    6f7c:	f7fe ff86 	bl	5e8c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    6f80:	b125      	cbz	r5, 6f8c <k_work_queue_start+0x5c>
    6f82:	6829      	ldr	r1, [r5, #0]
    6f84:	b111      	cbz	r1, 6f8c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    6f86:	4620      	mov	r0, r4
    6f88:	f001 fa91 	bl	84ae <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    6f8c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    6f8e:	b009      	add	sp, #36	; 0x24
    6f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6f94:	f001 ba90 	b.w	84b8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    6f98:	2001      	movs	r0, #1
    6f9a:	e7df      	b.n	6f5c <k_work_queue_start+0x2c>
    6f9c:	00006d45 	.word	0x00006d45

00006fa0 <nrf_cc3xx_platform_init_no_rng>:
    6fa0:	b510      	push	{r4, lr}
    6fa2:	4c0a      	ldr	r4, [pc, #40]	; (6fcc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6fa4:	6823      	ldr	r3, [r4, #0]
    6fa6:	b11b      	cbz	r3, 6fb0 <nrf_cc3xx_platform_init_no_rng+0x10>
    6fa8:	2301      	movs	r3, #1
    6faa:	2000      	movs	r0, #0
    6fac:	6023      	str	r3, [r4, #0]
    6fae:	bd10      	pop	{r4, pc}
    6fb0:	f000 f8f4 	bl	719c <CC_LibInitNoRng>
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d0f7      	beq.n	6fa8 <nrf_cc3xx_platform_init_no_rng+0x8>
    6fb8:	3801      	subs	r0, #1
    6fba:	2807      	cmp	r0, #7
    6fbc:	d803      	bhi.n	6fc6 <nrf_cc3xx_platform_init_no_rng+0x26>
    6fbe:	4b04      	ldr	r3, [pc, #16]	; (6fd0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6fc0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6fc4:	bd10      	pop	{r4, pc}
    6fc6:	4803      	ldr	r0, [pc, #12]	; (6fd4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6fc8:	bd10      	pop	{r4, pc}
    6fca:	bf00      	nop
    6fcc:	20000ff8 	.word	0x20000ff8
    6fd0:	00008f54 	.word	0x00008f54
    6fd4:	ffff8ffe 	.word	0xffff8ffe

00006fd8 <nrf_cc3xx_platform_abort>:
    6fd8:	f3bf 8f4f 	dsb	sy
    6fdc:	4905      	ldr	r1, [pc, #20]	; (6ff4 <nrf_cc3xx_platform_abort+0x1c>)
    6fde:	4b06      	ldr	r3, [pc, #24]	; (6ff8 <nrf_cc3xx_platform_abort+0x20>)
    6fe0:	68ca      	ldr	r2, [r1, #12]
    6fe2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6fe6:	4313      	orrs	r3, r2
    6fe8:	60cb      	str	r3, [r1, #12]
    6fea:	f3bf 8f4f 	dsb	sy
    6fee:	bf00      	nop
    6ff0:	e7fd      	b.n	6fee <nrf_cc3xx_platform_abort+0x16>
    6ff2:	bf00      	nop
    6ff4:	e000ed00 	.word	0xe000ed00
    6ff8:	05fa0004 	.word	0x05fa0004

00006ffc <CC_PalAbort>:
    6ffc:	b430      	push	{r4, r5}
    6ffe:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    7002:	2500      	movs	r5, #0
    7004:	4b0b      	ldr	r3, [pc, #44]	; (7034 <CC_PalAbort+0x38>)
    7006:	4c0c      	ldr	r4, [pc, #48]	; (7038 <CC_PalAbort+0x3c>)
    7008:	490c      	ldr	r1, [pc, #48]	; (703c <CC_PalAbort+0x40>)
    700a:	6849      	ldr	r1, [r1, #4]
    700c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    7010:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    7014:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    7018:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    701c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    7020:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    7024:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    7028:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    702c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    7030:	bc30      	pop	{r4, r5}
    7032:	4708      	bx	r1
    7034:	50845000 	.word	0x50845000
    7038:	50844000 	.word	0x50844000
    703c:	20000180 	.word	0x20000180

00007040 <nrf_cc3xx_platform_set_abort>:
    7040:	4b02      	ldr	r3, [pc, #8]	; (704c <nrf_cc3xx_platform_set_abort+0xc>)
    7042:	e9d0 1200 	ldrd	r1, r2, [r0]
    7046:	e9c3 1200 	strd	r1, r2, [r3]
    704a:	4770      	bx	lr
    704c:	20000180 	.word	0x20000180

00007050 <mutex_free>:
    7050:	b510      	push	{r4, lr}
    7052:	4604      	mov	r4, r0
    7054:	b150      	cbz	r0, 706c <mutex_free+0x1c>
    7056:	6863      	ldr	r3, [r4, #4]
    7058:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    705c:	d005      	beq.n	706a <mutex_free+0x1a>
    705e:	4a06      	ldr	r2, [pc, #24]	; (7078 <mutex_free+0x28>)
    7060:	4293      	cmp	r3, r2
    7062:	d002      	beq.n	706a <mutex_free+0x1a>
    7064:	2300      	movs	r3, #0
    7066:	6062      	str	r2, [r4, #4]
    7068:	6023      	str	r3, [r4, #0]
    706a:	bd10      	pop	{r4, pc}
    706c:	4b03      	ldr	r3, [pc, #12]	; (707c <mutex_free+0x2c>)
    706e:	4804      	ldr	r0, [pc, #16]	; (7080 <mutex_free+0x30>)
    7070:	685b      	ldr	r3, [r3, #4]
    7072:	4798      	blx	r3
    7074:	e7ef      	b.n	7056 <mutex_free+0x6>
    7076:	bf00      	nop
    7078:	a95c5f2c 	.word	0xa95c5f2c
    707c:	20000180 	.word	0x20000180
    7080:	00008f74 	.word	0x00008f74

00007084 <mutex_lock>:
    7084:	b1c8      	cbz	r0, 70ba <mutex_lock+0x36>
    7086:	6843      	ldr	r3, [r0, #4]
    7088:	4a0d      	ldr	r2, [pc, #52]	; (70c0 <mutex_lock+0x3c>)
    708a:	4293      	cmp	r3, r2
    708c:	d013      	beq.n	70b6 <mutex_lock+0x32>
    708e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    7092:	d00e      	beq.n	70b2 <mutex_lock+0x2e>
    7094:	2301      	movs	r3, #1
    7096:	e850 2f00 	ldrex	r2, [r0]
    709a:	4619      	mov	r1, r3
    709c:	e840 1c00 	strex	ip, r1, [r0]
    70a0:	f09c 0f00 	teq	ip, #0
    70a4:	d1f7      	bne.n	7096 <mutex_lock+0x12>
    70a6:	2a01      	cmp	r2, #1
    70a8:	d0f5      	beq.n	7096 <mutex_lock+0x12>
    70aa:	f3bf 8f5f 	dmb	sy
    70ae:	2000      	movs	r0, #0
    70b0:	4770      	bx	lr
    70b2:	4804      	ldr	r0, [pc, #16]	; (70c4 <mutex_lock+0x40>)
    70b4:	4770      	bx	lr
    70b6:	4804      	ldr	r0, [pc, #16]	; (70c8 <mutex_lock+0x44>)
    70b8:	4770      	bx	lr
    70ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    70be:	4770      	bx	lr
    70c0:	a95c5f2c 	.word	0xa95c5f2c
    70c4:	ffff8fe9 	.word	0xffff8fe9
    70c8:	ffff8fea 	.word	0xffff8fea

000070cc <mutex_unlock>:
    70cc:	4603      	mov	r3, r0
    70ce:	b180      	cbz	r0, 70f2 <mutex_unlock+0x26>
    70d0:	6842      	ldr	r2, [r0, #4]
    70d2:	4909      	ldr	r1, [pc, #36]	; (70f8 <mutex_unlock+0x2c>)
    70d4:	428a      	cmp	r2, r1
    70d6:	d00a      	beq.n	70ee <mutex_unlock+0x22>
    70d8:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    70dc:	d005      	beq.n	70ea <mutex_unlock+0x1e>
    70de:	f3bf 8f5f 	dmb	sy
    70e2:	2200      	movs	r2, #0
    70e4:	4610      	mov	r0, r2
    70e6:	601a      	str	r2, [r3, #0]
    70e8:	4770      	bx	lr
    70ea:	4804      	ldr	r0, [pc, #16]	; (70fc <mutex_unlock+0x30>)
    70ec:	4770      	bx	lr
    70ee:	4804      	ldr	r0, [pc, #16]	; (7100 <mutex_unlock+0x34>)
    70f0:	4770      	bx	lr
    70f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    70f6:	4770      	bx	lr
    70f8:	a95c5f2c 	.word	0xa95c5f2c
    70fc:	ffff8fe9 	.word	0xffff8fe9
    7100:	ffff8fea 	.word	0xffff8fea

00007104 <mutex_init>:
    7104:	b510      	push	{r4, lr}
    7106:	4604      	mov	r4, r0
    7108:	b120      	cbz	r0, 7114 <mutex_init+0x10>
    710a:	2300      	movs	r3, #0
    710c:	4a03      	ldr	r2, [pc, #12]	; (711c <mutex_init+0x18>)
    710e:	6023      	str	r3, [r4, #0]
    7110:	6062      	str	r2, [r4, #4]
    7112:	bd10      	pop	{r4, pc}
    7114:	4802      	ldr	r0, [pc, #8]	; (7120 <mutex_init+0x1c>)
    7116:	f7ff ff71 	bl	6ffc <CC_PalAbort>
    711a:	e7f6      	b.n	710a <mutex_init+0x6>
    711c:	3a00003a 	.word	0x3a00003a
    7120:	00008f9c 	.word	0x00008f9c

00007124 <nrf_cc3xx_platform_set_mutexes>:
    7124:	b570      	push	{r4, r5, r6, lr}
    7126:	4c19      	ldr	r4, [pc, #100]	; (718c <nrf_cc3xx_platform_set_mutexes+0x68>)
    7128:	f8d0 c004 	ldr.w	ip, [r0, #4]
    712c:	6806      	ldr	r6, [r0, #0]
    712e:	f8c4 c004 	str.w	ip, [r4, #4]
    7132:	f8d0 c008 	ldr.w	ip, [r0, #8]
    7136:	68c0      	ldr	r0, [r0, #12]
    7138:	f8c4 c008 	str.w	ip, [r4, #8]
    713c:	60e0      	str	r0, [r4, #12]
    713e:	6026      	str	r6, [r4, #0]
    7140:	6808      	ldr	r0, [r1, #0]
    7142:	4b13      	ldr	r3, [pc, #76]	; (7190 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    7144:	4d13      	ldr	r5, [pc, #76]	; (7194 <nrf_cc3xx_platform_set_mutexes+0x70>)
    7146:	6018      	str	r0, [r3, #0]
    7148:	6848      	ldr	r0, [r1, #4]
    714a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    714e:	6058      	str	r0, [r3, #4]
    7150:	6888      	ldr	r0, [r1, #8]
    7152:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    7156:	6098      	str	r0, [r3, #8]
    7158:	68c8      	ldr	r0, [r1, #12]
    715a:	6909      	ldr	r1, [r1, #16]
    715c:	60d8      	str	r0, [r3, #12]
    715e:	6119      	str	r1, [r3, #16]
    7160:	d012      	beq.n	7188 <nrf_cc3xx_platform_set_mutexes+0x64>
    7162:	2300      	movs	r3, #0
    7164:	4a0c      	ldr	r2, [pc, #48]	; (7198 <nrf_cc3xx_platform_set_mutexes+0x74>)
    7166:	f505 708a 	add.w	r0, r5, #276	; 0x114
    716a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    716e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    7172:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    7176:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    717a:	47b0      	blx	r6
    717c:	6823      	ldr	r3, [r4, #0]
    717e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    7182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7186:	4718      	bx	r3
    7188:	bd70      	pop	{r4, r5, r6, pc}
    718a:	bf00      	nop
    718c:	20000190 	.word	0x20000190
    7190:	200001a0 	.word	0x200001a0
    7194:	20001010 	.word	0x20001010
    7198:	a95c5f2c 	.word	0xa95c5f2c

0000719c <CC_LibInitNoRng>:
    719c:	b508      	push	{r3, lr}
    719e:	f000 f811 	bl	71c4 <CC_HalInit>
    71a2:	b930      	cbnz	r0, 71b2 <CC_LibInitNoRng+0x16>
    71a4:	f000 f810 	bl	71c8 <CC_PalInit>
    71a8:	b938      	cbnz	r0, 71ba <CC_LibInitNoRng+0x1e>
    71aa:	4a05      	ldr	r2, [pc, #20]	; (71c0 <CC_LibInitNoRng+0x24>)
    71ac:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    71b0:	bd08      	pop	{r3, pc}
    71b2:	f000 f837 	bl	7224 <CC_PalTerminate>
    71b6:	2003      	movs	r0, #3
    71b8:	bd08      	pop	{r3, pc}
    71ba:	2004      	movs	r0, #4
    71bc:	bd08      	pop	{r3, pc}
    71be:	bf00      	nop
    71c0:	50845000 	.word	0x50845000

000071c4 <CC_HalInit>:
    71c4:	2000      	movs	r0, #0
    71c6:	4770      	bx	lr

000071c8 <CC_PalInit>:
    71c8:	b510      	push	{r4, lr}
    71ca:	4811      	ldr	r0, [pc, #68]	; (7210 <CC_PalInit+0x48>)
    71cc:	f000 f848 	bl	7260 <CC_PalMutexCreate>
    71d0:	b100      	cbz	r0, 71d4 <CC_PalInit+0xc>
    71d2:	bd10      	pop	{r4, pc}
    71d4:	480f      	ldr	r0, [pc, #60]	; (7214 <CC_PalInit+0x4c>)
    71d6:	f000 f843 	bl	7260 <CC_PalMutexCreate>
    71da:	2800      	cmp	r0, #0
    71dc:	d1f9      	bne.n	71d2 <CC_PalInit+0xa>
    71de:	4c0e      	ldr	r4, [pc, #56]	; (7218 <CC_PalInit+0x50>)
    71e0:	4620      	mov	r0, r4
    71e2:	f000 f83d 	bl	7260 <CC_PalMutexCreate>
    71e6:	2800      	cmp	r0, #0
    71e8:	d1f3      	bne.n	71d2 <CC_PalInit+0xa>
    71ea:	4b0c      	ldr	r3, [pc, #48]	; (721c <CC_PalInit+0x54>)
    71ec:	480c      	ldr	r0, [pc, #48]	; (7220 <CC_PalInit+0x58>)
    71ee:	601c      	str	r4, [r3, #0]
    71f0:	f000 f836 	bl	7260 <CC_PalMutexCreate>
    71f4:	4601      	mov	r1, r0
    71f6:	2800      	cmp	r0, #0
    71f8:	d1eb      	bne.n	71d2 <CC_PalInit+0xa>
    71fa:	f000 f82d 	bl	7258 <CC_PalDmaInit>
    71fe:	4604      	mov	r4, r0
    7200:	b108      	cbz	r0, 7206 <CC_PalInit+0x3e>
    7202:	4620      	mov	r0, r4
    7204:	bd10      	pop	{r4, pc}
    7206:	f000 f83f 	bl	7288 <CC_PalPowerSaveModeInit>
    720a:	4620      	mov	r0, r4
    720c:	e7fa      	b.n	7204 <CC_PalInit+0x3c>
    720e:	bf00      	nop
    7210:	200001d8 	.word	0x200001d8
    7214:	200001cc 	.word	0x200001cc
    7218:	200001d4 	.word	0x200001d4
    721c:	200001dc 	.word	0x200001dc
    7220:	200001d0 	.word	0x200001d0

00007224 <CC_PalTerminate>:
    7224:	b508      	push	{r3, lr}
    7226:	4808      	ldr	r0, [pc, #32]	; (7248 <CC_PalTerminate+0x24>)
    7228:	f000 f824 	bl	7274 <CC_PalMutexDestroy>
    722c:	4807      	ldr	r0, [pc, #28]	; (724c <CC_PalTerminate+0x28>)
    722e:	f000 f821 	bl	7274 <CC_PalMutexDestroy>
    7232:	4807      	ldr	r0, [pc, #28]	; (7250 <CC_PalTerminate+0x2c>)
    7234:	f000 f81e 	bl	7274 <CC_PalMutexDestroy>
    7238:	4806      	ldr	r0, [pc, #24]	; (7254 <CC_PalTerminate+0x30>)
    723a:	f000 f81b 	bl	7274 <CC_PalMutexDestroy>
    723e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7242:	f000 b80b 	b.w	725c <CC_PalDmaTerminate>
    7246:	bf00      	nop
    7248:	200001d8 	.word	0x200001d8
    724c:	200001cc 	.word	0x200001cc
    7250:	200001d4 	.word	0x200001d4
    7254:	200001d0 	.word	0x200001d0

00007258 <CC_PalDmaInit>:
    7258:	2000      	movs	r0, #0
    725a:	4770      	bx	lr

0000725c <CC_PalDmaTerminate>:
    725c:	4770      	bx	lr
    725e:	bf00      	nop

00007260 <CC_PalMutexCreate>:
    7260:	b508      	push	{r3, lr}
    7262:	4b03      	ldr	r3, [pc, #12]	; (7270 <CC_PalMutexCreate+0x10>)
    7264:	6802      	ldr	r2, [r0, #0]
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	6810      	ldr	r0, [r2, #0]
    726a:	4798      	blx	r3
    726c:	2000      	movs	r0, #0
    726e:	bd08      	pop	{r3, pc}
    7270:	20000190 	.word	0x20000190

00007274 <CC_PalMutexDestroy>:
    7274:	b508      	push	{r3, lr}
    7276:	4b03      	ldr	r3, [pc, #12]	; (7284 <CC_PalMutexDestroy+0x10>)
    7278:	6802      	ldr	r2, [r0, #0]
    727a:	685b      	ldr	r3, [r3, #4]
    727c:	6810      	ldr	r0, [r2, #0]
    727e:	4798      	blx	r3
    7280:	2000      	movs	r0, #0
    7282:	bd08      	pop	{r3, pc}
    7284:	20000190 	.word	0x20000190

00007288 <CC_PalPowerSaveModeInit>:
    7288:	b570      	push	{r4, r5, r6, lr}
    728a:	4c09      	ldr	r4, [pc, #36]	; (72b0 <CC_PalPowerSaveModeInit+0x28>)
    728c:	4d09      	ldr	r5, [pc, #36]	; (72b4 <CC_PalPowerSaveModeInit+0x2c>)
    728e:	6920      	ldr	r0, [r4, #16]
    7290:	68ab      	ldr	r3, [r5, #8]
    7292:	4798      	blx	r3
    7294:	b118      	cbz	r0, 729e <CC_PalPowerSaveModeInit+0x16>
    7296:	4b08      	ldr	r3, [pc, #32]	; (72b8 <CC_PalPowerSaveModeInit+0x30>)
    7298:	4808      	ldr	r0, [pc, #32]	; (72bc <CC_PalPowerSaveModeInit+0x34>)
    729a:	685b      	ldr	r3, [r3, #4]
    729c:	4798      	blx	r3
    729e:	2100      	movs	r1, #0
    72a0:	4a07      	ldr	r2, [pc, #28]	; (72c0 <CC_PalPowerSaveModeInit+0x38>)
    72a2:	68eb      	ldr	r3, [r5, #12]
    72a4:	6011      	str	r1, [r2, #0]
    72a6:	6920      	ldr	r0, [r4, #16]
    72a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72ac:	4718      	bx	r3
    72ae:	bf00      	nop
    72b0:	200001a0 	.word	0x200001a0
    72b4:	20000190 	.word	0x20000190
    72b8:	20000180 	.word	0x20000180
    72bc:	00008fc0 	.word	0x00008fc0
    72c0:	2000100c 	.word	0x2000100c

000072c4 <cbpprintf_external>:
{
    72c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72c8:	4606      	mov	r6, r0
    72ca:	460d      	mov	r5, r1
    72cc:	4617      	mov	r7, r2
	if (buf == NULL) {
    72ce:	4698      	mov	r8, r3
    72d0:	b32b      	cbz	r3, 731e <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
    72d2:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
    72d6:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    72da:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    72de:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    72e0:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    72e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    72e6:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    72ea:	441c      	add	r4, r3
    72ec:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    72ee:	45ca      	cmp	sl, r9
    72f0:	d309      	bcc.n	7306 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    72f2:	4639      	mov	r1, r7
    72f4:	4630      	mov	r0, r6
    72f6:	46ac      	mov	ip, r5
    72f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    72fc:	f108 0308 	add.w	r3, r8, #8
}
    7300:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    7304:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    7306:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
    730a:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
    730e:	4620      	mov	r0, r4
		*ps = s;
    7310:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    7314:	f000 fc96 	bl	7c44 <strlen>
    7318:	3001      	adds	r0, #1
    731a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    731c:	e7e7      	b.n	72ee <cbpprintf_external+0x2a>
}
    731e:	f06f 0015 	mvn.w	r0, #21
    7322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007326 <is_ptr>:
{
    7326:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    7328:	2500      	movs	r5, #0
{
    732a:	4602      	mov	r2, r0
	bool mod = false;
    732c:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    732e:	4614      	mov	r4, r2
    7330:	f814 3b01 	ldrb.w	r3, [r4], #1
    7334:	b90b      	cbnz	r3, 733a <is_ptr+0x14>
					return false;
    7336:	4618      	mov	r0, r3
    7338:	e009      	b.n	734e <is_ptr+0x28>
		if (mod) {
    733a:	b198      	cbz	r0, 7364 <is_ptr+0x3e>
			if (cnt == n) {
    733c:	428d      	cmp	r5, r1
    733e:	d107      	bne.n	7350 <is_ptr+0x2a>
				if (c == 'p') {
    7340:	2b70      	cmp	r3, #112	; 0x70
    7342:	d004      	beq.n	734e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    7344:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    7348:	2a3a      	cmp	r2, #58	; 0x3a
    734a:	d80b      	bhi.n	7364 <is_ptr+0x3e>
					return false;
    734c:	2000      	movs	r0, #0
}
    734e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    7350:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    7354:	2e3a      	cmp	r6, #58	; 0x3a
    7356:	d805      	bhi.n	7364 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    7358:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    735a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    735c:	1c94      	adds	r4, r2, #2
    735e:	2b00      	cmp	r3, #0
    7360:	d0e9      	beq.n	7336 <is_ptr+0x10>
    7362:	2000      	movs	r0, #0
		if (c == '%') {
    7364:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
    7366:	4622      	mov	r2, r4
			mod = !mod;
    7368:	bf08      	it	eq
    736a:	f080 0001 	eoreq.w	r0, r0, #1
    736e:	e7de      	b.n	732e <is_ptr+0x8>

00007370 <arch_printk_char_out>:
}
    7370:	2000      	movs	r0, #0
    7372:	4770      	bx	lr

00007374 <str_out>:
{
    7374:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7376:	688a      	ldr	r2, [r1, #8]
    7378:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    737a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    737c:	b114      	cbz	r4, 7384 <str_out+0x10>
    737e:	684b      	ldr	r3, [r1, #4]
    7380:	4293      	cmp	r3, r2
    7382:	dc01      	bgt.n	7388 <str_out+0x14>
		ctx->count++;
    7384:	608d      	str	r5, [r1, #8]
}
    7386:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    7388:	3b01      	subs	r3, #1
    738a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    738c:	bf08      	it	eq
    738e:	2200      	moveq	r2, #0
    7390:	608d      	str	r5, [r1, #8]
    7392:	bf0c      	ite	eq
    7394:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    7396:	54a0      	strbne	r0, [r4, r2]
    7398:	e7f5      	b.n	7386 <str_out+0x12>

0000739a <printk>:
{
    739a:	b40f      	push	{r0, r1, r2, r3}
    739c:	b507      	push	{r0, r1, r2, lr}
    739e:	a904      	add	r1, sp, #16
    73a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    73a4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    73a6:	f000 fb80 	bl	7aaa <z_log_vprintk>
}
    73aa:	b003      	add	sp, #12
    73ac:	f85d eb04 	ldr.w	lr, [sp], #4
    73b0:	b004      	add	sp, #16
    73b2:	4770      	bx	lr

000073b4 <snprintk>:
{
    73b4:	b40c      	push	{r2, r3}
    73b6:	b507      	push	{r0, r1, r2, lr}
    73b8:	ab04      	add	r3, sp, #16
    73ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    73be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    73c0:	f7f9 fdd6 	bl	f70 <vsnprintk>
}
    73c4:	b003      	add	sp, #12
    73c6:	f85d eb04 	ldr.w	lr, [sp], #4
    73ca:	b002      	add	sp, #8
    73cc:	4770      	bx	lr

000073ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    73ce:	4604      	mov	r4, r0
    73d0:	b508      	push	{r3, lr}
    73d2:	4608      	mov	r0, r1
    73d4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    73d6:	461a      	mov	r2, r3
    73d8:	47a0      	blx	r4
	return z_impl_z_current_get();
    73da:	f7ff f9e1 	bl	67a0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    73de:	f7fb ff99 	bl	3314 <z_impl_k_thread_abort>

000073e2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    73e2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    73e4:	f013 0307 	ands.w	r3, r3, #7
    73e8:	d105      	bne.n	73f6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    73ea:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    73ec:	2b00      	cmp	r3, #0
    73ee:	bf0c      	ite	eq
    73f0:	2000      	moveq	r0, #0
    73f2:	2003      	movne	r0, #3
    73f4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    73f6:	2b02      	cmp	r3, #2
    73f8:	d105      	bne.n	7406 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    73fa:	8b40      	ldrh	r0, [r0, #26]
    73fc:	fab0 f080 	clz	r0, r0
    7400:	0940      	lsrs	r0, r0, #5
    7402:	0080      	lsls	r0, r0, #2
    7404:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7406:	2b01      	cmp	r3, #1
    7408:	d105      	bne.n	7416 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    740a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    740c:	2b00      	cmp	r3, #0
    740e:	bf0c      	ite	eq
    7410:	2000      	moveq	r0, #0
    7412:	2005      	movne	r0, #5
    7414:	4770      	bx	lr
	int evt = EVT_NOP;
    7416:	2000      	movs	r0, #0
}
    7418:	4770      	bx	lr

0000741a <validate_args>:
{
    741a:	b510      	push	{r4, lr}
    741c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    741e:	b100      	cbz	r0, 7422 <validate_args+0x8>
    7420:	b911      	cbnz	r1, 7428 <validate_args+0xe>
		return -EINVAL;
    7422:	f06f 0015 	mvn.w	r0, #21
}
    7426:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    7428:	1d08      	adds	r0, r1, #4
    742a:	f000 f895 	bl	7558 <sys_notify_validate>
	if ((rv == 0)
    742e:	2800      	cmp	r0, #0
    7430:	d1f9      	bne.n	7426 <validate_args+0xc>
	    && ((cli->notify.flags
    7432:	68a3      	ldr	r3, [r4, #8]
    7434:	2b03      	cmp	r3, #3
    7436:	d9f6      	bls.n	7426 <validate_args+0xc>
    7438:	e7f3      	b.n	7422 <validate_args+0x8>

0000743a <notify_one>:
{
    743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    743e:	460d      	mov	r5, r1
    7440:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7442:	4619      	mov	r1, r3
    7444:	1d28      	adds	r0, r5, #4
{
    7446:	4690      	mov	r8, r2
    7448:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    744a:	f000 f899 	bl	7580 <sys_notify_finalize>
	if (cb) {
    744e:	4604      	mov	r4, r0
    7450:	b138      	cbz	r0, 7462 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7452:	4633      	mov	r3, r6
    7454:	4642      	mov	r2, r8
    7456:	4629      	mov	r1, r5
    7458:	4638      	mov	r0, r7
    745a:	46a4      	mov	ip, r4
}
    745c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7460:	4760      	bx	ip
}
    7462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007466 <transition_complete>:
{
    7466:	b410      	push	{r4}
	__asm__ volatile(
    7468:	f04f 0420 	mov.w	r4, #32
    746c:	f3ef 8211 	mrs	r2, BASEPRI
    7470:	f384 8812 	msr	BASEPRI_MAX, r4
    7474:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7478:	6141      	str	r1, [r0, #20]
}
    747a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    747c:	2101      	movs	r1, #1
    747e:	f7f9 bd8d 	b.w	f9c <process_event>

00007482 <onoff_manager_init>:
{
    7482:	b538      	push	{r3, r4, r5, lr}
    7484:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7486:	4605      	mov	r5, r0
    7488:	b158      	cbz	r0, 74a2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    748a:	b151      	cbz	r1, 74a2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    748c:	680b      	ldr	r3, [r1, #0]
    748e:	b143      	cbz	r3, 74a2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7490:	684b      	ldr	r3, [r1, #4]
    7492:	b133      	cbz	r3, 74a2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7494:	221c      	movs	r2, #28
    7496:	2100      	movs	r1, #0
    7498:	f000 fbef 	bl	7c7a <memset>
	return 0;
    749c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    749e:	612c      	str	r4, [r5, #16]
}
    74a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    74a2:	f06f 0015 	mvn.w	r0, #21
    74a6:	e7fb      	b.n	74a0 <onoff_manager_init+0x1e>

000074a8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    74a8:	b570      	push	{r4, r5, r6, lr}
    74aa:	4605      	mov	r5, r0
    74ac:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    74ae:	f7ff ffb4 	bl	741a <validate_args>

	if (rv < 0) {
    74b2:	1e04      	subs	r4, r0, #0
    74b4:	db15      	blt.n	74e2 <onoff_request+0x3a>
    74b6:	f04f 0320 	mov.w	r3, #32
    74ba:	f3ef 8211 	mrs	r2, BASEPRI
    74be:	f383 8812 	msr	BASEPRI_MAX, r3
    74c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    74c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    74ca:	8b6b      	ldrh	r3, [r5, #26]
    74cc:	8b2c      	ldrh	r4, [r5, #24]
    74ce:	428b      	cmp	r3, r1
    74d0:	f004 0407 	and.w	r4, r4, #7
    74d4:	d107      	bne.n	74e6 <onoff_request+0x3e>
	__asm__ volatile(
    74d6:	f382 8811 	msr	BASEPRI, r2
    74da:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    74de:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    74e2:	4620      	mov	r0, r4
    74e4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    74e6:	2c02      	cmp	r4, #2
    74e8:	d10c      	bne.n	7504 <onoff_request+0x5c>
		mgr->refs += 1U;
    74ea:	3301      	adds	r3, #1
    74ec:	836b      	strh	r3, [r5, #26]
    74ee:	f382 8811 	msr	BASEPRI, r2
    74f2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    74f6:	2300      	movs	r3, #0
    74f8:	4622      	mov	r2, r4
    74fa:	4631      	mov	r1, r6
    74fc:	4628      	mov	r0, r5
    74fe:	f7ff ff9c 	bl	743a <notify_one>
    7502:	e7ee      	b.n	74e2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    7504:	2c06      	cmp	r4, #6
    7506:	d814      	bhi.n	7532 <onoff_request+0x8a>
    7508:	e8df f004 	tbb	[pc, r4]
    750c:	13131304 	.word	0x13131304
    7510:	1a04      	.short	0x1a04
    7512:	04          	.byte	0x04
    7513:	00          	.byte	0x00
	parent->next = child;
    7514:	2300      	movs	r3, #0
    7516:	6033      	str	r3, [r6, #0]
	return list->tail;
    7518:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    751a:	b93b      	cbnz	r3, 752c <onoff_request+0x84>
	list->head = node;
    751c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    7520:	b9ac      	cbnz	r4, 754e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    7522:	2102      	movs	r1, #2
    7524:	4628      	mov	r0, r5
    7526:	f7f9 fd39 	bl	f9c <process_event>
    752a:	e7da      	b.n	74e2 <onoff_request+0x3a>
	parent->next = child;
    752c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    752e:	606e      	str	r6, [r5, #4]
}
    7530:	e7f6      	b.n	7520 <onoff_request+0x78>
    7532:	f382 8811 	msr	BASEPRI, r2
    7536:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    753a:	f06f 0404 	mvn.w	r4, #4
    753e:	e7d0      	b.n	74e2 <onoff_request+0x3a>
    7540:	f382 8811 	msr	BASEPRI, r2
    7544:	f3bf 8f6f 	isb	sy
    7548:	f06f 0485 	mvn.w	r4, #133	; 0x85
    754c:	e7c9      	b.n	74e2 <onoff_request+0x3a>
    754e:	f382 8811 	msr	BASEPRI, r2
    7552:	f3bf 8f6f 	isb	sy
		if (notify) {
    7556:	e7c4      	b.n	74e2 <onoff_request+0x3a>

00007558 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7558:	4603      	mov	r3, r0
    755a:	b140      	cbz	r0, 756e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    755c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    755e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7562:	2a02      	cmp	r2, #2
    7564:	d006      	beq.n	7574 <sys_notify_validate+0x1c>
    7566:	2a03      	cmp	r2, #3
    7568:	d004      	beq.n	7574 <sys_notify_validate+0x1c>
    756a:	2a01      	cmp	r2, #1
    756c:	d005      	beq.n	757a <sys_notify_validate+0x22>
    756e:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    7572:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    7574:	681a      	ldr	r2, [r3, #0]
    7576:	2a00      	cmp	r2, #0
    7578:	d0f9      	beq.n	756e <sys_notify_validate+0x16>
		notify->result = 0;
    757a:	2000      	movs	r0, #0
    757c:	6098      	str	r0, [r3, #8]
    757e:	4770      	bx	lr

00007580 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7580:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7582:	6842      	ldr	r2, [r0, #4]
    7584:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    7586:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    758a:	2a02      	cmp	r2, #2
    758c:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
    7590:	6081      	str	r1, [r0, #8]
	switch (method) {
    7592:	d007      	beq.n	75a4 <sys_notify_finalize+0x24>
    7594:	2a03      	cmp	r2, #3
    7596:	d002      	beq.n	759e <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7598:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    759a:	2000      	movs	r0, #0
    759c:	e001      	b.n	75a2 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
    759e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    75a0:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    75a2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    75a4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    75a6:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    75a8:	2800      	cmp	r0, #0
    75aa:	d0f6      	beq.n	759a <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    75ac:	f7ff fb82 	bl	6cb4 <z_impl_k_poll_signal_raise>
    75b0:	e7f3      	b.n	759a <sys_notify_finalize+0x1a>

000075b2 <encode_uint>:
{
    75b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75b6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    75b8:	78d3      	ldrb	r3, [r2, #3]
{
    75ba:	4680      	mov	r8, r0
	switch (specifier) {
    75bc:	2b6f      	cmp	r3, #111	; 0x6f
{
    75be:	460f      	mov	r7, r1
    75c0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    75c2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    75c6:	d029      	beq.n	761c <encode_uint+0x6a>
    75c8:	d824      	bhi.n	7614 <encode_uint+0x62>
		return 10;
    75ca:	2b58      	cmp	r3, #88	; 0x58
    75cc:	bf0c      	ite	eq
    75ce:	2610      	moveq	r6, #16
    75d0:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    75d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    75d6:	4632      	mov	r2, r6
    75d8:	2300      	movs	r3, #0
    75da:	4640      	mov	r0, r8
    75dc:	4639      	mov	r1, r7
    75de:	f7f8 fdb9 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    75e2:	2a09      	cmp	r2, #9
    75e4:	b2d4      	uxtb	r4, r2
    75e6:	d81e      	bhi.n	7626 <encode_uint+0x74>
    75e8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    75ea:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    75ec:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    75ee:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    75f2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    75f6:	d301      	bcc.n	75fc <encode_uint+0x4a>
    75f8:	45d1      	cmp	r9, sl
    75fa:	d811      	bhi.n	7620 <encode_uint+0x6e>
	if (conv->flag_hash) {
    75fc:	782b      	ldrb	r3, [r5, #0]
    75fe:	069b      	lsls	r3, r3, #26
    7600:	d505      	bpl.n	760e <encode_uint+0x5c>
		if (radix == 8) {
    7602:	2e08      	cmp	r6, #8
    7604:	d115      	bne.n	7632 <encode_uint+0x80>
			conv->altform_0 = true;
    7606:	78ab      	ldrb	r3, [r5, #2]
    7608:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    760c:	70ab      	strb	r3, [r5, #2]
}
    760e:	4648      	mov	r0, r9
    7610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7614:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    7618:	2b70      	cmp	r3, #112	; 0x70
    761a:	e7d7      	b.n	75cc <encode_uint+0x1a>
	switch (specifier) {
    761c:	2608      	movs	r6, #8
    761e:	e7d8      	b.n	75d2 <encode_uint+0x20>
		value /= radix;
    7620:	4680      	mov	r8, r0
    7622:	460f      	mov	r7, r1
    7624:	e7d7      	b.n	75d6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7626:	f1bb 0f19 	cmp.w	fp, #25
    762a:	bf94      	ite	ls
    762c:	3437      	addls	r4, #55	; 0x37
    762e:	3457      	addhi	r4, #87	; 0x57
    7630:	e7db      	b.n	75ea <encode_uint+0x38>
		} else if (radix == 16) {
    7632:	2e10      	cmp	r6, #16
    7634:	d1eb      	bne.n	760e <encode_uint+0x5c>
			conv->altform_0c = true;
    7636:	78ab      	ldrb	r3, [r5, #2]
    7638:	f043 0310 	orr.w	r3, r3, #16
    763c:	e7e6      	b.n	760c <encode_uint+0x5a>

0000763e <outs>:
{
    763e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7642:	4607      	mov	r7, r0
    7644:	4688      	mov	r8, r1
    7646:	4615      	mov	r5, r2
    7648:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    764a:	4614      	mov	r4, r2
    764c:	42b4      	cmp	r4, r6
    764e:	d305      	bcc.n	765c <outs+0x1e>
    7650:	b10e      	cbz	r6, 7656 <outs+0x18>
	return (int)count;
    7652:	1b60      	subs	r0, r4, r5
    7654:	e008      	b.n	7668 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7656:	7823      	ldrb	r3, [r4, #0]
    7658:	2b00      	cmp	r3, #0
    765a:	d0fa      	beq.n	7652 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    765c:	4641      	mov	r1, r8
    765e:	f814 0b01 	ldrb.w	r0, [r4], #1
    7662:	47b8      	blx	r7
		if (rc < 0) {
    7664:	2800      	cmp	r0, #0
    7666:	daf1      	bge.n	764c <outs+0xe>
}
    7668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000766c <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    766c:	68c3      	ldr	r3, [r0, #12]
    766e:	6802      	ldr	r2, [r0, #0]
    7670:	4293      	cmp	r3, r2
    7672:	d904      	bls.n	767e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    7674:	3b01      	subs	r3, #1
    7676:	1a9a      	subs	r2, r3, r2

		return false;
    7678:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    767a:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    767c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    767e:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
    7680:	b913      	cbnz	r3, 7688 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    7682:	3801      	subs	r0, #1
    7684:	1a82      	subs	r2, r0, r2
		return false;
    7686:	e7f7      	b.n	7678 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
    7688:	1a82      	subs	r2, r0, r2
	return true;
    768a:	2001      	movs	r0, #1
    768c:	e7f5      	b.n	767a <free_space+0xe>

0000768e <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    768e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    7690:	a901      	add	r1, sp, #4
{
    7692:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    7694:	f7ff ffea 	bl	766c <free_space>
    7698:	b120      	cbz	r0, 76a4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    769a:	9b01      	ldr	r3, [sp, #4]
    769c:	68e2      	ldr	r2, [r4, #12]
    769e:	3b01      	subs	r3, #1
    76a0:	4413      	add	r3, r2
    76a2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    76a4:	6a20      	ldr	r0, [r4, #32]
    76a6:	9b01      	ldr	r3, [sp, #4]
    76a8:	1ac0      	subs	r0, r0, r3
}
    76aa:	3801      	subs	r0, #1
    76ac:	b002      	add	sp, #8
    76ae:	bd10      	pop	{r4, pc}

000076b0 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    76b0:	b510      	push	{r4, lr}
    76b2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    76b4:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    76b6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    76b8:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    76ba:	07d2      	lsls	r2, r2, #31
    76bc:	d502      	bpl.n	76c4 <idx_inc+0x14>
		return i & (buffer->size - 1);
    76be:	3b01      	subs	r3, #1
    76c0:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    76c2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    76c4:	4298      	cmp	r0, r3
    76c6:	bf28      	it	cs
    76c8:	1ac0      	subcs	r0, r0, r3
    76ca:	e7fa      	b.n	76c2 <idx_inc+0x12>

000076cc <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    76cc:	b538      	push	{r3, r4, r5, lr}
    76ce:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    76d0:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    76d2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    76d4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    76d6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    76da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    76de:	6801      	ldr	r1, [r0, #0]
    76e0:	462a      	mov	r2, r5
{
    76e2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    76e4:	f7ff ffe4 	bl	76b0 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    76e8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    76ea:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    76ec:	462a      	mov	r2, r5
    76ee:	4620      	mov	r0, r4
    76f0:	f7ff ffde 	bl	76b0 <idx_inc>
    76f4:	6060      	str	r0, [r4, #4]
}
    76f6:	bd38      	pop	{r3, r4, r5, pc}

000076f8 <max_utilization_update>:
{
    76f8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    76fa:	6903      	ldr	r3, [r0, #16]
{
    76fc:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    76fe:	075b      	lsls	r3, r3, #29
    7700:	d506      	bpl.n	7710 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    7702:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7704:	f7ff ffc3 	bl	768e <get_usage>
    7708:	4285      	cmp	r5, r0
    770a:	bf2c      	ite	cs
    770c:	6265      	strcs	r5, [r4, #36]	; 0x24
    770e:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    7710:	bd38      	pop	{r3, r4, r5, pc}

00007712 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    7712:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7716:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    7718:	2300      	movs	r3, #0
    771a:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    771c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    7720:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    7724:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
    7726:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
    772a:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
    772c:	f003 0303 	and.w	r3, r3, #3
    7730:	2b02      	cmp	r3, #2
{
    7732:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    7734:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    7738:	d103      	bne.n	7742 <drop_item_locked+0x30>
		return item->skip.len;
    773a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    773e:	08ad      	lsrs	r5, r5, #2
    7740:	d12e      	bne.n	77a0 <drop_item_locked+0x8e>
    7742:	4630      	mov	r0, r6
    7744:	69a3      	ldr	r3, [r4, #24]
    7746:	4798      	blx	r3
    7748:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    774a:	f1b8 0f00 	cmp.w	r8, #0
    774e:	d038      	beq.n	77c2 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
    7750:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    7754:	079b      	lsls	r3, r3, #30
    7756:	d531      	bpl.n	77bc <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    7758:	4620      	mov	r0, r4
    775a:	f10b 0101 	add.w	r1, fp, #1
    775e:	f7ff ffb5 	bl	76cc <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7762:	6861      	ldr	r1, [r4, #4]
    7764:	462a      	mov	r2, r5
    7766:	4620      	mov	r0, r4
    7768:	f7ff ffa2 	bl	76b0 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    776c:	6821      	ldr	r1, [r4, #0]
    776e:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7770:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7772:	4620      	mov	r0, r4
    7774:	f7ff ff9c 	bl	76b0 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7778:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    777a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    777c:	68e1      	ldr	r1, [r4, #12]
    777e:	4620      	mov	r0, r4
    7780:	f7ff ff96 	bl	76b0 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    7784:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    7786:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    778a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    778e:	f002 0203 	and.w	r2, r2, #3
    7792:	2a02      	cmp	r2, #2
    7794:	d10e      	bne.n	77b4 <drop_item_locked+0xa2>
		return item->skip.len;
    7796:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    779a:	089b      	lsrs	r3, r3, #2
    779c:	d00a      	beq.n	77b4 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
    779e:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    77a0:	68e1      	ldr	r1, [r4, #12]
    77a2:	462a      	mov	r2, r5
    77a4:	4620      	mov	r0, r4
    77a6:	f7ff ff83 	bl	76b0 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    77aa:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
    77ae:	4630      	mov	r0, r6
    77b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
    77b4:	4630      	mov	r0, r6
    77b6:	69a3      	ldr	r3, [r4, #24]
    77b8:	4798      	blx	r3
    77ba:	4405      	add	r5, r0
			*user_packet = true;
    77bc:	2301      	movs	r3, #1
    77be:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
    77c0:	e7ee      	b.n	77a0 <drop_item_locked+0x8e>
		item = NULL;
    77c2:	4646      	mov	r6, r8
	return item;
    77c4:	e7f3      	b.n	77ae <drop_item_locked+0x9c>

000077c6 <mpsc_pbuf_init>:
{
    77c6:	b538      	push	{r3, r4, r5, lr}
    77c8:	460d      	mov	r5, r1
    77ca:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    77cc:	221c      	movs	r2, #28
    77ce:	2100      	movs	r1, #0
    77d0:	f000 fa53 	bl	7c7a <memset>
	buffer->max_usage = 0;
    77d4:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    77d6:	68eb      	ldr	r3, [r5, #12]
    77d8:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    77da:	68ab      	ldr	r3, [r5, #8]
    77dc:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    77de:	682b      	ldr	r3, [r5, #0]
    77e0:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    77e2:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    77e4:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    77e6:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
    77e8:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    77ea:	b123      	cbz	r3, 77f6 <mpsc_pbuf_init+0x30>
    77ec:	1e59      	subs	r1, r3, #1
    77ee:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    77f0:	bf08      	it	eq
    77f2:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    77f6:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    77f8:	2201      	movs	r2, #1
    77fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    77fe:	2100      	movs	r1, #0
}
    7800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7804:	f000 be70 	b.w	84e8 <z_impl_k_sem_init>

00007808 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    7808:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    780c:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    780e:	6a03      	ldr	r3, [r0, #32]
{
    7810:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    7812:	3b01      	subs	r3, #1
    7814:	428b      	cmp	r3, r1
{
    7816:	460e      	mov	r6, r1
    7818:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
    781a:	d351      	bcc.n	78c0 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
    781c:	2500      	movs	r5, #0
	__asm__ volatile(
    781e:	f04f 0320 	mov.w	r3, #32
    7822:	f3ef 8911 	mrs	r9, BASEPRI
    7826:	f383 8812 	msr	BASEPRI_MAX, r3
    782a:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
    782e:	4620      	mov	r0, r4
    7830:	a901      	add	r1, sp, #4
    7832:	f7ff ff1b 	bl	766c <free_space>

		if (free_wlen >= wlen) {
    7836:	f8dd a004 	ldr.w	sl, [sp, #4]
    783a:	45b2      	cmp	sl, r6
    783c:	d317      	bcc.n	786e <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    783e:	6822      	ldr	r2, [r4, #0]
			item =
    7840:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    7842:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    7844:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    7848:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
    784c:	f021 0103 	bic.w	r1, r1, #3
    7850:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    7854:	6821      	ldr	r1, [r4, #0]
    7856:	4632      	mov	r2, r6
    7858:	f7ff ff2a 	bl	76b0 <idx_inc>
    785c:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    785e:	f389 8811 	msr	BASEPRI, r9
    7862:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    7866:	4628      	mov	r0, r5
    7868:	b002      	add	sp, #8
    786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
    786e:	b150      	cbz	r0, 7886 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
    7870:	4651      	mov	r1, sl
    7872:	4620      	mov	r0, r4
    7874:	f7ff ff2a 	bl	76cc <add_skip_item>
    7878:	f389 8811 	msr	BASEPRI, r9
    787c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    7880:	2d00      	cmp	r5, #0
    7882:	d0cb      	beq.n	781c <mpsc_pbuf_alloc+0x14>
    7884:	e033      	b.n	78ee <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7886:	ea57 0308 	orrs.w	r3, r7, r8
    788a:	d020      	beq.n	78ce <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
    788c:	f000 fe09 	bl	84a2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7890:	b9e8      	cbnz	r0, 78ce <mpsc_pbuf_alloc+0xc6>
    7892:	f389 8811 	msr	BASEPRI, r9
    7896:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    789a:	463a      	mov	r2, r7
    789c:	4643      	mov	r3, r8
    789e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    78a2:	f7fe fc73 	bl	618c <z_impl_k_sem_take>
	__asm__ volatile(
    78a6:	f04f 0220 	mov.w	r2, #32
    78aa:	f3ef 8311 	mrs	r3, BASEPRI
    78ae:	f382 8812 	msr	BASEPRI_MAX, r2
    78b2:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    78b6:	b128      	cbz	r0, 78c4 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
    78b8:	f383 8811 	msr	BASEPRI, r3
    78bc:	f3bf 8f6f 	isb	sy
		return NULL;
    78c0:	2500      	movs	r5, #0
    78c2:	e7d0      	b.n	7866 <mpsc_pbuf_alloc+0x5e>
    78c4:	f383 8811 	msr	BASEPRI, r3
    78c8:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    78cc:	e7d8      	b.n	7880 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    78ce:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    78d0:	4651      	mov	r1, sl
    78d2:	4620      	mov	r0, r4
    78d4:	f10d 0303 	add.w	r3, sp, #3
    78d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    78dc:	f7ff ff19 	bl	7712 <drop_item_locked>
    78e0:	4605      	mov	r5, r0
    78e2:	f389 8811 	msr	BASEPRI, r9
    78e6:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    78ea:	2800      	cmp	r0, #0
    78ec:	d0e8      	beq.n	78c0 <mpsc_pbuf_alloc+0xb8>
    78ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    78f2:	2b00      	cmp	r3, #0
    78f4:	d093      	beq.n	781e <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
    78f6:	6963      	ldr	r3, [r4, #20]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d08f      	beq.n	781c <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
    78fc:	4629      	mov	r1, r5
    78fe:	4620      	mov	r0, r4
    7900:	4798      	blx	r3
    7902:	e78b      	b.n	781c <mpsc_pbuf_alloc+0x14>

00007904 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    7904:	b570      	push	{r4, r5, r6, lr}
    7906:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    7908:	6983      	ldr	r3, [r0, #24]
    790a:	4608      	mov	r0, r1
{
    790c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    790e:	4798      	blx	r3
    7910:	4602      	mov	r2, r0
	__asm__ volatile(
    7912:	f04f 0320 	mov.w	r3, #32
    7916:	f3ef 8611 	mrs	r6, BASEPRI
    791a:	f383 8812 	msr	BASEPRI_MAX, r3
    791e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    7922:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    7924:	4620      	mov	r0, r4
	item->hdr.valid = 1;
    7926:	f043 0301 	orr.w	r3, r3, #1
    792a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    792c:	6861      	ldr	r1, [r4, #4]
    792e:	f7ff febf 	bl	76b0 <idx_inc>
    7932:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    7934:	4620      	mov	r0, r4
    7936:	f7ff fedf 	bl	76f8 <max_utilization_update>
	__asm__ volatile(
    793a:	f386 8811 	msr	BASEPRI, r6
    793e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    7942:	bd70      	pop	{r4, r5, r6, pc}

00007944 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    7944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7946:	4604      	mov	r4, r0
	__asm__ volatile(
    7948:	f04f 0320 	mov.w	r3, #32
    794c:	f3ef 8611 	mrs	r6, BASEPRI
    7950:	f383 8812 	msr	BASEPRI_MAX, r3
    7954:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    7958:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    795c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    795e:	bf88      	it	hi
    7960:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    7962:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
    7964:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    7966:	b132      	cbz	r2, 7976 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
    7968:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
    796c:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    7970:	f012 0003 	ands.w	r0, r2, #3
    7974:	d105      	bne.n	7982 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
    7976:	f386 8811 	msr	BASEPRI, r6
    797a:	f3bf 8f6f 	isb	sy
			item = NULL;
    797e:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    7980:	e02e      	b.n	79e0 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
    7982:	2802      	cmp	r0, #2
    7984:	d103      	bne.n	798e <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
    7986:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    798a:	08ad      	lsrs	r5, r5, #2
    798c:	d105      	bne.n	799a <mpsc_pbuf_claim+0x56>
    798e:	07d0      	lsls	r0, r2, #31
    7990:	d414      	bmi.n	79bc <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
    7992:	4638      	mov	r0, r7
    7994:	69a3      	ldr	r3, [r4, #24]
    7996:	4798      	blx	r3
    7998:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    799a:	68a1      	ldr	r1, [r4, #8]
    799c:	462a      	mov	r2, r5
    799e:	4620      	mov	r0, r4
    79a0:	f7ff fe86 	bl	76b0 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    79a4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    79a6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    79a8:	462a      	mov	r2, r5
    79aa:	4620      	mov	r0, r4
    79ac:	f7ff fe80 	bl	76b0 <idx_inc>
				buffer->rd_idx =
    79b0:	60e0      	str	r0, [r4, #12]
    79b2:	f386 8811 	msr	BASEPRI, r6
    79b6:	f3bf 8f6f 	isb	sy
	} while (cont);
    79ba:	e7c5      	b.n	7948 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    79bc:	f042 0202 	orr.w	r2, r2, #2
    79c0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    79c4:	69a3      	ldr	r3, [r4, #24]
    79c6:	4638      	mov	r0, r7
    79c8:	68a5      	ldr	r5, [r4, #8]
    79ca:	4798      	blx	r3
    79cc:	4629      	mov	r1, r5
    79ce:	4602      	mov	r2, r0
    79d0:	4620      	mov	r0, r4
    79d2:	f7ff fe6d 	bl	76b0 <idx_inc>
				buffer->tmp_rd_idx =
    79d6:	60a0      	str	r0, [r4, #8]
    79d8:	f386 8811 	msr	BASEPRI, r6
    79dc:	f3bf 8f6f 	isb	sy
}
    79e0:	4638      	mov	r0, r7
    79e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000079e4 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    79e4:	b570      	push	{r4, r5, r6, lr}
    79e6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    79e8:	6983      	ldr	r3, [r0, #24]
    79ea:	4608      	mov	r0, r1
{
    79ec:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    79ee:	4798      	blx	r3
    79f0:	4602      	mov	r2, r0
	__asm__ volatile(
    79f2:	f04f 0320 	mov.w	r3, #32
    79f6:	f3ef 8611 	mrs	r6, BASEPRI
    79fa:	f383 8812 	msr	BASEPRI_MAX, r3
    79fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    7a02:	782b      	ldrb	r3, [r5, #0]
    7a04:	f36f 0300 	bfc	r3, #0, #1
    7a08:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    7a0a:	6923      	ldr	r3, [r4, #16]
    7a0c:	079b      	lsls	r3, r3, #30
    7a0e:	d505      	bpl.n	7a1c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    7a10:	68e1      	ldr	r1, [r4, #12]
    7a12:	69e3      	ldr	r3, [r4, #28]
    7a14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    7a18:	429d      	cmp	r5, r3
    7a1a:	d112      	bne.n	7a42 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    7a1c:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    7a1e:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
    7a20:	f36f 0341 	bfc	r3, #1, #1
    7a24:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    7a26:	68e1      	ldr	r1, [r4, #12]
    7a28:	f7ff fe42 	bl	76b0 <idx_inc>
    7a2c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7a2e:	f386 8811 	msr	BASEPRI, r6
    7a32:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7a36:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    7a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a3e:	f7fe bb7f 	b.w	6140 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    7a42:	682b      	ldr	r3, [r5, #0]
    7a44:	f360 039f 	bfi	r3, r0, #2, #30
    7a48:	602b      	str	r3, [r5, #0]
    7a4a:	e7f0      	b.n	7a2e <mpsc_pbuf_free+0x4a>

00007a4c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    7a4c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    7a50:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    7a52:	bf88      	it	hi
    7a54:	6a02      	ldrhi	r2, [r0, #32]
    7a56:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    7a58:	1e18      	subs	r0, r3, #0
    7a5a:	bf18      	it	ne
    7a5c:	2001      	movne	r0, #1
    7a5e:	4770      	bx	lr

00007a60 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7a60:	4770      	bx	lr

00007a62 <pm_state_exit_post_ops>:
    7a62:	2300      	movs	r3, #0
    7a64:	f383 8811 	msr	BASEPRI, r3
    7a68:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7a6c:	4770      	bx	lr

00007a6e <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    7a6e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    7a70:	075b      	lsls	r3, r3, #29
    7a72:	d40b      	bmi.n	7a8c <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    7a74:	6803      	ldr	r3, [r0, #0]
    7a76:	8842      	ldrh	r2, [r0, #2]
    7a78:	f3c3 2349 	ubfx	r3, r3, #9, #10
    7a7c:	f3c2 02cb 	ubfx	r2, r2, #3, #12
    7a80:	1898      	adds	r0, r3, r2
    7a82:	3017      	adds	r0, #23
    7a84:	f020 0007 	bic.w	r0, r0, #7
    7a88:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    7a8a:	4770      	bx	lr
	return 0;
    7a8c:	2000      	movs	r0, #0
}
    7a8e:	4770      	bx	lr

00007a90 <dummy_timestamp>:
}
    7a90:	2000      	movs	r0, #0
    7a92:	4770      	bx	lr

00007a94 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    7a94:	f000 bad9 	b.w	804a <sys_clock_cycle_get_32>

00007a98 <atomic_inc>:
{
    7a98:	4603      	mov	r3, r0
}
    7a9a:	e8d3 0fef 	ldaex	r0, [r3]
    7a9e:	1c42      	adds	r2, r0, #1
    7aa0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    7aa4:	2900      	cmp	r1, #0
    7aa6:	d1f8      	bne.n	7a9a <atomic_inc+0x2>
    7aa8:	4770      	bx	lr

00007aaa <z_log_vprintk>:
{
    7aaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    7aac:	2300      	movs	r3, #0
    7aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7ab2:	461a      	mov	r2, r3
    7ab4:	4619      	mov	r1, r3
    7ab6:	4618      	mov	r0, r3
    7ab8:	e9cd 3300 	strd	r3, r3, [sp]
    7abc:	f7fa fa8c 	bl	1fd8 <z_impl_z_log_msg_runtime_vcreate>
}
    7ac0:	b005      	add	sp, #20
    7ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00007ac6 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    7ac6:	2001      	movs	r0, #1
    7ac8:	f7fa b87e 	b.w	1bc8 <z_log_dropped>

00007acc <z_log_get_tag>:
}
    7acc:	2000      	movs	r0, #0
    7ace:	4770      	bx	lr

00007ad0 <z_cbprintf_cpy>:
{
    7ad0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    7ad2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    7ad6:	1b9b      	subs	r3, r3, r6
    7ad8:	428b      	cmp	r3, r1
{
    7ada:	460c      	mov	r4, r1
    7adc:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    7ade:	d30a      	bcc.n	7af6 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    7ae0:	6813      	ldr	r3, [r2, #0]
    7ae2:	460a      	mov	r2, r1
    7ae4:	4601      	mov	r1, r0
    7ae6:	1998      	adds	r0, r3, r6
    7ae8:	f000 f8bc 	bl	7c64 <memcpy>
	return len;
    7aec:	4620      	mov	r0, r4
	desc->off += len;
    7aee:	68ab      	ldr	r3, [r5, #8]
    7af0:	4423      	add	r3, r4
    7af2:	60ab      	str	r3, [r5, #8]
}
    7af4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    7af6:	f06f 001b 	mvn.w	r0, #27
    7afa:	e7fb      	b.n	7af4 <z_cbprintf_cpy+0x24>

00007afc <z_log_msg_finalize>:
{
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	460e      	mov	r6, r1
    7b00:	4615      	mov	r5, r2
    7b02:	4619      	mov	r1, r3
	if (!msg) {
    7b04:	4604      	mov	r4, r0
    7b06:	b918      	cbnz	r0, 7b10 <z_log_msg_finalize+0x14>
}
    7b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    7b0c:	f7fa b85c 	b.w	1bc8 <z_log_dropped>
	if (data) {
    7b10:	b13b      	cbz	r3, 7b22 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    7b12:	f3c2 2349 	ubfx	r3, r2, #9, #10
    7b16:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    7b18:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    7b1c:	4418      	add	r0, r3
    7b1e:	f000 f8a1 	bl	7c64 <memcpy>
	msg->hdr.source = source;
    7b22:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    7b26:	4620      	mov	r0, r4
}
    7b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    7b2c:	f7fa b9cc 	b.w	1ec8 <z_log_msg_commit>

00007b30 <buffer_write>:
{
    7b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b32:	4606      	mov	r6, r0
    7b34:	460d      	mov	r5, r1
    7b36:	4614      	mov	r4, r2
    7b38:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    7b3a:	4621      	mov	r1, r4
    7b3c:	4628      	mov	r0, r5
    7b3e:	463a      	mov	r2, r7
    7b40:	47b0      	blx	r6
	} while (len != 0);
    7b42:	1a24      	subs	r4, r4, r0
		buf += processed;
    7b44:	4405      	add	r5, r0
	} while (len != 0);
    7b46:	d1f8      	bne.n	7b3a <buffer_write+0xa>
}
    7b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007b4a <cbvprintf>:
{
    7b4a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    7b4c:	2400      	movs	r4, #0
    7b4e:	9400      	str	r4, [sp, #0]
    7b50:	f7f9 fb32 	bl	11b8 <z_cbvprintf_impl>
}
    7b54:	b002      	add	sp, #8
    7b56:	bd10      	pop	{r4, pc}

00007b58 <log_output_flush>:
{
    7b58:	b510      	push	{r4, lr}
		     output->control_block->offset,
    7b5a:	6842      	ldr	r2, [r0, #4]
{
    7b5c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    7b5e:	e9d2 2300 	ldrd	r2, r3, [r2]
    7b62:	6881      	ldr	r1, [r0, #8]
    7b64:	6800      	ldr	r0, [r0, #0]
    7b66:	f7ff ffe3 	bl	7b30 <buffer_write>
	output->control_block->offset = 0;
    7b6a:	2200      	movs	r2, #0
    7b6c:	6863      	ldr	r3, [r4, #4]
    7b6e:	601a      	str	r2, [r3, #0]
}
    7b70:	bd10      	pop	{r4, pc}

00007b72 <out_func>:
{
    7b72:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    7b74:	684b      	ldr	r3, [r1, #4]
{
    7b76:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    7b78:	681a      	ldr	r2, [r3, #0]
    7b7a:	68cb      	ldr	r3, [r1, #12]
{
    7b7c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7b7e:	429a      	cmp	r2, r3
    7b80:	d102      	bne.n	7b88 <out_func+0x16>
		log_output_flush(out_ctx);
    7b82:	4608      	mov	r0, r1
    7b84:	f7ff ffe8 	bl	7b58 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7b88:	6863      	ldr	r3, [r4, #4]
    7b8a:	e8d3 2fef 	ldaex	r2, [r3]
    7b8e:	1c51      	adds	r1, r2, #1
    7b90:	e8c3 1fe0 	stlex	r0, r1, [r3]
    7b94:	2800      	cmp	r0, #0
    7b96:	d1f8      	bne.n	7b8a <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    7b98:	68a3      	ldr	r3, [r4, #8]
}
    7b9a:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
    7b9c:	549d      	strb	r5, [r3, r2]
}
    7b9e:	bd38      	pop	{r3, r4, r5, pc}

00007ba0 <cr_out_func>:
	if (c == '\n') {
    7ba0:	280a      	cmp	r0, #10
{
    7ba2:	b538      	push	{r3, r4, r5, lr}
    7ba4:	4604      	mov	r4, r0
    7ba6:	460d      	mov	r5, r1
	if (c == '\n') {
    7ba8:	d102      	bne.n	7bb0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    7baa:	200d      	movs	r0, #13
    7bac:	f7ff ffe1 	bl	7b72 <out_func>
	out_func(c, ctx);
    7bb0:	4629      	mov	r1, r5
    7bb2:	4620      	mov	r0, r4
    7bb4:	f7ff ffdd 	bl	7b72 <out_func>
}
    7bb8:	2000      	movs	r0, #0
    7bba:	bd38      	pop	{r3, r4, r5, pc}

00007bbc <log_backend_uart_init>:
}
    7bbc:	4770      	bx	lr

00007bbe <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    7bbe:	2000      	movs	r0, #0
{
    7bc0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7bc2:	f7f9 feab 	bl	191c <sys_reboot>

00007bc6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    7bc6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7bc8:	6800      	ldr	r0, [r0, #0]
    7bca:	f7fa bebd 	b.w	2948 <z_arm_fatal_error>

00007bce <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7bce:	2100      	movs	r1, #0
    7bd0:	2001      	movs	r0, #1
    7bd2:	f7fa beb9 	b.w	2948 <z_arm_fatal_error>

00007bd6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    7bd6:	b508      	push	{r3, lr}
	handler();
    7bd8:	f7fa ff62 	bl	2aa0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7be0:	f7fb b824 	b.w	2c2c <z_arm_exc_exit>

00007be4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    7be4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7be6:	f383 880b 	msr	PSPLIM, r3
}
    7bea:	4770      	bx	lr

00007bec <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    7bec:	2300      	movs	r3, #0
    7bee:	f7fa b99f 	b.w	1f30 <z_impl_z_log_msg_static_create>

00007bf2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    7bf2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    7bf6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7bfa:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    7bfc:	bf08      	it	eq
    7bfe:	f06f 0015 	mvneq.w	r0, #21
    7c02:	4770      	bx	lr

00007c04 <mpu_configure_region>:
{
    7c04:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
    7c06:	890a      	ldrh	r2, [r1, #8]
    7c08:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    7c0a:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    7c0c:	684c      	ldr	r4, [r1, #4]
    7c0e:	f002 021f 	and.w	r2, r2, #31
{
    7c12:	b085      	sub	sp, #20
    7c14:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
    7c18:	9300      	str	r3, [sp, #0]
    7c1a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    7c1e:	f023 031f 	bic.w	r3, r3, #31
    7c22:	1e62      	subs	r2, r4, #1
    7c24:	4413      	add	r3, r2
    7c26:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    7c2a:	2807      	cmp	r0, #7
    7c2c:	9303      	str	r3, [sp, #12]
    7c2e:	d904      	bls.n	7c3a <mpu_configure_region+0x36>
}
    7c30:	b005      	add	sp, #20
    7c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    7c36:	f7fb bbb9 	b.w	33ac <region_allocate_and_init.part.0>
	region_init(index, region_conf);
    7c3a:	4669      	mov	r1, sp
    7c3c:	f7fb fb9c 	bl	3378 <region_init>
}
    7c40:	b005      	add	sp, #20
    7c42:	bd30      	pop	{r4, r5, pc}

00007c44 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7c44:	4603      	mov	r3, r0
	size_t n = 0;
    7c46:	2000      	movs	r0, #0

	while (*s != '\0') {
    7c48:	5c1a      	ldrb	r2, [r3, r0]
    7c4a:	b902      	cbnz	r2, 7c4e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7c4c:	4770      	bx	lr
		n++;
    7c4e:	3001      	adds	r0, #1
    7c50:	e7fa      	b.n	7c48 <strlen+0x4>

00007c52 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7c52:	4603      	mov	r3, r0
	size_t n = 0;
    7c54:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7c56:	5c1a      	ldrb	r2, [r3, r0]
    7c58:	b10a      	cbz	r2, 7c5e <strnlen+0xc>
    7c5a:	4288      	cmp	r0, r1
    7c5c:	d100      	bne.n	7c60 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7c5e:	4770      	bx	lr
		n++;
    7c60:	3001      	adds	r0, #1
    7c62:	e7f8      	b.n	7c56 <strnlen+0x4>

00007c64 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7c64:	b510      	push	{r4, lr}
    7c66:	1e43      	subs	r3, r0, #1
    7c68:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7c6a:	4291      	cmp	r1, r2
    7c6c:	d100      	bne.n	7c70 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7c6e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7c70:	f811 4b01 	ldrb.w	r4, [r1], #1
    7c74:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7c78:	e7f7      	b.n	7c6a <memcpy+0x6>

00007c7a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7c7a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    7c7c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7c7e:	4402      	add	r2, r0
    7c80:	4293      	cmp	r3, r2
    7c82:	d100      	bne.n	7c86 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7c84:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7c86:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7c8a:	e7f9      	b.n	7c80 <memset+0x6>

00007c8c <_stdout_hook_default>:
}
    7c8c:	f04f 30ff 	mov.w	r0, #4294967295
    7c90:	4770      	bx	lr

00007c92 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7c92:	220c      	movs	r2, #12
    7c94:	6903      	ldr	r3, [r0, #16]
    7c96:	b2c9      	uxtb	r1, r1
    7c98:	fb01 3302 	mla	r3, r1, r2, r3
    7c9c:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    7c9e:	f000 0007 	and.w	r0, r0, #7
    7ca2:	4770      	bx	lr

00007ca4 <set_on_state>:
	__asm__ volatile(
    7ca4:	f04f 0320 	mov.w	r3, #32
    7ca8:	f3ef 8211 	mrs	r2, BASEPRI
    7cac:	f383 8812 	msr	BASEPRI_MAX, r3
    7cb0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7cb4:	6803      	ldr	r3, [r0, #0]
    7cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7cba:	f043 0302 	orr.w	r3, r3, #2
    7cbe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7cc0:	f382 8811 	msr	BASEPRI, r2
    7cc4:	f3bf 8f6f 	isb	sy
}
    7cc8:	4770      	bx	lr

00007cca <stop>:
{
    7cca:	b570      	push	{r4, r5, r6, lr}
    7ccc:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    7cce:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    7cd0:	f04f 0420 	mov.w	r4, #32
    7cd4:	f3ef 8511 	mrs	r5, BASEPRI
    7cd8:	f384 8812 	msr	BASEPRI_MAX, r4
    7cdc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7ce0:	260c      	movs	r6, #12
    7ce2:	fb06 3401 	mla	r4, r6, r1, r3
    7ce6:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7ce8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    7cec:	d008      	beq.n	7d00 <stop+0x36>
    7cee:	42a2      	cmp	r2, r4
    7cf0:	d006      	beq.n	7d00 <stop+0x36>
	__asm__ volatile(
    7cf2:	f385 8811 	msr	BASEPRI, r5
    7cf6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    7cfa:	f04f 30ff 	mov.w	r0, #4294967295
}
    7cfe:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7d00:	2201      	movs	r2, #1
    7d02:	4371      	muls	r1, r6
    7d04:	440b      	add	r3, r1
    7d06:	679a      	str	r2, [r3, #120]	; 0x78
    7d08:	f385 8811 	msr	BASEPRI, r5
    7d0c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    7d10:	6843      	ldr	r3, [r0, #4]
    7d12:	440b      	add	r3, r1
    7d14:	685b      	ldr	r3, [r3, #4]
    7d16:	4798      	blx	r3
	return 0;
    7d18:	2000      	movs	r0, #0
    7d1a:	e7f0      	b.n	7cfe <stop+0x34>

00007d1c <api_stop>:
	return stop(dev, subsys, CTX_API);
    7d1c:	2280      	movs	r2, #128	; 0x80
    7d1e:	f7ff bfd4 	b.w	7cca <stop>

00007d22 <async_start>:
{
    7d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d24:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7d26:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7d28:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7d2a:	f04f 0520 	mov.w	r5, #32
    7d2e:	f3ef 8611 	mrs	r6, BASEPRI
    7d32:	f385 8812 	msr	BASEPRI_MAX, r5
    7d36:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7d3a:	250c      	movs	r5, #12
    7d3c:	4369      	muls	r1, r5
    7d3e:	440c      	add	r4, r1
    7d40:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7d42:	f005 0c07 	and.w	ip, r5, #7
    7d46:	f1bc 0f01 	cmp.w	ip, #1
    7d4a:	d10b      	bne.n	7d64 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7d4c:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    7d4e:	f386 8811 	msr	BASEPRI, r6
    7d52:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    7d56:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    7d5a:	6843      	ldr	r3, [r0, #4]
    7d5c:	585b      	ldr	r3, [r3, r1]
    7d5e:	4798      	blx	r3
	return 0;
    7d60:	2000      	movs	r0, #0
}
    7d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7d64:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7d68:	42af      	cmp	r7, r5
    7d6a:	f386 8811 	msr	BASEPRI, r6
    7d6e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    7d72:	bf0c      	ite	eq
    7d74:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7d78:	f04f 30ff 	movne.w	r0, #4294967295
    7d7c:	e7f1      	b.n	7d62 <async_start+0x40>

00007d7e <api_start>:
{
    7d7e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7d80:	2480      	movs	r4, #128	; 0x80
    7d82:	9400      	str	r4, [sp, #0]
    7d84:	f7ff ffcd 	bl	7d22 <async_start>
}
    7d88:	b002      	add	sp, #8
    7d8a:	bd10      	pop	{r4, pc}

00007d8c <onoff_started_callback>:
{
    7d8c:	b410      	push	{r4}
	notify(mgr, 0);
    7d8e:	241c      	movs	r4, #28
	return &data->mgr[type];
    7d90:	6900      	ldr	r0, [r0, #16]
    7d92:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7d94:	fb03 0004 	mla	r0, r3, r4, r0
    7d98:	2100      	movs	r1, #0
}
    7d9a:	bc10      	pop	{r4}
	notify(mgr, 0);
    7d9c:	4710      	bx	r2

00007d9e <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7d9e:	2003      	movs	r0, #3
    7da0:	f000 ba4d 	b.w	823e <nrfx_clock_start>

00007da4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    7da4:	2002      	movs	r0, #2
    7da6:	f000 ba4a 	b.w	823e <nrfx_clock_start>

00007daa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7daa:	2000      	movs	r0, #0
    7dac:	f000 ba47 	b.w	823e <nrfx_clock_start>

00007db0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    7db0:	2003      	movs	r0, #3
    7db2:	f000 baa3 	b.w	82fc <nrfx_clock_stop>

00007db6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    7db6:	2002      	movs	r0, #2
    7db8:	f000 baa0 	b.w	82fc <nrfx_clock_stop>

00007dbc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7dbc:	2000      	movs	r0, #0
    7dbe:	f000 ba9d 	b.w	82fc <nrfx_clock_stop>

00007dc2 <blocking_start_callback>:
{
    7dc2:	4610      	mov	r0, r2
    7dc4:	f7fe b9bc 	b.w	6140 <z_impl_k_sem_give>

00007dc8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dc8:	6843      	ldr	r3, [r0, #4]
}
    7dca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dcc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7dce:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    7dd0:	600b      	str	r3, [r1, #0]
}
    7dd2:	4770      	bx	lr

00007dd4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dd4:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    7dd6:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dda:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    7ddc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7de0:	6098      	str	r0, [r3, #8]
}
    7de2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7de4:	60d9      	str	r1, [r3, #12]
    7de6:	4770      	bx	lr

00007de8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7de8:	6843      	ldr	r3, [r0, #4]
}
    7dea:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7dee:	6099      	str	r1, [r3, #8]
}
    7df0:	4770      	bx	lr

00007df2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7df2:	6843      	ldr	r3, [r0, #4]
}
    7df4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7df6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7df8:	60d9      	str	r1, [r3, #12]
}
    7dfa:	4770      	bx	lr

00007dfc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dfc:	6843      	ldr	r3, [r0, #4]
    7dfe:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7e00:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    7e02:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    7e06:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    7e08:	6090      	str	r0, [r2, #8]
}
    7e0a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7e0c:	60d3      	str	r3, [r2, #12]
    7e0e:	4770      	bx	lr

00007e10 <gpio_nrfx_manage_callback>:
{
    7e10:	b510      	push	{r4, lr}
	return port->data;
    7e12:	6903      	ldr	r3, [r0, #16]
	return list->head;
    7e14:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    7e16:	b1f8      	cbz	r0, 7e58 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e18:	4288      	cmp	r0, r1
    7e1a:	d119      	bne.n	7e50 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    7e1c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    7e1e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e20:	42a1      	cmp	r1, r4
	list->head = node;
    7e22:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    7e24:	d100      	bne.n	7e28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    7e26:	6098      	str	r0, [r3, #8]
	parent->next = child;
    7e28:	2000      	movs	r0, #0
    7e2a:	6008      	str	r0, [r1, #0]
	if (set) {
    7e2c:	b12a      	cbz	r2, 7e3a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    7e2e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    7e30:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    7e32:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    7e34:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7e36:	b902      	cbnz	r2, 7e3a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    7e38:	6099      	str	r1, [r3, #8]
	return 0;
    7e3a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7e3c:	e010      	b.n	7e60 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e3e:	4281      	cmp	r1, r0
    7e40:	d106      	bne.n	7e50 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    7e42:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    7e44:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e46:	6898      	ldr	r0, [r3, #8]
    7e48:	4281      	cmp	r1, r0
    7e4a:	d1ed      	bne.n	7e28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    7e4c:	609c      	str	r4, [r3, #8]
}
    7e4e:	e7eb      	b.n	7e28 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7e50:	4604      	mov	r4, r0
    7e52:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e54:	2800      	cmp	r0, #0
    7e56:	d1f2      	bne.n	7e3e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    7e58:	2a00      	cmp	r2, #0
    7e5a:	d1e8      	bne.n	7e2e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    7e5c:	f06f 0015 	mvn.w	r0, #21
}
    7e60:	bd10      	pop	{r4, pc}

00007e62 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
    7e62:	2200      	movs	r2, #0
    7e64:	2101      	movs	r1, #1
    7e66:	200a      	movs	r0, #10
    7e68:	f7fa be04 	b.w	2a74 <z_arm_irq_priority_set>

00007e6c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7e6c:	b510      	push	{r4, lr}
	while (*count) {
    7e6e:	680b      	ldr	r3, [r1, #0]
    7e70:	b913      	cbnz	r3, 7e78 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
    7e72:	4618      	mov	r0, r3
	*buf_len = 0;
    7e74:	6013      	str	r3, [r2, #0]
	return NULL;
    7e76:	e005      	b.n	7e84 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    7e78:	6803      	ldr	r3, [r0, #0]
    7e7a:	685c      	ldr	r4, [r3, #4]
    7e7c:	b11c      	cbz	r4, 7e86 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    7e7e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    7e80:	6803      	ldr	r3, [r0, #0]
    7e82:	6818      	ldr	r0, [r3, #0]
}
    7e84:	bd10      	pop	{r4, pc}
		++(*current);
    7e86:	3308      	adds	r3, #8
    7e88:	6003      	str	r3, [r0, #0]
		--(*count);
    7e8a:	680b      	ldr	r3, [r1, #0]
    7e8c:	3b01      	subs	r3, #1
    7e8e:	600b      	str	r3, [r1, #0]
    7e90:	e7ed      	b.n	7e6e <spi_context_get_next_buf.constprop.0+0x2>

00007e92 <z_log_msg_static_create.constprop.0>:
    7e92:	2300      	movs	r3, #0
    7e94:	f7fa b84c 	b.w	1f30 <z_impl_z_log_msg_static_create>

00007e98 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    7e98:	4603      	mov	r3, r0
    7e9a:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7e9c:	7919      	ldrb	r1, [r3, #4]
    7e9e:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    7ea0:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7ea2:	fa03 f101 	lsl.w	r1, r3, r1
    7ea6:	6903      	ldr	r3, [r0, #16]
    7ea8:	681b      	ldr	r3, [r3, #0]
    7eaa:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7eac:	bf18      	it	ne
    7eae:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7eb2:	b112      	cbz	r2, 7eba <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    7eb4:	6883      	ldr	r3, [r0, #8]
    7eb6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7eb8:	4718      	bx	r3
    7eba:	6883      	ldr	r3, [r0, #8]
    7ebc:	691b      	ldr	r3, [r3, #16]
    7ebe:	e7fb      	b.n	7eb8 <gpio_pin_set_dt.isra.0+0x20>

00007ec0 <_spi_context_cs_control>:
{
    7ec0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7ec2:	6803      	ldr	r3, [r0, #0]
{
    7ec4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7ec6:	b1e3      	cbz	r3, 7f02 <_spi_context_cs_control+0x42>
    7ec8:	6898      	ldr	r0, [r3, #8]
    7eca:	b1d0      	cbz	r0, 7f02 <_spi_context_cs_control+0x42>
    7ecc:	6805      	ldr	r5, [r0, #0]
    7ece:	b1c5      	cbz	r5, 7f02 <_spi_context_cs_control+0x42>
		if (on) {
    7ed0:	b149      	cbz	r1, 7ee6 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    7ed2:	2101      	movs	r1, #1
    7ed4:	f7ff ffe0 	bl	7e98 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    7ed8:	6823      	ldr	r3, [r4, #0]
    7eda:	689b      	ldr	r3, [r3, #8]
    7edc:	6898      	ldr	r0, [r3, #8]
}
    7ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7ee2:	f000 bc55 	b.w	8790 <z_impl_k_busy_wait>
			if (!force_off &&
    7ee6:	b912      	cbnz	r2, 7eee <_spi_context_cs_control+0x2e>
    7ee8:	889b      	ldrh	r3, [r3, #4]
    7eea:	04db      	lsls	r3, r3, #19
    7eec:	d409      	bmi.n	7f02 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    7eee:	6880      	ldr	r0, [r0, #8]
    7ef0:	f000 fc4e 	bl	8790 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7ef4:	6823      	ldr	r3, [r4, #0]
    7ef6:	2100      	movs	r1, #0
    7ef8:	6898      	ldr	r0, [r3, #8]
}
    7efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7efe:	f7ff bfcb 	b.w	7e98 <gpio_pin_set_dt.isra.0>
}
    7f02:	bd38      	pop	{r3, r4, r5, pc}

00007f04 <spi_context_unlock_unconditionally>:
{
    7f04:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    7f06:	2201      	movs	r2, #1
    7f08:	2100      	movs	r1, #0
{
    7f0a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    7f0c:	f7ff ffd8 	bl	7ec0 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    7f10:	69a3      	ldr	r3, [r4, #24]
    7f12:	b933      	cbnz	r3, 7f22 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    7f14:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7f16:	f104 0010 	add.w	r0, r4, #16
}
    7f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f1e:	f7fe b90f 	b.w	6140 <z_impl_k_sem_give>
    7f22:	bd10      	pop	{r4, pc}

00007f24 <spi_nrfx_release>:
{
    7f24:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    7f26:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    7f28:	6803      	ldr	r3, [r0, #0]
    7f2a:	428b      	cmp	r3, r1
    7f2c:	d106      	bne.n	7f3c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    7f2e:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
    7f32:	b934      	cbnz	r4, 7f42 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    7f34:	f7ff ffe6 	bl	7f04 <spi_context_unlock_unconditionally>
	return 0;
    7f38:	4620      	mov	r0, r4
}
    7f3a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7f3c:	f06f 0015 	mvn.w	r0, #21
    7f40:	e7fb      	b.n	7f3a <spi_nrfx_release+0x16>
		return -EBUSY;
    7f42:	f06f 000f 	mvn.w	r0, #15
    7f46:	e7f8      	b.n	7f3a <spi_nrfx_release+0x16>

00007f48 <spi_nrfx_transceive_async>:
{
    7f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, cb, userdata);
    7f4a:	9c07      	ldr	r4, [sp, #28]
    7f4c:	9402      	str	r4, [sp, #8]
    7f4e:	9c06      	ldr	r4, [sp, #24]
    7f50:	9401      	str	r4, [sp, #4]
    7f52:	2401      	movs	r4, #1
    7f54:	9400      	str	r4, [sp, #0]
    7f56:	f7fb ff87 	bl	3e68 <transceive>
}
    7f5a:	b004      	add	sp, #16
    7f5c:	bd10      	pop	{r4, pc}

00007f5e <spi_nrfx_transceive>:
{
    7f5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
    7f60:	2400      	movs	r4, #0
    7f62:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7f66:	9400      	str	r4, [sp, #0]
    7f68:	f7fb ff7e 	bl	3e68 <transceive>
}
    7f6c:	b004      	add	sp, #16
    7f6e:	bd10      	pop	{r4, pc}

00007f70 <uarte_nrfx_config_get>:
{
    7f70:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    7f72:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    7f74:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7f78:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7f7c:	2000      	movs	r0, #0
    7f7e:	4770      	bx	lr

00007f80 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7f80:	6843      	ldr	r3, [r0, #4]
    7f82:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7f84:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7f88:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7f8c:	4770      	bx	lr

00007f8e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7f8e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7f90:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7f92:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f94:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7f98:	b150      	cbz	r0, 7fb0 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7f9a:	2000      	movs	r0, #0
	*c = *data->rx_data;
    7f9c:	6952      	ldr	r2, [r2, #20]
    7f9e:	7812      	ldrb	r2, [r2, #0]
    7fa0:	700a      	strb	r2, [r1, #0]
    7fa2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7fa6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7faa:	2201      	movs	r2, #1
    7fac:	601a      	str	r2, [r3, #0]
	return 0;
    7fae:	4770      	bx	lr
		return -1;
    7fb0:	f04f 30ff 	mov.w	r0, #4294967295
}
    7fb4:	4770      	bx	lr

00007fb6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7fb6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7fb8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fba:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7fbe:	b940      	cbnz	r0, 7fd2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7fc0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7fc2:	079b      	lsls	r3, r3, #30
    7fc4:	d406      	bmi.n	7fd4 <is_tx_ready.isra.0+0x1e>
    7fc6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7fca:	3800      	subs	r0, #0
    7fcc:	bf18      	it	ne
    7fce:	2001      	movne	r0, #1
    7fd0:	4770      	bx	lr
    7fd2:	2001      	movs	r0, #1
}
    7fd4:	4770      	bx	lr

00007fd6 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    7fd6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7fd8:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7fda:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7fde:	05c9      	lsls	r1, r1, #23
    7fe0:	d518      	bpl.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fe2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7fe6:	b1a9      	cbz	r1, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
	__asm__ volatile(
    7fe8:	f04f 0020 	mov.w	r0, #32
    7fec:	f3ef 8111 	mrs	r1, BASEPRI
    7ff0:	f380 8812 	msr	BASEPRI_MAX, r0
    7ff4:	f3bf 8f6f 	isb	sy
    7ff8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7ffc:	b130      	cbz	r0, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ffe:	2000      	movs	r0, #0
    8000:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    8004:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8008:	2001      	movs	r0, #1
    800a:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    800c:	f381 8811 	msr	BASEPRI, r1
    8010:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8014:	6852      	ldr	r2, [r2, #4]
    8016:	06d2      	lsls	r2, r2, #27
    8018:	d515      	bpl.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
	__asm__ volatile(
    801a:	f04f 0120 	mov.w	r1, #32
    801e:	f3ef 8211 	mrs	r2, BASEPRI
    8022:	f381 8812 	msr	BASEPRI_MAX, r1
    8026:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    802a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    802e:	b111      	cbz	r1, 8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8030:	2100      	movs	r1, #0
    8032:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    803a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    803e:	f382 8811 	msr	BASEPRI, r2
    8042:	f3bf 8f6f 	isb	sy
}
    8046:	4770      	bx	lr

00008048 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8048:	4770      	bx	lr

0000804a <sys_clock_cycle_get_32>:
{
    804a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    804c:	f7fc fb50 	bl	46f0 <z_nrf_rtc_timer_read>
}
    8050:	bd08      	pop	{r3, pc}

00008052 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8052:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    8054:	6843      	ldr	r3, [r0, #4]
    8056:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    8058:	7a05      	ldrb	r5, [r0, #8]
    805a:	6844      	ldr	r4, [r0, #4]
    805c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8060:	42a3      	cmp	r3, r4
    8062:	d302      	bcc.n	806a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    8064:	f06f 0001 	mvn.w	r0, #1
}
    8068:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    806a:	795c      	ldrb	r4, [r3, #5]
    806c:	428c      	cmp	r4, r1
    806e:	d001      	beq.n	8074 <pinctrl_lookup_state+0x22>
		(*state)++;
    8070:	3308      	adds	r3, #8
    8072:	e7f0      	b.n	8056 <pinctrl_lookup_state+0x4>
			return 0;
    8074:	2000      	movs	r0, #0
    8076:	e7f7      	b.n	8068 <pinctrl_lookup_state+0x16>

00008078 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8078:	f7fe bf92 	b.w	6fa0 <nrf_cc3xx_platform_init_no_rng>

0000807c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    807c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    807e:	f7fa fb47 	bl	2710 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8082:	f7fa fc2d 	bl	28e0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    808a:	f7fe bf89 	b.w	6fa0 <nrf_cc3xx_platform_init_no_rng>

0000808e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    808e:	4700      	bx	r0

00008090 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8090:	f000 bb7e 	b.w	8790 <z_impl_k_busy_wait>

00008094 <clock_stop>:
{
    8094:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    8096:	2803      	cmp	r0, #3
    8098:	f200 80a7 	bhi.w	81ea <clock_stop+0x156>
    809c:	e8df f000 	tbb	[pc, r0]
    80a0:	35271902 	.word	0x35271902
    80a4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80a8:	2202      	movs	r2, #2
    80aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80ae:	2200      	movs	r2, #0
    80b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    80b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80b8:	2201      	movs	r2, #1
    80ba:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    80bc:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    80be:	2301      	movs	r3, #1
    80c0:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    80c4:	2803      	cmp	r0, #3
    80c6:	f200 8090 	bhi.w	81ea <clock_stop+0x156>
    80ca:	e8df f000 	tbb	[pc, r0]
    80ce:	692c      	.short	0x692c
    80d0:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    80d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80d6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80d8:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    80da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80de:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    80e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    80e6:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ea:	605a      	str	r2, [r3, #4]
    80ec:	e7e7      	b.n	80be <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    80ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    80f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    80f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80fa:	2200      	movs	r2, #0
    80fc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    8100:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8104:	2201      	movs	r2, #1
    8106:	625a      	str	r2, [r3, #36]	; 0x24
    8108:	e7d8      	b.n	80bc <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    810a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    810e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8112:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8116:	2200      	movs	r2, #0
    8118:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    811c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8120:	2201      	movs	r2, #1
    8122:	61da      	str	r2, [r3, #28]
    8124:	e7ca      	b.n	80bc <clock_stop+0x28>
    switch (domain)
    8126:	f242 7510 	movw	r5, #10000	; 0x2710
    812a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    812e:	b36c      	cbz	r4, 818c <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8130:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8134:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8138:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    813a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    813e:	03d9      	lsls	r1, r3, #15
    8140:	d553      	bpl.n	81ea <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8142:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8146:	2801      	cmp	r0, #1
    8148:	d14f      	bne.n	81ea <clock_stop+0x156>
    814a:	f7ff ffa1 	bl	8090 <nrfx_busy_wait>
    814e:	3d01      	subs	r5, #1
    8150:	d1ed      	bne.n	812e <clock_stop+0x9a>
    8152:	e04a      	b.n	81ea <clock_stop+0x156>
    8154:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8158:	2801      	cmp	r0, #1
    815a:	d146      	bne.n	81ea <clock_stop+0x156>
    815c:	f7ff ff98 	bl	8090 <nrfx_busy_wait>
    8160:	3d01      	subs	r5, #1
    8162:	d152      	bne.n	820a <clock_stop+0x176>
    8164:	e041      	b.n	81ea <clock_stop+0x156>
    8166:	f89d 0007 	ldrb.w	r0, [sp, #7]
    816a:	2801      	cmp	r0, #1
    816c:	d13d      	bne.n	81ea <clock_stop+0x156>
    816e:	f7ff ff8f 	bl	8090 <nrfx_busy_wait>
    8172:	3d01      	subs	r5, #1
    8174:	d039      	beq.n	81ea <clock_stop+0x156>
            if (p_clk_src != NULL)
    8176:	b1c4      	cbz	r4, 81aa <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8178:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    817c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8180:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8182:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8186:	03db      	lsls	r3, r3, #15
    8188:	d52f      	bpl.n	81ea <clock_stop+0x156>
    818a:	e7ec      	b.n	8166 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    818c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8190:	03da      	lsls	r2, r3, #15
    8192:	d52a      	bpl.n	81ea <clock_stop+0x156>
    8194:	2001      	movs	r0, #1
    8196:	f7ff ff7b 	bl	8090 <nrfx_busy_wait>
    819a:	3d01      	subs	r5, #1
    819c:	d1f6      	bne.n	818c <clock_stop+0xf8>
    819e:	e024      	b.n	81ea <clock_stop+0x156>
    switch (domain)
    81a0:	f242 7510 	movw	r5, #10000	; 0x2710
    81a4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    81a8:	e7e5      	b.n	8176 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    81aa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    81ae:	03d8      	lsls	r0, r3, #15
    81b0:	d51b      	bpl.n	81ea <clock_stop+0x156>
    81b2:	2001      	movs	r0, #1
    81b4:	f7ff ff6c 	bl	8090 <nrfx_busy_wait>
    81b8:	3d01      	subs	r5, #1
    81ba:	d1f6      	bne.n	81aa <clock_stop+0x116>
    81bc:	e015      	b.n	81ea <clock_stop+0x156>
    switch (domain)
    81be:	f242 7510 	movw	r5, #10000	; 0x2710
    81c2:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    81c6:	b194      	cbz	r4, 81ee <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    81c8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    81cc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    81d0:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    81d2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    81d6:	03d9      	lsls	r1, r3, #15
    81d8:	d507      	bpl.n	81ea <clock_stop+0x156>
    81da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    81de:	2801      	cmp	r0, #1
    81e0:	d103      	bne.n	81ea <clock_stop+0x156>
    81e2:	f7ff ff55 	bl	8090 <nrfx_busy_wait>
    81e6:	3d01      	subs	r5, #1
    81e8:	d1ed      	bne.n	81c6 <clock_stop+0x132>
}
    81ea:	b002      	add	sp, #8
    81ec:	bd70      	pop	{r4, r5, r6, pc}
    81ee:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    81f2:	03da      	lsls	r2, r3, #15
    81f4:	d5f9      	bpl.n	81ea <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    81f6:	2001      	movs	r0, #1
    81f8:	f7ff ff4a 	bl	8090 <nrfx_busy_wait>
    81fc:	3d01      	subs	r5, #1
    81fe:	d1f6      	bne.n	81ee <clock_stop+0x15a>
    8200:	e7f3      	b.n	81ea <clock_stop+0x156>
    switch (domain)
    8202:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    8206:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    820a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    820e:	03db      	lsls	r3, r3, #15
    8210:	d5eb      	bpl.n	81ea <clock_stop+0x156>
    8212:	2c00      	cmp	r4, #0
    8214:	d19e      	bne.n	8154 <clock_stop+0xc0>
    8216:	2001      	movs	r0, #1
    8218:	e7a0      	b.n	815c <clock_stop+0xc8>

0000821a <nrfx_clock_enable>:
{
    821a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    821c:	2005      	movs	r0, #5
    821e:	f7fa fc1b 	bl	2a58 <arch_irq_is_enabled>
    8222:	b910      	cbnz	r0, 822a <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8224:	2005      	movs	r0, #5
    8226:	f7fa fbf5 	bl	2a14 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    822a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    822e:	2201      	movs	r2, #1
    8230:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    8234:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    8238:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    823c:	bd08      	pop	{r3, pc}

0000823e <nrfx_clock_start>:
{
    823e:	b508      	push	{r3, lr}
    switch (domain)
    8240:	2803      	cmp	r0, #3
    8242:	d819      	bhi.n	8278 <nrfx_clock_start+0x3a>
    8244:	e8df f000 	tbb	[pc, r0]
    8248:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    824c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8250:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8254:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8258:	03c9      	lsls	r1, r1, #15
    825a:	d40e      	bmi.n	827a <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    825c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8260:	07db      	lsls	r3, r3, #31
    8262:	d513      	bpl.n	828c <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8264:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    8268:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    826c:	3b01      	subs	r3, #1
    826e:	2b01      	cmp	r3, #1
    8270:	d809      	bhi.n	8286 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    8272:	2302      	movs	r3, #2
    8274:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8278:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    827a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    827e:	2b02      	cmp	r3, #2
    8280:	d005      	beq.n	828e <nrfx_clock_start+0x50>
    8282:	2b01      	cmp	r3, #1
    8284:	d002      	beq.n	828c <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8286:	2000      	movs	r0, #0
    8288:	f7ff ff04 	bl	8094 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    828c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    828e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    8292:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8296:	2300      	movs	r3, #0
    8298:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    829c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    82a0:	2302      	movs	r3, #2
    82a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82a6:	2301      	movs	r3, #1
    82a8:	6093      	str	r3, [r2, #8]
}
    82aa:	e7e5      	b.n	8278 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    82b0:	2200      	movs	r2, #0
    82b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    82b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    82ba:	2201      	movs	r2, #1
    82bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82c0:	601a      	str	r2, [r3, #0]
}
    82c2:	e7d9      	b.n	8278 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    82c8:	2200      	movs	r2, #0
    82ca:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    82ce:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    82d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    82d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82da:	2201      	movs	r2, #1
    82dc:	621a      	str	r2, [r3, #32]
}
    82de:	e7cb      	b.n	8278 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    82e4:	2200      	movs	r2, #0
    82e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    82ea:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    82ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    82f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82f6:	2201      	movs	r2, #1
    82f8:	619a      	str	r2, [r3, #24]
}
    82fa:	e7bd      	b.n	8278 <nrfx_clock_start+0x3a>

000082fc <nrfx_clock_stop>:
    clock_stop(domain);
    82fc:	f7ff beca 	b.w	8094 <clock_stop>

00008300 <nrf_gpio_reconfigure>:
{
    8300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8302:	4616      	mov	r6, r2
    8304:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    8308:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    830a:	a801      	add	r0, sp, #4
{
    830c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    830e:	f7fc fdf7 	bl	4f00 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8312:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8314:	f1b6 0c00 	subs.w	ip, r6, #0
    8318:	bf18      	it	ne
    831a:	f04f 0c01 	movne.w	ip, #1
    831e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8322:	1e0b      	subs	r3, r1, #0
    8324:	bf18      	it	ne
    8326:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8328:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    832a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    832e:	bf14      	ite	ne
    8330:	f04f 0c0c 	movne.w	ip, #12
    8334:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8338:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    833a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    833e:	bf14      	ite	ne
    8340:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    8344:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8348:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    834a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    834e:	bf14      	ite	ne
    8350:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    8354:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8358:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    835c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    8360:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8364:	b101      	cbz	r1, 8368 <nrf_gpio_reconfigure+0x68>
    8366:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8368:	b10e      	cbz	r6, 836e <nrf_gpio_reconfigure+0x6e>
    836a:	7836      	ldrb	r6, [r6, #0]
    836c:	0076      	lsls	r6, r6, #1
    836e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8370:	b10d      	cbz	r5, 8376 <nrf_gpio_reconfigure+0x76>
    8372:	782d      	ldrb	r5, [r5, #0]
    8374:	00ad      	lsls	r5, r5, #2
    8376:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8378:	b10c      	cbz	r4, 837e <nrf_gpio_reconfigure+0x7e>
    837a:	7824      	ldrb	r4, [r4, #0]
    837c:	0224      	lsls	r4, r4, #8
    837e:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8380:	b10f      	cbz	r7, 8386 <nrf_gpio_reconfigure+0x86>
    8382:	783f      	ldrb	r7, [r7, #0]
    8384:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8386:	430c      	orrs	r4, r1
    8388:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    838a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    838e:	b003      	add	sp, #12
    8390:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008392 <nrf_gpio_cfg_sense_set>:
{
    8392:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8394:	f10d 030f 	add.w	r3, sp, #15
    8398:	9301      	str	r3, [sp, #4]
    839a:	2300      	movs	r3, #0
{
    839c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    83a0:	461a      	mov	r2, r3
    83a2:	4619      	mov	r1, r3
    83a4:	9300      	str	r3, [sp, #0]
    83a6:	f7ff ffab 	bl	8300 <nrf_gpio_reconfigure>
}
    83aa:	b005      	add	sp, #20
    83ac:	f85d fb04 	ldr.w	pc, [sp], #4

000083b0 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    83b0:	1c43      	adds	r3, r0, #1
{
    83b2:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    83b4:	d005      	beq.n	83c2 <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
    83b6:	2300      	movs	r3, #0
    83b8:	2201      	movs	r2, #1
    83ba:	4619      	mov	r1, r3
    83bc:	9300      	str	r3, [sp, #0]
    83be:	f7fd f951 	bl	5664 <nrf_gpio_cfg.constprop.0>
}
    83c2:	b003      	add	sp, #12
    83c4:	f85d fb04 	ldr.w	pc, [sp], #4

000083c8 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
    83c8:	7f83      	ldrb	r3, [r0, #30]
    83ca:	075a      	lsls	r2, r3, #29
    83cc:	d40b      	bmi.n	83e6 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    83ce:	7fc0      	ldrb	r0, [r0, #31]
    83d0:	28ff      	cmp	r0, #255	; 0xff
    83d2:	d008      	beq.n	83e6 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
    83d4:	079b      	lsls	r3, r3, #30
    83d6:	bf58      	it	pl
    83d8:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
    83dc:	b909      	cbnz	r1, 83e2 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
    83de:	f7fd b931 	b.w	5644 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    83e2:	f7fd b95f 	b.w	56a4 <nrf_gpio_pin_set>
}
    83e6:	4770      	bx	lr

000083e8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    83e8:	4770      	bx	lr

000083ea <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    83ea:	b140      	cbz	r0, 83fe <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    83ec:	68c3      	ldr	r3, [r0, #12]
    83ee:	7858      	ldrb	r0, [r3, #1]
    83f0:	f010 0001 	ands.w	r0, r0, #1
    83f4:	bf1e      	ittt	ne
    83f6:	7818      	ldrbne	r0, [r3, #0]
    83f8:	fab0 f080 	clzne	r0, r0
    83fc:	0940      	lsrne	r0, r0, #5
}
    83fe:	4770      	bx	lr

00008400 <z_early_memset>:
	(void) memset(dst, c, n);
    8400:	f7ff bc3b 	b.w	7c7a <memset>

00008404 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    8404:	f7ff bc2e 	b.w	7c64 <memcpy>

00008408 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8408:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    840c:	4313      	orrs	r3, r2
    840e:	f013 0303 	ands.w	r3, r3, #3
    8412:	d10c      	bne.n	842e <create_free_list+0x26>
	slab->free_list = NULL;
    8414:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8416:	6881      	ldr	r1, [r0, #8]
    8418:	4299      	cmp	r1, r3
    841a:	d801      	bhi.n	8420 <create_free_list+0x18>
	return 0;
    841c:	2000      	movs	r0, #0
    841e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    8420:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8422:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    8424:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    8426:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    8428:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    842a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    842c:	e7f3      	b.n	8416 <create_free_list+0xe>
		return -EINVAL;
    842e:	f06f 0015 	mvn.w	r0, #21
}
    8432:	4770      	bx	lr

00008434 <k_mem_slab_init>:
{
    8434:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    8436:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    843a:	2300      	movs	r3, #0
	slab->buffer = buffer;
    843c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    843e:	6183      	str	r3, [r0, #24]
{
    8440:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    8442:	f7ff ffe1 	bl	8408 <create_free_list>
	if (rc < 0) {
    8446:	2800      	cmp	r0, #0
    8448:	bfa8      	it	ge
    844a:	e9c4 4400 	strdge	r4, r4, [r4]
}
    844e:	bd10      	pop	{r4, pc}

00008450 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8452:	4604      	mov	r4, r0
    8454:	460d      	mov	r5, r1
	__asm__ volatile(
    8456:	f04f 0320 	mov.w	r3, #32
    845a:	f3ef 8611 	mrs	r6, BASEPRI
    845e:	f383 8812 	msr	BASEPRI_MAX, r3
    8462:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8466:	6947      	ldr	r7, [r0, #20]
    8468:	b977      	cbnz	r7, 8488 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    846a:	f000 f8e0 	bl	862e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    846e:	b158      	cbz	r0, 8488 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8470:	682a      	ldr	r2, [r5, #0]
    8472:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8474:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8476:	f000 f8a3 	bl	85c0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    847a:	4631      	mov	r1, r6
    847c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    8484:	f7fe b852 	b.w	652c <z_reschedule>
	**(char ***) mem = slab->free_list;
    8488:	682b      	ldr	r3, [r5, #0]
    848a:	6962      	ldr	r2, [r4, #20]
    848c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    848e:	682b      	ldr	r3, [r5, #0]
    8490:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8492:	69a3      	ldr	r3, [r4, #24]
    8494:	3b01      	subs	r3, #1
    8496:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8498:	f386 8811 	msr	BASEPRI, r6
    849c:	f3bf 8f6f 	isb	sy
}
    84a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000084a2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    84a2:	f3ef 8005 	mrs	r0, IPSR
}
    84a6:	3800      	subs	r0, #0
    84a8:	bf18      	it	ne
    84aa:	2001      	movne	r0, #1
    84ac:	4770      	bx	lr

000084ae <z_impl_k_thread_name_set>:
}
    84ae:	f06f 0057 	mvn.w	r0, #87	; 0x57
    84b2:	4770      	bx	lr

000084b4 <k_thread_name_get>:
}
    84b4:	2000      	movs	r0, #0
    84b6:	4770      	bx	lr

000084b8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    84b8:	f7fe b84a 	b.w	6550 <z_sched_start>

000084bc <z_pm_save_idle_exit>:
{
    84bc:	b508      	push	{r3, lr}
	pm_system_resume();
    84be:	f7fa f827 	bl	2510 <pm_system_resume>
}
    84c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    84c6:	f7ff bdbf 	b.w	8048 <sys_clock_idle_exit>

000084ca <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    84ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
    84ce:	428b      	cmp	r3, r1
    84d0:	d001      	beq.n	84d6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    84d2:	f7fd bfe5 	b.w	64a0 <z_set_prio>
}
    84d6:	2000      	movs	r0, #0
    84d8:	4770      	bx	lr

000084da <z_impl_k_mutex_init>:
{
    84da:	4603      	mov	r3, r0
	mutex->owner = NULL;
    84dc:	2000      	movs	r0, #0
    84de:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    84e2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    84e6:	4770      	bx	lr

000084e8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    84e8:	b15a      	cbz	r2, 8502 <z_impl_k_sem_init+0x1a>
    84ea:	428a      	cmp	r2, r1
    84ec:	d309      	bcc.n	8502 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    84ee:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    84f2:	e9c0 1202 	strd	r1, r2, [r0, #8]
    84f6:	e9c0 0000 	strd	r0, r0, [r0]
    84fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    84fe:	2000      	movs	r0, #0
    8500:	4770      	bx	lr
		return -EINVAL;
    8502:	f06f 0015 	mvn.w	r0, #21
}
    8506:	4770      	bx	lr

00008508 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8508:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    850c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    850e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8510:	2300      	movs	r3, #0
	node->prev = NULL;
    8512:	e9c0 3300 	strd	r3, r3, [r0]
}
    8516:	4770      	bx	lr

00008518 <unpend_thread_no_timeout>:
{
    8518:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    851a:	f7ff fff5 	bl	8508 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    851e:	7b43      	ldrb	r3, [r0, #13]
    8520:	f023 0302 	bic.w	r3, r3, #2
    8524:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8526:	2300      	movs	r3, #0
    8528:	6083      	str	r3, [r0, #8]
}
    852a:	bd08      	pop	{r3, pc}

0000852c <z_thread_timeout>:
{
    852c:	4601      	mov	r1, r0
    852e:	b510      	push	{r4, lr}
	__asm__ volatile(
    8530:	f04f 0320 	mov.w	r3, #32
    8534:	f3ef 8411 	mrs	r4, BASEPRI
    8538:	f383 8812 	msr	BASEPRI_MAX, r3
    853c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8540:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    8544:	f013 0f28 	tst.w	r3, #40	; 0x28
    8548:	d10d      	bne.n	8566 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    854a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    854e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    8550:	b10b      	cbz	r3, 8556 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    8552:	f7ff ffe1 	bl	8518 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8556:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    855a:	f023 0314 	bic.w	r3, r3, #20
    855e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    8562:	f7fd fea7 	bl	62b4 <ready_thread>
	__asm__ volatile(
    8566:	f384 8811 	msr	BASEPRI, r4
    856a:	f3bf 8f6f 	isb	sy
}
    856e:	bd10      	pop	{r4, pc}

00008570 <add_to_waitq_locked>:
{
    8570:	b538      	push	{r3, r4, r5, lr}
    8572:	4604      	mov	r4, r0
    8574:	460d      	mov	r5, r1
	unready_thread(thread);
    8576:	f7fd fed1 	bl	631c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    857a:	7b63      	ldrb	r3, [r4, #13]
    857c:	f043 0302 	orr.w	r3, r3, #2
    8580:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8582:	b1e5      	cbz	r5, 85be <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    8584:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    8586:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8588:	429d      	cmp	r5, r3
    858a:	d109      	bne.n	85a0 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    858c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    858e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8592:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8594:	606c      	str	r4, [r5, #4]
}
    8596:	e012      	b.n	85be <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    8598:	686a      	ldr	r2, [r5, #4]
    859a:	4293      	cmp	r3, r2
    859c:	d0f6      	beq.n	858c <add_to_waitq_locked+0x1c>
    859e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85a0:	2b00      	cmp	r3, #0
    85a2:	d0f3      	beq.n	858c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    85a4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    85a8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    85ac:	428a      	cmp	r2, r1
    85ae:	d0f3      	beq.n	8598 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    85b0:	4291      	cmp	r1, r2
    85b2:	ddf1      	ble.n	8598 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    85b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    85b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    85ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    85bc:	605c      	str	r4, [r3, #4]
}
    85be:	bd38      	pop	{r3, r4, r5, pc}

000085c0 <z_ready_thread>:
{
    85c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    85c2:	f04f 0320 	mov.w	r3, #32
    85c6:	f3ef 8411 	mrs	r4, BASEPRI
    85ca:	f383 8812 	msr	BASEPRI_MAX, r3
    85ce:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    85d2:	f7fd fe6f 	bl	62b4 <ready_thread>
	__asm__ volatile(
    85d6:	f384 8811 	msr	BASEPRI, r4
    85da:	f3bf 8f6f 	isb	sy
}
    85de:	bd10      	pop	{r4, pc}

000085e0 <z_unpend_thread_no_timeout>:
{
    85e0:	b508      	push	{r3, lr}
	__asm__ volatile(
    85e2:	f04f 0320 	mov.w	r3, #32
    85e6:	f3ef 8111 	mrs	r1, BASEPRI
    85ea:	f383 8812 	msr	BASEPRI_MAX, r3
    85ee:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    85f2:	f7ff ff91 	bl	8518 <unpend_thread_no_timeout>
	__asm__ volatile(
    85f6:	f381 8811 	msr	BASEPRI, r1
    85fa:	f3bf 8f6f 	isb	sy
}
    85fe:	bd08      	pop	{r3, pc}

00008600 <z_unpend1_no_timeout>:
{
    8600:	b508      	push	{r3, lr}
    8602:	4603      	mov	r3, r0
	__asm__ volatile(
    8604:	f04f 0220 	mov.w	r2, #32
    8608:	f3ef 8111 	mrs	r1, BASEPRI
    860c:	f382 8812 	msr	BASEPRI_MAX, r2
    8610:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8614:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8616:	4283      	cmp	r3, r0
    8618:	d007      	beq.n	862a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    861a:	b108      	cbz	r0, 8620 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    861c:	f7ff ff7c 	bl	8518 <unpend_thread_no_timeout>
	__asm__ volatile(
    8620:	f381 8811 	msr	BASEPRI, r1
    8624:	f3bf 8f6f 	isb	sy
}
    8628:	bd08      	pop	{r3, pc}
    862a:	2000      	movs	r0, #0
    862c:	e7f8      	b.n	8620 <z_unpend1_no_timeout+0x20>

0000862e <z_unpend_first_thread>:
{
    862e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8630:	f04f 0320 	mov.w	r3, #32
    8634:	f3ef 8511 	mrs	r5, BASEPRI
    8638:	f383 8812 	msr	BASEPRI_MAX, r3
    863c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8640:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8642:	42a0      	cmp	r0, r4
    8644:	d00d      	beq.n	8662 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    8646:	b134      	cbz	r4, 8656 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    8648:	4620      	mov	r0, r4
    864a:	f7ff ff65 	bl	8518 <unpend_thread_no_timeout>
    864e:	f104 0018 	add.w	r0, r4, #24
    8652:	f000 f855 	bl	8700 <z_abort_timeout>
	__asm__ volatile(
    8656:	f385 8811 	msr	BASEPRI, r5
    865a:	f3bf 8f6f 	isb	sy
}
    865e:	4620      	mov	r0, r4
    8660:	bd38      	pop	{r3, r4, r5, pc}
    8662:	2400      	movs	r4, #0
    8664:	e7f7      	b.n	8656 <z_unpend_first_thread+0x28>

00008666 <z_unpend_thread>:
{
    8666:	b510      	push	{r4, lr}
	__asm__ volatile(
    8668:	f04f 0320 	mov.w	r3, #32
    866c:	f3ef 8411 	mrs	r4, BASEPRI
    8670:	f383 8812 	msr	BASEPRI_MAX, r3
    8674:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    8678:	f7ff ff4e 	bl	8518 <unpend_thread_no_timeout>
	__asm__ volatile(
    867c:	f384 8811 	msr	BASEPRI, r4
    8680:	f3bf 8f6f 	isb	sy
}
    8684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8688:	3018      	adds	r0, #24
    868a:	f000 b839 	b.w	8700 <z_abort_timeout>

0000868e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    868e:	4603      	mov	r3, r0
    8690:	b920      	cbnz	r0, 869c <z_reschedule_irqlock+0xe>
    8692:	f3ef 8205 	mrs	r2, IPSR
    8696:	b90a      	cbnz	r2, 869c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8698:	f7fa ba22 	b.w	2ae0 <arch_swap>
    869c:	f383 8811 	msr	BASEPRI, r3
    86a0:	f3bf 8f6f 	isb	sy
}
    86a4:	4770      	bx	lr

000086a6 <z_reschedule_unlocked>:
	__asm__ volatile(
    86a6:	f04f 0320 	mov.w	r3, #32
    86aa:	f3ef 8011 	mrs	r0, BASEPRI
    86ae:	f383 8812 	msr	BASEPRI_MAX, r3
    86b2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    86b6:	f7ff bfea 	b.w	868e <z_reschedule_irqlock>

000086ba <z_sched_wake>:
{
    86ba:	b538      	push	{r3, r4, r5, lr}
    86bc:	f04f 0320 	mov.w	r3, #32
    86c0:	f3ef 8511 	mrs	r5, BASEPRI
    86c4:	f383 8812 	msr	BASEPRI_MAX, r3
    86c8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    86cc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86ce:	42a0      	cmp	r0, r4
    86d0:	d012      	beq.n	86f8 <z_sched_wake+0x3e>
		if (thread != NULL) {
    86d2:	b19c      	cbz	r4, 86fc <z_sched_wake+0x42>
    86d4:	67e1      	str	r1, [r4, #124]	; 0x7c
    86d6:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    86d8:	4620      	mov	r0, r4
    86da:	f7ff ff1d 	bl	8518 <unpend_thread_no_timeout>
    86de:	f104 0018 	add.w	r0, r4, #24
    86e2:	f000 f80d 	bl	8700 <z_abort_timeout>
			ready_thread(thread);
    86e6:	4620      	mov	r0, r4
    86e8:	f7fd fde4 	bl	62b4 <ready_thread>
			ret = true;
    86ec:	2001      	movs	r0, #1
	__asm__ volatile(
    86ee:	f385 8811 	msr	BASEPRI, r5
    86f2:	f3bf 8f6f 	isb	sy
}
    86f6:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    86f8:	2000      	movs	r0, #0
    86fa:	e7f8      	b.n	86ee <z_sched_wake+0x34>
    86fc:	4620      	mov	r0, r4
    86fe:	e7f6      	b.n	86ee <z_sched_wake+0x34>

00008700 <z_abort_timeout>:
{
    8700:	b510      	push	{r4, lr}
	__asm__ volatile(
    8702:	f04f 0220 	mov.w	r2, #32
    8706:	f3ef 8411 	mrs	r4, BASEPRI
    870a:	f382 8812 	msr	BASEPRI_MAX, r2
    870e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    8712:	6803      	ldr	r3, [r0, #0]
    8714:	b13b      	cbz	r3, 8726 <z_abort_timeout+0x26>
			remove_timeout(to);
    8716:	f7fe f907 	bl	6928 <remove_timeout>
			ret = 0;
    871a:	2000      	movs	r0, #0
	__asm__ volatile(
    871c:	f384 8811 	msr	BASEPRI, r4
    8720:	f3bf 8f6f 	isb	sy
}
    8724:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8726:	f06f 0015 	mvn.w	r0, #21
    872a:	e7f7      	b.n	871c <z_abort_timeout+0x1c>

0000872c <z_get_next_timeout_expiry>:
{
    872c:	b510      	push	{r4, lr}
	__asm__ volatile(
    872e:	f04f 0320 	mov.w	r3, #32
    8732:	f3ef 8411 	mrs	r4, BASEPRI
    8736:	f383 8812 	msr	BASEPRI_MAX, r3
    873a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    873e:	f7fe f8cb 	bl	68d8 <next_timeout>
	__asm__ volatile(
    8742:	f384 8811 	msr	BASEPRI, r4
    8746:	f3bf 8f6f 	isb	sy
}
    874a:	bd10      	pop	{r4, pc}

0000874c <z_set_timeout_expiry>:
{
    874c:	b570      	push	{r4, r5, r6, lr}
    874e:	4604      	mov	r4, r0
    8750:	460d      	mov	r5, r1
	__asm__ volatile(
    8752:	f04f 0320 	mov.w	r3, #32
    8756:	f3ef 8611 	mrs	r6, BASEPRI
    875a:	f383 8812 	msr	BASEPRI_MAX, r3
    875e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    8762:	f7fe f8b9 	bl	68d8 <next_timeout>
			      || (ticks <= next_to);
    8766:	2801      	cmp	r0, #1
    8768:	dd07      	ble.n	877a <z_set_timeout_expiry+0x2e>
    876a:	42a0      	cmp	r0, r4
    876c:	db05      	blt.n	877a <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    876e:	42a0      	cmp	r0, r4
    8770:	4629      	mov	r1, r5
    8772:	bfa8      	it	ge
    8774:	4620      	movge	r0, r4
    8776:	f7fc f937 	bl	49e8 <sys_clock_set_timeout>
	__asm__ volatile(
    877a:	f386 8811 	msr	BASEPRI, r6
    877e:	f3bf 8f6f 	isb	sy
}
    8782:	bd70      	pop	{r4, r5, r6, pc}

00008784 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8784:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8786:	f7fe f9c5 	bl	6b14 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    878a:	bd08      	pop	{r3, pc}

0000878c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    878c:	f7fe b9c2 	b.w	6b14 <sys_clock_tick_get>

00008790 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8790:	b108      	cbz	r0, 8796 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8792:	f7f9 b925 	b.w	19e0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8796:	4770      	bx	lr

00008798 <k_timer_init>:
	timer->status = 0U;
    8798:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    879a:	e9c0 1208 	strd	r1, r2, [r0, #32]
    879e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    87a2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    87a6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    87aa:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    87ac:	6343      	str	r3, [r0, #52]	; 0x34
}
    87ae:	4770      	bx	lr

000087b0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    87b0:	b510      	push	{r4, lr}
    87b2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    87b4:	f7ff ffa4 	bl	8700 <z_abort_timeout>

	if (inactive) {
    87b8:	b9b0      	cbnz	r0, 87e8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    87ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87bc:	b10b      	cbz	r3, 87c2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    87be:	4620      	mov	r0, r4
    87c0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    87c2:	f104 0018 	add.w	r0, r4, #24
    87c6:	f7ff ff1b 	bl	8600 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    87ca:	b168      	cbz	r0, 87e8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    87cc:	f7ff fef8 	bl	85c0 <z_ready_thread>
	__asm__ volatile(
    87d0:	f04f 0320 	mov.w	r3, #32
    87d4:	f3ef 8011 	mrs	r0, BASEPRI
    87d8:	f383 8812 	msr	BASEPRI_MAX, r3
    87dc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    87e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87e4:	f7ff bf53 	b.w	868e <z_reschedule_irqlock>
    87e8:	bd10      	pop	{r4, pc}

000087ea <signal_poll_event>:
{
    87ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    87ee:	6884      	ldr	r4, [r0, #8]
{
    87f0:	4605      	mov	r5, r0
    87f2:	460e      	mov	r6, r1
	if (poller != NULL) {
    87f4:	b144      	cbz	r4, 8808 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    87f6:	7863      	ldrb	r3, [r4, #1]
    87f8:	2b01      	cmp	r3, #1
    87fa:	d12e      	bne.n	885a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    87fc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    8800:	f013 0302 	ands.w	r3, r3, #2
    8804:	d10a      	bne.n	881c <signal_poll_event+0x32>
		poller->is_polling = false;
    8806:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    8808:	2000      	movs	r0, #0
	event->state |= state;
    880a:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    880c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    880e:	f3c3 3286 	ubfx	r2, r3, #14, #7
    8812:	4316      	orrs	r6, r2
    8814:	f366 3394 	bfi	r3, r6, #14, #7
    8818:	60eb      	str	r3, [r5, #12]
	return retcode;
    881a:	e03e      	b.n	889a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    881c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    8820:	f1b3 3fff 	cmp.w	r3, #4294967295
    8824:	bf08      	it	eq
    8826:	f112 0f02 	cmneq.w	r2, #2
    882a:	d032      	beq.n	8892 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    882c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    8830:	4640      	mov	r0, r8
    8832:	f7ff ff18 	bl	8666 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    8836:	2e08      	cmp	r6, #8
    8838:	bf0c      	ite	eq
    883a:	f06f 0303 	mvneq.w	r3, #3
    883e:	2300      	movne	r3, #0
    8840:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8842:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    8846:	06db      	lsls	r3, r3, #27
    8848:	d109      	bne.n	885e <signal_poll_event+0x74>
    884a:	f854 7c48 	ldr.w	r7, [r4, #-72]
    884e:	b937      	cbnz	r7, 885e <signal_poll_event+0x74>
	z_ready_thread(thread);
    8850:	4640      	mov	r0, r8
    8852:	f7ff feb5 	bl	85c0 <z_ready_thread>
		poller->is_polling = false;
    8856:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    8858:	e7d6      	b.n	8808 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    885a:	2b02      	cmp	r3, #2
    885c:	d001      	beq.n	8862 <signal_poll_event+0x78>
		poller->is_polling = false;
    885e:	2300      	movs	r3, #0
    8860:	e7d1      	b.n	8806 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    8862:	7823      	ldrb	r3, [r4, #0]
    8864:	2b00      	cmp	r3, #0
    8866:	d0cf      	beq.n	8808 <signal_poll_event+0x1e>
    8868:	f854 7c04 	ldr.w	r7, [r4, #-4]
    886c:	2f00      	cmp	r7, #0
    886e:	d0f2      	beq.n	8856 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    8870:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    8874:	f1a4 0914 	sub.w	r9, r4, #20
    8878:	f104 0014 	add.w	r0, r4, #20
    887c:	f7ff ff40 	bl	8700 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
    8880:	4649      	mov	r1, r9
    8882:	4638      	mov	r0, r7
		twork->poll_result = 0;
    8884:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    8888:	f000 f829 	bl	88de <z_work_submit_to_queue>
		poller->is_polling = false;
    888c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    8890:	e7ba      	b.n	8808 <signal_poll_event+0x1e>
		poller->is_polling = false;
    8892:	2300      	movs	r3, #0
		return -EAGAIN;
    8894:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    8898:	7023      	strb	r3, [r4, #0]
}
    889a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000889e <z_handle_obj_poll_events>:
{
    889e:	4603      	mov	r3, r0
	return list->head == list;
    88a0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    88a2:	4283      	cmp	r3, r0
    88a4:	d008      	beq.n	88b8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    88a6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    88aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    88ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    88ae:	2300      	movs	r3, #0
	node->prev = NULL;
    88b0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    88b4:	f7ff bf99 	b.w	87ea <signal_poll_event>
}
    88b8:	4770      	bx	lr

000088ba <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    88ba:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    88bc:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    88be:	408b      	lsls	r3, r1
    88c0:	ea22 0303 	bic.w	r3, r2, r3
    88c4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    88c6:	fa22 f001 	lsr.w	r0, r2, r1
}
    88ca:	f000 0001 	and.w	r0, r0, #1
    88ce:	4770      	bx	lr

000088d0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    88d0:	b120      	cbz	r0, 88dc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    88d2:	2200      	movs	r2, #0
    88d4:	3088      	adds	r0, #136	; 0x88
    88d6:	4611      	mov	r1, r2
    88d8:	f7ff beef 	b.w	86ba <z_sched_wake>
}
    88dc:	4770      	bx	lr

000088de <z_work_submit_to_queue>:
{
    88de:	b513      	push	{r0, r1, r4, lr}
    88e0:	9001      	str	r0, [sp, #4]
    88e2:	4608      	mov	r0, r1
    88e4:	f04f 0320 	mov.w	r3, #32
    88e8:	f3ef 8411 	mrs	r4, BASEPRI
    88ec:	f383 8812 	msr	BASEPRI_MAX, r3
    88f0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    88f4:	a901      	add	r1, sp, #4
    88f6:	f7fe fac1 	bl	6e7c <submit_to_queue_locked>
	__asm__ volatile(
    88fa:	f384 8811 	msr	BASEPRI, r4
    88fe:	f3bf 8f6f 	isb	sy
}
    8902:	b002      	add	sp, #8
    8904:	bd10      	pop	{r4, pc}

00008906 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8906:	4770      	bx	lr
