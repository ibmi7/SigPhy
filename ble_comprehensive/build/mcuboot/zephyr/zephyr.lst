
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	b8 80 04 20 09 27 00 00 bb 80 00 00 dd 26 00 00     ... .'.......&..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	dd 26 00 00 dd 26 00 00 dd 26 00 00 dd 26 00 00     .&...&...&...&..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	51 22 00 00 dd 26 00 00 00 00 00 00 09 22 00 00     Q"...&......."..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	dd 26 00 00                                         .&..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
			switch (*fmt) {
  c0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
  d0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
  e0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
  f0:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
 100:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
 110:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
				align = VA_STACK_ALIGN(void *);
 120:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
			switch (*fmt) {
 130:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
 140:	cd 22 00 00 cd 22 00 00 cd 22 00 00 cd 22 00 00     ."..."..."..."..
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	cd 22 00 00                                         ."..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x22>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x16>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x34>
     326:	b916      	cbnz	r6, 32e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2e>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x28>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5e>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x42>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x54>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x58>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf2>
     3ec:	d106      	bne.n	3fc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xfc>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xfc>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x50>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd8>

00000424 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     426:	4b37      	ldr	r3, [pc, #220]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     428:	4a37      	ldr	r2, [pc, #220]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     42a:	2149      	movs	r1, #73	; 0x49
     42c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     430:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     434:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     438:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     43c:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     440:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     444:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     448:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     44c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     450:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     454:	482d      	ldr	r0, [pc, #180]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     456:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
{
     45a:	b085      	sub	sp, #20
     45c:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     460:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     464:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     468:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     46c:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     470:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    BOOT_LOG_INF("Starting bootloader");
     474:	f007 fd99 	bl	7faa <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     478:	f006 fbfd 	bl	6c76 <os_heap_init>

0000047c <FIH_LABEL_FIH_CALL_START_357>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     47c:	a801      	add	r0, sp, #4
     47e:	f000 fe59 	bl	1134 <boot_go>

00000482 <FIH_LABEL_FIH_CALL_END_369>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     482:	4b23      	ldr	r3, [pc, #140]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     484:	681b      	ldr	r3, [r3, #0]
     486:	4283      	cmp	r3, r0
     488:	d004      	beq.n	494 <FIH_LABEL_FIH_CALL_END_369+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     48a:	2145      	movs	r1, #69	; 0x45
     48c:	4821      	ldr	r0, [pc, #132]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     48e:	f007 fd8c 	bl	7faa <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     492:	e7fe      	b.n	492 <FIH_LABEL_FIH_CALL_END_369+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     494:	9a03      	ldr	r2, [sp, #12]
     496:	2149      	movs	r1, #73	; 0x49
     498:	481f      	ldr	r0, [pc, #124]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     49a:	f007 fd86 	bl	7faa <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     49e:	2149      	movs	r1, #73	; 0x49
     4a0:	481e      	ldr	r0, [pc, #120]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4a2:	f007 fd82 	bl	7faa <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4a6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     4aa:	2000      	movs	r0, #0
     4ac:	f003 ff52 	bl	4354 <fprotect_area>

    if (rc != 0) {
     4b0:	4604      	mov	r4, r0
     4b2:	b120      	cbz	r0, 4be <FIH_LABEL_FIH_CALL_END_369+0x3c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     4b4:	2145      	movs	r1, #69	; 0x45
     4b6:	481a      	ldr	r0, [pc, #104]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4b8:	f007 fd77 	bl	7faa <z_log_minimal_printk>
        while (1)
     4bc:	e7fe      	b.n	4bc <FIH_LABEL_FIH_CALL_END_369+0x3a>
            ;
    }

#endif /* USE_PARTITION_MANAGER && CONFIG_FPROTECT */
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     4be:	f004 f80d 	bl	44dc <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4c2:	4669      	mov	r1, sp
     4c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4c8:	f000 f82e 	bl	528 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4cc:	9b00      	ldr	r3, [sp, #0]
     4ce:	9d03      	ldr	r5, [sp, #12]
     4d0:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4d2:	9b01      	ldr	r3, [sp, #4]
     4d4:	891e      	ldrh	r6, [r3, #8]
    nrf_cleanup_peripheral();
     4d6:	f001 f889 	bl	15ec <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4da:	19af      	adds	r7, r5, r6
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     4dc:	f001 f86a 	bl	15b4 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     4e0:	f002 f954 	bl	278c <z_arm_clear_arm_mpu_config>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4e4:	59ab      	ldr	r3, [r5, r6]
     4e6:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4ea:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     4ee:	f3bf 8f6f 	isb	sy
     4f2:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     4fa:	2145      	movs	r1, #69	; 0x45
     4fc:	4809      	ldr	r0, [pc, #36]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4fe:	f007 fd54 	bl	7faa <z_log_minimal_printk>
    while (1)
     502:	e7fe      	b.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     504:	6e524635 	.word	0x6e524635
     508:	50018000 	.word	0x50018000
     50c:	00009646 	.word	0x00009646
     510:	20002340 	.word	0x20002340
     514:	0000965f 	.word	0x0000965f
     518:	00009682 	.word	0x00009682
     51c:	000096b1 	.word	0x000096b1
     520:	000096d6 	.word	0x000096d6
     524:	00009709 	.word	0x00009709

00000528 <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     528:	4602      	mov	r2, r0
{
     52a:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     52c:	b138      	cbz	r0, 53e <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     52e:	4805      	ldr	r0, [pc, #20]	; (544 <flash_device_base+0x1c>)
     530:	2300      	movs	r3, #0
     532:	2145      	movs	r1, #69	; 0x45
     534:	f007 fd39 	bl	7faa <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     538:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     53c:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     53e:	6008      	str	r0, [r1, #0]
    return 0;
     540:	e7fc      	b.n	53c <flash_device_base+0x14>
     542:	bf00      	nop
     544:	0000972c 	.word	0x0000972c

00000548 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     54c:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 71c <FIH_LABEL_FIH_CALL_END_801+0x22>
{
     550:	b0d9      	sub	sp, #356	; 0x164

#if defined(MCUBOOT_USE_TINYCRYPT)
typedef struct tc_sha256_state_struct bootutil_sha256_context;
static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    tc_sha256_init(ctx);
     552:	a838      	add	r0, sp, #224	; 0xe0
     554:	e9dd 4864 	ldrd	r4, r8, [sp, #400]	; 0x190
     558:	4617      	mov	r7, r2
     55a:	461d      	mov	r5, r3
    fih_int valid_signature = FIH_FAILURE;
     55c:	f8da 6000 	ldr.w	r6, [sl]
     560:	f000 fffc 	bl	155c <tc_sha256_init>
    if (seed && (seed_len > 0)) {
     564:	b13c      	cbz	r4, 576 <bootutil_img_validate+0x2e>
     566:	f1b8 0f00 	cmp.w	r8, #0
     56a:	dd04      	ble.n	576 <bootutil_img_validate+0x2e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return tc_sha256_update(ctx, data, data_len);
     56c:	4642      	mov	r2, r8
     56e:	4621      	mov	r1, r4
     570:	a838      	add	r0, sp, #224	; 0xe0
     572:	f007 fba2 	bl	7cba <tc_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     576:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     57a:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     57c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     580:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     582:	68fb      	ldr	r3, [r7, #12]
     584:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     586:	45c8      	cmp	r8, r9
     588:	d821      	bhi.n	5ce <bootutil_img_validate+0x86>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return tc_sha256_final(output, ctx);
     58a:	a938      	add	r1, sp, #224	; 0xe0
     58c:	a80c      	add	r0, sp, #48	; 0x30
     58e:	f007 fbba 	bl	7d06 <tc_sha256_final>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     592:	9b66      	ldr	r3, [sp, #408]	; 0x198
     594:	b123      	cbz	r3, 5a0 <bootutil_img_validate+0x58>
        memcpy(out_hash, hash, 32);
     596:	2220      	movs	r2, #32
     598:	4618      	mov	r0, r3
     59a:	a90c      	add	r1, sp, #48	; 0x30
     59c:	f007 fdcb 	bl	8136 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5a0:	2300      	movs	r3, #0
     5a2:	462a      	mov	r2, r5
     5a4:	9300      	str	r3, [sp, #0]
     5a6:	4639      	mov	r1, r7
     5a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5ac:	a806      	add	r0, sp, #24
     5ae:	f006 fb63 	bl	6c78 <bootutil_tlv_iter_begin>
    if (rc) {
     5b2:	4604      	mov	r4, r0
     5b4:	b938      	cbnz	r0, 5c6 <bootutil_img_validate+0x7e>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     5b6:	4628      	mov	r0, r5
     5b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
     5ba:	f006 fc2a 	bl	6e12 <bootutil_max_image_size>
     5be:	4287      	cmp	r7, r0
     5c0:	d91b      	bls.n	5fa <bootutil_img_validate+0xb2>
        rc = -1;
     5c2:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     5c6:	4620      	mov	r0, r4
     5c8:	b059      	add	sp, #356	; 0x164
     5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (blk_sz > tmp_buf_sz) {
     5ce:	9b63      	ldr	r3, [sp, #396]	; 0x18c
        blk_sz = size - off;
     5d0:	eba8 0b09 	sub.w	fp, r8, r9
     5d4:	459b      	cmp	fp, r3
     5d6:	bf28      	it	cs
     5d8:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     5da:	4649      	mov	r1, r9
     5dc:	465b      	mov	r3, fp
     5de:	4628      	mov	r0, r5
     5e0:	9a62      	ldr	r2, [sp, #392]	; 0x188
     5e2:	f007 fcf0 	bl	7fc6 <flash_area_read>
        if (rc) {
     5e6:	4604      	mov	r4, r0
     5e8:	2800      	cmp	r0, #0
     5ea:	d1ec      	bne.n	5c6 <bootutil_img_validate+0x7e>
    return tc_sha256_update(ctx, data, data_len);
     5ec:	465a      	mov	r2, fp
     5ee:	9962      	ldr	r1, [sp, #392]	; 0x188
     5f0:	a838      	add	r0, sp, #224	; 0xe0
     5f2:	f007 fb62 	bl	7cba <tc_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5f6:	44d9      	add	r9, fp
     5f8:	e7c5      	b.n	586 <bootutil_img_validate+0x3e>
    int key_id = -1;
     5fa:	f04f 37ff 	mov.w	r7, #4294967295
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5fe:	f8df 9120 	ldr.w	r9, [pc, #288]	; 720 <FIH_LABEL_FIH_CALL_END_801+0x26>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     602:	f10d 0312 	add.w	r3, sp, #18
     606:	aa04      	add	r2, sp, #16
     608:	a905      	add	r1, sp, #20
     60a:	a806      	add	r0, sp, #24
     60c:	f006 fb82 	bl	6d14 <bootutil_tlv_iter_next>
        if (rc < 0) {
     610:	f1b0 0800 	subs.w	r8, r0, #0
     614:	db7f      	blt.n	716 <FIH_LABEL_FIH_CALL_END_801+0x1c>
        } else if (rc > 0) {
     616:	d173      	bne.n	700 <FIH_LABEL_FIH_CALL_END_801+0x6>
        if (type == IMAGE_TLV_SHA256) {
     618:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     61c:	2b10      	cmp	r3, #16
     61e:	d118      	bne.n	652 <FIH_LABEL_FIH_CALL_END_569+0xc>
            if (len != sizeof(hash)) {
     620:	f8bd 4010 	ldrh.w	r4, [sp, #16]
     624:	2c20      	cmp	r4, #32
     626:	d1cc      	bne.n	5c2 <bootutil_img_validate+0x7a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     628:	4623      	mov	r3, r4
     62a:	4628      	mov	r0, r5
     62c:	9905      	ldr	r1, [sp, #20]
     62e:	aa38      	add	r2, sp, #224	; 0xe0
     630:	f007 fcc9 	bl	7fc6 <flash_area_read>
            if (rc) {
     634:	4680      	mov	r8, r0
     636:	2800      	cmp	r0, #0
     638:	d16d      	bne.n	716 <FIH_LABEL_FIH_CALL_END_801+0x1c>

0000063a <FIH_LABEL_FIH_CALL_START_552>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     63a:	4622      	mov	r2, r4
     63c:	a938      	add	r1, sp, #224	; 0xe0
     63e:	a80c      	add	r0, sp, #48	; 0x30
     640:	f006 fbe0 	bl	6e04 <boot_fih_memequal>
     644:	4604      	mov	r4, r0

00000646 <FIH_LABEL_FIH_CALL_END_569>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     646:	4b37      	ldr	r3, [pc, #220]	; (724 <FIH_LABEL_FIH_CALL_END_801+0x2a>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	4283      	cmp	r3, r0
     64c:	d1bb      	bne.n	5c6 <bootutil_img_validate+0x7e>
            sha256_valid = 1;
     64e:	2401      	movs	r4, #1
     650:	e7d7      	b.n	602 <bootutil_img_validate+0xba>
        } else if (type == IMAGE_TLV_KEYHASH) {
     652:	2b01      	cmp	r3, #1
     654:	d133      	bne.n	6be <FIH_LABEL_FIH_CALL_END_569+0x78>
            if (len > 32) {
     656:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     65a:	2b20      	cmp	r3, #32
     65c:	d8b1      	bhi.n	5c2 <bootutil_img_validate+0x7a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     65e:	4628      	mov	r0, r5
     660:	9905      	ldr	r1, [sp, #20]
     662:	aa38      	add	r2, sp, #224	; 0xe0
     664:	f007 fcaf 	bl	7fc6 <flash_area_read>
            if (rc) {
     668:	4680      	mov	r8, r0
     66a:	2800      	cmp	r0, #0
     66c:	d153      	bne.n	716 <FIH_LABEL_FIH_CALL_END_801+0x1c>
            key_id = bootutil_find_key(buf, len);
     66e:	f89d b010 	ldrb.w	fp, [sp, #16]
    if (keyhash_len > 32) {
     672:	f1bb 0f20 	cmp.w	fp, #32
     676:	d903      	bls.n	680 <FIH_LABEL_FIH_CALL_END_569+0x3a>
        return -1;
     678:	f04f 38ff 	mov.w	r8, #4294967295
            key_id = bootutil_find_key(buf, len);
     67c:	4647      	mov	r7, r8
     67e:	e7c0      	b.n	602 <bootutil_img_validate+0xba>
    for (i = 0; i < bootutil_key_cnt; i++) {
     680:	f8d9 3000 	ldr.w	r3, [r9]
     684:	4f28      	ldr	r7, [pc, #160]	; (728 <FIH_LABEL_FIH_CALL_END_801+0x2e>)
     686:	9303      	str	r3, [sp, #12]
     688:	9b03      	ldr	r3, [sp, #12]
     68a:	4598      	cmp	r8, r3
     68c:	daf4      	bge.n	678 <FIH_LABEL_FIH_CALL_END_569+0x32>
    tc_sha256_init(ctx);
     68e:	a81c      	add	r0, sp, #112	; 0x70
     690:	f000 ff64 	bl	155c <tc_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     694:	687a      	ldr	r2, [r7, #4]
    return tc_sha256_update(ctx, data, data_len);
     696:	a81c      	add	r0, sp, #112	; 0x70
     698:	6812      	ldr	r2, [r2, #0]
     69a:	f857 1b08 	ldr.w	r1, [r7], #8
     69e:	f007 fb0c 	bl	7cba <tc_sha256_update>
    return tc_sha256_final(output, ctx);
     6a2:	a91c      	add	r1, sp, #112	; 0x70
     6a4:	a814      	add	r0, sp, #80	; 0x50
     6a6:	f007 fb2e 	bl	7d06 <tc_sha256_final>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6aa:	465a      	mov	r2, fp
     6ac:	a938      	add	r1, sp, #224	; 0xe0
     6ae:	a814      	add	r0, sp, #80	; 0x50
     6b0:	f007 fd1a 	bl	80e8 <memcmp>
     6b4:	2800      	cmp	r0, #0
     6b6:	d0e1      	beq.n	67c <FIH_LABEL_FIH_CALL_END_569+0x36>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6b8:	f108 0801 	add.w	r8, r8, #1
     6bc:	e7e4      	b.n	688 <FIH_LABEL_FIH_CALL_END_569+0x42>
        } else if (type == EXPECTED_SIG_TLV) {
     6be:	2b22      	cmp	r3, #34	; 0x22
     6c0:	d19f      	bne.n	602 <bootutil_img_validate+0xba>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6c2:	1c7b      	adds	r3, r7, #1
     6c4:	d09d      	beq.n	602 <bootutil_img_validate+0xba>
     6c6:	f8d9 3000 	ldr.w	r3, [r9]
     6ca:	42bb      	cmp	r3, r7
     6cc:	dd15      	ble.n	6fa <FIH_LABEL_FIH_CALL_END_801>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     6d2:	2b80      	cmp	r3, #128	; 0x80
     6d4:	f63f af75 	bhi.w	5c2 <bootutil_img_validate+0x7a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6d8:	4628      	mov	r0, r5
     6da:	9905      	ldr	r1, [sp, #20]
     6dc:	aa38      	add	r2, sp, #224	; 0xe0
     6de:	f007 fc72 	bl	7fc6 <flash_area_read>
            if (rc) {
     6e2:	4680      	mov	r8, r0
     6e4:	b9b8      	cbnz	r0, 716 <FIH_LABEL_FIH_CALL_END_801+0x1c>

000006e6 <FIH_LABEL_FIH_CALL_START_780>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6e6:	b2ff      	uxtb	r7, r7
     6e8:	2120      	movs	r1, #32
     6ea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     6ee:	9700      	str	r7, [sp, #0]
     6f0:	aa38      	add	r2, sp, #224	; 0xe0
     6f2:	a80c      	add	r0, sp, #48	; 0x30
     6f4:	f000 f81a 	bl	72c <bootutil_verify_sig>
     6f8:	4606      	mov	r6, r0

000006fa <FIH_LABEL_FIH_CALL_END_801>:
            key_id = -1;
     6fa:	f04f 37ff 	mov.w	r7, #4294967295
     6fe:	e780      	b.n	602 <bootutil_img_validate+0xba>
    if (rc) {
     700:	b13c      	cbz	r4, 712 <FIH_LABEL_FIH_CALL_END_801+0x18>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     702:	4b08      	ldr	r3, [pc, #32]	; (724 <FIH_LABEL_FIH_CALL_END_801+0x2a>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     704:	681b      	ldr	r3, [r3, #0]
     706:	42b3      	cmp	r3, r6
        return FIH_FAILURE;
     708:	bf18      	it	ne
     70a:	f8da 6000 	ldrne.w	r6, [sl]
        return -1;
     70e:	4634      	mov	r4, r6
     710:	e759      	b.n	5c6 <bootutil_img_validate+0x7e>
    rc = !sha256_valid;
     712:	f04f 0801 	mov.w	r8, #1
        return -1;
     716:	4644      	mov	r4, r8
     718:	e755      	b.n	5c6 <bootutil_img_validate+0x7e>
     71a:	bf00      	nop
     71c:	20002000 	.word	0x20002000
     720:	000090f8 	.word	0x000090f8
     724:	20002340 	.word	0x20002340
     728:	000090fc 	.word	0x000090fc

0000072c <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     730:	b098      	sub	sp, #96	; 0x60
     732:	4617      	mov	r7, r2
     734:	461d      	mov	r5, r3
     736:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     73a:	4b37      	ldr	r3, [pc, #220]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
{
     73c:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     73e:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     746:	685b      	ldr	r3, [r3, #4]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     748:	9103      	str	r1, [sp, #12]
{
     74a:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     74c:	6818      	ldr	r0, [r3, #0]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     74e:	aa04      	add	r2, sp, #16
     750:	4401      	add	r1, r0
     752:	2330      	movs	r3, #48	; 0x30
     754:	a803      	add	r0, sp, #12
     756:	f006 fc69 	bl	702c <mbedtls_asn1_get_tag>
     75a:	2800      	cmp	r0, #0
     75c:	d148      	bne.n	7f0 <bootutil_verify_sig+0xc4>
    end = *cp + len;
     75e:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
     762:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     764:	4621      	mov	r1, r4
     766:	ab08      	add	r3, sp, #32
     768:	aa05      	add	r2, sp, #20
     76a:	a803      	add	r0, sp, #12
     76c:	f006 fc86 	bl	707c <mbedtls_asn1_get_alg>
     770:	2800      	cmp	r0, #0
     772:	d13d      	bne.n	7f0 <bootutil_verify_sig+0xc4>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     774:	9a06      	ldr	r2, [sp, #24]
     776:	2a07      	cmp	r2, #7
     778:	d13a      	bne.n	7f0 <bootutil_verify_sig+0xc4>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     77a:	4928      	ldr	r1, [pc, #160]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     77c:	9807      	ldr	r0, [sp, #28]
     77e:	f007 fcb3 	bl	80e8 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     782:	2800      	cmp	r0, #0
     784:	d134      	bne.n	7f0 <bootutil_verify_sig+0xc4>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     786:	9a09      	ldr	r2, [sp, #36]	; 0x24
     788:	2a08      	cmp	r2, #8
     78a:	d131      	bne.n	7f0 <bootutil_verify_sig+0xc4>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     78c:	4924      	ldr	r1, [pc, #144]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     78e:	980a      	ldr	r0, [sp, #40]	; 0x28
     790:	f007 fcaa 	bl	80e8 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     794:	bb60      	cbnz	r0, 7f0 <bootutil_verify_sig+0xc4>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     796:	4621      	mov	r1, r4
     798:	aa04      	add	r2, sp, #16
     79a:	a803      	add	r0, sp, #12
     79c:	f006 fc5a 	bl	7054 <mbedtls_asn1_get_bitstring_null>
     7a0:	bb30      	cbnz	r0, 7f0 <bootutil_verify_sig+0xc4>
    if (*cp + len != end) {
     7a2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
     7a6:	4413      	add	r3, r2
     7a8:	429c      	cmp	r4, r3
     7aa:	d121      	bne.n	7f0 <bootutil_verify_sig+0xc4>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     7ac:	2a41      	cmp	r2, #65	; 0x41
     7ae:	d11f      	bne.n	7f0 <bootutil_verify_sig+0xc4>
    if (rc) {
        return -1;
    }

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     7b0:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     7b2:	2330      	movs	r3, #48	; 0x30
     7b4:	4629      	mov	r1, r5
     7b6:	aa05      	add	r2, sp, #20
     7b8:	a804      	add	r0, sp, #16
     7ba:	9704      	str	r7, [sp, #16]
     7bc:	f006 fc36 	bl	702c <mbedtls_asn1_get_tag>
    if (rc) {
     7c0:	b9b0      	cbnz	r0, 7f0 <bootutil_verify_sig+0xc4>
    if (cp + len > end) {
     7c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
     7c6:	4413      	add	r3, r2
     7c8:	429d      	cmp	r5, r3
     7ca:	d311      	bcc.n	7f0 <bootutil_verify_sig+0xc4>
    rc = bootutil_read_bigint(signature, &cp, end);
     7cc:	462a      	mov	r2, r5
     7ce:	a904      	add	r1, sp, #16
     7d0:	a808      	add	r0, sp, #32
     7d2:	f006 faeb 	bl	6dac <bootutil_read_bigint>
    if (rc) {
     7d6:	b958      	cbnz	r0, 7f0 <bootutil_verify_sig+0xc4>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     7d8:	462a      	mov	r2, r5
     7da:	a904      	add	r1, sp, #16
     7dc:	a810      	add	r0, sp, #64	; 0x40
     7de:	f006 fae5 	bl	6dac <bootutil_read_bigint>
    if (rc) {
     7e2:	b928      	cbnz	r0, 7f0 <bootutil_verify_sig+0xc4>
        slen--;
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
     7e4:	2e20      	cmp	r6, #32
     7e6:	d103      	bne.n	7f0 <bootutil_verify_sig+0xc4>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     7e8:	9c03      	ldr	r4, [sp, #12]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     7ea:	7823      	ldrb	r3, [r4, #0]
     7ec:	2b04      	cmp	r3, #4
     7ee:	d004      	beq.n	7fa <bootutil_verify_sig+0xce>
        return -1;
     7f0:	f04f 30ff 	mov.w	r0, #4294967295
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     7f4:	b018      	add	sp, #96	; 0x60
     7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }
    pk++;

    rc = uECC_verify(pk, hash, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE, sig, uECC_secp256r1());
     7fa:	f000 fdc1 	bl	1380 <uECC_secp256r1>
     7fe:	4632      	mov	r2, r6
     800:	9000      	str	r0, [sp, #0]
     802:	4641      	mov	r1, r8
     804:	ab08      	add	r3, sp, #32
     806:	1c60      	adds	r0, r4, #1
     808:	f007 f8f4 	bl	79f4 <uECC_verify>
    if (rc != TC_CRYPTO_SUCCESS) {
     80c:	3801      	subs	r0, #1
     80e:	bf18      	it	ne
     810:	f04f 30ff 	movne.w	r0, #4294967295
     814:	e7ee      	b.n	7f4 <bootutil_verify_sig+0xc8>
     816:	bf00      	nop
     818:	000090fc 	.word	0x000090fc
     81c:	0000975b 	.word	0x0000975b
     820:	00009752 	.word	0x00009752

00000824 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     828:	4b61      	ldr	r3, [pc, #388]	; (9b0 <FIH_LABEL_FIH_CALL_END_610+0xfa>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     82a:	b089      	sub	sp, #36	; 0x24
     82c:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     82e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     832:	460e      	mov	r6, r1
    fih_int fih_rc = FIH_FAILURE;
     834:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     836:	f006 fa07 	bl	6c48 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     83a:	a906      	add	r1, sp, #24
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     83c:	4680      	mov	r8, r0
    rc = flash_area_open(area_id, &fap);
     83e:	b2c0      	uxtb	r0, r0
     840:	f001 fabe 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     844:	2800      	cmp	r0, #0
     846:	d171      	bne.n	92c <FIH_LABEL_FIH_CALL_END_610+0x76>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     848:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     84c:	4631      	mov	r1, r6
     84e:	4638      	mov	r0, r7
     850:	f006 f9fa 	bl	6c48 <flash_area_id_from_multi_image_slot>
     854:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     858:	a907      	add	r1, sp, #28
     85a:	b2c0      	uxtb	r0, r0
     85c:	fb09 f906 	mul.w	r9, r9, r6
     860:	f001 faae 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     864:	2800      	cmp	r0, #0
     866:	d048      	beq.n	8fa <FIH_LABEL_FIH_CALL_END_610+0x44>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     868:	f04f 0b58 	mov.w	fp, #88	; 0x58
     86c:	222c      	movs	r2, #44	; 0x2c
     86e:	fb0b f307 	mul.w	r3, fp, r7
     872:	fb02 3306 	mla	r3, r2, r6, r3
     876:	4423      	add	r3, r4
     878:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     87a:	f013 0a10 	ands.w	sl, r3, #16
     87e:	d151      	bne.n	924 <FIH_LABEL_FIH_CALL_END_610+0x6e>

00000880 <FIH_LABEL_FIH_CALL_START_522>:
            fih_rc = fih_int_encode(1);
            goto out;
        }
    }
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
     880:	4631      	mov	r1, r6
     882:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     886:	f003 fe47 	bl	4518 <boot_image_check_hook>
     88a:	4605      	mov	r5, r0

0000088c <FIH_LABEL_FIH_CALL_END_537>:
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
     88c:	2801      	cmp	r0, #1
     88e:	d112      	bne.n	8b6 <FIH_LABEL_FIH_CALL_END_610>

00000890 <FIH_LABEL_FIH_CALL_START_550>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     890:	f44f 7380 	mov.w	r3, #256	; 0x100
     894:	fb1b 9207 	smlabb	r2, fp, r7, r9
     898:	9301      	str	r3, [sp, #4]
     89a:	e9cd aa03 	strd	sl, sl, [sp, #12]
     89e:	4b45      	ldr	r3, [pc, #276]	; (9b4 <FIH_LABEL_FIH_CALL_END_610+0xfe>)
     8a0:	f8cd a008 	str.w	sl, [sp, #8]
     8a4:	9300      	str	r3, [sp, #0]
     8a6:	4650      	mov	r0, sl
     8a8:	9b06      	ldr	r3, [sp, #24]
     8aa:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     8ae:	4422      	add	r2, r4
     8b0:	f7ff fe4a 	bl	548 <bootutil_img_validate>
     8b4:	4605      	mov	r5, r0

000008b6 <FIH_LABEL_FIH_CALL_END_610>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     8b6:	2358      	movs	r3, #88	; 0x58
     8b8:	435f      	muls	r7, r3
     8ba:	232c      	movs	r3, #44	; 0x2c
     8bc:	fb03 7706 	mla	r7, r3, r6, r7
     8c0:	4a3d      	ldr	r2, [pc, #244]	; (9b8 <FIH_LABEL_FIH_CALL_END_610+0x102>)
     8c2:	59e1      	ldr	r1, [r4, r7]
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     8c4:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     8c6:	4291      	cmp	r1, r2
     8c8:	eb04 0307 	add.w	r3, r4, r7
     8cc:	d10a      	bne.n	8e4 <FIH_LABEL_FIH_CALL_END_610+0x2e>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     8ce:	68da      	ldr	r2, [r3, #12]
     8d0:	891b      	ldrh	r3, [r3, #8]
    if (a > UINT32_MAX - b) {
     8d2:	189b      	adds	r3, r3, r2
     8d4:	d206      	bcs.n	8e4 <FIH_LABEL_FIH_CALL_END_610+0x2e>
    if (size >= flash_area_get_size(fap)) {
     8d6:	6882      	ldr	r2, [r0, #8]
     8d8:	4293      	cmp	r3, r2
     8da:	d203      	bcs.n	8e4 <FIH_LABEL_FIH_CALL_END_610+0x2e>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     8dc:	4b37      	ldr	r3, [pc, #220]	; (9bc <FIH_LABEL_FIH_CALL_END_610+0x106>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	42ab      	cmp	r3, r5
     8e2:	d029      	beq.n	938 <FIH_LABEL_FIH_CALL_END_610+0x82>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     8e4:	b336      	cbz	r6, 934 <FIH_LABEL_FIH_CALL_END_610+0x7e>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     8e6:	6882      	ldr	r2, [r0, #8]
     8e8:	2100      	movs	r1, #0
     8ea:	f007 fb96 	bl	801a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     8ee:	4a34      	ldr	r2, [pc, #208]	; (9c0 <FIH_LABEL_FIH_CALL_END_610+0x10a>)
     8f0:	2145      	movs	r1, #69	; 0x45
     8f2:	4834      	ldr	r0, [pc, #208]	; (9c4 <FIH_LABEL_FIH_CALL_END_610+0x10e>)
     8f4:	f007 fb59 	bl	7faa <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     8f8:	e014      	b.n	924 <FIH_LABEL_FIH_CALL_END_610+0x6e>
    erased_val = flash_area_erased_val(fap);
     8fa:	9807      	ldr	r0, [sp, #28]
     8fc:	f007 fba8 	bl	8050 <flash_area_erased_val>
     900:	4605      	mov	r5, r0
    flash_area_close(fap);
     902:	9807      	ldr	r0, [sp, #28]
     904:	f007 fb5e 	bl	7fc4 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     908:	2358      	movs	r3, #88	; 0x58
     90a:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     90e:	fb02 9303 	mla	r3, r2, r3, r9
     912:	4423      	add	r3, r4
    for (i = 0; i < len; i++) {
     914:	1e5a      	subs	r2, r3, #1
     916:	3303      	adds	r3, #3
        if (val != p[i]) {
     918:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     91c:	42a9      	cmp	r1, r5
     91e:	d1a3      	bne.n	868 <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     920:	4293      	cmp	r3, r2
     922:	d1f9      	bne.n	918 <FIH_LABEL_FIH_CALL_END_610+0x62>
        fih_rc = fih_int_encode(1);
     924:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     926:	9806      	ldr	r0, [sp, #24]
     928:	f007 fb4c 	bl	7fc4 <flash_area_close>

    FIH_RET(fih_rc);
}
     92c:	4628      	mov	r0, r5
     92e:	b009      	add	sp, #36	; 0x24
     930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     934:	4a24      	ldr	r2, [pc, #144]	; (9c8 <FIH_LABEL_FIH_CALL_END_610+0x112>)
     936:	e7db      	b.n	8f0 <FIH_LABEL_FIH_CALL_END_610+0x3a>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     938:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     93c:	2b00      	cmp	r3, #0
     93e:	d034      	beq.n	9aa <FIH_LABEL_FIH_CALL_END_610+0xf4>
     940:	2b01      	cmp	r3, #1
     942:	bf0c      	ite	eq
     944:	2208      	moveq	r2, #8
     946:	22ff      	movne	r2, #255	; 0xff
     948:	4590      	cmp	r8, r2
     94a:	d1ec      	bne.n	926 <FIH_LABEL_FIH_CALL_END_610+0x70>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     94c:	2258      	movs	r2, #88	; 0x58
     94e:	4353      	muls	r3, r2
     950:	18e2      	adds	r2, r4, r3
     952:	6a17      	ldr	r7, [r2, #32]
        uint32_t reset_value = 0;
     954:	2200      	movs	r2, #0
     956:	9207      	str	r2, [sp, #28]
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     958:	222c      	movs	r2, #44	; 0x2c
     95a:	fb02 3306 	mla	r3, r2, r6, r3
     95e:	4423      	add	r3, r4
     960:	8919      	ldrh	r1, [r3, #8]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     962:	2304      	movs	r3, #4
     964:	aa07      	add	r2, sp, #28
     966:	4419      	add	r1, r3
     968:	f007 fb2d 	bl	7fc6 <flash_area_read>
        if (rc != 0) {
     96c:	2800      	cmp	r0, #0
     96e:	d1d9      	bne.n	924 <FIH_LABEL_FIH_CALL_END_610+0x6e>
        if (BOOT_CURR_IMG(state) == 1) {
     970:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     974:	9907      	ldr	r1, [sp, #28]
        if (BOOT_CURR_IMG(state) == 1) {
     976:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     978:	bf0b      	itete	eq
     97a:	4a14      	ldreq	r2, [pc, #80]	; (9cc <FIH_LABEL_FIH_CALL_END_610+0x116>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     97c:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     980:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     984:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     986:	4291      	cmp	r1, r2
     988:	d301      	bcc.n	98e <FIH_LABEL_FIH_CALL_END_610+0xd8>
     98a:	4299      	cmp	r1, r3
     98c:	d9cb      	bls.n	926 <FIH_LABEL_FIH_CALL_END_610+0x70>
            BOOT_LOG_ERR("Reset address of image in secondary slot is not in the primary slot");
     98e:	2145      	movs	r1, #69	; 0x45
     990:	480f      	ldr	r0, [pc, #60]	; (9d0 <FIH_LABEL_FIH_CALL_END_610+0x11a>)
     992:	f007 fb0a 	bl	7faa <z_log_minimal_printk>
            BOOT_LOG_ERR("Erasing image from secondary slot");
     996:	2145      	movs	r1, #69	; 0x45
     998:	480e      	ldr	r0, [pc, #56]	; (9d4 <FIH_LABEL_FIH_CALL_END_610+0x11e>)
     99a:	f007 fb06 	bl	7faa <z_log_minimal_printk>
            flash_area_erase(fap, 0, fap->fa_size);
     99e:	9806      	ldr	r0, [sp, #24]
     9a0:	2100      	movs	r1, #0
     9a2:	6882      	ldr	r2, [r0, #8]
     9a4:	f007 fb39 	bl	801a <flash_area_erase>
            goto out;
     9a8:	e7bc      	b.n	924 <FIH_LABEL_FIH_CALL_END_610+0x6e>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     9aa:	2202      	movs	r2, #2
     9ac:	e7cc      	b.n	948 <FIH_LABEL_FIH_CALL_END_610+0x92>
     9ae:	bf00      	nop
     9b0:	20002000 	.word	0x20002000
     9b4:	20004e6c 	.word	0x20004e6c
     9b8:	96f3b83d 	.word	0x96f3b83d
     9bc:	20002340 	.word	0x20002340
     9c0:	0000976b 	.word	0x0000976b
     9c4:	00009775 	.word	0x00009775
     9c8:	00009763 	.word	0x00009763
     9cc:	01008800 	.word	0x01008800
     9d0:	0000979d 	.word	0x0000979d
     9d4:	000097e6 	.word	0x000097e6

000009d8 <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9dc:	4688      	mov	r8, r1
     9de:	4691      	mov	r9, r2
     9e0:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     9e2:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     9e4:	f8df b08c 	ldr.w	fp, [pc, #140]	; a74 <boot_copy_region+0x9c>
     9e8:	4d23      	ldr	r5, [pc, #140]	; (a78 <boot_copy_region+0xa0>)
     9ea:	4c24      	ldr	r4, [pc, #144]	; (a7c <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     9ee:	429e      	cmp	r6, r3
     9f0:	d301      	bcc.n	9f6 <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     9f2:	2000      	movs	r0, #0
     9f4:	e00f      	b.n	a16 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     9f8:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     9fa:	1b9f      	subs	r7, r3, r6
     9fc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a00:	bf28      	it	cs
     a02:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a06:	4a1b      	ldr	r2, [pc, #108]	; (a74 <boot_copy_region+0x9c>)
     a08:	463b      	mov	r3, r7
     a0a:	eb06 010a 	add.w	r1, r6, sl
     a0e:	f007 fada 	bl	7fc6 <flash_area_read>
        if (rc != 0) {
     a12:	b110      	cbz	r0, a1a <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a14:	2001      	movs	r0, #1
}
     a16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a1a:	990a      	ldr	r1, [sp, #40]	; 0x28
     a1c:	463b      	mov	r3, r7
     a1e:	465a      	mov	r2, fp
     a20:	4648      	mov	r0, r9
     a22:	1871      	adds	r1, r6, r1
     a24:	f007 fae4 	bl	7ff0 <flash_area_write>
        if (rc != 0) {
     a28:	2800      	cmp	r0, #0
     a2a:	d1f3      	bne.n	a14 <boot_copy_region+0x3c>
     a2c:	4b14      	ldr	r3, [pc, #80]	; (a80 <boot_copy_region+0xa8>)
     a2e:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a32:	443e      	add	r6, r7
     a34:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     a38:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     a3c:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     a40:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     a44:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     a48:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     a4c:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     a50:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     a54:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     a58:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     a5c:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     a60:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     a64:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     a68:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     a6c:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     a70:	e7bc      	b.n	9ec <boot_copy_region+0x14>
     a72:	bf00      	nop
     a74:	20004144 	.word	0x20004144
     a78:	50018000 	.word	0x50018000
     a7c:	6e524635 	.word	0x6e524635
     a80:	50019000 	.word	0x50019000

00000a84 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     a88:	f04f 0800 	mov.w	r8, #0
{
     a8c:	4604      	mov	r4, r0
     a8e:	460f      	mov	r7, r1
    has_upgrade = false;
     a90:	46c1      	mov	r9, r8
    int rc = -1;
     a92:	f04f 35ff 	mov.w	r5, #4294967295
    fih_int fih_rc = FIH_FAILURE;
     a96:	4b7d      	ldr	r3, [pc, #500]	; (c8c <FIH_LABEL_FIH_CALL_END_2307+0x36>)
        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
            secondary_slot_sectors[image_index];
     a98:	f8df b1f4 	ldr.w	fp, [pc, #500]	; c90 <FIH_LABEL_FIH_CALL_END_2307+0x3a>
    fih_int fih_rc = FIH_FAILURE;
     a9c:	681e      	ldr	r6, [r3, #0]
{
     a9e:	b095      	sub	sp, #84	; 0x54
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     aa0:	f1b8 0f01 	cmp.w	r8, #1
     aa4:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
     aa8:	d908      	bls.n	abc <context_boot_go+0x38>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     aaa:	f1b9 0f00 	cmp.w	r9, #0
     aae:	f000 816c 	beq.w	d8a <FIH_LABEL_FIH_CALL_END_2307+0x134>
     ab2:	2000      	movs	r0, #0
    return &BOOT_IMG(state, slot).hdr;
     ab4:	252c      	movs	r5, #44	; 0x2c
     ab6:	f04f 0858 	mov.w	r8, #88	; 0x58
     aba:	e0e2      	b.n	c82 <FIH_LABEL_FIH_CALL_END_2307+0x2c>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     abc:	eb04 0308 	add.w	r3, r4, r8
     ac0:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     ac4:	2900      	cmp	r1, #0
     ac6:	d149      	bne.n	b5c <context_boot_go+0xd8>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     ac8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
     acc:	2558      	movs	r5, #88	; 0x58
     ace:	fb03 f308 	mul.w	r3, r3, r8
     ad2:	fb05 4208 	mla	r2, r5, r8, r4
            primary_slot_sectors[image_index];
     ad6:	486f      	ldr	r0, [pc, #444]	; (c94 <FIH_LABEL_FIH_CALL_END_2307+0x3e>)
     ad8:	1818      	adds	r0, r3, r0
            secondary_slot_sectors[image_index];
     ada:	445b      	add	r3, fp
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     adc:	6250      	str	r0, [r2, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     ade:	6513      	str	r3, [r2, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ae0:	4640      	mov	r0, r8
     ae2:	f006 f8b1 	bl	6c48 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ae6:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     aea:	b2c0      	uxtb	r0, r0
     aec:	fb05 4101 	mla	r1, r5, r1, r4
     af0:	3120      	adds	r1, #32
     af2:	f001 f965 	bl	1dc0 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     af6:	2101      	movs	r1, #1
     af8:	4640      	mov	r0, r8
     afa:	f006 f8a5 	bl	6c48 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     afe:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     b02:	b2c0      	uxtb	r0, r0
     b04:	fb05 4101 	mla	r1, r5, r1, r4
     b08:	314c      	adds	r1, #76	; 0x4c
     b0a:	f001 f959 	bl	1dc0 <flash_area_open>
     b0e:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b10:	4620      	mov	r0, r4
     b12:	f006 f9b0 	bl	6e76 <boot_read_sectors>
    if (rc != 0) {
     b16:	4680      	mov	r8, r0
     b18:	b998      	cbnz	r0, b42 <context_boot_go+0xbe>
    rc = boot_read_image_headers(state, false, NULL);
     b1a:	2200      	movs	r2, #0
     b1c:	4620      	mov	r0, r4
     b1e:	4611      	mov	r1, r2
     b20:	f006 f9d7 	bl	6ed2 <boot_read_image_headers>
    if (rc != 0) {
     b24:	4682      	mov	sl, r0
     b26:	b300      	cbz	r0, b6a <context_boot_go+0xe6>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b28:	2157      	movs	r1, #87	; 0x57
     b2a:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     b2e:	485a      	ldr	r0, [pc, #360]	; (c98 <FIH_LABEL_FIH_CALL_END_2307+0x42>)
     b30:	f007 fa3b 	bl	7faa <z_log_minimal_printk>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b34:	2201      	movs	r2, #1
     b36:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     b3a:	4423      	add	r3, r4
     b3c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     b40:	e00c      	b.n	b5c <context_boot_go+0xd8>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b42:	22f0      	movs	r2, #240	; 0xf0
     b44:	2157      	movs	r1, #87	; 0x57
     b46:	4855      	ldr	r0, [pc, #340]	; (c9c <FIH_LABEL_FIH_CALL_END_2307+0x46>)
     b48:	f007 fa2f 	bl	7faa <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b4c:	2201      	movs	r2, #1
     b4e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     b52:	4590      	cmp	r8, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b54:	4423      	add	r3, r4
     b56:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     b5a:	d1de      	bne.n	b1a <context_boot_go+0x96>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     b5c:	f894 80b8 	ldrb.w	r8, [r4, #184]	; 0xb8
     b60:	f108 0801 	add.w	r8, r8, #1
     b64:	fa5f f888 	uxtb.w	r8, r8
     b68:	e79a      	b.n	aa0 <context_boot_go+0x1c>
    if (boot_slots_compatible(state)) {
     b6a:	4620      	mov	r0, r4
     b6c:	f000 faf2 	bl	1154 <boot_slots_compatible>
     b70:	2800      	cmp	r0, #0
     b72:	d0df      	beq.n	b34 <context_boot_go+0xb0>
        boot_status_reset(bs);
     b74:	a80a      	add	r0, sp, #40	; 0x28
     b76:	f006 f9db 	bl	6f30 <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     b7a:	f006 f9e2 	bl	6f42 <boot_status_is_reset>
     b7e:	4680      	mov	r8, r0
     b80:	b9c8      	cbnz	r0, bb6 <context_boot_go+0x132>
    if (BOOT_CURR_IMG(state) == 0) {
     b82:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     b86:	b92b      	cbnz	r3, b94 <context_boot_go+0x110>
            rc = boot_read_image_headers(state, false, bs);
     b88:	2100      	movs	r1, #0
     b8a:	4620      	mov	r0, r4
     b8c:	aa0a      	add	r2, sp, #40	; 0x28
     b8e:	f006 f9a0 	bl	6ed2 <boot_read_image_headers>
     b92:	e7cf      	b.n	b34 <context_boot_go+0xb0>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     b94:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     b98:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     b9a:	bf04      	itt	eq
     b9c:	2201      	moveq	r2, #1
     b9e:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     ba2:	2b01      	cmp	r3, #1
     ba4:	d0f0      	beq.n	b88 <context_boot_go+0x104>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     ba6:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     baa:	2b04      	cmp	r3, #4
     bac:	d1ec      	bne.n	b88 <context_boot_go+0x104>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     bae:	2301      	movs	r3, #1
     bb0:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     bb4:	e7e8      	b.n	b88 <context_boot_go+0x104>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     bb6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     bba:	2b01      	cmp	r3, #1
     bbc:	d147      	bne.n	c4e <FIH_LABEL_FIH_CALL_START_2293>
    const struct flash_area *secondary_fa =
     bbe:	2258      	movs	r2, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     bc0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    uint32_t reset_addr = 0;
     bc4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    const struct flash_area *secondary_fa =
     bc8:	fb02 4303 	mla	r3, r2, r3, r4
    if (hdr->ih_magic == IMAGE_MAGIC) {
     bcc:	4a34      	ldr	r2, [pc, #208]	; (ca0 <FIH_LABEL_FIH_CALL_END_2307+0x4a>)
     bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    const struct flash_area *secondary_fa =
     bd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdr->ih_magic == IMAGE_MAGIC) {
     bd2:	4291      	cmp	r1, r2
     bd4:	d011      	beq.n	bfa <FIH_LABEL_FIH_CALL_END_2128+0xc>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bd6:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     bda:	f003 fd45 	bl	4668 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     bde:	1e83      	subs	r3, r0, #2
     be0:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     be2:	4682      	mov	sl, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     be4:	d807      	bhi.n	bf6 <FIH_LABEL_FIH_CALL_END_2128+0x8>

00000be6 <FIH_LABEL_FIH_CALL_START_2113>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     be6:	2101      	movs	r1, #1
     be8:	4620      	mov	r0, r4
     bea:	f7ff fe1b 	bl	824 <boot_validate_slot.isra.0>

00000bee <FIH_LABEL_FIH_CALL_END_2128>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     bee:	4b2d      	ldr	r3, [pc, #180]	; (ca4 <FIH_LABEL_FIH_CALL_END_2307+0x4e>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	4298      	cmp	r0, r3
     bf4:	d128      	bne.n	c48 <FIH_LABEL_FIH_CALL_END_2128+0x5a>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bf6:	4650      	mov	r0, sl
     bf8:	e008      	b.n	c0c <FIH_LABEL_FIH_CALL_END_2128+0x1e>
        rc = flash_area_read(secondary_fa, hdr->ih_hdr_size +
     bfa:	8e99      	ldrh	r1, [r3, #52]	; 0x34
     bfc:	2304      	movs	r3, #4
     bfe:	aa0e      	add	r2, sp, #56	; 0x38
     c00:	4419      	add	r1, r3
     c02:	f007 f9e0 	bl	7fc6 <flash_area_read>
        if (rc != 0) {
     c06:	2800      	cmp	r0, #0
     c08:	d0e5      	beq.n	bd6 <context_boot_go+0x152>
            return BOOT_SWAP_TYPE_FAIL;
     c0a:	2005      	movs	r0, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c0c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c10:	4423      	add	r3, r4
     c12:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     c16:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c1a:	b16b      	cbz	r3, c38 <FIH_LABEL_FIH_CALL_END_2128+0x4a>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     c1c:	18e2      	adds	r2, r4, r3
     c1e:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     c22:	2a01      	cmp	r2, #1
     c24:	d09a      	beq.n	b5c <context_boot_go+0xd8>
     c26:	2a04      	cmp	r2, #4
     c28:	d023      	beq.n	c72 <FIH_LABEL_FIH_CALL_END_2307+0x1c>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     c2a:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     c2e:	2a04      	cmp	r2, #4
     c30:	d102      	bne.n	c38 <FIH_LABEL_FIH_CALL_END_2128+0x4a>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     c32:	2201      	movs	r2, #1
     c34:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c38:	4423      	add	r3, r4
     c3a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     c3e:	3b02      	subs	r3, #2
            has_upgrade = true;
     c40:	2b02      	cmp	r3, #2
     c42:	bf98      	it	ls
     c44:	46c1      	movls	r9, r8
     c46:	e789      	b.n	b5c <context_boot_go+0xd8>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
     c48:	2801      	cmp	r0, #1
     c4a:	d1de      	bne.n	c0a <FIH_LABEL_FIH_CALL_END_2128+0x1c>
     c4c:	e7de      	b.n	c0c <FIH_LABEL_FIH_CALL_END_2128+0x1e>

00000c4e <FIH_LABEL_FIH_CALL_START_2293>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c4e:	2101      	movs	r1, #1
     c50:	4620      	mov	r0, r4
     c52:	f7ff fde7 	bl	824 <boot_validate_slot.isra.0>

00000c56 <FIH_LABEL_FIH_CALL_END_2307>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c56:	4b13      	ldr	r3, [pc, #76]	; (ca4 <FIH_LABEL_FIH_CALL_END_2307+0x4e>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c5c:	bf18      	it	ne
     c5e:	2205      	movne	r2, #5
     c60:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c64:	bf08      	it	eq
     c66:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c6a:	4423      	add	r3, r4
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     c70:	e7d1      	b.n	c16 <FIH_LABEL_FIH_CALL_END_2128+0x28>
            has_upgrade = true;
     c72:	46c1      	mov	r9, r8
     c74:	e772      	b.n	b5c <context_boot_go+0xd8>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     c76:	1823      	adds	r3, r4, r0
     c78:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     c7c:	b1a2      	cbz	r2, ca8 <FIH_LABEL_FIH_CALL_END_2307+0x52>
            BOOT_CURR_IMG(state)++;
     c7e:	3001      	adds	r0, #1
     c80:	b2c0      	uxtb	r0, r0
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     c82:	2801      	cmp	r0, #1
            BOOT_CURR_IMG(state)++;
     c84:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     c88:	d9f5      	bls.n	c76 <FIH_LABEL_FIH_CALL_END_2307+0x20>
     c8a:	e07d      	b.n	d88 <FIH_LABEL_FIH_CALL_END_2307+0x132>
     c8c:	20002000 	.word	0x20002000
     c90:	20002344 	.word	0x20002344
     c94:	20003244 	.word	0x20003244
     c98:	0000984f 	.word	0x0000984f
     c9c:	0000980d 	.word	0x0000980d
     ca0:	96f3b83d 	.word	0x96f3b83d
     ca4:	20002340 	.word	0x20002340
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     ca8:	f893 90b0 	ldrb.w	r9, [r3, #176]	; 0xb0
     cac:	f009 09fb 	and.w	r9, r9, #251	; 0xfb
     cb0:	f1b9 0901 	subs.w	r9, r9, #1
     cb4:	bf18      	it	ne
     cb6:	f04f 0901 	movne.w	r9, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     cba:	4649      	mov	r1, r9
     cbc:	f005 ffc4 	bl	6c48 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     cc0:	a905      	add	r1, sp, #20
     cc2:	b2c0      	uxtb	r0, r0
     cc4:	f001 f87c 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     cc8:	2800      	cmp	r0, #0
     cca:	f040 809f 	bne.w	e0c <FIH_LABEL_FIH_CALL_END_2307+0x1b6>
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     cce:	2301      	movs	r3, #1
     cd0:	fb05 f909 	mul.w	r9, r5, r9
     cd4:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     cd8:	9a05      	ldr	r2, [sp, #20]
     cda:	fb18 9101 	smlabb	r1, r8, r1, r9
     cde:	9300      	str	r3, [sp, #0]
     ce0:	4421      	add	r1, r4
     ce2:	2340      	movs	r3, #64	; 0x40
     ce4:	a80e      	add	r0, sp, #56	; 0x38
     ce6:	f005 ffc7 	bl	6c78 <bootutil_tlv_iter_begin>
    if (rc != 0) {
     cea:	4681      	mov	r9, r0
     cec:	2800      	cmp	r0, #0
     cee:	f040 808f 	bne.w	e10 <FIH_LABEL_FIH_CALL_END_2307+0x1ba>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     cf2:	2300      	movs	r3, #0
     cf4:	f10d 0212 	add.w	r2, sp, #18
     cf8:	a906      	add	r1, sp, #24
     cfa:	a80e      	add	r0, sp, #56	; 0x38
     cfc:	f006 f80a 	bl	6d14 <bootutil_tlv_iter_next>
        if (rc < 0) {
     d00:	2800      	cmp	r0, #0
     d02:	db41      	blt.n	d88 <FIH_LABEL_FIH_CALL_END_2307+0x132>
        rc = flash_area_read(fap, off, &dep, len);
     d04:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     d06:	f040 8090 	bne.w	e2a <FIH_LABEL_FIH_CALL_END_2307+0x1d4>
        if (len != sizeof(dep)) {
     d0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     d0e:	2b0c      	cmp	r3, #12
     d10:	f040 8089 	bne.w	e26 <FIH_LABEL_FIH_CALL_END_2307+0x1d0>
        rc = flash_area_read(fap, off, &dep, len);
     d14:	9906      	ldr	r1, [sp, #24]
     d16:	aa07      	add	r2, sp, #28
     d18:	f007 f955 	bl	7fc6 <flash_area_read>
        if (rc != 0) {
     d1c:	2800      	cmp	r0, #0
     d1e:	f040 808d 	bne.w	e3c <FIH_LABEL_FIH_CALL_END_2307+0x1e6>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     d22:	f89d 301c 	ldrb.w	r3, [sp, #28]
     d26:	2b01      	cmp	r3, #1
     d28:	f200 808b 	bhi.w	e42 <FIH_LABEL_FIH_CALL_END_2307+0x1ec>
    swap_type = state->swap_type[dep->image_id];
     d2c:	18e2      	adds	r2, r4, r3
                                          : BOOT_PRIMARY_SLOT;
     d2e:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
    if (ver1->iv_major > ver2->iv_major) {
     d32:	fb08 f303 	mul.w	r3, r8, r3
                                          : BOOT_PRIMARY_SLOT;
     d36:	3a02      	subs	r2, #2
     d38:	2a02      	cmp	r2, #2
     d3a:	bf8c      	ite	hi
     d3c:	2200      	movhi	r2, #0
     d3e:	2201      	movls	r2, #1
    if (ver1->iv_major > ver2->iv_major) {
     d40:	fb05 3302 	mla	r3, r5, r2, r3
     d44:	4423      	add	r3, r4
     d46:	7d19      	ldrb	r1, [r3, #20]
     d48:	f89d 2020 	ldrb.w	r2, [sp, #32]
     d4c:	4291      	cmp	r1, r2
     d4e:	d8d0      	bhi.n	cf2 <FIH_LABEL_FIH_CALL_END_2307+0x9c>
    if (ver1->iv_major < ver2->iv_major) {
     d50:	d30a      	bcc.n	d68 <FIH_LABEL_FIH_CALL_END_2307+0x112>
    if (ver1->iv_minor > ver2->iv_minor) {
     d52:	7d59      	ldrb	r1, [r3, #21]
     d54:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     d58:	4291      	cmp	r1, r2
     d5a:	d8ca      	bhi.n	cf2 <FIH_LABEL_FIH_CALL_END_2307+0x9c>
    if (ver1->iv_minor < ver2->iv_minor) {
     d5c:	d304      	bcc.n	d68 <FIH_LABEL_FIH_CALL_END_2307+0x112>
    if (ver1->iv_revision < ver2->iv_revision) {
     d5e:	8ada      	ldrh	r2, [r3, #22]
     d60:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     d64:	429a      	cmp	r2, r3
     d66:	d2c4      	bcs.n	cf2 <FIH_LABEL_FIH_CALL_END_2307+0x9c>
        switch (BOOT_SWAP_TYPE(state)) {
     d68:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    flash_area_close(fap);
     d6c:	9805      	ldr	r0, [sp, #20]
        switch (BOOT_SWAP_TYPE(state)) {
     d6e:	4423      	add	r3, r4
     d70:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     d74:	2a01      	cmp	r2, #1
     d76:	d047      	beq.n	e08 <FIH_LABEL_FIH_CALL_END_2307+0x1b2>
     d78:	3a02      	subs	r2, #2
     d7a:	2a01      	cmp	r2, #1
     d7c:	d802      	bhi.n	d84 <FIH_LABEL_FIH_CALL_END_2307+0x12e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d7e:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     d80:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    flash_area_close(fap);
     d84:	f007 f91e 	bl	7fc4 <flash_area_close>
        /* Iterate over all the images and verify whether the image dependencies
         * are all satisfied and update swap type if necessary.
         */
        rc = boot_verify_dependencies(state);
     d88:	2500      	movs	r5, #0

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d8a:	f04f 0800 	mov.w	r8, #0
                break;
            }
            /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     d8e:	f04f 0958 	mov.w	r9, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d92:	f1b8 0f01 	cmp.w	r8, #1
     d96:	f884 80b8 	strb.w	r8, [r4, #184]	; 0xb8
     d9a:	d955      	bls.n	e48 <FIH_LABEL_FIH_CALL_END_2307+0x1f2>
     d9c:	2300      	movs	r3, #0
        bool image_validated_by_nsib = BOOT_CURR_IMG(state) == 1;
        if (!image_validated_by_nsib)
#endif
        {
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d9e:	f8df 8304 	ldr.w	r8, [pc, #772]	; 10a4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa4>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     da2:	2b01      	cmp	r3, #1
     da4:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     da8:	f240 8186 	bls.w	10b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb8>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     dac:	2210      	movs	r2, #16
     dae:	2100      	movs	r1, #0
     db0:	a80a      	add	r0, sp, #40	; 0x28
     db2:	f007 f9cb 	bl	814c <memset>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     db6:	2300      	movs	r3, #0
     db8:	2b02      	cmp	r3, #2
     dba:	f040 819b 	bne.w	10f4 <FIH_LABEL_FIH_CALL_END_4034+0x14>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     dbe:	2658      	movs	r6, #88	; 0x58
     dc0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     dc4:	fb06 4303 	mla	r3, r6, r3, r4
     dc8:	6a18      	ldr	r0, [r3, #32]
     dca:	f005 ff52 	bl	6c72 <flash_area_get_device_id>
     dce:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     dd0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     dd4:	fb06 4202 	mla	r2, r6, r2, r4
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     dd8:	6a13      	ldr	r3, [r2, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     dda:	685b      	ldr	r3, [r3, #4]
     ddc:	60bb      	str	r3, [r7, #8]
    return &BOOT_IMG(state, slot).hdr;
     dde:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     de2:	fb03 4306 	mla	r3, r3, r6, r4
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     de6:	603b      	str	r3, [r7, #0]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     de8:	4bae      	ldr	r3, [pc, #696]	; (10a4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa4>)
     dea:	681e      	ldr	r6, [r3, #0]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     dec:	2300      	movs	r3, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dee:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     df0:	2b01      	cmp	r3, #1
     df2:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     df6:	f240 8188 	bls.w	110a <FIH_LABEL_FIH_CALL_END_4034+0x2a>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dfa:	2d00      	cmp	r5, #0
     dfc:	bf14      	ite	ne
     dfe:	4628      	movne	r0, r5
     e00:	4630      	moveq	r0, r6
     e02:	b015      	add	sp, #84	; 0x54
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     e08:	2204      	movs	r2, #4
     e0a:	e7b9      	b.n	d80 <FIH_LABEL_FIH_CALL_END_2307+0x12a>
    flash_area_close(fap);
     e0c:	9805      	ldr	r0, [sp, #20]
     e0e:	e7b9      	b.n	d84 <FIH_LABEL_FIH_CALL_END_2307+0x12e>
     e10:	9805      	ldr	r0, [sp, #20]
     e12:	f007 f8d7 	bl	7fc4 <flash_area_close>
	} else if (rc == BOOT_EBADIMAGE) {
     e16:	f1b9 0f03 	cmp.w	r9, #3
     e1a:	d1b5      	bne.n	d88 <FIH_LABEL_FIH_CALL_END_2307+0x132>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e1c:	f240 1301 	movw	r3, #257	; 0x101
     e20:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
            for (int idx = 0; idx < BOOT_IMAGE_NUMBER; idx++) {
     e24:	e7b0      	b.n	d88 <FIH_LABEL_FIH_CALL_END_2307+0x132>
            rc = BOOT_EBADIMAGE;
     e26:	f04f 0903 	mov.w	r9, #3
    flash_area_close(fap);
     e2a:	9805      	ldr	r0, [sp, #20]
     e2c:	f007 f8ca 	bl	7fc4 <flash_area_close>
        if (rc == 0) {
     e30:	f1b9 0f00 	cmp.w	r9, #0
     e34:	d1ef      	bne.n	e16 <FIH_LABEL_FIH_CALL_END_2307+0x1c0>
            BOOT_CURR_IMG(state)++;
     e36:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     e3a:	e720      	b.n	c7e <FIH_LABEL_FIH_CALL_END_2307+0x28>
        rc = BOOT_EFLASH;
     e3c:	f04f 0901 	mov.w	r9, #1
     e40:	e7f3      	b.n	e2a <FIH_LABEL_FIH_CALL_END_2307+0x1d4>
            rc = BOOT_EBADARGS;
     e42:	f04f 0907 	mov.w	r9, #7
     e46:	e7f0      	b.n	e2a <FIH_LABEL_FIH_CALL_END_2307+0x1d4>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     e48:	eb04 0208 	add.w	r2, r4, r8
     e4c:	f892 30b9 	ldrb.w	r3, [r2, #185]	; 0xb9
     e50:	2b00      	cmp	r3, #0
     e52:	f040 811f 	bne.w	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
        boot_status_reset(&bs);
     e56:	a80a      	add	r0, sp, #40	; 0x28
     e58:	f006 f86a 	bl	6f30 <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
     e5c:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     e60:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     e62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
     e66:	d808      	bhi.n	e7a <FIH_LABEL_FIH_CALL_END_2307+0x224>
     e68:	2b01      	cmp	r3, #1
     e6a:	d808      	bhi.n	e7e <FIH_LABEL_FIH_CALL_END_2307+0x228>
     e6c:	f000 80c0 	beq.w	ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     e70:	f04f 33ff 	mov.w	r3, #4294967295
     e74:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
     e78:	e0ba      	b.n	ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
        switch (BOOT_SWAP_TYPE(state)) {
     e7a:	2b05      	cmp	r3, #5
     e7c:	e7f6      	b.n	e6c <FIH_LABEL_FIH_CALL_END_2307+0x216>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     e7e:	fb09 4308 	mla	r3, r9, r8, r4
     e82:	4619      	mov	r1, r3
     e84:	4640      	mov	r0, r8
     e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     e88:	312c      	adds	r1, #44	; 0x2c
     e8a:	f007 fb60 	bl	854e <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
     e8e:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     e90:	4605      	mov	r5, r0
            if (rc == BOOT_HOOK_REGULAR)
     e92:	f040 80ad 	bne.w	ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e96:	4601      	mov	r1, r0
     e98:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     e9c:	f005 fed4 	bl	6c48 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ea0:	a907      	add	r1, sp, #28
     ea2:	b2c0      	uxtb	r0, r0
     ea4:	f000 ff8c 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
     ea8:	2800      	cmp	r0, #0
     eaa:	f000 80ad 	beq.w	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
    uint32_t src_size = 0;
     eae:	2500      	movs	r5, #0
    flash_area_close(fap);
     eb0:	9807      	ldr	r0, [sp, #28]
     eb2:	f007 f887 	bl	7fc4 <flash_area_close>
    BOOT_LOG_INF("Image upgrade secondary slot -> primary slot");
     eb6:	2149      	movs	r1, #73	; 0x49
     eb8:	487b      	ldr	r0, [pc, #492]	; (10a8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa8>)
     eba:	f007 f876 	bl	7faa <z_log_minimal_printk>
    BOOT_LOG_INF("Erasing the primary slot");
     ebe:	2149      	movs	r1, #73	; 0x49
     ec0:	487a      	ldr	r0, [pc, #488]	; (10ac <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xac>)
     ec2:	f007 f872 	bl	7faa <z_log_minimal_printk>
    image_index = BOOT_CURR_IMG(state);
     ec6:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     eca:	a907      	add	r1, sp, #28
     ecc:	2800      	cmp	r0, #0
     ece:	f000 80d9 	beq.w	1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>
     ed2:	2801      	cmp	r0, #1
     ed4:	f000 80d2 	beq.w	107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>
     ed8:	20ff      	movs	r0, #255	; 0xff
     eda:	f000 ff71 	bl	1dc0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     ede:	20ff      	movs	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     ee0:	f04f 0800 	mov.w	r8, #0
    return BOOT_IMG(state, slot).num_sectors;
     ee4:	f04f 0b58 	mov.w	fp, #88	; 0x58
     ee8:	46c2      	mov	sl, r8
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     eea:	a90e      	add	r1, sp, #56	; 0x38
     eec:	f000 ff68 	bl	1dc0 <flash_area_open>
     ef0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     ef4:	fb0b 4303 	mla	r3, fp, r3, r4
     ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     efa:	4553      	cmp	r3, sl
     efc:	d019      	beq.n	f32 <FIH_LABEL_FIH_CALL_END_2307+0x2dc>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     efe:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
     f02:	4641      	mov	r1, r8
     f04:	fb0b 4202 	mla	r2, fp, r2, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
     f0a:	9807      	ldr	r0, [sp, #28]
     f0c:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
     f10:	6852      	ldr	r2, [r2, #4]
     f12:	9303      	str	r3, [sp, #12]
     f14:	9202      	str	r2, [sp, #8]
     f16:	f007 f880 	bl	801a <flash_area_erase>
        if ((size + this_size) >= src_size) {
     f1a:	9a02      	ldr	r2, [sp, #8]
     f1c:	9b03      	ldr	r3, [sp, #12]
     f1e:	4490      	add	r8, r2
     f20:	45a8      	cmp	r8, r5
     f22:	f0c0 80b4 	bcc.w	108e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8e>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
     f26:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
     f2a:	fbb5 f5f3 	udiv	r5, r5, r3
     f2e:	fb03 3805 	mla	r8, r3, r5, r3
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     f32:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
     f36:	f005 ff67 	bl	6e08 <boot_trailer_sz>
     f3a:	2358      	movs	r3, #88	; 0x58
    return BOOT_IMG(state, slot).num_sectors;
     f3c:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     f40:	fb03 4202 	mla	r2, r3, r2, r4
     f44:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     f46:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
     f48:	6819      	ldr	r1, [r3, #0]
     f4a:	3a01      	subs	r2, #1
     f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
     f50:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
     f52:	685d      	ldr	r5, [r3, #4]
     f54:	469c      	mov	ip, r3
     f56:	442a      	add	r2, r5
    } while (sz < trailer_sz);
     f58:	4290      	cmp	r0, r2
     f5a:	f1a3 0308 	sub.w	r3, r3, #8
     f5e:	d8f8      	bhi.n	f52 <FIH_LABEL_FIH_CALL_END_2307+0x2fc>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     f60:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
     f64:	9807      	ldr	r0, [sp, #28]
     f66:	1a59      	subs	r1, r3, r1
     f68:	f007 f857 	bl	801a <flash_area_erase>
    BOOT_LOG_INF("Copying the secondary slot to the primary slot: 0x%zx bytes",
     f6c:	4642      	mov	r2, r8
     f6e:	2149      	movs	r1, #73	; 0x49
     f70:	484f      	ldr	r0, [pc, #316]	; (10b0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb0>)
     f72:	f007 f81a 	bl	7faa <z_log_minimal_printk>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
     f76:	2300      	movs	r3, #0
     f78:	4620      	mov	r0, r4
     f7a:	9a07      	ldr	r2, [sp, #28]
     f7c:	990e      	ldr	r1, [sp, #56]	; 0x38
     f7e:	f8cd 8004 	str.w	r8, [sp, #4]
     f82:	9300      	str	r3, [sp, #0]
     f84:	f7ff fd28 	bl	9d8 <boot_copy_region>
    if (rc != 0) {
     f88:	4605      	mov	r5, r0
     f8a:	bb88      	cbnz	r0, ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
    rc = boot_write_magic(fap_primary_slot);
     f8c:	9807      	ldr	r0, [sp, #28]
     f8e:	f003 faf5 	bl	457c <boot_write_magic>
    if (rc != 0) {
     f92:	4605      	mov	r5, r0
     f94:	bb60      	cbnz	r0, ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
     f96:	f04f 0a58 	mov.w	sl, #88	; 0x58
     f9a:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     f9e:	4642      	mov	r2, r8
     fa0:	fb0a 4300 	mla	r3, sl, r0, r4
     fa4:	6a19      	ldr	r1, [r3, #32]
     fa6:	f007 fae0 	bl	856a <boot_copy_region_post_hook>
    if (rc != 0) {
     faa:	4605      	mov	r5, r0
     fac:	bb00      	cbnz	r0, ff0 <FIH_LABEL_FIH_CALL_END_2307+0x39a>
     fae:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
     fb2:	4601      	mov	r1, r0
     fb4:	fb0a 4303 	mla	r3, sl, r3, r4
	return fs->fs_size;
     fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     fba:	980e      	ldr	r0, [sp, #56]	; 0x38
     fbc:	685a      	ldr	r2, [r3, #4]
     fbe:	f007 f82c 	bl	801a <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
     fc2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     fc6:	fb0a 4303 	mla	r3, sl, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
     fca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
     fce:	3b01      	subs	r3, #1
     fd0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
     fd4:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
     fd8:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
     fda:	6842      	ldr	r2, [r0, #4]
     fdc:	1ac9      	subs	r1, r1, r3
     fde:	980e      	ldr	r0, [sp, #56]	; 0x38
     fe0:	f007 f81b 	bl	801a <flash_area_erase>
    flash_area_close(fap_primary_slot);
     fe4:	9807      	ldr	r0, [sp, #28]
     fe6:	f006 ffed 	bl	7fc4 <flash_area_close>
    flash_area_close(fap_secondary_slot);
     fea:	980e      	ldr	r0, [sp, #56]	; 0x38
     fec:	f006 ffea 	bl	7fc4 <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     ff0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     ff4:	4423      	add	r3, r4
     ff6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     ffa:	2bff      	cmp	r3, #255	; 0xff
     ffc:	d14a      	bne.n	1094 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x94>
            BOOT_LOG_ERR("panic!");
     ffe:	2145      	movs	r1, #69	; 0x45
    1000:	482c      	ldr	r0, [pc, #176]	; (10b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb4>)
    1002:	f006 ffd2 	bl	7faa <z_log_minimal_printk>
            FIH_PANIC;
    1006:	e7fe      	b.n	1006 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6>
    return &BOOT_IMG(state, slot).hdr;
    1008:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    100c:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    100e:	fb09 4303 	mla	r3, r9, r3, r4
    1012:	f8b3 8034 	ldrh.w	r8, [r3, #52]	; 0x34
    1016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1018:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    101a:	4498      	add	r8, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    101c:	4641      	mov	r1, r8
    101e:	2304      	movs	r3, #4
    1020:	f006 ffd1 	bl	7fc6 <flash_area_read>
    1024:	2800      	cmp	r0, #0
    1026:	f47f af42 	bne.w	eae <FIH_LABEL_FIH_CALL_END_2307+0x258>
    102a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    102e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1032:	fb09 4303 	mla	r3, r9, r3, r4
    1036:	8edd      	ldrh	r5, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1038:	f646 1308 	movw	r3, #26888	; 0x6908
    103c:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    103e:	9807      	ldr	r0, [sp, #28]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1040:	d119      	bne.n	1076 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x76>
        if (protect_tlv_size != info.it_tlv_tot) {
    1042:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1046:	429d      	cmp	r5, r3
    1048:	f47f af31 	bne.w	eae <FIH_LABEL_FIH_CALL_END_2307+0x258>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    104c:	2304      	movs	r3, #4
    104e:	aa0e      	add	r2, sp, #56	; 0x38
    1050:	eb05 0108 	add.w	r1, r5, r8
    1054:	f006 ffb7 	bl	7fc6 <flash_area_read>
    1058:	2800      	cmp	r0, #0
    105a:	f47f af28 	bne.w	eae <FIH_LABEL_FIH_CALL_END_2307+0x258>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    105e:	f646 1307 	movw	r3, #26887	; 0x6907
    1062:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    1066:	429a      	cmp	r2, r3
    1068:	f47f af21 	bne.w	eae <FIH_LABEL_FIH_CALL_END_2307+0x258>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    106c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    1070:	441d      	add	r5, r3
    1072:	4445      	add	r5, r8
    rc = 0;
    1074:	e71c      	b.n	eb0 <FIH_LABEL_FIH_CALL_END_2307+0x25a>
    } else if (protect_tlv_size != 0) {
    1076:	2d00      	cmp	r5, #0
    1078:	d0f1      	beq.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
    107a:	e718      	b.n	eae <FIH_LABEL_FIH_CALL_END_2307+0x258>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    107c:	f000 fea0 	bl	1dc0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1080:	2008      	movs	r0, #8
    1082:	e72d      	b.n	ee0 <FIH_LABEL_FIH_CALL_END_2307+0x28a>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1084:	2004      	movs	r0, #4
    1086:	f000 fe9b 	bl	1dc0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    108a:	2002      	movs	r0, #2
    108c:	e728      	b.n	ee0 <FIH_LABEL_FIH_CALL_END_2307+0x28a>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    108e:	f10a 0a01 	add.w	sl, sl, #1
    1092:	e732      	b.n	efa <FIH_LABEL_FIH_CALL_END_2307+0x2a4>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1094:	f894 80b8 	ldrb.w	r8, [r4, #184]	; 0xb8
    1098:	f108 0801 	add.w	r8, r8, #1
    109c:	fa5f f888 	uxtb.w	r8, r8
    10a0:	e677      	b.n	d92 <FIH_LABEL_FIH_CALL_END_2307+0x13c>
    10a2:	bf00      	nop
    10a4:	20002340 	.word	0x20002340
    10a8:	0000987b 	.word	0x0000987b
    10ac:	000098ad 	.word	0x000098ad
    10b0:	000098cb 	.word	0x000098cb
    10b4:	0000990c 	.word	0x0000990c
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    10b8:	4423      	add	r3, r4
    10ba:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
    10be:	b9a1      	cbnz	r1, 10ea <FIH_LABEL_FIH_CALL_END_4034+0xa>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    10c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    10c4:	2b01      	cmp	r3, #1
    10c6:	d007      	beq.n	10d8 <FIH_LABEL_FIH_CALL_START_4020>
            rc = boot_read_image_headers(state, false, &bs);
    10c8:	4620      	mov	r0, r4
    10ca:	aa0a      	add	r2, sp, #40	; 0x28
    10cc:	f005 ff01 	bl	6ed2 <boot_read_image_headers>
            if (rc != 0) {
    10d0:	4605      	mov	r5, r0
    10d2:	2800      	cmp	r0, #0
    10d4:	f47f ae8a 	bne.w	dec <FIH_LABEL_FIH_CALL_END_2307+0x196>

000010d8 <FIH_LABEL_FIH_CALL_START_4020>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    10d8:	2100      	movs	r1, #0
    10da:	4620      	mov	r0, r4
    10dc:	f7ff fba2 	bl	824 <boot_validate_slot.isra.0>

000010e0 <FIH_LABEL_FIH_CALL_END_4034>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    10e0:	f8d8 6000 	ldr.w	r6, [r8]
    10e4:	42b0      	cmp	r0, r6
    10e6:	d10e      	bne.n	1106 <FIH_LABEL_FIH_CALL_END_4034+0x26>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
    10e8:	2500      	movs	r5, #0
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    10ea:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10ee:	3301      	adds	r3, #1
    10f0:	b2db      	uxtb	r3, r3
    10f2:	e656      	b.n	da2 <FIH_LABEL_FIH_CALL_END_2307+0x14c>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    10f4:	18e2      	adds	r2, r4, r3
    10f6:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    10fa:	2a00      	cmp	r2, #0
    10fc:	f43f ae5f 	beq.w	dbe <FIH_LABEL_FIH_CALL_END_2307+0x168>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    1100:	3301      	adds	r3, #1
    1102:	b2db      	uxtb	r3, r3
    1104:	e658      	b.n	db8 <FIH_LABEL_FIH_CALL_END_2307+0x162>
    1106:	4606      	mov	r6, r0
    1108:	e670      	b.n	dec <FIH_LABEL_FIH_CALL_END_2307+0x196>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    110a:	18e2      	adds	r2, r4, r3
    110c:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    1110:	b95a      	cbnz	r2, 112a <FIH_LABEL_FIH_CALL_END_4034+0x4a>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1112:	fb07 4303 	mla	r3, r7, r3, r4
    1116:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    1118:	f006 ff54 	bl	7fc4 <flash_area_close>
    111c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1120:	fb07 4303 	mla	r3, r7, r3, r4
    1124:	6a18      	ldr	r0, [r3, #32]
    1126:	f006 ff4d 	bl	7fc4 <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    112a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    112e:	3301      	adds	r3, #1
    1130:	b2db      	uxtb	r3, r3
    1132:	e65d      	b.n	df0 <FIH_LABEL_FIH_CALL_END_2307+0x19a>

00001134 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    1134:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1136:	4d06      	ldr	r5, [pc, #24]	; (1150 <FIH_LABEL_FIH_CALL_END_4677+0x4>)
{
    1138:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    113a:	22bc      	movs	r2, #188	; 0xbc
    113c:	2100      	movs	r1, #0
    113e:	4628      	mov	r0, r5
    1140:	f007 f804 	bl	814c <memset>

00001144 <FIH_LABEL_FIH_CALL_START_4663>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1144:	4621      	mov	r1, r4
    1146:	4628      	mov	r0, r5
    1148:	f7ff fc9c 	bl	a84 <context_boot_go>

0000114c <FIH_LABEL_FIH_CALL_END_4677>:
}
    114c:	bd38      	pop	{r3, r4, r5, pc}
    114e:	bf00      	nop
    1150:	20004544 	.word	0x20004544

00001154 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    1154:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    1156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1158:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    115c:	fb02 0003 	mla	r0, r2, r3, r0
    1160:	f8d0 c028 	ldr.w	ip, [r0, #40]	; 0x28
    1164:	6d46      	ldr	r6, [r0, #84]	; 0x54
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    1166:	f1bc 0ff0 	cmp.w	ip, #240	; 0xf0
    116a:	d801      	bhi.n	1170 <boot_slots_compatible+0x1c>
    116c:	2ef0      	cmp	r6, #240	; 0xf0
    116e:	d936      	bls.n	11de <boot_slots_compatible+0x8a>
        (num_sectors_secondary > BOOT_MAX_IMG_SECTORS)) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    1170:	2157      	movs	r1, #87	; 0x57
    1172:	481f      	ldr	r0, [pc, #124]	; (11f0 <boot_slots_compatible+0x9c>)
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
            /* Guarantee that multiple sectors of the secondary slot
             * fit into the primary slot.
             */
            if (smaller == 2) {
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    1174:	f006 ff19 	bl	7faa <z_log_minimal_printk>
        return 0;
    1178:	2000      	movs	r0, #0
        return 0;
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    117c:	42a5      	cmp	r5, r4
    117e:	d116      	bne.n	11ae <boot_slots_compatible+0x5a>
    1180:	6a47      	ldr	r7, [r0, #36]	; 0x24
    1182:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    1186:	687f      	ldr	r7, [r7, #4]
            i++;
    1188:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    118a:	443d      	add	r5, r7
    118c:	6d07      	ldr	r7, [r0, #80]	; 0x50
    118e:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    1192:	687f      	ldr	r7, [r7, #4]
            j++;
    1194:	3301      	adds	r3, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    1196:	443c      	add	r4, r7
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    1198:	4594      	cmp	ip, r2
    119a:	d8ef      	bhi.n	117c <boot_slots_compatible+0x28>
    119c:	429e      	cmp	r6, r3
    119e:	d8ed      	bhi.n	117c <boot_slots_compatible+0x28>
    if ((i != num_sectors_primary) ||
    11a0:	4594      	cmp	ip, r2
    11a2:	d101      	bne.n	11a8 <boot_slots_compatible+0x54>
    11a4:	429e      	cmp	r6, r3
    11a6:	d020      	beq.n	11ea <boot_slots_compatible+0x96>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    11a8:	2157      	movs	r1, #87	; 0x57
    11aa:	4812      	ldr	r0, [pc, #72]	; (11f4 <boot_slots_compatible+0xa0>)
    11ac:	e7e2      	b.n	1174 <boot_slots_compatible+0x20>
        } else if (sz0 < sz1) {
    11ae:	d20c      	bcs.n	11ca <boot_slots_compatible+0x76>
    11b0:	6a47      	ldr	r7, [r0, #36]	; 0x24
            if (smaller == 2) {
    11b2:	2902      	cmp	r1, #2
    11b4:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    11b8:	687f      	ldr	r7, [r7, #4]
    11ba:	443d      	add	r5, r7
            if (smaller == 2) {
    11bc:	d102      	bne.n	11c4 <boot_slots_compatible+0x70>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    11be:	2157      	movs	r1, #87	; 0x57
    11c0:	480d      	ldr	r0, [pc, #52]	; (11f8 <boot_slots_compatible+0xa4>)
    11c2:	e7d7      	b.n	1174 <boot_slots_compatible+0x20>
            smaller = 1;
    11c4:	2101      	movs	r1, #1
            i++;
    11c6:	3201      	adds	r2, #1
    11c8:	e7e6      	b.n	1198 <boot_slots_compatible+0x44>
    11ca:	6d07      	ldr	r7, [r0, #80]	; 0x50
            if (smaller == 1) {
    11cc:	2901      	cmp	r1, #1
    11ce:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    11d2:	687f      	ldr	r7, [r7, #4]
    11d4:	443c      	add	r4, r7
            if (smaller == 1) {
    11d6:	d0f2      	beq.n	11be <boot_slots_compatible+0x6a>
            smaller = 2;
    11d8:	2102      	movs	r1, #2
            j++;
    11da:	3301      	adds	r3, #1
    11dc:	e7dc      	b.n	1198 <boot_slots_compatible+0x44>
    smaller = 0;
    11de:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    11e0:	460b      	mov	r3, r1
    i = sz0 = primary_slot_sz = 0;
    11e2:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    11e4:	460c      	mov	r4, r1
    i = sz0 = primary_slot_sz = 0;
    11e6:	460d      	mov	r5, r1
    11e8:	e7d6      	b.n	1198 <boot_slots_compatible+0x44>
    return 1;
    11ea:	2001      	movs	r0, #1
    11ec:	e7c5      	b.n	117a <boot_slots_compatible+0x26>
    11ee:	bf00      	nop
    11f0:	00009918 	.word	0x00009918
    11f4:	0000997e 	.word	0x0000997e
    11f8:	00009947 	.word	0x00009947

000011fc <vli_mmod_fast_secp256r1>:
{
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    11fc:	2208      	movs	r2, #8
{
    11fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    1200:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    1202:	f006 f877 	bl	72f4 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    1206:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	tmp[0] = tmp[1] = tmp[2] = 0;
    1208:	2700      	movs	r7, #0
	tmp[3] = product[11];
    120a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    120c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
{
    120e:	460c      	mov	r4, r1
	tmp[4] = product[12];
    1210:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    1212:	6b4b      	ldr	r3, [r1, #52]	; 0x34
{
    1214:	4606      	mov	r6, r0
	tmp[5] = product[13];
    1216:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    1218:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp[0] = tmp[1] = tmp[2] = 0;
    121a:	e9cd 7701 	strd	r7, r7, [sp, #4]
	tmp[6] = product[14];
    121e:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    1220:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	tmp[0] = tmp[1] = tmp[2] = 0;
    1222:	9700      	str	r7, [sp, #0]
	tmp[7] = product[15];
    1224:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    1226:	4613      	mov	r3, r2
    1228:	466a      	mov	r2, sp
    122a:	4611      	mov	r1, r2
    122c:	4610      	mov	r0, r2
    122e:	f005 ff6f 	bl	7110 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1232:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    1234:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1236:	4630      	mov	r0, r6
    1238:	f005 ff6a 	bl	7110 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    123c:	6b21      	ldr	r1, [r4, #48]	; 0x30
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    123e:	4405      	add	r5, r0
	tmp[3] = product[12];
    1240:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    1242:	6b61      	ldr	r1, [r4, #52]	; 0x34
	tmp[5] = product[14];
	tmp[6] = product[15];
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    1244:	4610      	mov	r0, r2
	tmp[4] = product[13];
    1246:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    1248:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    124a:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    124c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	tmp[7] = 0;
    124e:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    1252:	4611      	mov	r1, r2
    1254:	f005 ff5c 	bl	7110 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1258:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    125a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    125c:	4630      	mov	r0, r6
    125e:	f005 ff57 	bl	7110 <uECC_vli_add>
    1262:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    1264:	6a20      	ldr	r0, [r4, #32]
	tmp[1] = product[9];
	tmp[2] = product[10];
	tmp[3] = tmp[4] = tmp[5] = 0;
    1266:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[0] = product[8];
    126a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    126c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	tmp[3] = tmp[4] = tmp[5] = 0;
    126e:	9703      	str	r7, [sp, #12]
	tmp[1] = product[9];
    1270:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    1272:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1274:	9002      	str	r0, [sp, #8]
	tmp[6] = product[14];
    1276:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1278:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    127a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    127c:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    127e:	4630      	mov	r0, r6
    1280:	f005 ff46 	bl	7110 <uECC_vli_add>
    1284:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    1286:	6a60      	ldr	r0, [r4, #36]	; 0x24
	tmp[1] = product[10];
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    1288:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[0] = product[9];
    128c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    128e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[4] = product[14];
    1290:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[1] = product[10];
    1294:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    1296:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	tmp[5] = product[15];
    1298:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[2] = product[11];
    129c:	9002      	str	r0, [sp, #8]
	tmp[3] = product[13];
    129e:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[6] = product[13];
    12a0:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[3] = product[13];
    12a4:	9003      	str	r0, [sp, #12]
	tmp[7] = product[8];
    12a6:	6a20      	ldr	r0, [r4, #32]
    12a8:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    12aa:	4630      	mov	r0, r6
    12ac:	f005 ff30 	bl	7110 <uECC_vli_add>
    12b0:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    12b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	tmp[1] = product[12];
	tmp[2] = product[13];
	tmp[3] = tmp[4] = tmp[5] = 0;
    12b4:	e9cd 7704 	strd	r7, r7, [sp, #16]
	tmp[0] = product[11];
    12b8:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    12ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
	tmp[3] = tmp[4] = tmp[5] = 0;
    12bc:	9703      	str	r7, [sp, #12]
	tmp[1] = product[12];
    12be:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    12c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    12c2:	9002      	str	r0, [sp, #8]
	tmp[6] = product[8];
    12c4:	6a20      	ldr	r0, [r4, #32]
    12c6:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    12c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    12ca:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12cc:	4630      	mov	r0, r6
    12ce:	f006 f844 	bl	735a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    12d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12d4:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[12];
    12d6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    12d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[2] = product[14];
	tmp[3] = product[15];
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
	tmp[7] = product[11];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12da:	4630      	mov	r0, r6
	tmp[1] = product[13];
    12dc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    12de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12e0:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    12e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    12e4:	9303      	str	r3, [sp, #12]
	tmp[6] = product[9];
    12e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12e8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    12ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12ec:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12ee:	2308      	movs	r3, #8
    12f0:	f006 f833 	bl	735a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    12f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12f6:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[13];
    12f8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    12fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	tmp[3] = product[8];
	tmp[4] = product[9];
	tmp[5] = product[10];
	tmp[6] = 0;
	tmp[7] = product[12];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    12fc:	4630      	mov	r0, r6
	tmp[1] = product[14];
    12fe:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    1300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1302:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    1304:	6a23      	ldr	r3, [r4, #32]
    1306:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    1308:	6a63      	ldr	r3, [r4, #36]	; 0x24
    130a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    130c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    130e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    1312:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1314:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    1316:	2308      	movs	r3, #8
    1318:	f006 f81f 	bl	735a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    131c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    131e:	1a2d      	subs	r5, r5, r0
	tmp[0] = product[14];
    1320:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    1322:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[3] = product[9];
	tmp[4] = product[10];
	tmp[5] = product[11];
	tmp[6] = 0;
	tmp[7] = product[13];
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    1324:	4630      	mov	r0, r6
	tmp[2] = 0;
    1326:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    132a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    132c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    132e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1330:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    1332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1334:	9305      	str	r3, [sp, #20]
	tmp[7] = product[13];
    1336:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1338:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    133a:	2308      	movs	r3, #8
    133c:	f006 f80d 	bl	735a <uECC_vli_sub>

	if (carry < 0) {
    1340:	1a2d      	subs	r5, r5, r0
    1342:	d410      	bmi.n	1366 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    1344:	4c0d      	ldr	r4, [pc, #52]	; (137c <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
    1346:	b935      	cbnz	r5, 1356 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    1348:	2208      	movs	r2, #8
    134a:	4631      	mov	r1, r6
    134c:	4620      	mov	r0, r4
    134e:	f005 ffdd 	bl	730c <uECC_vli_cmp_unsafe>
		while (carry || 
    1352:	2801      	cmp	r0, #1
    1354:	d00f      	beq.n	1376 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    1356:	2308      	movs	r3, #8
    1358:	4622      	mov	r2, r4
    135a:	4631      	mov	r1, r6
    135c:	4630      	mov	r0, r6
    135e:	f005 fffc 	bl	735a <uECC_vli_sub>
    1362:	1a2d      	subs	r5, r5, r0
    1364:	e7ef      	b.n	1346 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    1366:	4a05      	ldr	r2, [pc, #20]	; (137c <vli_mmod_fast_secp256r1+0x180>)
    1368:	2308      	movs	r3, #8
    136a:	4631      	mov	r1, r6
    136c:	4630      	mov	r0, r6
    136e:	f005 fecf 	bl	7110 <uECC_vli_add>
		while (carry < 0);
    1372:	182d      	adds	r5, r5, r0
    1374:	d4f8      	bmi.n	1368 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
    1376:	b009      	add	sp, #36	; 0x24
    1378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137a:	bf00      	nop
    137c:	00009108 	.word	0x00009108

00001380 <uECC_secp256r1>:
}
    1380:	4800      	ldr	r0, [pc, #0]	; (1384 <uECC_secp256r1+0x4>)
    1382:	4770      	bx	lr
    1384:	00009104 	.word	0x00009104

00001388 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    1388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    138c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    138e:	6803      	ldr	r3, [r0, #0]
{
    1390:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    1392:	9302      	str	r3, [sp, #8]
    1394:	6843      	ldr	r3, [r0, #4]
    1396:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1554 <compress+0x1cc>
    139a:	9303      	str	r3, [sp, #12]
    139c:	6883      	ldr	r3, [r0, #8]
    139e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    13a2:	9304      	str	r3, [sp, #16]
    13a4:	68c3      	ldr	r3, [r0, #12]
    13a6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    13a8:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    13aa:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    13ae:	9306      	str	r3, [sp, #24]
    13b0:	6943      	ldr	r3, [r0, #20]
    13b2:	9307      	str	r3, [sp, #28]
    13b4:	6983      	ldr	r3, [r0, #24]
    13b6:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    13ba:	9308      	str	r3, [sp, #32]
    13bc:	69c3      	ldr	r3, [r0, #28]
    13be:	4698      	mov	r8, r3
    13c0:	9309      	str	r3, [sp, #36]	; 0x24
    13c2:	9b08      	ldr	r3, [sp, #32]
    13c4:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    13c6:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    13c8:	ab0c      	add	r3, sp, #48	; 0x30
    13ca:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    13cc:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    13d0:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    13d2:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    13d6:	44a9      	add	r9, r5
    13d8:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    13dc:	9d00      	ldr	r5, [sp, #0]
    13de:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    13e2:	444b      	add	r3, r9
    13e4:	ea25 0502 	bic.w	r5, r5, r2
    13e8:	ea02 090c 	and.w	r9, r2, ip
    13ec:	ea85 0509 	eor.w	r5, r5, r9
    13f0:	442b      	add	r3, r5
    13f2:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    13f4:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    13f8:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    13fc:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    1400:	4025      	ands	r5, r4
    1402:	ea06 090b 	and.w	r9, r6, fp
    1406:	ea85 0509 	eor.w	r5, r5, r9
    140a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    140e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    1410:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    1412:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    1414:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    1418:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    141a:	46de      	mov	lr, fp
    141c:	f8dd 8000 	ldr.w	r8, [sp]
    1420:	f040 8088 	bne.w	1534 <compress+0x1ac>
    1424:	f04f 0a10 	mov.w	sl, #16
    1428:	494b      	ldr	r1, [pc, #300]	; (1558 <compress+0x1d0>)
    142a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    142c:	4651      	mov	r1, sl
    142e:	f10a 0a01 	add.w	sl, sl, #1
    1432:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    1436:	f00a 070f 	and.w	r7, sl, #15
    143a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    143e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1442:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    1446:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    144a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    144c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    1450:	f101 070e 	add.w	r7, r1, #14
    1454:	f007 070f 	and.w	r7, r7, #15
    1458:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    145c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1460:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    1462:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    1466:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    146a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    146e:	f001 010f 	and.w	r1, r1, #15
    1472:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    1476:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    147a:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    147e:	f859 ec40 	ldr.w	lr, [r9, #-64]
    1482:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    1486:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    148a:	4471      	add	r1, lr
		s0 = sigma0(s0);
    148c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1490:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    1494:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1498:	4441      	add	r1, r8
		s1 = sigma1(s1);
    149a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    149e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14a0:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    14a4:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14a8:	ea2c 0705 	bic.w	r7, ip, r5
    14ac:	ea87 0708 	eor.w	r7, r7, r8
    14b0:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    14b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    14b8:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    14bc:	4477      	add	r7, lr
    14be:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    14c2:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14c6:	4477      	add	r7, lr
    14c8:	440f      	add	r7, r1
    14ca:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    14cc:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14d0:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    14d2:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14d6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    14da:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    14de:	ea07 0703 	and.w	r7, r7, r3
    14e2:	ea04 0806 	and.w	r8, r4, r6
    14e6:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    14ea:	ea87 0708 	eor.w	r7, r7, r8
    14ee:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    14f0:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    14f2:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    14f6:	f8cd c000 	str.w	ip, [sp]
    14fa:	46b3      	mov	fp, r6
    14fc:	d122      	bne.n	1544 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    14fe:	9902      	ldr	r1, [sp, #8]
    1500:	4439      	add	r1, r7
    1502:	6001      	str	r1, [r0, #0]
    1504:	9903      	ldr	r1, [sp, #12]
    1506:	4419      	add	r1, r3
    1508:	9b04      	ldr	r3, [sp, #16]
    150a:	6041      	str	r1, [r0, #4]
    150c:	4423      	add	r3, r4
    150e:	6083      	str	r3, [r0, #8]
    1510:	9b05      	ldr	r3, [sp, #20]
    1512:	4433      	add	r3, r6
    1514:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    1516:	9b06      	ldr	r3, [sp, #24]
    1518:	4473      	add	r3, lr
    151a:	6103      	str	r3, [r0, #16]
    151c:	9b07      	ldr	r3, [sp, #28]
    151e:	442b      	add	r3, r5
    1520:	6143      	str	r3, [r0, #20]
    1522:	9b08      	ldr	r3, [sp, #32]
    1524:	4413      	add	r3, r2
    1526:	6183      	str	r3, [r0, #24]
    1528:	9b09      	ldr	r3, [sp, #36]	; 0x24
    152a:	4463      	add	r3, ip
    152c:	61c3      	str	r3, [r0, #28]
}
    152e:	b01d      	add	sp, #116	; 0x74
    1530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1534:	46b3      	mov	fp, r6
    1536:	f8cd c000 	str.w	ip, [sp]
    153a:	4626      	mov	r6, r4
    153c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    153e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    1540:	462a      	mov	r2, r5
    1542:	e740      	b.n	13c6 <compress+0x3e>
    1544:	4694      	mov	ip, r2
    1546:	4626      	mov	r6, r4
    1548:	462a      	mov	r2, r5
    154a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    154c:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    154e:	463b      	mov	r3, r7
    1550:	e76c      	b.n	142c <compress+0xa4>
    1552:	bf00      	nop
    1554:	000091b4 	.word	0x000091b4
    1558:	000091f0 	.word	0x000091f0

0000155c <tc_sha256_init>:
{
    155c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    155e:	4604      	mov	r4, r0
    1560:	b1c8      	cbz	r0, 1596 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    1562:	2270      	movs	r2, #112	; 0x70
    1564:	2100      	movs	r1, #0
    1566:	f006 fc2b 	bl	7dc0 <_set>
	s->iv[1] = 0xbb67ae85;
    156a:	4b0b      	ldr	r3, [pc, #44]	; (1598 <tc_sha256_init+0x3c>)
    156c:	4a0b      	ldr	r2, [pc, #44]	; (159c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    156e:	490c      	ldr	r1, [pc, #48]	; (15a0 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    1570:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    1574:	4b0b      	ldr	r3, [pc, #44]	; (15a4 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    1576:	480c      	ldr	r0, [pc, #48]	; (15a8 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    1578:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    157c:	4b0b      	ldr	r3, [pc, #44]	; (15ac <tc_sha256_init+0x50>)
    157e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    1582:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    1584:	4b0a      	ldr	r3, [pc, #40]	; (15b0 <tc_sha256_init+0x54>)
    1586:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    1588:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    158c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    1590:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    1594:	61e3      	str	r3, [r4, #28]
}
    1596:	bd10      	pop	{r4, pc}
    1598:	bb67ae85 	.word	0xbb67ae85
    159c:	6a09e667 	.word	0x6a09e667
    15a0:	3c6ef372 	.word	0x3c6ef372
    15a4:	a54ff53a 	.word	0xa54ff53a
    15a8:	510e527f 	.word	0x510e527f
    15ac:	9b05688c 	.word	0x9b05688c
    15b0:	1f83d9ab 	.word	0x1f83d9ab

000015b4 <cleanup_arm_nvic>:
    15b4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    15b8:	b672      	cpsid	i
    15ba:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    15bc:	f04f 30ff 	mov.w	r0, #4294967295
    15c0:	4a09      	ldr	r2, [pc, #36]	; (15e8 <cleanup_arm_nvic+0x34>)
    15c2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    15c6:	3301      	adds	r3, #1
    15c8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    15ca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    15ce:	d1f8      	bne.n	15c2 <cleanup_arm_nvic+0xe>
    15d0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    15d2:	f04f 30ff 	mov.w	r0, #4294967295
    15d6:	4a04      	ldr	r2, [pc, #16]	; (15e8 <cleanup_arm_nvic+0x34>)
    15d8:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    15dc:	3301      	adds	r3, #1
    15de:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    15e0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    15e4:	d1f8      	bne.n	15d8 <cleanup_arm_nvic+0x24>
	}
}
    15e6:	4770      	bx	lr
    15e8:	e000e100 	.word	0xe000e100

000015ec <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    15ec:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    15ee:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    15f0:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    15f4:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    15f6:	4b1a      	ldr	r3, [pc, #104]	; (1660 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    15f8:	4629      	mov	r1, r5
    15fa:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    15fc:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1600:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1608:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    160a:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    160e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1612:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    1616:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    161a:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    161c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1620:	4810      	ldr	r0, [pc, #64]	; (1664 <nrf_cleanup_peripheral+0x78>)
    1622:	f006 fd93 	bl	814c <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1626:	2280      	movs	r2, #128	; 0x80
    1628:	4629      	mov	r1, r5
    162a:	480f      	ldr	r0, [pc, #60]	; (1668 <nrf_cleanup_peripheral+0x7c>)
    162c:	f006 fd8e 	bl	814c <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1630:	4b0e      	ldr	r3, [pc, #56]	; (166c <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1632:	2280      	movs	r2, #128	; 0x80
    1634:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1638:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    163a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    163e:	480c      	ldr	r0, [pc, #48]	; (1670 <nrf_cleanup_peripheral+0x84>)
    1640:	f006 fd84 	bl	814c <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1644:	2280      	movs	r2, #128	; 0x80
    1646:	4629      	mov	r1, r5
    1648:	480a      	ldr	r0, [pc, #40]	; (1674 <nrf_cleanup_peripheral+0x88>)
    164a:	f006 fd7f 	bl	814c <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    164e:	4b0a      	ldr	r3, [pc, #40]	; (1678 <nrf_cleanup_peripheral+0x8c>)
    1650:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1654:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1658:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    165c:	bd38      	pop	{r3, r4, r5, pc}
    165e:	bf00      	nop
    1660:	50014000 	.word	0x50014000
    1664:	50008080 	.word	0x50008080
    1668:	50008180 	.word	0x50008180
    166c:	50009000 	.word	0x50009000
    1670:	50009080 	.word	0x50009080
    1674:	50009180 	.word	0x50009180
    1678:	50017000 	.word	0x50017000

0000167c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    167c:	4b01      	ldr	r3, [pc, #4]	; (1684 <char_out+0x8>)
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	4718      	bx	r3
    1682:	bf00      	nop
    1684:	20002004 	.word	0x20002004

00001688 <__printk_hook_install>:
	_char_out = fn;
    1688:	4b01      	ldr	r3, [pc, #4]	; (1690 <__printk_hook_install+0x8>)
    168a:	6018      	str	r0, [r3, #0]
}
    168c:	4770      	bx	lr
    168e:	bf00      	nop
    1690:	20002004 	.word	0x20002004

00001694 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1694:	b507      	push	{r0, r1, r2, lr}
    1696:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1698:	2100      	movs	r1, #0
    169a:	4602      	mov	r2, r0
    169c:	9100      	str	r1, [sp, #0]
    169e:	4803      	ldr	r0, [pc, #12]	; (16ac <vprintk+0x18>)
    16a0:	f000 f914 	bl	18cc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    16a4:	b003      	add	sp, #12
    16a6:	f85d fb04 	ldr.w	pc, [sp], #4
    16aa:	bf00      	nop
    16ac:	0000167d 	.word	0x0000167d

000016b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    16b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16b4:	8b05      	ldrh	r5, [r0, #24]
{
    16b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    16b8:	0728      	lsls	r0, r5, #28
{
    16ba:	4690      	mov	r8, r2
	if (processing) {
    16bc:	d411      	bmi.n	16e2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    16be:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16c0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    16c4:	f040 80cd 	bne.w	1862 <process_event+0x1b2>
			evt = process_recheck(mgr);
    16c8:	4620      	mov	r0, r4
    16ca:	f006 fb94 	bl	7df6 <process_recheck>
		}

		if (evt == EVT_NOP) {
    16ce:	b178      	cbz	r0, 16f0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    16d0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16d2:	8b21      	ldrh	r1, [r4, #24]
    16d4:	2804      	cmp	r0, #4
    16d6:	d811      	bhi.n	16fc <process_event+0x4c>
    16d8:	e8df f000 	tbb	[pc, r0]
    16dc:	856d10c3 	.word	0x856d10c3
    16e0:	95          	.byte	0x95
    16e1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    16e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16e4:	bf0c      	ite	eq
    16e6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16ea:	f045 0520 	orrne.w	r5, r5, #32
    16ee:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    16f0:	f388 8811 	msr	BASEPRI, r8
    16f4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    16f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16fc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1700:	45aa      	cmp	sl, r5
    1702:	f000 80a6 	beq.w	1852 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1706:	2700      	movs	r7, #0
    1708:	46b9      	mov	r9, r7
    170a:	463e      	mov	r6, r7
    170c:	68a3      	ldr	r3, [r4, #8]
    170e:	2b00      	cmp	r3, #0
    1710:	f000 80bd 	beq.w	188e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1714:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1718:	8321      	strh	r1, [r4, #24]
    171a:	f388 8811 	msr	BASEPRI, r8
    171e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1722:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1724:	2900      	cmp	r1, #0
    1726:	f000 80bb 	beq.w	18a0 <process_event+0x1f0>
	return node->next;
    172a:	680d      	ldr	r5, [r1, #0]
    172c:	2900      	cmp	r1, #0
    172e:	f000 80b7 	beq.w	18a0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1732:	4633      	mov	r3, r6
    1734:	4652      	mov	r2, sl
    1736:	4620      	mov	r0, r4
    1738:	f8d1 8004 	ldr.w	r8, [r1, #4]
    173c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    173e:	2d00      	cmp	r5, #0
    1740:	d076      	beq.n	1830 <process_event+0x180>
    1742:	682b      	ldr	r3, [r5, #0]
    1744:	4629      	mov	r1, r5
    1746:	461d      	mov	r5, r3
    1748:	e7f0      	b.n	172c <process_event+0x7c>
    174a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    174e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1750:	2a01      	cmp	r2, #1
    1752:	d81b      	bhi.n	178c <process_event+0xdc>
	list->head = NULL;
    1754:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1756:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    175a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    175c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    175e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1760:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1764:	d109      	bne.n	177a <process_event+0xca>
    1766:	463b      	mov	r3, r7
    1768:	e003      	b.n	1772 <process_event+0xc2>
				mgr->refs += 1U;
    176a:	8b62      	ldrh	r2, [r4, #26]
    176c:	3201      	adds	r2, #1
    176e:	8362      	strh	r2, [r4, #26]
	return node->next;
    1770:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1772:	2b00      	cmp	r3, #0
    1774:	d1f9      	bne.n	176a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1776:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    177a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    177c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    177e:	f006 fb3a 	bl	7df6 <process_recheck>
    1782:	2800      	cmp	r0, #0
    1784:	d07b      	beq.n	187e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1786:	f041 0120 	orr.w	r1, r1, #32
    178a:	e077      	b.n	187c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    178c:	2b04      	cmp	r3, #4
    178e:	d10a      	bne.n	17a6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1790:	f021 0107 	bic.w	r1, r1, #7
    1794:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1796:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1798:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    179a:	f006 fb2c 	bl	7df6 <process_recheck>
    179e:	b110      	cbz	r0, 17a6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17a0:	f041 0120 	orr.w	r1, r1, #32
    17a4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17a6:	8b21      	ldrh	r1, [r4, #24]
    17a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17ac:	45aa      	cmp	sl, r5
    17ae:	d050      	beq.n	1852 <process_event+0x1a2>
    17b0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    17b2:	46b9      	mov	r9, r7
    17b4:	e7aa      	b.n	170c <process_event+0x5c>
			transit = mgr->transitions->start;
    17b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17b8:	f021 0107 	bic.w	r1, r1, #7
    17bc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    17c0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    17c2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17c6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17c8:	d12d      	bne.n	1826 <process_event+0x176>
		    || (transit != NULL)) {
    17ca:	f1b9 0f00 	cmp.w	r9, #0
    17ce:	d040      	beq.n	1852 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17d0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17d4:	8321      	strh	r1, [r4, #24]
    17d6:	f388 8811 	msr	BASEPRI, r8
    17da:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    17de:	4620      	mov	r0, r4
    17e0:	4939      	ldr	r1, [pc, #228]	; (18c8 <process_event+0x218>)
    17e2:	47c8      	blx	r9
    17e4:	e029      	b.n	183a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17e6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    17ea:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ec:	f041 0104 	orr.w	r1, r1, #4
    17f0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    17f2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    17f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17f8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17fa:	d0e6      	beq.n	17ca <process_event+0x11a>
    17fc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17fe:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    1802:	463e      	mov	r6, r7
    1804:	e782      	b.n	170c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1806:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    180a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    180c:	f041 0105 	orr.w	r1, r1, #5
    1810:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1812:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1814:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1818:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    181a:	d0d6      	beq.n	17ca <process_event+0x11a>
    181c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    181e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    1822:	463e      	mov	r6, r7
    1824:	e772      	b.n	170c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1826:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1828:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    182c:	463e      	mov	r6, r7
    182e:	e76d      	b.n	170c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1830:	462b      	mov	r3, r5
    1832:	e787      	b.n	1744 <process_event+0x94>
			if (transit != NULL) {
    1834:	f1b9 0f00 	cmp.w	r9, #0
    1838:	d1d1      	bne.n	17de <process_event+0x12e>
	__asm__ volatile(
    183a:	f04f 0320 	mov.w	r3, #32
    183e:	f3ef 8811 	mrs	r8, BASEPRI
    1842:	f383 8812 	msr	BASEPRI_MAX, r3
    1846:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    184a:	8b23      	ldrh	r3, [r4, #24]
    184c:	f023 0308 	bic.w	r3, r3, #8
    1850:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1852:	8b25      	ldrh	r5, [r4, #24]
    1854:	06ea      	lsls	r2, r5, #27
    1856:	d52e      	bpl.n	18b6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1858:	f025 0310 	bic.w	r3, r5, #16
    185c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    185e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1862:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1864:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1866:	2e00      	cmp	r6, #0
    1868:	f6bf af6f 	bge.w	174a <process_event+0x9a>
	list->head = NULL;
    186c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    186e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1870:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1874:	f021 0107 	bic.w	r1, r1, #7
    1878:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    187c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    187e:	8b21      	ldrh	r1, [r4, #24]
    1880:	f04f 0900 	mov.w	r9, #0
    1884:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1888:	45aa      	cmp	sl, r5
    188a:	f47f af3f 	bne.w	170c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    188e:	2f00      	cmp	r7, #0
    1890:	d09b      	beq.n	17ca <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1892:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1896:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1898:	f388 8811 	msr	BASEPRI, r8
    189c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    18a0:	2f00      	cmp	r7, #0
    18a2:	d0c7      	beq.n	1834 <process_event+0x184>
	return node->next;
    18a4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    18a6:	4639      	mov	r1, r7
    18a8:	4633      	mov	r3, r6
    18aa:	4652      	mov	r2, sl
    18ac:	4620      	mov	r0, r4
    18ae:	f006 face 	bl	7e4e <notify_one>
	list->head = node;
    18b2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    18b4:	e7f4      	b.n	18a0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18b6:	06ab      	lsls	r3, r5, #26
    18b8:	f57f af1a 	bpl.w	16f0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18bc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    18c2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    18c6:	e6ff      	b.n	16c8 <process_event+0x18>
    18c8:	00007e7b 	.word	0x00007e7b

000018cc <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    18cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d0:	4682      	mov	sl, r0
	size_t count = 0;
    18d2:	f04f 0900 	mov.w	r9, #0
{
    18d6:	b08d      	sub	sp, #52	; 0x34
    18d8:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18da:	1e53      	subs	r3, r2, #1
{
    18dc:	9101      	str	r1, [sp, #4]
	fmt--;
    18de:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    18e0:	9b03      	ldr	r3, [sp, #12]
    18e2:	7858      	ldrb	r0, [r3, #1]
    18e4:	1c5c      	adds	r4, r3, #1
    18e6:	2825      	cmp	r0, #37	; 0x25
    18e8:	d119      	bne.n	191e <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    18ea:	2000      	movs	r0, #0
	precision = -1;
    18ec:	f04f 38ff 	mov.w	r8, #4294967295

	for (fmt++ ; ; fmt++) {
    18f0:	461e      	mov	r6, r3
	min_width = -1;
    18f2:	4644      	mov	r4, r8
	length_mod = 0;
    18f4:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    18f6:	3602      	adds	r6, #2
	padding_mode = 0;
    18f8:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    18fa:	7831      	ldrb	r1, [r6, #0]
    18fc:	9603      	str	r6, [sp, #12]
    18fe:	2939      	cmp	r1, #57	; 0x39
    1900:	d855      	bhi.n	19ae <z_cbvprintf_impl+0xe2>
    1902:	291f      	cmp	r1, #31
    1904:	d814      	bhi.n	1930 <z_cbvprintf_impl+0x64>
    1906:	2900      	cmp	r1, #0
    1908:	f000 81f1 	beq.w	1cee <z_cbvprintf_impl+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    190c:	9901      	ldr	r1, [sp, #4]
    190e:	2025      	movs	r0, #37	; 0x25
    1910:	47d0      	blx	sl
			OUTC(*fmt);
    1912:	9901      	ldr	r1, [sp, #4]
    1914:	7830      	ldrb	r0, [r6, #0]
    1916:	47d0      	blx	sl
    1918:	f109 0902 	add.w	r9, r9, #2
			goto start;
    191c:	e7e0      	b.n	18e0 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    191e:	2800      	cmp	r0, #0
    1920:	f000 81e5 	beq.w	1cee <z_cbvprintf_impl+0x422>
		OUTC(*fmt);
    1924:	9901      	ldr	r1, [sp, #4]
    1926:	47d0      	blx	sl
    1928:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    192c:	9403      	str	r4, [sp, #12]
    192e:	e7d7      	b.n	18e0 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    1930:	f1a1 0220 	sub.w	r2, r1, #32
    1934:	2a19      	cmp	r2, #25
    1936:	d8e9      	bhi.n	190c <z_cbvprintf_impl+0x40>
    1938:	a701      	add	r7, pc, #4	; (adr r7, 1940 <z_cbvprintf_impl+0x74>)
    193a:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    193e:	bf00      	nop
    1940:	000019a9 	.word	0x000019a9
    1944:	0000190d 	.word	0x0000190d
    1948:	0000190d 	.word	0x0000190d
    194c:	000019a9 	.word	0x000019a9
    1950:	0000190d 	.word	0x0000190d
    1954:	00001a29 	.word	0x00001a29
    1958:	0000190d 	.word	0x0000190d
    195c:	0000190d 	.word	0x0000190d
    1960:	0000190d 	.word	0x0000190d
    1964:	0000190d 	.word	0x0000190d
    1968:	00001a75 	.word	0x00001a75
    196c:	000019a9 	.word	0x000019a9
    1970:	0000190d 	.word	0x0000190d
    1974:	00001a89 	.word	0x00001a89
    1978:	00001a35 	.word	0x00001a35
    197c:	0000190d 	.word	0x0000190d
    1980:	00001a43 	.word	0x00001a43
    1984:	00001a63 	.word	0x00001a63
    1988:	00001a63 	.word	0x00001a63
    198c:	00001a63 	.word	0x00001a63
    1990:	00001a63 	.word	0x00001a63
    1994:	00001a63 	.word	0x00001a63
    1998:	00001a63 	.word	0x00001a63
    199c:	00001a63 	.word	0x00001a63
    19a0:	00001a63 	.word	0x00001a63
    19a4:	00001a63 	.word	0x00001a63
    19a8:	4608      	mov	r0, r1
    19aa:	3601      	adds	r6, #1
    19ac:	e7a5      	b.n	18fa <z_cbvprintf_impl+0x2e>
    19ae:	2958      	cmp	r1, #88	; 0x58
    19b0:	f000 80ee 	beq.w	1b90 <z_cbvprintf_impl+0x2c4>
    19b4:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    19b8:	b2d7      	uxtb	r7, r2
    19ba:	2f17      	cmp	r7, #23
    19bc:	d8a6      	bhi.n	190c <z_cbvprintf_impl+0x40>
    19be:	2a17      	cmp	r2, #23
    19c0:	d8a4      	bhi.n	190c <z_cbvprintf_impl+0x40>
    19c2:	a701      	add	r7, pc, #4	; (adr r7, 19c8 <z_cbvprintf_impl+0xfc>)
    19c4:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    19c8:	00001c37 	.word	0x00001c37
    19cc:	00001aaf 	.word	0x00001aaf
    19d0:	0000190d 	.word	0x0000190d
    19d4:	0000190d 	.word	0x0000190d
    19d8:	0000190d 	.word	0x0000190d
    19dc:	00001a8f 	.word	0x00001a8f
    19e0:	00001aaf 	.word	0x00001aaf
    19e4:	0000190d 	.word	0x0000190d
    19e8:	0000190d 	.word	0x0000190d
    19ec:	00001a8f 	.word	0x00001a8f
    19f0:	0000190d 	.word	0x0000190d
    19f4:	0000190d 	.word	0x0000190d
    19f8:	0000190d 	.word	0x0000190d
    19fc:	00001b6b 	.word	0x00001b6b
    1a00:	0000190d 	.word	0x0000190d
    1a04:	0000190d 	.word	0x0000190d
    1a08:	00001c0b 	.word	0x00001c0b
    1a0c:	0000190d 	.word	0x0000190d
    1a10:	00001aaf 	.word	0x00001aaf
    1a14:	0000190d 	.word	0x0000190d
    1a18:	0000190d 	.word	0x0000190d
    1a1c:	00001b6b 	.word	0x00001b6b
    1a20:	0000190d 	.word	0x0000190d
    1a24:	00001a8f 	.word	0x00001a8f
			OUTC('%');
    1a28:	2025      	movs	r0, #37	; 0x25
    1a2a:	9901      	ldr	r1, [sp, #4]
    1a2c:	47d0      	blx	sl
    1a2e:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1a32:	e755      	b.n	18e0 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a34:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1a36:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    1a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a3e:	9202      	str	r2, [sp, #8]
			continue;
    1a40:	e7b3      	b.n	19aa <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a42:	2c00      	cmp	r4, #0
    1a44:	da0d      	bge.n	1a62 <z_cbvprintf_impl+0x196>
    1a46:	f1b8 0f00 	cmp.w	r8, #0
    1a4a:	da0d      	bge.n	1a68 <z_cbvprintf_impl+0x19c>
    1a4c:	9a02      	ldr	r2, [sp, #8]
    1a4e:	2a00      	cmp	r2, #0
    1a50:	f000 8145 	beq.w	1cde <z_cbvprintf_impl+0x412>
				min_width = 10 * min_width + *fmt - '0';
    1a54:	220a      	movs	r2, #10
				if (min_width < 0) {
    1a56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1a5a:	fb02 1404 	mla	r4, r2, r4, r1
    1a5e:	3c30      	subs	r4, #48	; 0x30
    1a60:	e7a3      	b.n	19aa <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1a62:	f1b8 0f00 	cmp.w	r8, #0
    1a66:	dbf5      	blt.n	1a54 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1a68:	220a      	movs	r2, #10
    1a6a:	fb02 1208 	mla	r2, r2, r8, r1
    1a6e:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    1a72:	e79a      	b.n	19aa <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1a74:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1a78:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1a7c:	f280 8131 	bge.w	1ce2 <z_cbvprintf_impl+0x416>
				if (min_width < 0) {
    1a80:	2a00      	cmp	r2, #0
    1a82:	f280 8130 	bge.w	1ce6 <z_cbvprintf_impl+0x41a>
					min_width = -min_width;
    1a86:	4254      	negs	r4, r2
		switch (*fmt) {
    1a88:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1a8a:	9202      	str	r2, [sp, #8]
    1a8c:	e78d      	b.n	19aa <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1a8e:	2968      	cmp	r1, #104	; 0x68
    1a90:	d103      	bne.n	1a9a <z_cbvprintf_impl+0x1ce>
    1a92:	2b68      	cmp	r3, #104	; 0x68
    1a94:	d106      	bne.n	1aa4 <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    1a96:	2348      	movs	r3, #72	; 0x48
    1a98:	e787      	b.n	19aa <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1a9a:	296c      	cmp	r1, #108	; 0x6c
    1a9c:	d102      	bne.n	1aa4 <z_cbvprintf_impl+0x1d8>
    1a9e:	2b6c      	cmp	r3, #108	; 0x6c
    1aa0:	f000 8123 	beq.w	1cea <z_cbvprintf_impl+0x41e>
			} else if (length_mod == '\0') {
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	f47f af31 	bne.w	190c <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1aaa:	460b      	mov	r3, r1
    1aac:	e77d      	b.n	19aa <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1aae:	2b7a      	cmp	r3, #122	; 0x7a
    1ab0:	d106      	bne.n	1ac0 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    1ab2:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1ab4:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1ab8:	d114      	bne.n	1ae4 <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1aba:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1abe:	e00c      	b.n	1ada <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    1ac0:	2b6c      	cmp	r3, #108	; 0x6c
    1ac2:	d0f6      	beq.n	1ab2 <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    1ac4:	2b4c      	cmp	r3, #76	; 0x4c
    1ac6:	d1f4      	bne.n	1ab2 <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1ac8:	3507      	adds	r5, #7
    1aca:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1ace:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1ad0:	f103 0508 	add.w	r5, r3, #8
    1ad4:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1ad8:	d106      	bne.n	1ae8 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    1ada:	2820      	cmp	r0, #32
    1adc:	d13e      	bne.n	1b5c <z_cbvprintf_impl+0x290>
				prefix = " ";
    1ade:	4f86      	ldr	r7, [pc, #536]	; (1cf8 <z_cbvprintf_impl+0x42c>)
				min_width--;
    1ae0:	3c01      	subs	r4, #1
    1ae2:	e009      	b.n	1af8 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    1ae4:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1ae8:	f1bb 0f00 	cmp.w	fp, #0
    1aec:	daf5      	bge.n	1ada <z_cbvprintf_impl+0x20e>
				d = -d;
    1aee:	4276      	negs	r6, r6
				prefix = "-";
    1af0:	4f82      	ldr	r7, [pc, #520]	; (1cfc <z_cbvprintf_impl+0x430>)
				d = -d;
    1af2:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1af6:	3c01      	subs	r4, #1
	int i = 0;
    1af8:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1afc:	9305      	str	r3, [sp, #20]
    1afe:	2300      	movs	r3, #0
    1b00:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1b02:	4630      	mov	r0, r6
    1b04:	4659      	mov	r1, fp
    1b06:	220a      	movs	r2, #10
    1b08:	2300      	movs	r3, #0
    1b0a:	f7fe fb23 	bl	154 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1b0e:	9b04      	ldr	r3, [sp, #16]
    1b10:	3230      	adds	r2, #48	; 0x30
    1b12:	f103 3cff 	add.w	ip, r3, #4294967295
    1b16:	f8cd c010 	str.w	ip, [sp, #16]
    1b1a:	f8dd c014 	ldr.w	ip, [sp, #20]
    1b1e:	f80c 2d01 	strb.w	r2, [ip, #-1]!
    1b22:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
    1b26:	46b4      	mov	ip, r6
    1b28:	465a      	mov	r2, fp
	} while (num);
    1b2a:	f1bc 0f0a 	cmp.w	ip, #10
    1b2e:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1b32:	4606      	mov	r6, r0
    1b34:	468b      	mov	fp, r1
	} while (num);
    1b36:	d2e4      	bcs.n	1b02 <z_cbvprintf_impl+0x236>
	return -i;
    1b38:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b3c:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1b3e:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b42:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1b46:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b4a:	da6d      	bge.n	1c28 <z_cbvprintf_impl+0x35c>
    1b4c:	9b02      	ldr	r3, [sp, #8]
    1b4e:	07d9      	lsls	r1, r3, #31
    1b50:	d47c      	bmi.n	1c4c <z_cbvprintf_impl+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b52:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1b56:	eba4 040b 	sub.w	r4, r4, fp
    1b5a:	e013      	b.n	1b84 <z_cbvprintf_impl+0x2b8>
			} else if (special == '+') {
    1b5c:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1b5e:	bf0a      	itet	eq
    1b60:	4f67      	ldreq	r7, [pc, #412]	; (1d00 <z_cbvprintf_impl+0x434>)
	prefix = "";
    1b62:	4f68      	ldrne	r7, [pc, #416]	; (1d04 <z_cbvprintf_impl+0x438>)
				min_width--;
    1b64:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1b68:	e7c6      	b.n	1af8 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1b6a:	2970      	cmp	r1, #112	; 0x70
    1b6c:	d10f      	bne.n	1b8e <z_cbvprintf_impl+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
    1b6e:	f855 2b04 	ldr.w	r2, [r5], #4
    1b72:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1b74:	b9fa      	cbnz	r2, 1bb6 <z_cbvprintf_impl+0x2ea>
		precision -= data_len;
    1b76:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1b7a:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1b7e:	4e62      	ldr	r6, [pc, #392]	; (1d08 <z_cbvprintf_impl+0x43c>)
		min_width -= data_len;
    1b80:	3c05      	subs	r4, #5
	prefix = "";
    1b82:	4f60      	ldr	r7, [pc, #384]	; (1d04 <z_cbvprintf_impl+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1b84:	9a02      	ldr	r2, [sp, #8]
    1b86:	0792      	lsls	r2, r2, #30
    1b88:	d46f      	bmi.n	1c6a <z_cbvprintf_impl+0x39e>
    1b8a:	46a0      	mov	r8, r4
    1b8c:	e065      	b.n	1c5a <z_cbvprintf_impl+0x38e>
		switch (*fmt) {
    1b8e:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1b90:	2b6c      	cmp	r3, #108	; 0x6c
    1b92:	d103      	bne.n	1b9c <z_cbvprintf_impl+0x2d0>
				x = va_arg(ap, unsigned int);
    1b94:	2300      	movs	r3, #0
    1b96:	f855 2b04 	ldr.w	r2, [r5], #4
    1b9a:	e008      	b.n	1bae <z_cbvprintf_impl+0x2e2>
			} else if (length_mod == 'L') {
    1b9c:	2b4c      	cmp	r3, #76	; 0x4c
    1b9e:	d1f9      	bne.n	1b94 <z_cbvprintf_impl+0x2c8>
				unsigned long long llx =
    1ba0:	3507      	adds	r5, #7
    1ba2:	f025 0307 	bic.w	r3, r5, #7
    1ba6:	461d      	mov	r5, r3
    1ba8:	685b      	ldr	r3, [r3, #4]
    1baa:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1bae:	2823      	cmp	r0, #35	; 0x23
    1bb0:	d125      	bne.n	1bfe <z_cbvprintf_impl+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bb2:	0688      	lsls	r0, r1, #26
    1bb4:	d521      	bpl.n	1bfa <z_cbvprintf_impl+0x32e>
    1bb6:	4f55      	ldr	r7, [pc, #340]	; (1d0c <z_cbvprintf_impl+0x440>)
				min_width -= 2;
    1bb8:	3c02      	subs	r4, #2
	int i = 0;
    1bba:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1bbc:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1bc0:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1bc4:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1bc8:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1bcc:	2909      	cmp	r1, #9
			c += alpha;
    1bce:	bf88      	it	hi
    1bd0:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1bd2:	3130      	adds	r1, #48	; 0x30
    1bd4:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1bd8:	2a10      	cmp	r2, #16
		num /= base;
    1bda:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1bde:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1be2:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1be6:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1bea:	f106 3cff 	add.w	ip, r6, #4294967295
	} while (num);
    1bee:	d208      	bcs.n	1c02 <z_cbvprintf_impl+0x336>
	return -i;
    1bf0:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1bf4:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1bf8:	e7a1      	b.n	1b3e <z_cbvprintf_impl+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bfa:	4f45      	ldr	r7, [pc, #276]	; (1d10 <z_cbvprintf_impl+0x444>)
    1bfc:	e7dc      	b.n	1bb8 <z_cbvprintf_impl+0x2ec>
	prefix = "";
    1bfe:	4f41      	ldr	r7, [pc, #260]	; (1d04 <z_cbvprintf_impl+0x438>)
    1c00:	e7db      	b.n	1bba <z_cbvprintf_impl+0x2ee>
		buftop[--i] = c + '0';
    1c02:	4666      	mov	r6, ip
		num /= base;
    1c04:	460a      	mov	r2, r1
    1c06:	4603      	mov	r3, r0
    1c08:	e7de      	b.n	1bc8 <z_cbvprintf_impl+0x2fc>
			data = va_arg(ap, char *);
    1c0a:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1c0e:	4630      	mov	r0, r6
    1c10:	f006 fa63 	bl	80da <strlen>
			if (precision >= 0 && data_len > precision) {
    1c14:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1c18:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1c1a:	db02      	blt.n	1c22 <z_cbvprintf_impl+0x356>
    1c1c:	4540      	cmp	r0, r8
    1c1e:	bfa8      	it	ge
    1c20:	46c3      	movge	fp, r8
			precision = 0;
    1c22:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1c26:	4f37      	ldr	r7, [pc, #220]	; (1d04 <z_cbvprintf_impl+0x438>)
		precision -= data_len;
    1c28:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	dd92      	ble.n	1b56 <z_cbvprintf_impl+0x28a>
			min_width -= precision;
    1c30:	eba4 0408 	sub.w	r4, r4, r8
    1c34:	e7a6      	b.n	1b84 <z_cbvprintf_impl+0x2b8>
			buf[0] = c;
    1c36:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c3a:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1c3e:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1c42:	3c01      	subs	r4, #1
		precision -= data_len;
    1c44:	f04f 33ff 	mov.w	r3, #4294967295
			data = buf;
    1c48:	ae06      	add	r6, sp, #24
    1c4a:	e79a      	b.n	1b82 <z_cbvprintf_impl+0x2b6>
    1c4c:	46a0      	mov	r8, r4
    1c4e:	e7eb      	b.n	1c28 <z_cbvprintf_impl+0x35c>
    1c50:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1c52:	2020      	movs	r0, #32
    1c54:	9901      	ldr	r1, [sp, #4]
    1c56:	47d0      	blx	sl
    1c58:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1c5a:	f1b8 0801 	subs.w	r8, r8, #1
    1c5e:	d5f7      	bpl.n	1c50 <z_cbvprintf_impl+0x384>
    1c60:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1c64:	3c01      	subs	r4, #1
    1c66:	4491      	add	r9, r2
    1c68:	1aa4      	subs	r4, r4, r2
    1c6a:	46b8      	mov	r8, r7
    1c6c:	e006      	b.n	1c7c <z_cbvprintf_impl+0x3b0>
    1c6e:	9304      	str	r3, [sp, #16]
    1c70:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1c72:	9901      	ldr	r1, [sp, #4]
    1c74:	47d0      	blx	sl
    1c76:	9a02      	ldr	r2, [sp, #8]
    1c78:	9b04      	ldr	r3, [sp, #16]
    1c7a:	4690      	mov	r8, r2
		while (*prefix) {
    1c7c:	4642      	mov	r2, r8
    1c7e:	f812 0b01 	ldrb.w	r0, [r2], #1
    1c82:	2800      	cmp	r0, #0
    1c84:	d1f3      	bne.n	1c6e <z_cbvprintf_impl+0x3a2>
    1c86:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1c88:	3a01      	subs	r2, #1
    1c8a:	d515      	bpl.n	1cb8 <z_cbvprintf_impl+0x3ec>
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	bfac      	ite	ge
    1c90:	ebc7 0703 	rsbge	r7, r7, r3
    1c94:	427f      	neglt	r7, r7
    1c96:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1c98:	3b01      	subs	r3, #1
    1c9a:	d515      	bpl.n	1cc8 <z_cbvprintf_impl+0x3fc>
    1c9c:	f1bb 0f00 	cmp.w	fp, #0
    1ca0:	bfa8      	it	ge
    1ca2:	445f      	addge	r7, fp
    1ca4:	4626      	mov	r6, r4
    1ca6:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1ca8:	3e01      	subs	r6, #1
    1caa:	d514      	bpl.n	1cd6 <z_cbvprintf_impl+0x40a>
    1cac:	2c00      	cmp	r4, #0
    1cae:	bfa8      	it	ge
    1cb0:	193f      	addge	r7, r7, r4
    1cb2:	eb07 0908 	add.w	r9, r7, r8
    1cb6:	e613      	b.n	18e0 <z_cbvprintf_impl+0x14>
    1cb8:	9304      	str	r3, [sp, #16]
    1cba:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1cbc:	2030      	movs	r0, #48	; 0x30
    1cbe:	9901      	ldr	r1, [sp, #4]
    1cc0:	47d0      	blx	sl
    1cc2:	9b04      	ldr	r3, [sp, #16]
    1cc4:	9a02      	ldr	r2, [sp, #8]
    1cc6:	e7df      	b.n	1c88 <z_cbvprintf_impl+0x3bc>
    1cc8:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1cca:	9901      	ldr	r1, [sp, #4]
    1ccc:	f816 0b01 	ldrb.w	r0, [r6], #1
    1cd0:	47d0      	blx	sl
    1cd2:	9b02      	ldr	r3, [sp, #8]
    1cd4:	e7e0      	b.n	1c98 <z_cbvprintf_impl+0x3cc>
			OUTC(' ');
    1cd6:	9901      	ldr	r1, [sp, #4]
    1cd8:	2020      	movs	r0, #32
    1cda:	47d0      	blx	sl
    1cdc:	e7e4      	b.n	1ca8 <z_cbvprintf_impl+0x3dc>
				padding_mode = PAD_ZERO;
    1cde:	2201      	movs	r2, #1
    1ce0:	e6d3      	b.n	1a8a <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    1ce2:	4690      	mov	r8, r2
    1ce4:	e661      	b.n	19aa <z_cbvprintf_impl+0xde>
    1ce6:	4614      	mov	r4, r2
    1ce8:	e65f      	b.n	19aa <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1cea:	234c      	movs	r3, #76	; 0x4c
    1cec:	e65d      	b.n	19aa <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1cee:	4648      	mov	r0, r9
    1cf0:	b00d      	add	sp, #52	; 0x34
    1cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cf6:	bf00      	nop
    1cf8:	00009e43 	.word	0x00009e43
    1cfc:	00009a18 	.word	0x00009a18
    1d00:	00009a1a 	.word	0x00009a1a
    1d04:	0000a4b5 	.word	0x0000a4b5
    1d08:	00009a22 	.word	0x00009a22
    1d0c:	00009a1c 	.word	0x00009a1c
    1d10:	00009a1f 	.word	0x00009a1f

00001d14 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d14:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d16:	f04f 0220 	mov.w	r2, #32
    1d1a:	f3ef 8311 	mrs	r3, BASEPRI
    1d1e:	f382 8812 	msr	BASEPRI_MAX, r2
    1d22:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d26:	f000 fd1f 	bl	2768 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d2a:	4803      	ldr	r0, [pc, #12]	; (1d38 <sys_reboot+0x24>)
    1d2c:	f006 f84c 	bl	7dc8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d30:	f000 f9a2 	bl	2078 <arch_cpu_idle>
    1d34:	e7fc      	b.n	1d30 <sys_reboot+0x1c>
    1d36:	bf00      	nop
    1d38:	00009a28 	.word	0x00009a28

00001d3c <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1d3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d42:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1d46:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1d4a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1d4e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    1d52:	4770      	bx	lr
    1d54:	50842500 	.word	0x50842500

00001d58 <nordicsemi_nrf53_init>:
	return true;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(const struct device *arg)
{
    1d58:	b508      	push	{r3, lr}
    1d5a:	f04f 0320 	mov.w	r3, #32
    1d5e:	f3ef 8111 	mrs	r1, BASEPRI
    1d62:	f383 8812 	msr	BASEPRI_MAX, r3
    1d66:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1d6a:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1d6c:	2002      	movs	r0, #2
    1d6e:	4b09      	ldr	r3, [pc, #36]	; (1d94 <nordicsemi_nrf53_init+0x3c>)
    1d70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1d74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    1d78:	f8c3 06d0 	str.w	r0, [r3, #1744]	; 0x6d0
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1d7c:	2000      	movs	r0, #0
    1d7e:	f7ff ffdd 	bl	1d3c <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1d82:	4610      	mov	r0, r2
    1d84:	f7ff ffda 	bl	1d3c <nrf_gpio_pin_control_select.constprop.0>
	__asm__ volatile(
    1d88:	f381 8811 	msr	BASEPRI, r1
    1d8c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d90:	2000      	movs	r0, #0
    1d92:	bd08      	pop	{r3, pc}
    1d94:	50001000 	.word	0x50001000

00001d98 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1d98:	b148      	cbz	r0, 1dae <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1d9a:	4b05      	ldr	r3, [pc, #20]	; (1db0 <arch_busy_wait+0x18>)
    1d9c:	4a05      	ldr	r2, [pc, #20]	; (1db4 <arch_busy_wait+0x1c>)
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    1da4:	4358      	muls	r0, r3
    1da6:	4b04      	ldr	r3, [pc, #16]	; (1db8 <arch_busy_wait+0x20>)
    1da8:	f043 0301 	orr.w	r3, r3, #1
    1dac:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1dae:	4770      	bx	lr
    1db0:	20002090 	.word	0x20002090
    1db4:	000f4240 	.word	0x000f4240
    1db8:	000090f0 	.word	0x000090f0

00001dbc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1dbc:	f002 bd08 	b.w	47d0 <SystemInit>

00001dc0 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1dc2:	4b11      	ldr	r3, [pc, #68]	; (1e08 <flash_area_open+0x48>)
{
    1dc4:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1dc6:	681c      	ldr	r4, [r3, #0]
    1dc8:	b1dc      	cbz	r4, 1e02 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1dca:	4b10      	ldr	r3, [pc, #64]	; (1e0c <flash_area_open+0x4c>)
    1dcc:	6819      	ldr	r1, [r3, #0]
    1dce:	2300      	movs	r3, #0
    1dd0:	428b      	cmp	r3, r1
    1dd2:	db02      	blt.n	1dda <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1dd4:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1dda:	4622      	mov	r2, r4
    1ddc:	f812 6b10 	ldrb.w	r6, [r2], #16
    1de0:	4286      	cmp	r6, r0
    1de2:	d002      	beq.n	1dea <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1de4:	4614      	mov	r4, r2
    1de6:	3301      	adds	r3, #1
    1de8:	e7f2      	b.n	1dd0 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1dea:	68e0      	ldr	r0, [r4, #12]
    1dec:	b910      	cbnz	r0, 1df4 <flash_area_open+0x34>
		return -ENODEV;
    1dee:	f06f 0012 	mvn.w	r0, #18
    1df2:	e7f1      	b.n	1dd8 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1df4:	f006 fdde 	bl	89b4 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1df8:	2800      	cmp	r0, #0
    1dfa:	d0f8      	beq.n	1dee <flash_area_open+0x2e>
	return 0;
    1dfc:	2000      	movs	r0, #0
	*fap = area;
    1dfe:	602c      	str	r4, [r5, #0]
	return 0;
    1e00:	e7ea      	b.n	1dd8 <flash_area_open+0x18>
		return -EACCES;
    1e02:	f06f 000c 	mvn.w	r0, #12
    1e06:	e7e7      	b.n	1dd8 <flash_area_open+0x18>
    1e08:	20002008 	.word	0x20002008
    1e0c:	000092b8 	.word	0x000092b8

00001e10 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e10:	b570      	push	{r4, r5, r6, lr}
    1e12:	b088      	sub	sp, #32
    1e14:	4605      	mov	r5, r0
    1e16:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1e18:	b2c0      	uxtb	r0, r0
    1e1a:	4669      	mov	r1, sp
{
    1e1c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1e1e:	f7ff ffcf 	bl	1dc0 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1e22:	2800      	cmp	r0, #0
    1e24:	db1b      	blt.n	1e5e <flash_area_get_sectors+0x4e>
    1e26:	9800      	ldr	r0, [sp, #0]
    1e28:	b1c8      	cbz	r0, 1e5e <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1e2a:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e2c:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e2e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e30:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1e32:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1e34:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1e38:	2300      	movs	r3, #0
	cb_data->status = 0;
    1e3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e3e:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1e40:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1e42:	f006 f8bf 	bl	7fc4 <flash_area_close>
	if (flash_dev == NULL) {
    1e46:	b16d      	cbz	r5, 1e64 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e48:	4628      	mov	r0, r5
    1e4a:	4908      	ldr	r1, [pc, #32]	; (1e6c <flash_area_get_sectors+0x5c>)
    1e4c:	aa01      	add	r2, sp, #4
    1e4e:	f006 fac7 	bl	83e0 <flash_page_foreach>
	if (cb_data->status == 0) {
    1e52:	9807      	ldr	r0, [sp, #28]
    1e54:	b908      	cbnz	r0, 1e5a <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1e56:	9b05      	ldr	r3, [sp, #20]
    1e58:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e5a:	b008      	add	sp, #32
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1e5e:	f06f 0015 	mvn.w	r0, #21
    1e62:	e7fa      	b.n	1e5a <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1e64:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e68:	e7f7      	b.n	1e5a <flash_area_get_sectors+0x4a>
    1e6a:	bf00      	nop
    1e6c:	0000805f 	.word	0x0000805f

00001e70 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e70:	4801      	ldr	r0, [pc, #4]	; (1e78 <nrf_cc3xx_platform_abort_init+0x8>)
    1e72:	f004 bd9d 	b.w	69b0 <nrf_cc3xx_platform_set_abort>
    1e76:	bf00      	nop
    1e78:	0000936c 	.word	0x0000936c

00001e7c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e7c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1e7e:	4604      	mov	r4, r0
    1e80:	b918      	cbnz	r0, 1e8a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1e82:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <mutex_free_platform+0x44>)
    1e84:	480f      	ldr	r0, [pc, #60]	; (1ec4 <mutex_free_platform+0x48>)
    1e86:	685b      	ldr	r3, [r3, #4]
    1e88:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1e8a:	6861      	ldr	r1, [r4, #4]
    1e8c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1e90:	d00f      	beq.n	1eb2 <mutex_free_platform+0x36>
    1e92:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1e96:	d00c      	beq.n	1eb2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1e98:	4d0b      	ldr	r5, [pc, #44]	; (1ec8 <mutex_free_platform+0x4c>)
    1e9a:	42a9      	cmp	r1, r5
    1e9c:	d009      	beq.n	1eb2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1e9e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1ea2:	d007      	beq.n	1eb4 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ea4:	4621      	mov	r1, r4
    1ea6:	4809      	ldr	r0, [pc, #36]	; (1ecc <mutex_free_platform+0x50>)
    1ea8:	f006 fdb7 	bl	8a1a <k_mem_slab_free>
        mutex->mutex = NULL;
    1eac:	2300      	movs	r3, #0
    1eae:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1eb0:	6065      	str	r5, [r4, #4]
}
    1eb2:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1eb4:	2214      	movs	r2, #20
    1eb6:	6820      	ldr	r0, [r4, #0]
    1eb8:	f006 f948 	bl	814c <memset>
    1ebc:	e7f8      	b.n	1eb0 <mutex_free_platform+0x34>
    1ebe:	bf00      	nop
    1ec0:	2000211c 	.word	0x2000211c
    1ec4:	00009a55 	.word	0x00009a55
    1ec8:	a95c5f2c 	.word	0xa95c5f2c
    1ecc:	20004b00 	.word	0x20004b00

00001ed0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ed0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1ed2:	b360      	cbz	r0, 1f2e <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1ed4:	6843      	ldr	r3, [r0, #4]
    1ed6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1eda:	d00e      	beq.n	1efa <mutex_lock_platform+0x2a>
    1edc:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1ee0:	d018      	beq.n	1f14 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ee2:	4a14      	ldr	r2, [pc, #80]	; (1f34 <mutex_lock_platform+0x64>)
    1ee4:	4293      	cmp	r3, r2
    1ee6:	d020      	beq.n	1f2a <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1ee8:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1eea:	f04f 32ff 	mov.w	r2, #4294967295
    1eee:	f04f 33ff 	mov.w	r3, #4294967295
    1ef2:	f003 feaf 	bl	5c54 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    1ef6:	b158      	cbz	r0, 1f10 <mutex_lock_platform+0x40>
    1ef8:	e015      	b.n	1f26 <mutex_lock_platform+0x56>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1efa:	2201      	movs	r2, #1
    1efc:	6803      	ldr	r3, [r0, #0]
    1efe:	e8d3 1fef 	ldaex	r1, [r3]
    1f02:	2900      	cmp	r1, #0
    1f04:	d103      	bne.n	1f0e <mutex_lock_platform+0x3e>
    1f06:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d1f7      	bne.n	1efe <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f0e:	d10a      	bne.n	1f26 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    1f10:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1f12:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1f14:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1f16:	4a08      	ldr	r2, [pc, #32]	; (1f38 <mutex_lock_platform+0x68>)
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f22:	2b00      	cmp	r3, #0
    1f24:	d0f4      	beq.n	1f10 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f26:	4805      	ldr	r0, [pc, #20]	; (1f3c <mutex_lock_platform+0x6c>)
    1f28:	e7f3      	b.n	1f12 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f2a:	4805      	ldr	r0, [pc, #20]	; (1f40 <mutex_lock_platform+0x70>)
    1f2c:	e7f1      	b.n	1f12 <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f2e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f32:	e7ee      	b.n	1f12 <mutex_lock_platform+0x42>
    1f34:	a95c5f2c 	.word	0xa95c5f2c
    1f38:	50030000 	.word	0x50030000
    1f3c:	ffff8fe9 	.word	0xffff8fe9
    1f40:	ffff8fea 	.word	0xffff8fea

00001f44 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f44:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f46:	b320      	cbz	r0, 1f92 <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f48:	6843      	ldr	r3, [r0, #4]
    1f4a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1f4e:	d009      	beq.n	1f64 <mutex_unlock_platform+0x20>
    1f50:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1f54:	d013      	beq.n	1f7e <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f56:	4a11      	ldr	r2, [pc, #68]	; (1f9c <mutex_unlock_platform+0x58>)
    1f58:	4293      	cmp	r3, r2
    1f5a:	d01d      	beq.n	1f98 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1f5c:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1f5e:	f003 fef3 	bl	5d48 <z_impl_k_mutex_unlock>
    1f62:	e014      	b.n	1f8e <mutex_unlock_platform+0x4a>
    1f64:	2200      	movs	r2, #0
    1f66:	6803      	ldr	r3, [r0, #0]
    1f68:	e8d3 1fef 	ldaex	r1, [r3]
    1f6c:	2901      	cmp	r1, #1
    1f6e:	d103      	bne.n	1f78 <mutex_unlock_platform+0x34>
    1f70:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f74:	2800      	cmp	r0, #0
    1f76:	d1f7      	bne.n	1f68 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f78:	d009      	beq.n	1f8e <mutex_unlock_platform+0x4a>
    1f7a:	4809      	ldr	r0, [pc, #36]	; (1fa0 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1f7c:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1f7e:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1f80:	6803      	ldr	r3, [r0, #0]
    1f82:	4a08      	ldr	r2, [pc, #32]	; (1fa4 <mutex_unlock_platform+0x60>)
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f8e:	2000      	movs	r0, #0
    1f90:	e7f4      	b.n	1f7c <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f92:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f96:	e7f1      	b.n	1f7c <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f98:	4803      	ldr	r0, [pc, #12]	; (1fa8 <mutex_unlock_platform+0x64>)
    1f9a:	e7ef      	b.n	1f7c <mutex_unlock_platform+0x38>
    1f9c:	a95c5f2c 	.word	0xa95c5f2c
    1fa0:	ffff8fe9 	.word	0xffff8fe9
    1fa4:	50030000 	.word	0x50030000
    1fa8:	ffff8fea 	.word	0xffff8fea

00001fac <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fac:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fae:	4604      	mov	r4, r0
    1fb0:	b918      	cbnz	r0, 1fba <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1fb2:	4b1d      	ldr	r3, [pc, #116]	; (2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>)
    1fb4:	481d      	ldr	r0, [pc, #116]	; (202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>)
    1fb6:	685b      	ldr	r3, [r3, #4]
    1fb8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fba:	6863      	ldr	r3, [r4, #4]
    1fbc:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1fc0:	d02f      	beq.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
    1fc2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1fc6:	d02c      	beq.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1fc8:	4a19      	ldr	r2, [pc, #100]	; (2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>)
    1fca:	4293      	cmp	r3, r2
    1fcc:	d119      	bne.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
    1fce:	6823      	ldr	r3, [r4, #0]
    1fd0:	bb03      	cbnz	r3, 2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1fd2:	f04f 32ff 	mov.w	r2, #4294967295
    1fd6:	f04f 33ff 	mov.w	r3, #4294967295
    1fda:	4621      	mov	r1, r4
    1fdc:	4815      	ldr	r0, [pc, #84]	; (2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>)
    1fde:	f003 fd7f 	bl	5ae0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1fe2:	b908      	cbnz	r0, 1fe8 <mutex_init_platform+0x3c>
    1fe4:	6823      	ldr	r3, [r4, #0]
    1fe6:	b91b      	cbnz	r3, 1ff0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1fe8:	4b0f      	ldr	r3, [pc, #60]	; (2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>)
    1fea:	4813      	ldr	r0, [pc, #76]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1fec:	685b      	ldr	r3, [r3, #4]
    1fee:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ff0:	2214      	movs	r2, #20
    1ff2:	2100      	movs	r1, #0
    1ff4:	6820      	ldr	r0, [r4, #0]
    1ff6:	f006 f8a9 	bl	814c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1ffa:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1ffe:	6063      	str	r3, [r4, #4]
    2000:	e008      	b.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
    switch(flags){
    2002:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2006:	d80d      	bhi.n	2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
    2008:	2b3a      	cmp	r3, #58	; 0x3a
    200a:	d003      	beq.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
    200c:	f640 62ba 	movw	r2, #3770	; 0xeba
    2010:	4293      	cmp	r3, r2
    2012:	d1de      	bne.n	1fd2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2014:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2016:	f006 fd45 	bl	8aa4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    201a:	6863      	ldr	r3, [r4, #4]
    201c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    2020:	6063      	str	r3, [r4, #4]
}
    2022:	bd10      	pop	{r4, pc}
    switch(flags){
    2024:	4a05      	ldr	r2, [pc, #20]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    2026:	e7f3      	b.n	2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
    2028:	2000211c 	.word	0x2000211c
    202c:	00009a55 	.word	0x00009a55
    2030:	a95c5f2c 	.word	0xa95c5f2c
    2034:	20004b00 	.word	0x20004b00
    2038:	00009a7b 	.word	0x00009a7b
    203c:	3a00003a 	.word	0x3a00003a

00002040 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2040:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2042:	4906      	ldr	r1, [pc, #24]	; (205c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2044:	2340      	movs	r3, #64	; 0x40
    2046:	2214      	movs	r2, #20
    2048:	4805      	ldr	r0, [pc, #20]	; (2060 <nrf_cc3xx_platform_mutex_init+0x20>)
    204a:	f006 fcd8 	bl	89fe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    204e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2052:	4904      	ldr	r1, [pc, #16]	; (2064 <nrf_cc3xx_platform_mutex_init+0x24>)
    2054:	4804      	ldr	r0, [pc, #16]	; (2068 <nrf_cc3xx_platform_mutex_init+0x28>)
    2056:	f004 bd1d 	b.w	6a94 <nrf_cc3xx_platform_set_mutexes>
    205a:	bf00      	nop
    205c:	20004600 	.word	0x20004600
    2060:	20004b00 	.word	0x20004b00
    2064:	00009374 	.word	0x00009374
    2068:	00009388 	.word	0x00009388

0000206c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    206c:	4901      	ldr	r1, [pc, #4]	; (2074 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    206e:	2210      	movs	r2, #16
	str	r2, [r1]
    2070:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2072:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2074:	e000ed10 	.word	0xe000ed10

00002078 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2078:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    207a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    207c:	f380 8811 	msr	BASEPRI, r0
	isb
    2080:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    2084:	f3bf 8f4f 	dsb	sy
    2088:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    208a:	b662      	cpsie	i
	isb
    208c:	f3bf 8f6f 	isb	sy

	bx	lr
    2090:	4770      	bx	lr
    2092:	bf00      	nop

00002094 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2094:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2096:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2098:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    209c:	f3bf 8f4f 	dsb	sy
    20a0:	bf20      	wfe

	msr	BASEPRI, r0
    20a2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    20a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop

000020ac <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    20ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    20ae:	4605      	mov	r5, r0

	if (esf != NULL) {
    20b0:	460c      	mov	r4, r1
    20b2:	b1c9      	cbz	r1, 20e8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    20b4:	688b      	ldr	r3, [r1, #8]
    20b6:	4810      	ldr	r0, [pc, #64]	; (20f8 <z_arm_fatal_error+0x4c>)
    20b8:	9300      	str	r3, [sp, #0]
    20ba:	e9d1 2300 	ldrd	r2, r3, [r1]
    20be:	2145      	movs	r1, #69	; 0x45
    20c0:	f005 ff73 	bl	7faa <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    20c4:	6963      	ldr	r3, [r4, #20]
    20c6:	2145      	movs	r1, #69	; 0x45
    20c8:	9300      	str	r3, [sp, #0]
    20ca:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    20ce:	480b      	ldr	r0, [pc, #44]	; (20fc <z_arm_fatal_error+0x50>)
    20d0:	f005 ff6b 	bl	7faa <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    20d4:	2145      	movs	r1, #69	; 0x45
    20d6:	69e2      	ldr	r2, [r4, #28]
    20d8:	4809      	ldr	r0, [pc, #36]	; (2100 <z_arm_fatal_error+0x54>)
    20da:	f005 ff66 	bl	7faa <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    20de:	2145      	movs	r1, #69	; 0x45
    20e0:	69a2      	ldr	r2, [r4, #24]
    20e2:	4808      	ldr	r0, [pc, #32]	; (2104 <z_arm_fatal_error+0x58>)
    20e4:	f005 ff61 	bl	7faa <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    20e8:	4621      	mov	r1, r4
    20ea:	4628      	mov	r0, r5
}
    20ec:	b003      	add	sp, #12
    20ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    20f2:	f003 bbaf 	b.w	5854 <z_fatal_error>
    20f6:	bf00      	nop
    20f8:	00009aa8 	.word	0x00009aa8
    20fc:	00009adc 	.word	0x00009adc
    2100:	00009b10 	.word	0x00009b10
    2104:	00009b24 	.word	0x00009b24

00002108 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2108:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    210a:	2800      	cmp	r0, #0
    210c:	db07      	blt.n	211e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    210e:	2301      	movs	r3, #1
    2110:	0941      	lsrs	r1, r0, #5
    2112:	4a03      	ldr	r2, [pc, #12]	; (2120 <arch_irq_enable+0x18>)
    2114:	f000 001f 	and.w	r0, r0, #31
    2118:	4083      	lsls	r3, r0
    211a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    211e:	4770      	bx	lr
    2120:	e000e100 	.word	0xe000e100

00002124 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2124:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2126:	2800      	cmp	r0, #0
    2128:	db0c      	blt.n	2144 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    212a:	2201      	movs	r2, #1
    212c:	4906      	ldr	r1, [pc, #24]	; (2148 <arch_irq_disable+0x24>)
    212e:	0943      	lsrs	r3, r0, #5
    2130:	f000 001f 	and.w	r0, r0, #31
    2134:	4082      	lsls	r2, r0
    2136:	3320      	adds	r3, #32
    2138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    213c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2140:	f3bf 8f6f 	isb	sy
}
    2144:	4770      	bx	lr
    2146:	bf00      	nop
    2148:	e000e100 	.word	0xe000e100

0000214c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <arch_irq_is_enabled+0x18>)
    214e:	0942      	lsrs	r2, r0, #5
    2150:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2154:	2301      	movs	r3, #1
    2156:	f000 001f 	and.w	r0, r0, #31
    215a:	fa03 f000 	lsl.w	r0, r3, r0
}
    215e:	4010      	ands	r0, r2
    2160:	4770      	bx	lr
    2162:	bf00      	nop
    2164:	e000e100 	.word	0xe000e100

00002168 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2168:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    216a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    216c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2170:	bfac      	ite	ge
    2172:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2176:	4b06      	ldrlt	r3, [pc, #24]	; (2190 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2178:	ea4f 1141 	mov.w	r1, r1, lsl #5
    217c:	b2c9      	uxtb	r1, r1
    217e:	bfab      	itete	ge
    2180:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2184:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2188:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    218c:	5419      	strblt	r1, [r3, r0]
}
    218e:	4770      	bx	lr
    2190:	e000ed14 	.word	0xe000ed14

00002194 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2194:	bf30      	wfi
    b z_SysNmiOnReset
    2196:	f7ff bffd 	b.w	2194 <z_SysNmiOnReset>
    219a:	bf00      	nop

0000219c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    219c:	4a0b      	ldr	r2, [pc, #44]	; (21cc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    219e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    21a0:	4b0b      	ldr	r3, [pc, #44]	; (21d0 <z_arm_prep_c+0x34>)
    21a2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    21a6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    21a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21ac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    21b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    21b4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    21b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    21bc:	f003 fbd4 	bl	5968 <z_bss_zero>
	z_data_copy();
    21c0:	f004 f98e 	bl	64e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    21c4:	f000 fa94 	bl	26f0 <z_arm_interrupt_init>
	z_cstart();
    21c8:	f003 fc0e 	bl	59e8 <z_cstart>
    21cc:	00000000 	.word	0x00000000
    21d0:	e000ed00 	.word	0xe000ed00

000021d4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    21d4:	4a09      	ldr	r2, [pc, #36]	; (21fc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    21d6:	490a      	ldr	r1, [pc, #40]	; (2200 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    21d8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    21da:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    21dc:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    21de:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21e0:	4908      	ldr	r1, [pc, #32]	; (2204 <arch_swap+0x30>)
    21e2:	684b      	ldr	r3, [r1, #4]
    21e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21e8:	604b      	str	r3, [r1, #4]
    21ea:	2300      	movs	r3, #0
    21ec:	f383 8811 	msr	BASEPRI, r3
    21f0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    21f4:	6893      	ldr	r3, [r2, #8]
}
    21f6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop
    21fc:	20004c60 	.word	0x20004c60
    2200:	00009564 	.word	0x00009564
    2204:	e000ed00 	.word	0xe000ed00

00002208 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2208:	490f      	ldr	r1, [pc, #60]	; (2248 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    220a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    220c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2210:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2212:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2216:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    221a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    221c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2220:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2224:	4f09      	ldr	r7, [pc, #36]	; (224c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2226:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    222a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    222c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    222e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2230:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2232:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2234:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2236:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    223a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    223e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2242:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2246:	4770      	bx	lr
    ldr r1, =_kernel
    2248:	20004c60 	.word	0x20004c60
    ldr v4, =_SCS_ICSR
    224c:	e000ed04 	.word	0xe000ed04

00002250 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2250:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2254:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2256:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    225a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    225e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2260:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2264:	2902      	cmp	r1, #2
    beq _oops
    2266:	d0ff      	beq.n	2268 <_oops>

00002268 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2268:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    226a:	f005 ff1e 	bl	80aa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    226e:	bd01      	pop	{r0, pc}

00002270 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2270:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2274:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2276:	490b      	ldr	r1, [pc, #44]	; (22a4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2278:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    227c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    227e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2282:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2286:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2288:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    228c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2294:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2298:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    229a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    229c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    229e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    22a0:	4770      	bx	lr
    22a2:	bf00      	nop
    22a4:	00007de3 	.word	0x00007de3

000022a8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    22a8:	4b07      	ldr	r3, [pc, #28]	; (22c8 <arch_switch_to_main_thread+0x20>)
    22aa:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    22ac:	4610      	mov	r0, r2
    22ae:	f381 8809 	msr	PSP, r1
    22b2:	2100      	movs	r1, #0
    22b4:	b663      	cpsie	if
    22b6:	f381 8811 	msr	BASEPRI, r1
    22ba:	f3bf 8f6f 	isb	sy
    22be:	2200      	movs	r2, #0
    22c0:	2300      	movs	r3, #0
    22c2:	f005 fd8e 	bl	7de2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    22c6:	bf00      	nop
    22c8:	20004c60 	.word	0x20004c60

000022cc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    22cc:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    22ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    22d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    22d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    22da:	4904      	ldr	r1, [pc, #16]	; (22ec <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    22dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    22de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    22e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    22e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    22e6:	4902      	ldr	r1, [pc, #8]	; (22f0 <_isr_wrapper+0x24>)
	bx r1
    22e8:	4708      	bx	r1
    22ea:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    22ec:	00008e20 	.word	0x00008e20
	ldr r1, =z_arm_int_exit
    22f0:	000022f5 	.word	0x000022f5

000022f4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    22f6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    22f8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    22fa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    22fc:	d003      	beq.n	2306 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    22fe:	4903      	ldr	r1, [pc, #12]	; (230c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2304:	600a      	str	r2, [r1, #0]

00002306 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2306:	4770      	bx	lr
	ldr r3, =_kernel
    2308:	20004c60 	.word	0x20004c60
	ldr r1, =_SCS_ICSR
    230c:	e000ed04 	.word	0xe000ed04

00002310 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2310:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2312:	4c20      	ldr	r4, [pc, #128]	; (2394 <usage_fault.constprop.0+0x84>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2314:	2145      	movs	r1, #69	; 0x45
    2316:	4820      	ldr	r0, [pc, #128]	; (2398 <usage_fault.constprop.0+0x88>)
    2318:	f005 fe47 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    231c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    231e:	0199      	lsls	r1, r3, #6
    2320:	d503      	bpl.n	232a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2322:	2145      	movs	r1, #69	; 0x45
    2324:	481d      	ldr	r0, [pc, #116]	; (239c <usage_fault.constprop.0+0x8c>)
    2326:	f005 fe40 	bl	7faa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    232a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    232c:	01da      	lsls	r2, r3, #7
    232e:	d503      	bpl.n	2338 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2330:	2145      	movs	r1, #69	; 0x45
    2332:	481b      	ldr	r0, [pc, #108]	; (23a0 <usage_fault.constprop.0+0x90>)
    2334:	f005 fe39 	bl	7faa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2338:	4c16      	ldr	r4, [pc, #88]	; (2394 <usage_fault.constprop.0+0x84>)
    233a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    233c:	02db      	lsls	r3, r3, #11
    233e:	d503      	bpl.n	2348 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2340:	2145      	movs	r1, #69	; 0x45
    2342:	4818      	ldr	r0, [pc, #96]	; (23a4 <usage_fault.constprop.0+0x94>)
    2344:	f005 fe31 	bl	7faa <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    234a:	0318      	lsls	r0, r3, #12
    234c:	d503      	bpl.n	2356 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  No coprocessor instructions");
    234e:	2145      	movs	r1, #69	; 0x45
    2350:	4815      	ldr	r0, [pc, #84]	; (23a8 <usage_fault.constprop.0+0x98>)
    2352:	f005 fe2a 	bl	7faa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2356:	4c0f      	ldr	r4, [pc, #60]	; (2394 <usage_fault.constprop.0+0x84>)
    2358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    235a:	0359      	lsls	r1, r3, #13
    235c:	d503      	bpl.n	2366 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    235e:	2145      	movs	r1, #69	; 0x45
    2360:	4812      	ldr	r0, [pc, #72]	; (23ac <usage_fault.constprop.0+0x9c>)
    2362:	f005 fe22 	bl	7faa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2368:	039a      	lsls	r2, r3, #14
    236a:	d503      	bpl.n	2374 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    236c:	2145      	movs	r1, #69	; 0x45
    236e:	4810      	ldr	r0, [pc, #64]	; (23b0 <usage_fault.constprop.0+0xa0>)
    2370:	f005 fe1b 	bl	7faa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2374:	4c07      	ldr	r4, [pc, #28]	; (2394 <usage_fault.constprop.0+0x84>)
    2376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2378:	03db      	lsls	r3, r3, #15
    237a:	d503      	bpl.n	2384 <usage_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    237c:	2145      	movs	r1, #69	; 0x45
    237e:	480d      	ldr	r0, [pc, #52]	; (23b4 <usage_fault.constprop.0+0xa4>)
    2380:	f005 fe13 	bl	7faa <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2384:	6aa3      	ldr	r3, [r4, #40]	; 0x28

	return reason;
}
    2386:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2388:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    238c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2390:	62a3      	str	r3, [r4, #40]	; 0x28
}
    2392:	bd10      	pop	{r4, pc}
    2394:	e000ed00 	.word	0xe000ed00
    2398:	00009b57 	.word	0x00009b57
    239c:	00009b74 	.word	0x00009b74
    23a0:	00009b8c 	.word	0x00009b8c
    23a4:	00009bab 	.word	0x00009bab
    23a8:	00009bda 	.word	0x00009bda
    23ac:	00009bfd 	.word	0x00009bfd
    23b0:	00009c27 	.word	0x00009c27
    23b4:	00009c46 	.word	0x00009c46

000023b8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    23b8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    23ba:	4c23      	ldr	r4, [pc, #140]	; (2448 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    23bc:	4606      	mov	r6, r0
    23be:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    23c0:	4822      	ldr	r0, [pc, #136]	; (244c <bus_fault.constprop.0+0x94>)
    23c2:	2145      	movs	r1, #69	; 0x45
    23c4:	f005 fdf1 	bl	7faa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    23c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23ca:	04d9      	lsls	r1, r3, #19
    23cc:	d503      	bpl.n	23d6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    23ce:	2145      	movs	r1, #69	; 0x45
    23d0:	481f      	ldr	r0, [pc, #124]	; (2450 <bus_fault.constprop.0+0x98>)
    23d2:	f005 fdea 	bl	7faa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    23d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23d8:	051a      	lsls	r2, r3, #20
    23da:	d503      	bpl.n	23e4 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    23dc:	2145      	movs	r1, #69	; 0x45
    23de:	481d      	ldr	r0, [pc, #116]	; (2454 <bus_fault.constprop.0+0x9c>)
    23e0:	f005 fde3 	bl	7faa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    23e4:	4c18      	ldr	r4, [pc, #96]	; (2448 <bus_fault.constprop.0+0x90>)
    23e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23e8:	059b      	lsls	r3, r3, #22
    23ea:	d510      	bpl.n	240e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    23ec:	481a      	ldr	r0, [pc, #104]	; (2458 <bus_fault.constprop.0+0xa0>)
    23ee:	2145      	movs	r1, #69	; 0x45
    23f0:	f005 fddb 	bl	7faa <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    23f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    23f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23f8:	0418      	lsls	r0, r3, #16
    23fa:	d508      	bpl.n	240e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    23fc:	2145      	movs	r1, #69	; 0x45
    23fe:	4817      	ldr	r0, [pc, #92]	; (245c <bus_fault.constprop.0+0xa4>)
    2400:	f005 fdd3 	bl	7faa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2404:	b11e      	cbz	r6, 240e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    240c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    240e:	4c0e      	ldr	r4, [pc, #56]	; (2448 <bus_fault.constprop.0+0x90>)
    2410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2412:	0559      	lsls	r1, r3, #21
    2414:	d503      	bpl.n	241e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2416:	2145      	movs	r1, #69	; 0x45
    2418:	4811      	ldr	r0, [pc, #68]	; (2460 <bus_fault.constprop.0+0xa8>)
    241a:	f005 fdc6 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    241e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2420:	05da      	lsls	r2, r3, #23
    2422:	d50b      	bpl.n	243c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2424:	2145      	movs	r1, #69	; 0x45
    2426:	480f      	ldr	r0, [pc, #60]	; (2464 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2428:	f005 fdbf 	bl	7faa <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    242c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    242e:	4a06      	ldr	r2, [pc, #24]	; (2448 <bus_fault.constprop.0+0x90>)
    2430:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2432:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2436:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2438:	7028      	strb	r0, [r5, #0]
}
    243a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    243c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    243e:	049b      	lsls	r3, r3, #18
    2440:	d5f4      	bpl.n	242c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2442:	2145      	movs	r1, #69	; 0x45
    2444:	4808      	ldr	r0, [pc, #32]	; (2468 <bus_fault.constprop.0+0xb0>)
    2446:	e7ef      	b.n	2428 <bus_fault.constprop.0+0x70>
    2448:	e000ed00 	.word	0xe000ed00
    244c:	00009c76 	.word	0x00009c76
    2450:	00009c91 	.word	0x00009c91
    2454:	00009ca7 	.word	0x00009ca7
    2458:	00009cbf 	.word	0x00009cbf
    245c:	00009cdd 	.word	0x00009cdd
    2460:	00009cf7 	.word	0x00009cf7
    2464:	00009d17 	.word	0x00009d17
    2468:	00009d34 	.word	0x00009d34

0000246c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    246c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    246e:	4c26      	ldr	r4, [pc, #152]	; (2508 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2470:	4606      	mov	r6, r0
    2472:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2474:	4825      	ldr	r0, [pc, #148]	; (250c <mem_manage_fault.constprop.0+0xa0>)
    2476:	2145      	movs	r1, #69	; 0x45
    2478:	f005 fd97 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    247c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    247e:	06d8      	lsls	r0, r3, #27
    2480:	d503      	bpl.n	248a <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2482:	2145      	movs	r1, #69	; 0x45
    2484:	4822      	ldr	r0, [pc, #136]	; (2510 <mem_manage_fault.constprop.0+0xa4>)
    2486:	f005 fd90 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    248a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    248c:	0719      	lsls	r1, r3, #28
    248e:	d503      	bpl.n	2498 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2490:	2145      	movs	r1, #69	; 0x45
    2492:	4820      	ldr	r0, [pc, #128]	; (2514 <mem_manage_fault.constprop.0+0xa8>)
    2494:	f005 fd89 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2498:	4c1b      	ldr	r4, [pc, #108]	; (2508 <mem_manage_fault.constprop.0+0x9c>)
    249a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    249c:	079a      	lsls	r2, r3, #30
    249e:	d510      	bpl.n	24c2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    24a0:	2145      	movs	r1, #69	; 0x45
    24a2:	481d      	ldr	r0, [pc, #116]	; (2518 <mem_manage_fault.constprop.0+0xac>)
    24a4:	f005 fd81 	bl	7faa <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    24a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ac:	061b      	lsls	r3, r3, #24
    24ae:	d508      	bpl.n	24c2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    24b0:	2145      	movs	r1, #69	; 0x45
    24b2:	481a      	ldr	r0, [pc, #104]	; (251c <mem_manage_fault.constprop.0+0xb0>)
    24b4:	f005 fd79 	bl	7faa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    24b8:	b11e      	cbz	r6, 24c2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    24c0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24c2:	4c11      	ldr	r4, [pc, #68]	; (2508 <mem_manage_fault.constprop.0+0x9c>)
    24c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24c6:	07de      	lsls	r6, r3, #31
    24c8:	d503      	bpl.n	24d2 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    24ca:	2145      	movs	r1, #69	; 0x45
    24cc:	4814      	ldr	r0, [pc, #80]	; (2520 <mem_manage_fault.constprop.0+0xb4>)
    24ce:	f005 fd6c 	bl	7faa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24d4:	0698      	lsls	r0, r3, #26
    24d6:	d503      	bpl.n	24e0 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    24d8:	2145      	movs	r1, #69	; 0x45
    24da:	4812      	ldr	r0, [pc, #72]	; (2524 <mem_manage_fault.constprop.0+0xb8>)
    24dc:	f005 fd65 	bl	7faa <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    24e0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24e2:	4b09      	ldr	r3, [pc, #36]	; (2508 <mem_manage_fault.constprop.0+0x9c>)
    24e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24e6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24e8:	bf58      	it	pl
    24ea:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ee:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    24f0:	bf42      	ittt	mi
    24f2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    24f4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    24f8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24fc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2500:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2502:	7028      	strb	r0, [r5, #0]
}
    2504:	bd70      	pop	{r4, r5, r6, pc}
    2506:	bf00      	nop
    2508:	e000ed00 	.word	0xe000ed00
    250c:	00009d68 	.word	0x00009d68
    2510:	00009d83 	.word	0x00009d83
    2514:	00009ca7 	.word	0x00009ca7
    2518:	00009dbb 	.word	0x00009dbb
    251c:	00009dd8 	.word	0x00009dd8
    2520:	00009df3 	.word	0x00009df3
    2524:	00009d34 	.word	0x00009d34

00002528 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    252c:	4b5c      	ldr	r3, [pc, #368]	; (26a0 <z_arm_fault+0x178>)
{
    252e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2530:	685f      	ldr	r7, [r3, #4]
    2532:	2600      	movs	r6, #0
{
    2534:	b08a      	sub	sp, #40	; 0x28
    2536:	f3c7 0408 	ubfx	r4, r7, #0, #9
    253a:	f386 8811 	msr	BASEPRI, r6
    253e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2542:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2546:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    254a:	d107      	bne.n	255c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    254c:	f002 030c 	and.w	r3, r2, #12
    2550:	2b08      	cmp	r3, #8
    2552:	d114      	bne.n	257e <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2554:	2145      	movs	r1, #69	; 0x45
    2556:	4853      	ldr	r0, [pc, #332]	; (26a4 <z_arm_fault+0x17c>)
    2558:	f005 fd27 	bl	7faa <z_log_minimal_printk>
	*nested_exc = false;
    255c:	2600      	movs	r6, #0
		return NULL;
    255e:	4635      	mov	r5, r6
	*recoverable = false;
    2560:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2564:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2566:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    256a:	2b09      	cmp	r3, #9
    256c:	f200 8086 	bhi.w	267c <z_arm_fault+0x154>
    2570:	e8df f003 	tbb	[pc, r3]
    2574:	757d790a 	.word	0x757d790a
    2578:	84848484 	.word	0x84848484
    257c:	8184      	.short	0x8184
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    257e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2580:	bf4c      	ite	mi
    2582:	460d      	movmi	r5, r1
			*nested_exc = true;
    2584:	2601      	movpl	r6, #1
    2586:	e7eb      	b.n	2560 <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2588:	2145      	movs	r1, #69	; 0x45
    258a:	4847      	ldr	r0, [pc, #284]	; (26a8 <z_arm_fault+0x180>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    258c:	4c44      	ldr	r4, [pc, #272]	; (26a0 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    258e:	f005 fd0c 	bl	7faa <z_log_minimal_printk>
	*recoverable = false;
    2592:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2598:	079a      	lsls	r2, r3, #30
    259a:	d505      	bpl.n	25a8 <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    259c:	2145      	movs	r1, #69	; 0x45
    259e:	4843      	ldr	r0, [pc, #268]	; (26ac <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    25a0:	f005 fd03 	bl	7faa <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    25a4:	2400      	movs	r4, #0
    25a6:	e032      	b.n	260e <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    25a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25aa:	2b00      	cmp	r3, #0
    25ac:	da02      	bge.n	25b4 <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    25ae:	2145      	movs	r1, #69	; 0x45
    25b0:	483f      	ldr	r0, [pc, #252]	; (26b0 <z_arm_fault+0x188>)
    25b2:	e7f5      	b.n	25a0 <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    25b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25b6:	005b      	lsls	r3, r3, #1
    25b8:	d5f4      	bpl.n	25a4 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    25ba:	2145      	movs	r1, #69	; 0x45
    25bc:	483d      	ldr	r0, [pc, #244]	; (26b4 <z_arm_fault+0x18c>)
    25be:	f005 fcf4 	bl	7faa <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    25c2:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    25c4:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    25c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25ca:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    25cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25d0:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    25d4:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    25d6:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    25da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    25de:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    25e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25e4:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    25e8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    25ec:	429a      	cmp	r2, r3
    25ee:	d008      	beq.n	2602 <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    25f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25f2:	b2db      	uxtb	r3, r3
    25f4:	b32b      	cbz	r3, 2642 <z_arm_fault+0x11a>
			reason = mem_manage_fault(esf, 1, recoverable);
    25f6:	2001      	movs	r0, #1
    25f8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    25fc:	f7ff ff36 	bl	246c <mem_manage_fault.constprop.0>
    2600:	e02f      	b.n	2662 <z_arm_fault+0x13a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2602:	2145      	movs	r1, #69	; 0x45
    2604:	682a      	ldr	r2, [r5, #0]
    2606:	482c      	ldr	r0, [pc, #176]	; (26b8 <z_arm_fault+0x190>)
    2608:	f005 fccf 	bl	7faa <z_log_minimal_printk>
			reason = esf->basic.r0;
    260c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    260e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2612:	b99b      	cbnz	r3, 263c <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2614:	2220      	movs	r2, #32
    2616:	4629      	mov	r1, r5
    2618:	a802      	add	r0, sp, #8
    261a:	f005 fd8c 	bl	8136 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2620:	2e00      	cmp	r6, #0
    2622:	d038      	beq.n	2696 <z_arm_fault+0x16e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2624:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2628:	b922      	cbnz	r2, 2634 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    262a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    262e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2632:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2634:	4620      	mov	r0, r4
    2636:	a902      	add	r1, sp, #8
    2638:	f7ff fd38 	bl	20ac <z_arm_fatal_error>
}
    263c:	b00a      	add	sp, #40	; 0x28
    263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2644:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2648:	d005      	beq.n	2656 <z_arm_fault+0x12e>
			reason = bus_fault(esf, 1, recoverable);
    264a:	2001      	movs	r0, #1
    264c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2650:	f7ff feb2 	bl	23b8 <bus_fault.constprop.0>
    2654:	e005      	b.n	2662 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    265c:	d3a2      	bcc.n	25a4 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    265e:	f7ff fe57 	bl	2310 <usage_fault.constprop.0>
    2662:	4604      	mov	r4, r0
    2664:	e7d3      	b.n	260e <z_arm_fault+0xe6>
		reason = mem_manage_fault(esf, 0, recoverable);
    2666:	2000      	movs	r0, #0
    2668:	f10d 0107 	add.w	r1, sp, #7
    266c:	e7c6      	b.n	25fc <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    266e:	2000      	movs	r0, #0
    2670:	f10d 0107 	add.w	r1, sp, #7
    2674:	e7ec      	b.n	2650 <z_arm_fault+0x128>
	PR_FAULT_INFO(
    2676:	2145      	movs	r1, #69	; 0x45
    2678:	4810      	ldr	r0, [pc, #64]	; (26bc <z_arm_fault+0x194>)
    267a:	e791      	b.n	25a0 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    267c:	4910      	ldr	r1, [pc, #64]	; (26c0 <z_arm_fault+0x198>)
    267e:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    2682:	4a10      	ldr	r2, [pc, #64]	; (26c4 <z_arm_fault+0x19c>)
    2684:	4810      	ldr	r0, [pc, #64]	; (26c8 <z_arm_fault+0x1a0>)
    2686:	bf08      	it	eq
    2688:	460a      	moveq	r2, r1
    268a:	f1a4 0310 	sub.w	r3, r4, #16
    268e:	2145      	movs	r1, #69	; 0x45
    2690:	f005 fc8b 	bl	7faa <z_log_minimal_printk>
}
    2694:	e786      	b.n	25a4 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2696:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    269a:	f023 0301 	bic.w	r3, r3, #1
    269e:	e7c8      	b.n	2632 <z_arm_fault+0x10a>
    26a0:	e000ed00 	.word	0xe000ed00
    26a4:	00009e45 	.word	0x00009e45
    26a8:	00009e75 	.word	0x00009e75
    26ac:	00009e91 	.word	0x00009e91
    26b0:	00009eb7 	.word	0x00009eb7
    26b4:	00009eca 	.word	0x00009eca
    26b8:	00009eee 	.word	0x00009eee
    26bc:	00009f0f 	.word	0x00009f0f
    26c0:	00009e17 	.word	0x00009e17
    26c4:	00009e2c 	.word	0x00009e2c
    26c8:	00009f38 	.word	0x00009f38

000026cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    26cc:	4a02      	ldr	r2, [pc, #8]	; (26d8 <z_arm_fault_init+0xc>)
    26ce:	6953      	ldr	r3, [r2, #20]
    26d0:	f043 0310 	orr.w	r3, r3, #16
    26d4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    26d6:	4770      	bx	lr
    26d8:	e000ed00 	.word	0xe000ed00

000026dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    26dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    26e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    26e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    26e6:	4672      	mov	r2, lr
	bl z_arm_fault
    26e8:	f7ff ff1e 	bl	2528 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    26ec:	bd01      	pop	{r0, pc}
    26ee:	bf00      	nop

000026f0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    26f0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26f2:	2120      	movs	r1, #32
    26f4:	4803      	ldr	r0, [pc, #12]	; (2704 <z_arm_interrupt_init+0x14>)
    26f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    26f8:	3301      	adds	r3, #1
    26fa:	2b45      	cmp	r3, #69	; 0x45
    26fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2700:	d1f9      	bne.n	26f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2702:	4770      	bx	lr
    2704:	e000e100 	.word	0xe000e100

00002708 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2708:	2000      	movs	r0, #0
    msr CONTROL, r0
    270a:	f380 8814 	msr	CONTROL, r0
    isb
    270e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2712:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2714:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2718:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    271c:	f7ff fb4e 	bl	1dbc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2720:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2722:	490e      	ldr	r1, [pc, #56]	; (275c <__start+0x54>)
    str r0, [r1]
    2724:	6008      	str	r0, [r1, #0]
    dsb
    2726:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    272a:	480d      	ldr	r0, [pc, #52]	; (2760 <__start+0x58>)
    msr msp, r0
    272c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2730:	f000 f83e 	bl	27b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2734:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2736:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    273a:	480a      	ldr	r0, [pc, #40]	; (2764 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    273c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2740:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2742:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2746:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    274a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    274c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    274e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2752:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2756:	f7ff fd21 	bl	219c <z_arm_prep_c>
    275a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    275c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2760:	200480b8 	.word	0x200480b8
    ldr r0, =z_interrupt_stacks
    2764:	20044f78 	.word	0x20044f78

00002768 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2768:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    276c:	4905      	ldr	r1, [pc, #20]	; (2784 <sys_arch_reboot+0x1c>)
    276e:	4b06      	ldr	r3, [pc, #24]	; (2788 <sys_arch_reboot+0x20>)
    2770:	68ca      	ldr	r2, [r1, #12]
    2772:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2776:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2778:	60cb      	str	r3, [r1, #12]
    277a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    277e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2780:	e7fd      	b.n	277e <sys_arch_reboot+0x16>
    2782:	bf00      	nop
    2784:	e000ed00 	.word	0xe000ed00
    2788:	05fa0004 	.word	0x05fa0004

0000278c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    278c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    278e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2790:	4906      	ldr	r1, [pc, #24]	; (27ac <z_arm_clear_arm_mpu_config+0x20>)
    2792:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    2796:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    279a:	4293      	cmp	r3, r2
    279c:	db00      	blt.n	27a0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    279e:	4770      	bx	lr
  mpu->RNR = rnr;
    27a0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    27a4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    27a8:	3301      	adds	r3, #1
    27aa:	e7f6      	b.n	279a <z_arm_clear_arm_mpu_config+0xe>
    27ac:	e000ed00 	.word	0xe000ed00

000027b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    27b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    27b2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    27b4:	2400      	movs	r4, #0
    27b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    27ba:	f7ff ffe7 	bl	278c <z_arm_clear_arm_mpu_config>
    27be:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    27c0:	f04f 30ff 	mov.w	r0, #4294967295
    27c4:	4a0c      	ldr	r2, [pc, #48]	; (27f8 <z_arm_init_arch_hw_at_boot+0x48>)
    27c6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    27ca:	3301      	adds	r3, #1
    27cc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    27ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    27d2:	d1f8      	bne.n	27c6 <z_arm_init_arch_hw_at_boot+0x16>
    27d4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    27d6:	f04f 30ff 	mov.w	r0, #4294967295
    27da:	4a07      	ldr	r2, [pc, #28]	; (27f8 <z_arm_init_arch_hw_at_boot+0x48>)
    27dc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    27e0:	3301      	adds	r3, #1
    27e2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    27e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    27e8:	d1f8      	bne.n	27dc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    27ea:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    27ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27f0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    27f4:	bd10      	pop	{r4, pc}
    27f6:	bf00      	nop
    27f8:	e000e100 	.word	0xe000e100

000027fc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    27fc:	4b08      	ldr	r3, [pc, #32]	; (2820 <CONFIG_MAIN_STACK_SIZE+0x20>)
    27fe:	689b      	ldr	r3, [r3, #8]
    2800:	4283      	cmp	r3, r0
    2802:	d10b      	bne.n	281c <CONFIG_MAIN_STACK_SIZE+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2804:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2808:	b143      	cbz	r3, 281c <CONFIG_MAIN_STACK_SIZE+0x1c>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    280a:	4b06      	ldr	r3, [pc, #24]	; (2824 <CONFIG_MAIN_STACK_SIZE+0x24>)
    280c:	685a      	ldr	r2, [r3, #4]
    280e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2812:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    281a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    281c:	f003 be00 	b.w	6420 <z_thread_abort>
    2820:	20004c60 	.word	0x20004c60
    2824:	e000ed00 	.word	0xe000ed00

00002828 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    282a:	4c09      	ldr	r4, [pc, #36]	; (2850 <z_arm_configure_static_mpu_regions+0x28>)
    282c:	4a09      	ldr	r2, [pc, #36]	; (2854 <z_arm_configure_static_mpu_regions+0x2c>)
    282e:	4623      	mov	r3, r4
    2830:	2101      	movs	r1, #1
    2832:	4809      	ldr	r0, [pc, #36]	; (2858 <z_arm_configure_static_mpu_regions+0x30>)
    2834:	f000 f924 	bl	2a80 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2838:	2300      	movs	r3, #0
    283a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    283c:	4b07      	ldr	r3, [pc, #28]	; (285c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    283e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2840:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2842:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2844:	9301      	str	r3, [sp, #4]
    2846:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2848:	f000 f924 	bl	2a94 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    284c:	b004      	add	sp, #16
    284e:	bd10      	pop	{r4, pc}
    2850:	20070000 	.word	0x20070000
    2854:	20002000 	.word	0x20002000
    2858:	00009398 	.word	0x00009398
    285c:	20002218 	.word	0x20002218

00002860 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2860:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    2862:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2864:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2866:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    286a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    286e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2870:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2872:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2874:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    2878:	4905      	ldr	r1, [pc, #20]	; (2890 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    287a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    287e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    2882:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    2886:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    288a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    288e:	bd10      	pop	{r4, pc}
    2890:	e000ed00 	.word	0xe000ed00

00002894 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2894:	b530      	push	{r4, r5, lr}
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    2896:	680c      	ldr	r4, [r1, #0]
#if defined(CONFIG_ARMV7_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
    2898:	684b      	ldr	r3, [r1, #4]
{
    289a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    289c:	890a      	ldrh	r2, [r1, #8]
    289e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    28a0:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28a2:	3b01      	subs	r3, #1
    28a4:	f024 041f 	bic.w	r4, r4, #31
    28a8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    28aa:	f002 021f 	and.w	r2, r2, #31
    28ae:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28b2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    28b6:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    28b8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    28ba:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    28be:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    28c0:	d909      	bls.n	28d6 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    28c2:	4602      	mov	r2, r0
    28c4:	2145      	movs	r1, #69	; 0x45
    28c6:	4806      	ldr	r0, [pc, #24]	; (28e0 <mpu_configure_region+0x4c>)
    28c8:	f005 fb6f 	bl	7faa <z_log_minimal_printk>
    28cc:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    28d0:	4620      	mov	r0, r4
    28d2:	b005      	add	sp, #20
    28d4:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    28d6:	4669      	mov	r1, sp
    28d8:	f7ff ffc2 	bl	2860 <region_init>
	return region_allocate_and_init(index,
    28dc:	e7f8      	b.n	28d0 <mpu_configure_region+0x3c>
    28de:	bf00      	nop
    28e0:	00009f54 	.word	0x00009f54

000028e4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    28e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e8:	4689      	mov	r9, r1
    28ea:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    28ec:	4606      	mov	r6, r0
    28ee:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    28f2:	4d54      	ldr	r5, [pc, #336]	; (2a44 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    28f4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    28f6:	45c8      	cmp	r8, r9
    28f8:	da27      	bge.n	294a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    28fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
    28fe:	f1ba 0f00 	cmp.w	sl, #0
    2902:	d044      	beq.n	298e <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
    2904:	f1ba 0f1f 	cmp.w	sl, #31
    2908:	d918      	bls.n	293c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    290a:	f01a 0f1f 	tst.w	sl, #31
    290e:	d115      	bne.n	293c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    2910:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    2914:	f01b 0f1f 	tst.w	fp, #31
    2918:	d110      	bne.n	293c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    291a:	4658      	mov	r0, fp
    291c:	f005 fbd4 	bl	80c8 <arm_cmse_mpu_region_get>
    2920:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2922:	eb0a 000b 	add.w	r0, sl, fp
    2926:	3801      	subs	r0, #1
    2928:	f005 fbce 	bl	80c8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    292c:	4287      	cmp	r7, r0
    292e:	d010      	beq.n	2952 <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    2930:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2934:	463a      	mov	r2, r7
    2936:	2145      	movs	r1, #69	; 0x45
    2938:	4843      	ldr	r0, [pc, #268]	; (2a48 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    293a:	e002      	b.n	2942 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    293c:	4642      	mov	r2, r8
    293e:	2145      	movs	r1, #69	; 0x45
    2940:	4842      	ldr	r0, [pc, #264]	; (2a4c <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
    2942:	f005 fb32 	bl	7faa <z_log_minimal_printk>
			return -EINVAL;
    2946:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    294a:	4620      	mov	r0, r4
    294c:	b005      	add	sp, #20
    294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2952:	f117 0f16 	cmn.w	r7, #22
    2956:	d0ed      	beq.n	2934 <mpu_configure_regions_and_partition.constprop.0+0x50>
    2958:	42bc      	cmp	r4, r7
    295a:	ddeb      	ble.n	2934 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
    295c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    2960:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    2964:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    2968:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    296c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2970:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2974:	e9d6 3200 	ldrd	r3, r2, [r6]
    2978:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    297a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    297c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2980:	d11d      	bne.n	29be <mpu_configure_regions_and_partition.constprop.0+0xda>
    2982:	45d3      	cmp	fp, sl
    2984:	d107      	bne.n	2996 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
    2986:	4631      	mov	r1, r6
    2988:	b2f8      	uxtb	r0, r7
    298a:	f7ff ff83 	bl	2894 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    298e:	f108 0801 	add.w	r8, r8, #1
    2992:	360c      	adds	r6, #12
    2994:	e7af      	b.n	28f6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2996:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    2998:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    299c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    29a0:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    29a4:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    29a8:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    29aa:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    29ae:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    29b0:	f7ff ff70 	bl	2894 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    29b4:	f110 0f16 	cmn.w	r0, #22
    29b8:	d0c5      	beq.n	2946 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    29ba:	1c44      	adds	r4, r0, #1
    29bc:	e7e7      	b.n	298e <mpu_configure_regions_and_partition.constprop.0+0xaa>
	MPU->RNR = rnr;
    29be:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
    29c2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    29c6:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    29c8:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    29cc:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    29d0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    29d2:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    29d4:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    29d6:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    29d8:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    29dc:	d0e8      	beq.n	29b0 <mpu_configure_regions_and_partition.constprop.0+0xcc>
				mpu_configure_region(reg_index, &regions[i]);
    29de:	f7ff ff59 	bl	2894 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    29e2:	f110 0f16 	cmn.w	r0, #22
    29e6:	d0ae      	beq.n	2946 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = rnr;
    29e8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
    29ec:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    29f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    29f4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
    29f8:	f362 0304 	bfi	r3, r2, #0, #5
    29fc:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    2a00:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    2a04:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2a08:	085b      	lsrs	r3, r3, #1
    2a0a:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    2a0e:	e9d6 3100 	ldrd	r3, r1, [r6]
    2a12:	440b      	add	r3, r1
    2a14:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2a16:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    2a1a:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2a1c:	445b      	add	r3, fp
    2a1e:	eba3 030a 	sub.w	r3, r3, sl
    2a22:	b2c0      	uxtb	r0, r0
    2a24:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2a28:	2807      	cmp	r0, #7
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    2a2a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    2a2e:	9303      	str	r3, [sp, #12]
    2a30:	d903      	bls.n	2a3a <mpu_configure_regions_and_partition.constprop.0+0x156>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2a32:	4602      	mov	r2, r0
    2a34:	2145      	movs	r1, #69	; 0x45
    2a36:	4806      	ldr	r0, [pc, #24]	; (2a50 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    2a38:	e783      	b.n	2942 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    2a3a:	4669      	mov	r1, sp
    2a3c:	f7ff ff10 	bl	2860 <region_init>
    2a40:	e7bb      	b.n	29ba <mpu_configure_regions_and_partition.constprop.0+0xd6>
    2a42:	bf00      	nop
    2a44:	e000ed00 	.word	0xe000ed00
    2a48:	00009fa7 	.word	0x00009fa7
    2a4c:	00009f7f 	.word	0x00009f7f
    2a50:	00009f54 	.word	0x00009f54

00002a54 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2a54:	2205      	movs	r2, #5
    2a56:	4b04      	ldr	r3, [pc, #16]	; (2a68 <arm_core_mpu_enable+0x14>)
    2a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a60:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2a64:	4770      	bx	lr
    2a66:	bf00      	nop
    2a68:	e000ed00 	.word	0xe000ed00

00002a6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2a6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2a70:	2200      	movs	r2, #0
    2a72:	4b02      	ldr	r3, [pc, #8]	; (2a7c <arm_core_mpu_disable+0x10>)
    2a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	e000ed00 	.word	0xe000ed00

00002a80 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2a80:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2a82:	4c03      	ldr	r4, [pc, #12]	; (2a90 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2a84:	7822      	ldrb	r2, [r4, #0]
    2a86:	f7ff ff2d 	bl	28e4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2a8a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2a8c:	bd10      	pop	{r4, pc}
    2a8e:	bf00      	nop
    2a90:	20004f6c 	.word	0x20004f6c

00002a94 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    2a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a98:	4d29      	ldr	r5, [pc, #164]	; (2b40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    2a9a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    2a9c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2a9e:	f04f 0800 	mov.w	r8, #0
    2aa2:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    2aa4:	4f27      	ldr	r7, [pc, #156]	; (2b44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2aa6:	45d0      	cmp	r8, sl
    2aa8:	da1b      	bge.n	2ae2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    2aaa:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2aae:	f1b9 0f00 	cmp.w	r9, #0
    2ab2:	d03f      	beq.n	2b34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2ab4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ab6:	4608      	mov	r0, r1
    2ab8:	9101      	str	r1, [sp, #4]
    2aba:	f005 fb05 	bl	80c8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2abe:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ac0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2ac2:	eb09 0001 	add.w	r0, r9, r1
    2ac6:	3801      	subs	r0, #1
    2ac8:	f005 fafe 	bl	80c8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2acc:	4284      	cmp	r4, r0
    2ace:	f04f 0214 	mov.w	r2, #20
    2ad2:	4b1d      	ldr	r3, [pc, #116]	; (2b48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    2ad4:	d008      	beq.n	2ae8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    2ad6:	fb02 f308 	mul.w	r3, r2, r8
    2ada:	f06f 0215 	mvn.w	r2, #21
    2ade:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2ae2:	b003      	add	sp, #12
    2ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2ae8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2aec:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2aee:	d0f8      	beq.n	2ae2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2af0:	7819      	ldrb	r1, [r3, #0]
    2af2:	42a1      	cmp	r1, r4
    2af4:	ddf5      	ble.n	2ae2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    2af6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    2afa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    2afe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    2b02:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    2b06:	f100 0108 	add.w	r1, r0, #8
    2b0a:	7b00      	ldrb	r0, [r0, #12]
    2b0c:	f364 0004 	bfi	r0, r4, #0, #5
    2b10:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    2b12:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    2b16:	790c      	ldrb	r4, [r1, #4]
    2b18:	0840      	lsrs	r0, r0, #1
    2b1a:	f360 1447 	bfi	r4, r0, #5, #3
    2b1e:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    2b20:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    2b24:	f021 011f 	bic.w	r1, r1, #31
    2b28:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    2b2a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    2b2e:	f021 011f 	bic.w	r1, r1, #31
    2b32:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2b34:	f108 0801 	add.w	r8, r8, #1
    2b38:	3514      	adds	r5, #20
    2b3a:	360c      	adds	r6, #12
    2b3c:	e7b3      	b.n	2aa6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2b3e:	bf00      	nop
    2b40:	20004b1c 	.word	0x20004b1c
    2b44:	e000ed00 	.word	0xe000ed00
    2b48:	20004f6c 	.word	0x20004f6c

00002b4c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2b4c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2b4e:	4d0e      	ldr	r5, [pc, #56]	; (2b88 <z_arm_mpu_init+0x3c>)
    2b50:	682c      	ldr	r4, [r5, #0]
    2b52:	2c08      	cmp	r4, #8
    2b54:	d815      	bhi.n	2b82 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2b56:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    2b58:	f7ff ff88 	bl	2a6c <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    2b5c:	4b0b      	ldr	r3, [pc, #44]	; (2b8c <z_arm_mpu_init+0x40>)
    2b5e:	4a0c      	ldr	r2, [pc, #48]	; (2b90 <z_arm_mpu_init+0x44>)
    2b60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2b64:	4284      	cmp	r4, r0
    2b66:	d105      	bne.n	2b74 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2b68:	4b0a      	ldr	r3, [pc, #40]	; (2b94 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2b6a:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    2b6c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2b6e:	f7ff ff71 	bl	2a54 <arm_core_mpu_enable>
}
    2b72:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2b74:	6869      	ldr	r1, [r5, #4]
    2b76:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2b7a:	f7ff fe71 	bl	2860 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2b7e:	3001      	adds	r0, #1
    2b80:	e7f0      	b.n	2b64 <z_arm_mpu_init+0x18>
		return -1;
    2b82:	f04f 30ff 	mov.w	r0, #4294967295
    2b86:	e7f4      	b.n	2b72 <z_arm_mpu_init+0x26>
    2b88:	000093a4 	.word	0x000093a4
    2b8c:	e000ed00 	.word	0xe000ed00
    2b90:	0044ffaa 	.word	0x0044ffaa
    2b94:	20004f6c 	.word	0x20004f6c

00002b98 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2b98:	4b01      	ldr	r3, [pc, #4]	; (2ba0 <__stdout_hook_install+0x8>)
    2b9a:	6018      	str	r0, [r3, #0]
}
    2b9c:	4770      	bx	lr
    2b9e:	bf00      	nop
    2ba0:	2000202c 	.word	0x2000202c

00002ba4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2ba4:	4b08      	ldr	r3, [pc, #32]	; (2bc8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2ba6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2ba8:	1ac3      	subs	r3, r0, r3
{
    2baa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2bac:	4907      	ldr	r1, [pc, #28]	; (2bcc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2bae:	109b      	asrs	r3, r3, #2
{
    2bb0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2bb2:	4359      	muls	r1, r3
    2bb4:	2240      	movs	r2, #64	; 0x40
    2bb6:	4806      	ldr	r0, [pc, #24]	; (2bd0 <onoff_stop+0x2c>)
    2bb8:	f005 faf0 	bl	819c <stop>
	notify(mgr, res);
    2bbc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2bbe:	4601      	mov	r1, r0
	notify(mgr, res);
    2bc0:	4620      	mov	r0, r4
}
    2bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2bc6:	4718      	bx	r3
    2bc8:	20004b44 	.word	0x20004b44
    2bcc:	b6db6db7 	.word	0xb6db6db7
    2bd0:	00008d78 	.word	0x00008d78

00002bd4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bd4:	2340      	movs	r3, #64	; 0x40
{
    2bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2bd8:	4c0b      	ldr	r4, [pc, #44]	; (2c08 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bda:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    2bdc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bde:	460b      	mov	r3, r1
{
    2be0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2be2:	490a      	ldr	r1, [pc, #40]	; (2c0c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    2be4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2be6:	4361      	muls	r1, r4
{
    2be8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2bea:	4a09      	ldr	r2, [pc, #36]	; (2c10 <onoff_start+0x3c>)
    2bec:	4809      	ldr	r0, [pc, #36]	; (2c14 <onoff_start+0x40>)
    2bee:	f005 fb01 	bl	81f4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2bf2:	1e01      	subs	r1, r0, #0
    2bf4:	da05      	bge.n	2c02 <onoff_start+0x2e>
		notify(mgr, err);
    2bf6:	4630      	mov	r0, r6
    2bf8:	462b      	mov	r3, r5
	}
}
    2bfa:	b002      	add	sp, #8
    2bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2c00:	4718      	bx	r3
}
    2c02:	b002      	add	sp, #8
    2c04:	bd70      	pop	{r4, r5, r6, pc}
    2c06:	bf00      	nop
    2c08:	20004b44 	.word	0x20004b44
    2c0c:	b6db6db7 	.word	0xb6db6db7
    2c10:	0000825f 	.word	0x0000825f
    2c14:	00008d78 	.word	0x00008d78

00002c18 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c1c:	2200      	movs	r2, #0
    2c1e:	2101      	movs	r1, #1
{
    2c20:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c22:	2005      	movs	r0, #5
    2c24:	f7ff faa0 	bl	2168 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2c28:	4811      	ldr	r0, [pc, #68]	; (2c70 <clk_init+0x58>)
    2c2a:	f001 febd 	bl	49a8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2c2e:	4b11      	ldr	r3, [pc, #68]	; (2c74 <clk_init+0x5c>)
    2c30:	4298      	cmp	r0, r3
    2c32:	d119      	bne.n	2c68 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2c34:	f005 fdcd 	bl	87d2 <nrfx_clock_enable>
    2c38:	2400      	movs	r4, #0
	return &data->mgr[type];
    2c3a:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c3e:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c40:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2c78 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    2c44:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c46:	4641      	mov	r1, r8
    2c48:	fb09 5004 	mla	r0, r9, r4, r5
    2c4c:	f005 f923 	bl	7e96 <onoff_manager_init>
		if (err < 0) {
    2c50:	2800      	cmp	r0, #0
    2c52:	db07      	blt.n	2c64 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c54:	2301      	movs	r3, #1
    2c56:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2c5a:	441c      	add	r4, r3
    2c5c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c5e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2c60:	d1f0      	bne.n	2c44 <clk_init+0x2c>
	}

	return 0;
    2c62:	2000      	movs	r0, #0
}
    2c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2c68:	f06f 0004 	mvn.w	r0, #4
    2c6c:	e7fa      	b.n	2c64 <clk_init+0x4c>
    2c6e:	bf00      	nop
    2c70:	00002cb1 	.word	0x00002cb1
    2c74:	0bad0000 	.word	0x0bad0000
    2c78:	000093cc 	.word	0x000093cc

00002c7c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2c7c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2c7e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2c80:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    2c82:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2c84:	434b      	muls	r3, r1
    2c86:	4808      	ldr	r0, [pc, #32]	; (2ca8 <clkstarted_handle.constprop.0+0x2c>)
    2c88:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    2c8a:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    2c8c:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    2c90:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2c92:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    2c94:	f005 fa6f 	bl	8176 <set_on_state>
	if (callback) {
    2c98:	b12d      	cbz	r5, 2ca6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2c9a:	4632      	mov	r2, r6
    2c9c:	462b      	mov	r3, r5
}
    2c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2ca2:	4802      	ldr	r0, [pc, #8]	; (2cac <clkstarted_handle.constprop.0+0x30>)
    2ca4:	4718      	bx	r3
}
    2ca6:	bd70      	pop	{r4, r5, r6, pc}
    2ca8:	20004b44 	.word	0x20004b44
    2cac:	00008d78 	.word	0x00008d78

00002cb0 <clock_event_handler>:
	switch (event) {
    2cb0:	2805      	cmp	r0, #5
    2cb2:	d811      	bhi.n	2cd8 <clock_event_handler+0x28>
    2cb4:	e8df f000 	tbb	[pc, r0]
    2cb8:	10100e03 	.word	0x10100e03
    2cbc:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2cbe:	4b07      	ldr	r3, [pc, #28]	; (2cdc <clock_event_handler+0x2c>)
    2cc0:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2cc2:	f010 0007 	ands.w	r0, r0, #7
    2cc6:	d107      	bne.n	2cd8 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2cc8:	f7ff bfd8 	b.w	2c7c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    2ccc:	2002      	movs	r0, #2
    2cce:	e7fb      	b.n	2cc8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    2cd0:	2003      	movs	r0, #3
    2cd2:	e7f9      	b.n	2cc8 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2cd4:	2001      	movs	r0, #1
    2cd6:	e7f7      	b.n	2cc8 <clock_event_handler+0x18>
}
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	20004b44 	.word	0x20004b44

00002ce0 <generic_hfclk_start>:
{
    2ce0:	b508      	push	{r3, lr}
	__asm__ volatile(
    2ce2:	f04f 0320 	mov.w	r3, #32
    2ce6:	f3ef 8111 	mrs	r1, BASEPRI
    2cea:	f383 8812 	msr	BASEPRI_MAX, r3
    2cee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2cf2:	4a12      	ldr	r2, [pc, #72]	; (2d3c <generic_hfclk_start+0x5c>)
    2cf4:	6813      	ldr	r3, [r2, #0]
    2cf6:	f043 0002 	orr.w	r0, r3, #2
    2cfa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2cfc:	07da      	lsls	r2, r3, #31
    2cfe:	d408      	bmi.n	2d12 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2d00:	f381 8811 	msr	BASEPRI, r1
    2d04:	f3bf 8f6f 	isb	sy
}
    2d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2d0c:	2001      	movs	r0, #1
    2d0e:	f005 bd72 	b.w	87f6 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2d1e:	07d3      	lsls	r3, r2, #31
    2d20:	d5ee      	bpl.n	2d00 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2d22:	4807      	ldr	r0, [pc, #28]	; (2d40 <generic_hfclk_start+0x60>)
    2d24:	f005 fa27 	bl	8176 <set_on_state>
    2d28:	f381 8811 	msr	BASEPRI, r1
    2d2c:	f3bf 8f6f 	isb	sy
}
    2d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2d34:	2000      	movs	r0, #0
    2d36:	f7ff bfa1 	b.w	2c7c <clkstarted_handle.constprop.0>
    2d3a:	bf00      	nop
    2d3c:	20004be4 	.word	0x20004be4
    2d40:	20004bbc 	.word	0x20004bbc

00002d44 <api_blocking_start>:
{
    2d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d46:	2200      	movs	r2, #0
    2d48:	2301      	movs	r3, #1
    2d4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d4e:	466b      	mov	r3, sp
    2d50:	4a08      	ldr	r2, [pc, #32]	; (2d74 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d52:	f8cd d000 	str.w	sp, [sp]
    2d56:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d5a:	f005 fa79 	bl	8250 <api_start>
	if (err < 0) {
    2d5e:	2800      	cmp	r0, #0
    2d60:	db05      	blt.n	2d6e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2d66:	2300      	movs	r3, #0
    2d68:	4668      	mov	r0, sp
    2d6a:	f003 f849 	bl	5e00 <z_impl_k_sem_take>
}
    2d6e:	b005      	add	sp, #20
    2d70:	f85d fb04 	ldr.w	pc, [sp], #4
    2d74:	00008295 	.word	0x00008295

00002d78 <generic_hfclk_stop>:
{
    2d78:	b510      	push	{r4, lr}
	__asm__ volatile(
    2d7a:	f04f 0320 	mov.w	r3, #32
    2d7e:	f3ef 8411 	mrs	r4, BASEPRI
    2d82:	f383 8812 	msr	BASEPRI_MAX, r3
    2d86:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    2d8a:	4a07      	ldr	r2, [pc, #28]	; (2da8 <generic_hfclk_stop+0x30>)
    2d8c:	6813      	ldr	r3, [r2, #0]
    2d8e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    2d92:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    2d94:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    2d96:	d402      	bmi.n	2d9e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2d98:	2001      	movs	r0, #1
    2d9a:	f005 fd87 	bl	88ac <nrfx_clock_stop>
	__asm__ volatile(
    2d9e:	f384 8811 	msr	BASEPRI, r4
    2da2:	f3bf 8f6f 	isb	sy
}
    2da6:	bd10      	pop	{r4, pc}
    2da8:	20004be4 	.word	0x20004be4

00002dac <z_nrf_clock_control_lf_on>:
{
    2dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2dae:	2201      	movs	r2, #1
    2db0:	4606      	mov	r6, r0
    2db2:	4926      	ldr	r1, [pc, #152]	; (2e4c <z_nrf_clock_control_lf_on+0xa0>)
    2db4:	e8d1 3fef 	ldaex	r3, [r1]
    2db8:	e8c1 2fe0 	stlex	r0, r2, [r1]
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d1f9      	bne.n	2db4 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2dc0:	b933      	cbnz	r3, 2dd0 <z_nrf_clock_control_lf_on+0x24>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2dc2:	4923      	ldr	r1, [pc, #140]	; (2e50 <z_nrf_clock_control_lf_on+0xa4>)
		err = onoff_request(mgr, &cli);
    2dc4:	4823      	ldr	r0, [pc, #140]	; (2e54 <z_nrf_clock_control_lf_on+0xa8>)
    2dc6:	604b      	str	r3, [r1, #4]
    2dc8:	60cb      	str	r3, [r1, #12]
    2dca:	608a      	str	r2, [r1, #8]
    2dcc:	f005 f876 	bl	7ebc <onoff_request>
	switch (start_mode) {
    2dd0:	1e73      	subs	r3, r6, #1
    2dd2:	2b01      	cmp	r3, #1
    2dd4:	d81f      	bhi.n	2e16 <z_nrf_clock_control_lf_on+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2dd6:	f005 fe49 	bl	8a6c <k_is_in_isr>
    2dda:	4604      	mov	r4, r0
    2ddc:	b9e0      	cbnz	r0, 2e18 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
    2dde:	4b1e      	ldr	r3, [pc, #120]	; (2e58 <z_nrf_clock_control_lf_on+0xac>)
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	b1cb      	cbz	r3, 2e18 <z_nrf_clock_control_lf_on+0x6c>
    p_reg->INTENCLR = mask;
    2de4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2de8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2dea:	4605      	mov	r5, r0
    2dec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2df0:	f04f 2750 	mov.w	r7, #1342197760	; 0x50005000
    2df4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2df8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    2dfc:	03d2      	lsls	r2, r2, #15
    2dfe:	d515      	bpl.n	2e2c <z_nrf_clock_control_lf_on+0x80>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2e00:	f003 0303 	and.w	r3, r3, #3
    2e04:	2b01      	cmp	r3, #1
    2e06:	d001      	beq.n	2e0c <z_nrf_clock_control_lf_on+0x60>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2e08:	2e01      	cmp	r6, #1
    2e0a:	d10f      	bne.n	2e2c <z_nrf_clock_control_lf_on+0x80>
	if (isr_mode) {
    2e0c:	b1c4      	cbz	r4, 2e40 <z_nrf_clock_control_lf_on+0x94>
    2e0e:	f385 8811 	msr	BASEPRI, r5
    2e12:	f3bf 8f6f 	isb	sy
}
    2e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    2e18:	f04f 0320 	mov.w	r3, #32
    2e1c:	f3ef 8511 	mrs	r5, BASEPRI
    2e20:	f383 8812 	msr	BASEPRI_MAX, r3
    2e24:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e28:	2401      	movs	r4, #1
    2e2a:	e7e1      	b.n	2df0 <z_nrf_clock_control_lf_on+0x44>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2e2c:	b11c      	cbz	r4, 2e36 <z_nrf_clock_control_lf_on+0x8a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2e2e:	4628      	mov	r0, r5
    2e30:	f7ff f930 	bl	2094 <arch_cpu_atomic_idle>
}
    2e34:	e7de      	b.n	2df4 <z_nrf_clock_control_lf_on+0x48>
	return z_impl_k_sleep(timeout);
    2e36:	2100      	movs	r1, #0
    2e38:	2021      	movs	r0, #33	; 0x21
    2e3a:	f003 fad1 	bl	63e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2e3e:	e7d9      	b.n	2df4 <z_nrf_clock_control_lf_on+0x48>
    p_reg->INTENSET = mask;
    2e40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e44:	2202      	movs	r2, #2
    2e46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2e4a:	e7e4      	b.n	2e16 <z_nrf_clock_control_lf_on+0x6a>
    2e4c:	20004b40 	.word	0x20004b40
    2e50:	20004b30 	.word	0x20004b30
    2e54:	20004b60 	.word	0x20004b60
    2e58:	20044f70 	.word	0x20044f70

00002e5c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2e5c:	b508      	push	{r3, lr}
    2e5e:	4807      	ldr	r0, [pc, #28]	; (2e7c <uart_console_init+0x20>)
    2e60:	f005 fda8 	bl	89b4 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2e64:	b138      	cbz	r0, 2e76 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    2e66:	4806      	ldr	r0, [pc, #24]	; (2e80 <uart_console_init+0x24>)
    2e68:	f7ff fe96 	bl	2b98 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2e6c:	4804      	ldr	r0, [pc, #16]	; (2e80 <uart_console_init+0x24>)
    2e6e:	f7fe fc0b 	bl	1688 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2e72:	2000      	movs	r0, #0
}
    2e74:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2e76:	f06f 0012 	mvn.w	r0, #18
    2e7a:	e7fb      	b.n	2e74 <uart_console_init+0x18>
    2e7c:	00008dc0 	.word	0x00008dc0
    2e80:	00002e85 	.word	0x00002e85

00002e84 <console_out>:
	if ('\n' == c) {
    2e84:	280a      	cmp	r0, #10
{
    2e86:	b538      	push	{r3, r4, r5, lr}
    2e88:	4604      	mov	r4, r0
    2e8a:	4d07      	ldr	r5, [pc, #28]	; (2ea8 <console_out+0x24>)
	if ('\n' == c) {
    2e8c:	d104      	bne.n	2e98 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2e8e:	68ab      	ldr	r3, [r5, #8]
    2e90:	210d      	movs	r1, #13
    2e92:	4628      	mov	r0, r5
    2e94:	685b      	ldr	r3, [r3, #4]
    2e96:	4798      	blx	r3
    2e98:	68ab      	ldr	r3, [r5, #8]
    2e9a:	4803      	ldr	r0, [pc, #12]	; (2ea8 <console_out+0x24>)
    2e9c:	685b      	ldr	r3, [r3, #4]
    2e9e:	b2e1      	uxtb	r1, r4
    2ea0:	4798      	blx	r3
}
    2ea2:	4620      	mov	r0, r4
    2ea4:	bd38      	pop	{r3, r4, r5, pc}
    2ea6:	bf00      	nop
    2ea8:	00008dc0 	.word	0x00008dc0

00002eac <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2eac:	b530      	push	{r4, r5, lr}
	return port->config;
    2eae:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2eb0:	f001 041f 	and.w	r4, r1, #31
    2eb4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2eb6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2eba:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ebc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ec0:	d105      	bne.n	2ece <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2ec2:	4620      	mov	r0, r4
    2ec4:	f002 f814 	bl	4ef0 <nrfx_gpiote_trigger_disable>

		return 0;
    2ec8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2eca:	b005      	add	sp, #20
    2ecc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ece:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2ed0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ed4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2ed8:	d114      	bne.n	2f04 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ede:	bf0c      	ite	eq
    2ee0:	2304      	moveq	r3, #4
    2ee2:	2305      	movne	r3, #5
    2ee4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2ee8:	2300      	movs	r3, #0
    2eea:	4620      	mov	r0, r4
    2eec:	4619      	mov	r1, r3
    2eee:	aa02      	add	r2, sp, #8
    2ef0:	f001 fe3c 	bl	4b6c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ef4:	4b1f      	ldr	r3, [pc, #124]	; (2f74 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2ef6:	4298      	cmp	r0, r3
    2ef8:	d138      	bne.n	2f6c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2efa:	2101      	movs	r1, #1
    2efc:	4620      	mov	r0, r4
    2efe:	f001 ffb1 	bl	4e64 <nrfx_gpiote_trigger_enable>
	return 0;
    2f02:	e7e1      	b.n	2ec8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2f04:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2f08:	d025      	beq.n	2f56 <gpio_nrfx_pin_interrupt_configure+0xaa>
    2f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2f0e:	bf14      	ite	ne
    2f10:	2301      	movne	r3, #1
    2f12:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f14:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2f18:	6883      	ldr	r3, [r0, #8]
    2f1a:	40cb      	lsrs	r3, r1
    2f1c:	07d9      	lsls	r1, r3, #31
    2f1e:	d4e3      	bmi.n	2ee8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    2f20:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2f24:	d1e0      	bne.n	2ee8 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    2f26:	4a14      	ldr	r2, [pc, #80]	; (2f78 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2f28:	4814      	ldr	r0, [pc, #80]	; (2f7c <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2f2a:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    2f2c:	2901      	cmp	r1, #1
    2f2e:	bf08      	it	eq
    2f30:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    2f32:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2f36:	3380      	adds	r3, #128	; 0x80
    2f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2f3c:	07db      	lsls	r3, r3, #31
    2f3e:	d4d3      	bmi.n	2ee8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2f40:	f10d 0507 	add.w	r5, sp, #7
    2f44:	4629      	mov	r1, r5
    2f46:	4620      	mov	r0, r4
    2f48:	f001 ff38 	bl	4dbc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2f4c:	4b0c      	ldr	r3, [pc, #48]	; (2f80 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    2f4e:	4298      	cmp	r0, r3
    2f50:	d003      	beq.n	2f5a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    2f52:	9503      	str	r5, [sp, #12]
    2f54:	e7c8      	b.n	2ee8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2f56:	2303      	movs	r3, #3
    2f58:	e7dc      	b.n	2f14 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2f5a:	4628      	mov	r0, r5
    2f5c:	f001 ff7c 	bl	4e58 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2f60:	4b04      	ldr	r3, [pc, #16]	; (2f74 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2f62:	4298      	cmp	r0, r3
    2f64:	d0f5      	beq.n	2f52 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    2f66:	f06f 000b 	mvn.w	r0, #11
    2f6a:	e7ae      	b.n	2eca <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2f6c:	f06f 0015 	mvn.w	r0, #21
    2f70:	e7ab      	b.n	2eca <gpio_nrfx_pin_interrupt_configure+0x1e>
    2f72:	bf00      	nop
    2f74:	0bad0000 	.word	0x0bad0000
    2f78:	50842500 	.word	0x50842500
    2f7c:	50842800 	.word	0x50842800
    2f80:	0bad0004 	.word	0x0bad0004

00002f84 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2f84:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2f86:	f001 ff57 	bl	4e38 <nrfx_gpiote_is_init>
    2f8a:	4604      	mov	r4, r0
    2f8c:	b968      	cbnz	r0, 2faa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2f8e:	f001 ff2b 	bl	4de8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2f92:	4b08      	ldr	r3, [pc, #32]	; (2fb4 <gpio_nrfx_init+0x30>)
    2f94:	4298      	cmp	r0, r3
    2f96:	d10a      	bne.n	2fae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2f98:	4621      	mov	r1, r4
    2f9a:	4807      	ldr	r0, [pc, #28]	; (2fb8 <gpio_nrfx_init+0x34>)
    2f9c:	f001 ff08 	bl	4db0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2fa0:	4622      	mov	r2, r4
    2fa2:	2105      	movs	r1, #5
    2fa4:	200d      	movs	r0, #13
    2fa6:	f7ff f8df 	bl	2168 <z_arm_irq_priority_set>
		return 0;
    2faa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2fac:	bd10      	pop	{r4, pc}
		return -EIO;
    2fae:	f06f 0004 	mvn.w	r0, #4
    2fb2:	e7fb      	b.n	2fac <gpio_nrfx_init+0x28>
    2fb4:	0bad0000 	.word	0x0bad0000
    2fb8:	00002fbd 	.word	0x00002fbd

00002fbc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fbc:	0942      	lsrs	r2, r0, #5
{
    2fbe:	4603      	mov	r3, r0
    2fc0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fc2:	d002      	beq.n	2fca <nrfx_gpio_handler+0xe>
    2fc4:	2a01      	cmp	r2, #1
    2fc6:	d017      	beq.n	2ff8 <nrfx_gpio_handler+0x3c>
}
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fca:	4e0d      	ldr	r6, [pc, #52]	; (3000 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2fcc:	6932      	ldr	r2, [r6, #16]
    2fce:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2fd0:	2900      	cmp	r1, #0
    2fd2:	d0f9      	beq.n	2fc8 <nrfx_gpio_handler+0xc>
    2fd4:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    2fd6:	f003 031f 	and.w	r3, r3, #31
	return node->next;
    2fda:	680c      	ldr	r4, [r1, #0]
    2fdc:	409d      	lsls	r5, r3
    2fde:	2900      	cmp	r1, #0
    2fe0:	d0f2      	beq.n	2fc8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2fe2:	688a      	ldr	r2, [r1, #8]
    2fe4:	402a      	ands	r2, r5
    2fe6:	d002      	beq.n	2fee <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2fe8:	4630      	mov	r0, r6
    2fea:	684b      	ldr	r3, [r1, #4]
    2fec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2fee:	b12c      	cbz	r4, 2ffc <nrfx_gpio_handler+0x40>
    2ff0:	6823      	ldr	r3, [r4, #0]
    2ff2:	4621      	mov	r1, r4
    2ff4:	461c      	mov	r4, r3
    2ff6:	e7f2      	b.n	2fde <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2ff8:	4e02      	ldr	r6, [pc, #8]	; (3004 <nrfx_gpio_handler+0x48>)
    2ffa:	e7e7      	b.n	2fcc <nrfx_gpio_handler+0x10>
    2ffc:	4623      	mov	r3, r4
    2ffe:	e7f8      	b.n	2ff2 <nrfx_gpio_handler+0x36>
    3000:	00008da8 	.word	0x00008da8
    3004:	00008d90 	.word	0x00008d90

00003008 <gpio_nrfx_pin_configure>:
{
    3008:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    300c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    300e:	f001 051f 	and.w	r5, r1, #31
    3012:	7b3b      	ldrb	r3, [r7, #12]
{
    3014:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3016:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    301a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    301c:	4628      	mov	r0, r5
    301e:	f10d 0103 	add.w	r1, sp, #3
    3022:	f001 fecb 	bl	4dbc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3026:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    302a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    302c:	d10b      	bne.n	3046 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    302e:	4628      	mov	r0, r5
    3030:	f001 ff86 	bl	4f40 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3034:	4b3c      	ldr	r3, [pc, #240]	; (3128 <gpio_nrfx_pin_configure+0x120>)
    3036:	4598      	cmp	r8, r3
    3038:	d103      	bne.n	3042 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    303a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    303e:	f001 ff05 	bl	4e4c <nrfx_gpiote_channel_free>
		return 0;
    3042:	2000      	movs	r0, #0
    3044:	e00c      	b.n	3060 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3046:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3048:	4628      	mov	r0, r5
    304a:	4619      	mov	r1, r3
    304c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    304e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3052:	f001 fd8b 	bl	4b6c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3056:	4b34      	ldr	r3, [pc, #208]	; (3128 <gpio_nrfx_pin_configure+0x120>)
    3058:	4298      	cmp	r0, r3
    305a:	d004      	beq.n	3066 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    305c:	f06f 0015 	mvn.w	r0, #21
}
    3060:	b004      	add	sp, #16
    3062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3066:	4580      	cmp	r8, r0
    3068:	d103      	bne.n	3072 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    306a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    306e:	f001 feed 	bl	4e4c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3072:	03a3      	lsls	r3, r4, #14
    3074:	d549      	bpl.n	310a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3076:	f240 3306 	movw	r3, #774	; 0x306
    307a:	4023      	ands	r3, r4
    307c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3080:	d019      	beq.n	30b6 <gpio_nrfx_pin_configure+0xae>
    3082:	d80c      	bhi.n	309e <gpio_nrfx_pin_configure+0x96>
    3084:	2b06      	cmp	r3, #6
    3086:	d017      	beq.n	30b8 <gpio_nrfx_pin_configure+0xb0>
    3088:	d804      	bhi.n	3094 <gpio_nrfx_pin_configure+0x8c>
    308a:	b1ab      	cbz	r3, 30b8 <gpio_nrfx_pin_configure+0xb0>
    308c:	2b02      	cmp	r3, #2
    308e:	d1e5      	bne.n	305c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3090:	2304      	movs	r3, #4
    3092:	e011      	b.n	30b8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3098:	d1e0      	bne.n	305c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    309a:	2301      	movs	r3, #1
    309c:	e00c      	b.n	30b8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    309e:	f240 2202 	movw	r2, #514	; 0x202
    30a2:	4293      	cmp	r3, r2
    30a4:	d026      	beq.n	30f4 <gpio_nrfx_pin_configure+0xec>
    30a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    30aa:	d025      	beq.n	30f8 <gpio_nrfx_pin_configure+0xf0>
    30ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    30b0:	d1d4      	bne.n	305c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    30b2:	2302      	movs	r3, #2
    30b4:	e000      	b.n	30b8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    30b6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    30b8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    30bc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    30c0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    30c4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    30c6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    30ca:	bf4c      	ite	mi
    30cc:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    30ce:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    30d2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    30d4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    30d8:	d510      	bpl.n	30fc <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    30da:	2301      	movs	r3, #1
    30dc:	687a      	ldr	r2, [r7, #4]
    30de:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    30e0:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    30e2:	2200      	movs	r2, #0
    30e4:	4628      	mov	r0, r5
    30e6:	a901      	add	r1, sp, #4
    30e8:	f001 fdee 	bl	4cc8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    30ec:	4b0e      	ldr	r3, [pc, #56]	; (3128 <gpio_nrfx_pin_configure+0x120>)
    30ee:	4298      	cmp	r0, r3
    30f0:	d0a7      	beq.n	3042 <gpio_nrfx_pin_configure+0x3a>
    30f2:	e7b3      	b.n	305c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    30f4:	2305      	movs	r3, #5
    30f6:	e7df      	b.n	30b8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    30f8:	2303      	movs	r3, #3
    30fa:	e7dd      	b.n	30b8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    30fc:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    30fe:	bf41      	itttt	mi
    3100:	2301      	movmi	r3, #1
    3102:	687a      	ldrmi	r2, [r7, #4]
    3104:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3106:	60d3      	strmi	r3, [r2, #12]
}
    3108:	e7eb      	b.n	30e2 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    310a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    310c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3110:	bf4c      	ite	mi
    3112:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3114:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3118:	461a      	mov	r2, r3
    311a:	4628      	mov	r0, r5
    311c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    311e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3122:	f001 fd23 	bl	4b6c <nrfx_gpiote_input_configure>
    3126:	e7e1      	b.n	30ec <gpio_nrfx_pin_configure+0xe4>
    3128:	0bad0000 	.word	0x0bad0000

0000312c <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    312c:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    3130:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    3134:	280a      	cmp	r0, #10
    3136:	bf9a      	itte	ls
    3138:	4b02      	ldrls	r3, [pc, #8]	; (3144 <qspi_get_zephyr_ret_code+0x18>)
    313a:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    313e:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    3142:	4770      	bx	lr
    3144:	00009620 	.word	0x00009620

00003148 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    3148:	4b02      	ldr	r3, [pc, #8]	; (3154 <qspi_nor_pages_layout+0xc>)
    314a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    314c:	2301      	movs	r3, #1
    314e:	6013      	str	r3, [r2, #0]
}
    3150:	4770      	bx	lr
    3152:	bf00      	nop
    3154:	000094d4 	.word	0x000094d4

00003158 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    3158:	4800      	ldr	r0, [pc, #0]	; (315c <qspi_flash_get_parameters+0x4>)
    315a:	4770      	bx	lr
    315c:	00009468 	.word	0x00009468

00003160 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    3160:	4b05      	ldr	r3, [pc, #20]	; (3178 <qspi_wait_for_completion.isra.0+0x18>)
    3162:	4299      	cmp	r1, r3
    3164:	d106      	bne.n	3174 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
    3166:	f04f 32ff 	mov.w	r2, #4294967295
    316a:	f04f 33ff 	mov.w	r3, #4294967295
    316e:	3020      	adds	r0, #32
    3170:	f002 be46 	b.w	5e00 <z_impl_k_sem_take>
}
    3174:	4770      	bx	lr
    3176:	bf00      	nop
    3178:	0bad0000 	.word	0x0bad0000

0000317c <qspi_device_init>:
{
    317c:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
    317e:	6905      	ldr	r5, [r0, #16]
{
    3180:	4604      	mov	r4, r0
	if (!qspi_initialized) {
    3182:	4e0f      	ldr	r6, [pc, #60]	; (31c0 <qspi_device_init+0x44>)
	qspi_lock(dev);
    3184:	4628      	mov	r0, r5
    3186:	f005 f8dd 	bl	8344 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
    318a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    318e:	f005 f8d1 	bl	8334 <k_sem_give>
	if (!qspi_initialized) {
    3192:	7833      	ldrb	r3, [r6, #0]
    3194:	b98b      	cbnz	r3, 31ba <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    3196:	462a      	mov	r2, r5
    3198:	490a      	ldr	r1, [pc, #40]	; (31c4 <qspi_device_init+0x48>)
    319a:	6860      	ldr	r0, [r4, #4]
    319c:	f002 f96a 	bl	5474 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    31a0:	f7ff ffc4 	bl	312c <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    31a4:	fab0 f380 	clz	r3, r0
    31a8:	4605      	mov	r5, r0
    31aa:	095b      	lsrs	r3, r3, #5
    31ac:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
    31ae:	6920      	ldr	r0, [r4, #16]
    31b0:	3010      	adds	r0, #16
    31b2:	f005 f8bf 	bl	8334 <k_sem_give>
}
    31b6:	4628      	mov	r0, r5
    31b8:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    31ba:	2500      	movs	r5, #0
    31bc:	e7f7      	b.n	31ae <qspi_device_init+0x32>
    31be:	bf00      	nop
    31c0:	20004f6d 	.word	0x20004f6d
    31c4:	00008339 	.word	0x00008339

000031c8 <qspi_send_cmd>:
{
    31c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
    31ca:	684c      	ldr	r4, [r1, #4]
{
    31cc:	4605      	mov	r5, r0
    31ce:	4617      	mov	r7, r2
	if (cmd->tx_buf) {
    31d0:	b1ac      	cbz	r4, 31fe <qspi_send_cmd+0x36>
		tx_buf = cmd->tx_buf->buf;
    31d2:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
    31d6:	6888      	ldr	r0, [r1, #8]
    31d8:	b198      	cbz	r0, 3202 <qspi_send_cmd+0x3a>
		rx_len = cmd->rx_buf->len;
    31da:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    31de:	b188      	cbz	r0, 3204 <qspi_send_cmd+0x3c>
    31e0:	b183      	cbz	r3, 3204 <qspi_send_cmd+0x3c>
		if (rx_len != tx_len) {
    31e2:	4298      	cmp	r0, r3
    31e4:	d107      	bne.n	31f6 <qspi_send_cmd+0x2e>
		xfer_len += tx_len;
    31e6:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    31e8:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
    31ea:	780a      	ldrb	r2, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    31ec:	d90d      	bls.n	320a <qspi_send_cmd+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
    31ee:	2157      	movs	r1, #87	; 0x57
    31f0:	4816      	ldr	r0, [pc, #88]	; (324c <qspi_send_cmd+0x84>)
    31f2:	f004 feda 	bl	7faa <z_log_minimal_printk>
}
    31f6:	f06f 0015 	mvn.w	r0, #21
    31fa:	b003      	add	sp, #12
    31fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
    31fe:	4623      	mov	r3, r4
    3200:	e7e9      	b.n	31d6 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
    3202:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    3204:	3301      	adds	r3, #1
    3206:	4403      	add	r3, r0
    3208:	e7ee      	b.n	31e8 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    320a:	f88d 3001 	strb.w	r3, [sp, #1]
    320e:	f240 1301 	movw	r3, #257	; 0x101
    3212:	f8ad 3002 	strh.w	r3, [sp, #2]
    3216:	2300      	movs	r3, #0
	qspi_lock(dev);
    3218:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    321a:	f88d 3004 	strb.w	r3, [sp, #4]
    321e:	f88d 2000 	strb.w	r2, [sp]
    3222:	f88d 7005 	strb.w	r7, [sp, #5]
	qspi_lock(dev);
    3226:	f005 f88d 	bl	8344 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    322a:	4621      	mov	r1, r4
    322c:	4632      	mov	r2, r6
    322e:	4668      	mov	r0, sp
    3230:	f002 f9fa 	bl	5628 <nrfx_qspi_cinstr_xfer>
    3234:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
    3236:	6928      	ldr	r0, [r5, #16]
    3238:	3010      	adds	r0, #16
    323a:	f005 f87b 	bl	8334 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
    323e:	4620      	mov	r0, r4
}
    3240:	b003      	add	sp, #12
    3242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
    3246:	f7ff bf71 	b.w	312c <qspi_get_zephyr_ret_code>
    324a:	bf00      	nop
    324c:	0000a030 	.word	0x0000a030

00003250 <qspi_device_uninit>:
{
    3250:	b538      	push	{r3, r4, r5, lr}
    3252:	4604      	mov	r4, r0
	qspi_lock(dev);
    3254:	6900      	ldr	r0, [r0, #16]
    3256:	f005 f875 	bl	8344 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
    325a:	6925      	ldr	r5, [r4, #16]
    325c:	2200      	movs	r2, #0
    325e:	2300      	movs	r3, #0
    3260:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3264:	f002 fdcc 	bl	5e00 <z_impl_k_sem_take>
	if (last) {
    3268:	6bab      	ldr	r3, [r5, #56]	; 0x38
    326a:	b94b      	cbnz	r3, 3280 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    326c:	4d0a      	ldr	r5, [pc, #40]	; (3298 <qspi_device_uninit+0x48>)
    326e:	f002 fa1b 	bl	56a8 <nrfx_qspi_mem_busy_check>
    3272:	42a8      	cmp	r0, r5
    3274:	d10a      	bne.n	328c <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
    3276:	f002 fa39 	bl	56ec <nrfx_qspi_uninit>
		qspi_initialized = false;
    327a:	2200      	movs	r2, #0
    327c:	4b07      	ldr	r3, [pc, #28]	; (329c <qspi_device_uninit+0x4c>)
    327e:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
    3280:	6920      	ldr	r0, [r4, #16]
}
    3282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
    3286:	3010      	adds	r0, #16
    3288:	f005 b854 	b.w	8334 <k_sem_give>
	return z_impl_k_sleep(timeout);
    328c:	2100      	movs	r1, #0
    328e:	f240 6067 	movw	r0, #1639	; 0x667
    3292:	f003 f8a5 	bl	63e0 <z_impl_k_sleep>
    3296:	e7ea      	b.n	326e <qspi_device_uninit+0x1e>
    3298:	0bad0000 	.word	0x0bad0000
    329c:	20004f6d 	.word	0x20004f6d

000032a0 <qspi_nor_read>:
{
    32a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32a4:	4681      	mov	r9, r0
    32a6:	460e      	mov	r6, r1
    32a8:	461c      	mov	r4, r3
	if (!dest) {
    32aa:	4690      	mov	r8, r2
{
    32ac:	b085      	sub	sp, #20
	if (!dest) {
    32ae:	b17a      	cbz	r2, 32d0 <qspi_nor_read+0x30>
	if (!size) {
    32b0:	2b00      	cmp	r3, #0
    32b2:	f000 809c 	beq.w	33ee <qspi_nor_read+0x14e>
	if (addr < 0 ||
    32b6:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    32b8:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    32ba:	db03      	blt.n	32c4 <qspi_nor_read+0x24>
    32bc:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    32be:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    32c0:	4293      	cmp	r3, r2
    32c2:	d90b      	bls.n	32dc <qspi_nor_read+0x3c>
		LOG_ERR("read error: address or size "
    32c4:	4623      	mov	r3, r4
    32c6:	4632      	mov	r2, r6
    32c8:	2145      	movs	r1, #69	; 0x45
    32ca:	484a      	ldr	r0, [pc, #296]	; (33f4 <qspi_nor_read+0x154>)
    32cc:	f004 fe6d 	bl	7faa <z_log_minimal_printk>
		return -EINVAL;
    32d0:	f06f 0515 	mvn.w	r5, #21
}
    32d4:	4628      	mov	r0, r5
    32d6:	b005      	add	sp, #20
    32d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
    32dc:	f7ff ff4e 	bl	317c <qspi_device_init>
	if (rc != 0) {
    32e0:	4605      	mov	r5, r0
    32e2:	2800      	cmp	r0, #0
    32e4:	d17f      	bne.n	33e6 <qspi_nor_read+0x146>
	qspi_lock(dev);
    32e6:	4275      	negs	r5, r6
    32e8:	f005 0503 	and.w	r5, r5, #3
    32ec:	f8d9 0010 	ldr.w	r0, [r9, #16]
    32f0:	f005 f828 	bl	8344 <qspi_lock.isra.0>
	if (flash_prefix > size) {
    32f4:	42a5      	cmp	r5, r4
    32f6:	bf28      	it	cs
    32f8:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    32fa:	f1d8 0300 	rsbs	r3, r8, #0
    32fe:	f003 0303 	and.w	r3, r3, #3
    3302:	f008 0703 	and.w	r7, r8, #3
    3306:	bf58      	it	pl
    3308:	425f      	negpl	r7, r3
    330a:	427f      	negs	r7, r7
    330c:	f007 0703 	and.w	r7, r7, #3
    3310:	42a7      	cmp	r7, r4
    3312:	bf28      	it	cs
    3314:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    3316:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    3318:	1be4      	subs	r4, r4, r7
    331a:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    331e:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    3322:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    3324:	bfc8      	it	gt
    3326:	46a2      	movgt	sl, r4
    3328:	f003 0b03 	and.w	fp, r3, #3
    332c:	bfc8      	it	gt
    332e:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    3332:	f1ba 0f00 	cmp.w	sl, #0
    3336:	d019      	beq.n	336c <qspi_nor_read+0xcc>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    3338:	eb08 0307 	add.w	r3, r8, r7
    333c:	1972      	adds	r2, r6, r5
    333e:	4651      	mov	r1, sl
    3340:	4618      	mov	r0, r3
    3342:	9301      	str	r3, [sp, #4]
    3344:	f005 fb2e 	bl	89a4 <nrfx_qspi_read>
    3348:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    334a:	4601      	mov	r1, r0
    334c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3350:	f7ff ff06 	bl	3160 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    3354:	4a28      	ldr	r2, [pc, #160]	; (33f8 <qspi_nor_read+0x158>)
    3356:	4294      	cmp	r4, r2
    3358:	d13c      	bne.n	33d4 <qspi_nor_read+0x134>
		if (flash_prefix != dest_prefix) {
    335a:	42bd      	cmp	r5, r7
    335c:	d006      	beq.n	336c <qspi_nor_read+0xcc>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    335e:	9b01      	ldr	r3, [sp, #4]
    3360:	4652      	mov	r2, sl
    3362:	4619      	mov	r1, r3
    3364:	eb08 0005 	add.w	r0, r8, r5
    3368:	f004 fece 	bl	8108 <memmove>
	if (flash_prefix != 0) {
    336c:	b1bd      	cbz	r5, 339e <qspi_nor_read+0xfe>
				     (WORD_SIZE - flash_prefix));
    336e:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    3372:	2104      	movs	r1, #4
    3374:	1bf2      	subs	r2, r6, r7
    3376:	a802      	add	r0, sp, #8
    3378:	f005 fb14 	bl	89a4 <nrfx_qspi_read>
    337c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    337e:	4601      	mov	r1, r0
    3380:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3384:	f7ff feec 	bl	3160 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    3388:	4b1b      	ldr	r3, [pc, #108]	; (33f8 <qspi_nor_read+0x158>)
    338a:	429c      	cmp	r4, r3
    338c:	d122      	bne.n	33d4 <qspi_nor_read+0x134>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    338e:	f107 0308 	add.w	r3, r7, #8
    3392:	462a      	mov	r2, r5
    3394:	4640      	mov	r0, r8
    3396:	eb0d 0103 	add.w	r1, sp, r3
    339a:	f004 fecc 	bl	8136 <memcpy>
	if (flash_suffix != 0) {
    339e:	f1bb 0f00 	cmp.w	fp, #0
    33a2:	d016      	beq.n	33d2 <qspi_nor_read+0x132>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    33a4:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    33a6:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    33a8:	4452      	add	r2, sl
    33aa:	eb0d 0001 	add.w	r0, sp, r1
    33ae:	f005 faf9 	bl	89a4 <nrfx_qspi_read>
    33b2:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    33b4:	4601      	mov	r1, r0
    33b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    33ba:	f7ff fed1 	bl	3160 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    33be:	4b0e      	ldr	r3, [pc, #56]	; (33f8 <qspi_nor_read+0x158>)
    33c0:	429c      	cmp	r4, r3
    33c2:	d107      	bne.n	33d4 <qspi_nor_read+0x134>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    33c4:	eb0a 0005 	add.w	r0, sl, r5
    33c8:	465a      	mov	r2, fp
    33ca:	a902      	add	r1, sp, #8
    33cc:	4440      	add	r0, r8
    33ce:	f004 feb2 	bl	8136 <memcpy>
	return res;
    33d2:	4c09      	ldr	r4, [pc, #36]	; (33f8 <qspi_nor_read+0x158>)
	k_sem_give(&dev_data->sem);
    33d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
    33d8:	3010      	adds	r0, #16
    33da:	f004 ffab 	bl	8334 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    33de:	4620      	mov	r0, r4
    33e0:	f7ff fea4 	bl	312c <qspi_get_zephyr_ret_code>
    33e4:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    33e6:	4648      	mov	r0, r9
    33e8:	f7ff ff32 	bl	3250 <qspi_device_uninit>
	return rc;
    33ec:	e772      	b.n	32d4 <qspi_nor_read+0x34>
		return 0;
    33ee:	461d      	mov	r5, r3
    33f0:	e770      	b.n	32d4 <qspi_nor_read+0x34>
    33f2:	bf00      	nop
    33f4:	0000a058 	.word	0x0000a058
    33f8:	0bad0000 	.word	0x0bad0000

000033fc <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    33fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3400:	2202      	movs	r2, #2
{
    3402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3406:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    340a:	6843      	ldr	r3, [r0, #4]
{
    340c:	b08a      	sub	sp, #40	; 0x28
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    340e:	6a1e      	ldr	r6, [r3, #32]
{
    3410:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3412:	2100      	movs	r1, #0
    3414:	4630      	mov	r0, r6
    3416:	aa07      	add	r2, sp, #28
    3418:	f005 f886 	bl	8528 <pinctrl_lookup_state>
	if (ret < 0) {
    341c:	1e04      	subs	r4, r0, #0
    341e:	db2f      	blt.n	3480 <qspi_nor_init+0x84>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3420:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3422:	6832      	ldr	r2, [r6, #0]
    3424:	7919      	ldrb	r1, [r3, #4]
    3426:	6818      	ldr	r0, [r3, #0]
    3428:	f000 fed4 	bl	41d4 <pinctrl_configure_pins>
	if (ret < 0) {
    342c:	1e04      	subs	r4, r0, #0
    342e:	db27      	blt.n	3480 <qspi_nor_init+0x84>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    3430:	2200      	movs	r2, #0
    3432:	2101      	movs	r1, #1
    3434:	202b      	movs	r0, #43	; 0x2b
    3436:	f7fe fe97 	bl	2168 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    343a:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    343c:	692a      	ldr	r2, [r5, #16]
    343e:	4630      	mov	r0, r6
    3440:	494a      	ldr	r1, [pc, #296]	; (356c <qspi_nor_init+0x170>)
    3442:	f002 f817 	bl	5474 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
    3446:	f7ff fe71 	bl	312c <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    344a:	1e04      	subs	r4, r0, #0
    344c:	db18      	blt.n	3480 <qspi_nor_init+0x84>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    344e:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    3450:	3b02      	subs	r3, #2
    3452:	2b01      	cmp	r3, #1
    3454:	d918      	bls.n	3488 <qspi_nor_init+0x8c>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    3456:	f896 800a 	ldrb.w	r8, [r6, #10]
    345a:	f1a8 0803 	sub.w	r8, r8, #3
    345e:	f1b8 0f01 	cmp.w	r8, #1
    3462:	bf8c      	ite	hi
    3464:	f04f 0800 	movhi.w	r8, #0
    3468:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
    346c:	4628      	mov	r0, r5
    346e:	f004 ff8b 	bl	8388 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    3472:	1e04      	subs	r4, r0, #0
    3474:	da0b      	bge.n	348e <qspi_nor_init+0x92>
			LOG_ERR("RDSR failed: %d", ret);
    3476:	4622      	mov	r2, r4
    3478:	2145      	movs	r1, #69	; 0x45
    347a:	483d      	ldr	r0, [pc, #244]	; (3570 <qspi_nor_init+0x174>)
    347c:	f004 fd95 	bl	7faa <z_log_minimal_printk>
}
    3480:	4620      	mov	r0, r4
    3482:	b00a      	add	sp, #40	; 0x28
    3484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    3488:	f04f 0801 	mov.w	r8, #1
    348c:	e7ee      	b.n	346c <qspi_nor_init+0x70>
		uint8_t sr = (uint8_t)ret;
    348e:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
    3490:	f3c4 1480 	ubfx	r4, r4, #6, #1
    3494:	45a0      	cmp	r8, r4
    3496:	ae04      	add	r6, sp, #16
    3498:	af05      	add	r7, sp, #20
    349a:	d028      	beq.n	34ee <qspi_nor_init+0xf2>
	uint8_t sr_array[2] = {0};
    349c:	2300      	movs	r3, #0
			sr ^= qe_mask;
    349e:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    34a2:	f8ad 3010 	strh.w	r3, [sp, #16]
		sr_array[0] = sr_val;
    34a6:	f88d 2010 	strb.w	r2, [sp, #16]
	const struct qspi_buf sr_buf = {
    34aa:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    34ac:	4628      	mov	r0, r5
    34ae:	a907      	add	r1, sp, #28
	struct qspi_cmd cmd = {
    34b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct qspi_buf sr_buf = {
    34b4:	9605      	str	r6, [sp, #20]
	struct qspi_cmd cmd = {
    34b6:	9309      	str	r3, [sp, #36]	; 0x24
    34b8:	f88d 201c 	strb.w	r2, [sp, #28]
    34bc:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
    34be:	f7ff fe83 	bl	31c8 <qspi_send_cmd>
	if (ret == 0) {
    34c2:	1e04      	subs	r4, r0, #0
    34c4:	d00c      	beq.n	34e0 <qspi_nor_init+0xe4>
		if (ret < 0) {
    34c6:	dadb      	bge.n	3480 <qspi_nor_init+0x84>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
    34c8:	492a      	ldr	r1, [pc, #168]	; (3574 <qspi_nor_init+0x178>)
    34ca:	4a2b      	ldr	r2, [pc, #172]	; (3578 <qspi_nor_init+0x17c>)
    34cc:	4623      	mov	r3, r4
    34ce:	f1b8 0f00 	cmp.w	r8, #0
    34d2:	bf08      	it	eq
    34d4:	460a      	moveq	r2, r1
    34d6:	4829      	ldr	r0, [pc, #164]	; (357c <qspi_nor_init+0x180>)
    34d8:	2145      	movs	r1, #69	; 0x45
    34da:	f004 fd66 	bl	7faa <z_log_minimal_printk>
	if (ret != 0) {
    34de:	e7cf      	b.n	3480 <qspi_nor_init+0x84>
		ret = qspi_rdsr(dev, 1);
    34e0:	4628      	mov	r0, r5
    34e2:	f004 ff51 	bl	8388 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    34e6:	1e04      	subs	r4, r0, #0
    34e8:	dbee      	blt.n	34c8 <qspi_nor_init+0xcc>
    34ea:	07e3      	lsls	r3, r4, #31
    34ec:	d4f8      	bmi.n	34e0 <qspi_nor_init+0xe4>
	qspi_device_uninit(dev);
    34ee:	4628      	mov	r0, r5
    34f0:	f7ff feae 	bl	3250 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    34f4:	f04f 0803 	mov.w	r8, #3
    34f8:	2300      	movs	r3, #0
    34fa:	e9cd 8306 	strd	r8, r3, [sp, #24]
    34fe:	9308      	str	r3, [sp, #32]
    3500:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    3502:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
    3504:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
    3506:	f88d 301c 	strb.w	r3, [sp, #28]
    350a:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
    350c:	f7ff fe36 	bl	317c <qspi_device_init>
	if (ret == 0) {
    3510:	4602      	mov	r2, r0
    3512:	b128      	cbz	r0, 3520 <qspi_nor_init+0x124>
	qspi_device_uninit(dev);
    3514:	4628      	mov	r0, r5
    3516:	f7ff fe9b 	bl	3250 <qspi_device_uninit>
		return -ENODEV;
    351a:	f06f 0412 	mvn.w	r4, #18
    351e:	e7af      	b.n	3480 <qspi_nor_init+0x84>
		ret = qspi_send_cmd(dev, &cmd, false);
    3520:	4628      	mov	r0, r5
    3522:	a907      	add	r1, sp, #28
    3524:	f7ff fe50 	bl	31c8 <qspi_send_cmd>
    3528:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    352a:	4628      	mov	r0, r5
    352c:	f7ff fe90 	bl	3250 <qspi_device_uninit>
	if (ret != 0) {
    3530:	2c00      	cmp	r4, #0
    3532:	d1f2      	bne.n	351a <qspi_nor_init+0x11e>
	const struct qspi_nor_config *qnc = dev->config;
    3534:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    3536:	4642      	mov	r2, r8
    3538:	4631      	mov	r1, r6
    353a:	f105 001c 	add.w	r0, r5, #28
    353e:	f004 fdd3 	bl	80e8 <memcmp>
    3542:	4604      	mov	r4, r0
    3544:	2800      	cmp	r0, #0
    3546:	d09b      	beq.n	3480 <qspi_nor_init+0x84>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
    3548:	7fab      	ldrb	r3, [r5, #30]
    354a:	2145      	movs	r1, #69	; 0x45
    354c:	9303      	str	r3, [sp, #12]
    354e:	7f6b      	ldrb	r3, [r5, #29]
    3550:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3554:	9302      	str	r3, [sp, #8]
    3556:	7f2b      	ldrb	r3, [r5, #28]
    3558:	4809      	ldr	r0, [pc, #36]	; (3580 <qspi_nor_init+0x184>)
    355a:	9301      	str	r3, [sp, #4]
    355c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3560:	9300      	str	r3, [sp, #0]
    3562:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3566:	f004 fd20 	bl	7faa <z_log_minimal_printk>
		return -ENODEV;
    356a:	e7d6      	b.n	351a <qspi_nor_init+0x11e>
    356c:	00008339 	.word	0x00008339
    3570:	0000a0b0 	.word	0x0000a0b0
    3574:	0000a0aa 	.word	0x0000a0aa
    3578:	0000a0a6 	.word	0x0000a0a6
    357c:	0000a0c5 	.word	0x0000a0c5
    3580:	0000a0db 	.word	0x0000a0db

00003584 <qspi_nor_erase>:
{
    3584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3588:	4615      	mov	r5, r2
	if (addr < 0 ||
    358a:	1e0a      	subs	r2, r1, #0
{
    358c:	4606      	mov	r6, r0
	const struct qspi_nor_config *params = dev->config;
    358e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    3592:	db05      	blt.n	35a0 <qspi_nor_erase+0x1c>
    3594:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    3598:	1951      	adds	r1, r2, r5
	if (addr < 0 ||
    359a:	4299      	cmp	r1, r3
	    (addr + size) > params->size) {
    359c:	4690      	mov	r8, r2
	if (addr < 0 ||
    359e:	d909      	bls.n	35b4 <qspi_nor_erase+0x30>
		LOG_ERR("erase error: address or size "
    35a0:	462b      	mov	r3, r5
    35a2:	2145      	movs	r1, #69	; 0x45
    35a4:	483b      	ldr	r0, [pc, #236]	; (3694 <qspi_nor_erase+0x110>)
    35a6:	f004 fd00 	bl	7faa <z_log_minimal_printk>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    35aa:	f06f 0415 	mvn.w	r4, #21
}
    35ae:	4620      	mov	r0, r4
    35b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    35b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    35b8:	2d00      	cmp	r5, #0
    35ba:	d0f6      	beq.n	35aa <qspi_nor_erase+0x26>
    35bc:	f3c5 030b 	ubfx	r3, r5, #0, #12
    35c0:	4313      	orrs	r3, r2
    35c2:	d1f2      	bne.n	35aa <qspi_nor_erase+0x26>
	rv = qspi_device_init(dev);
    35c4:	f7ff fdda 	bl	317c <qspi_device_init>
	if (rv != 0) {
    35c8:	4604      	mov	r4, r0
    35ca:	bb68      	cbnz	r0, 3628 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
    35cc:	6930      	ldr	r0, [r6, #16]
    35ce:	f004 fec0 	bl	8352 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    35d2:	4621      	mov	r1, r4
    35d4:	4630      	mov	r0, r6
    35d6:	f004 fec2 	bl	835e <qspi_nor_write_protection_set>
	if (rv != 0) {
    35da:	4604      	mov	r4, r0
    35dc:	bb08      	cbnz	r0, 3622 <qspi_nor_erase+0x9e>
	qspi_lock(dev);
    35de:	6930      	ldr	r0, [r6, #16]
    35e0:	f004 feb0 	bl	8344 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    35e4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3698 <qspi_nor_erase+0x114>
		if (size == params->size) {
    35e8:	f8d9 3018 	ldr.w	r3, [r9, #24]
    35ec:	42ab      	cmp	r3, r5
    35ee:	d11f      	bne.n	3630 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
    35f0:	f005 f9db 	bl	89aa <nrfx_qspi_chip_erase>
    35f4:	46ab      	mov	fp, r5
    35f6:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    35f8:	4639      	mov	r1, r7
    35fa:	6930      	ldr	r0, [r6, #16]
    35fc:	f7ff fdb0 	bl	3160 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    3600:	4557      	cmp	r7, sl
    3602:	d13b      	bne.n	367c <qspi_nor_erase+0xf8>
	while (size > 0) {
    3604:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
    3608:	44d8      	add	r8, fp
	while (size > 0) {
    360a:	d1ed      	bne.n	35e8 <qspi_nor_erase+0x64>
	k_sem_give(&dev_data->sem);
    360c:	6930      	ldr	r0, [r6, #16]
    360e:	3010      	adds	r0, #16
    3610:	f004 fe90 	bl	8334 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    3614:	2101      	movs	r1, #1
    3616:	4630      	mov	r0, r6
    3618:	f004 fea1 	bl	835e <qspi_nor_write_protection_set>
    361c:	2c00      	cmp	r4, #0
    361e:	bf08      	it	eq
    3620:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
    3622:	6930      	ldr	r0, [r6, #16]
    3624:	f004 fe86 	bl	8334 <k_sem_give>
	qspi_device_uninit(dev);
    3628:	4630      	mov	r0, r6
    362a:	f7ff fe11 	bl	3250 <qspi_device_uninit>
	return rv;
    362e:	e7be      	b.n	35ae <qspi_nor_erase+0x2a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    3630:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    3634:	d30a      	bcc.n	364c <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    3636:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    363a:	b953      	cbnz	r3, 3652 <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    363c:	4641      	mov	r1, r8
    363e:	2001      	movs	r0, #1
    3640:	f002 f8a2 	bl	5788 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    3644:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    3648:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    364a:	e7d5      	b.n	35f8 <qspi_nor_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    364c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    3650:	d309      	bcc.n	3666 <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    3652:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    3656:	b930      	cbnz	r0, 3666 <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    3658:	4641      	mov	r1, r8
    365a:	f002 f895 	bl	5788 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    365e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    3662:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    3664:	e7c8      	b.n	35f8 <qspi_nor_erase+0x74>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    3666:	462b      	mov	r3, r5
    3668:	4642      	mov	r2, r8
    366a:	2145      	movs	r1, #69	; 0x45
    366c:	480b      	ldr	r0, [pc, #44]	; (369c <qspi_nor_erase+0x118>)
    366e:	f004 fc9c 	bl	7faa <z_log_minimal_printk>
		qspi_wait_for_completion(dev, res);
    3672:	490b      	ldr	r1, [pc, #44]	; (36a0 <qspi_nor_erase+0x11c>)
    3674:	6930      	ldr	r0, [r6, #16]
    3676:	f7ff fd73 	bl	3160 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    367a:	4f09      	ldr	r7, [pc, #36]	; (36a0 <qspi_nor_erase+0x11c>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
    367c:	462b      	mov	r3, r5
    367e:	4809      	ldr	r0, [pc, #36]	; (36a4 <qspi_nor_erase+0x120>)
    3680:	4642      	mov	r2, r8
    3682:	2145      	movs	r1, #69	; 0x45
    3684:	f004 fc91 	bl	7faa <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
    3688:	4638      	mov	r0, r7
    368a:	f7ff fd4f 	bl	312c <qspi_get_zephyr_ret_code>
    368e:	4604      	mov	r4, r0
			break;
    3690:	e7bc      	b.n	360c <qspi_nor_erase+0x88>
    3692:	bf00      	nop
    3694:	0000a112 	.word	0x0000a112
    3698:	0bad0000 	.word	0x0bad0000
    369c:	0000a161 	.word	0x0000a161
    36a0:	0bad0004 	.word	0x0bad0004
    36a4:	0000a184 	.word	0x0000a184

000036a8 <qspi_nor_write>:
{
    36a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    36ac:	4605      	mov	r5, r0
    36ae:	460f      	mov	r7, r1
    36b0:	461e      	mov	r6, r3
	if (!src) {
    36b2:	4690      	mov	r8, r2
    36b4:	b19a      	cbz	r2, 36de <qspi_nor_write+0x36>
	if ((size == 0)
    36b6:	b193      	cbz	r3, 36de <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
    36b8:	2b04      	cmp	r3, #4
    36ba:	d901      	bls.n	36c0 <qspi_nor_write+0x18>
    36bc:	079a      	lsls	r2, r3, #30
    36be:	d10e      	bne.n	36de <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
    36c0:	07bb      	lsls	r3, r7, #30
    36c2:	d10c      	bne.n	36de <qspi_nor_write+0x36>
	if (addr < 0 ||
    36c4:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    36c6:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    36c8:	db03      	blt.n	36d2 <qspi_nor_write+0x2a>
    36ca:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    36cc:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    36ce:	4293      	cmp	r3, r2
    36d0:	d90b      	bls.n	36ea <qspi_nor_write+0x42>
		LOG_ERR("write error: address or size "
    36d2:	4633      	mov	r3, r6
    36d4:	463a      	mov	r2, r7
    36d6:	2145      	movs	r1, #69	; 0x45
    36d8:	483b      	ldr	r0, [pc, #236]	; (37c8 <qspi_nor_write+0x120>)
    36da:	f004 fc66 	bl	7faa <z_log_minimal_printk>
		return -EINVAL;
    36de:	f06f 0415 	mvn.w	r4, #21
}
    36e2:	4620      	mov	r0, r4
    36e4:	b004      	add	sp, #16
    36e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
    36ea:	4628      	mov	r0, r5
    36ec:	f7ff fd46 	bl	317c <qspi_device_init>
	if (rc != 0) {
    36f0:	4604      	mov	r4, r0
    36f2:	2800      	cmp	r0, #0
    36f4:	d160      	bne.n	37b8 <qspi_nor_write+0x110>
	qspi_trans_lock(dev);
    36f6:	6928      	ldr	r0, [r5, #16]
    36f8:	f004 fe2b 	bl	8352 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    36fc:	4621      	mov	r1, r4
    36fe:	4628      	mov	r0, r5
    3700:	f004 fe2d 	bl	835e <qspi_nor_write_protection_set>
    3704:	4604      	mov	r4, r0
	qspi_lock(dev);
    3706:	6928      	ldr	r0, [r5, #16]
    3708:	f004 fe1c 	bl	8344 <qspi_lock.isra.0>
	if (!res) {
    370c:	2c00      	cmp	r4, #0
    370e:	d140      	bne.n	3792 <qspi_nor_write+0xea>
		if (size < 4U) {
    3710:	2e03      	cmp	r6, #3
    3712:	d81c      	bhi.n	374e <qspi_nor_write+0xa6>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    3714:	463a      	mov	r2, r7
    3716:	2104      	movs	r1, #4
    3718:	4668      	mov	r0, sp
    371a:	f005 f943 	bl	89a4 <nrfx_qspi_read>
    371e:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    3720:	4601      	mov	r1, r0
    3722:	6928      	ldr	r0, [r5, #16]
    3724:	f7ff fd1c 	bl	3160 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    3728:	4b28      	ldr	r3, [pc, #160]	; (37cc <qspi_nor_write+0x124>)
    372a:	429c      	cmp	r4, r3
    372c:	d131      	bne.n	3792 <qspi_nor_write+0xea>
		memcpy(buf, sptr, slen);
    372e:	4632      	mov	r2, r6
    3730:	4641      	mov	r1, r8
    3732:	4668      	mov	r0, sp
    3734:	f004 fcff 	bl	8136 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    3738:	463a      	mov	r2, r7
    373a:	2104      	movs	r1, #4
    373c:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    373e:	f005 f92e 	bl	899e <nrfx_qspi_write>
    3742:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    3744:	4601      	mov	r1, r0
    3746:	6928      	ldr	r0, [r5, #16]
    3748:	f7ff fd0a 	bl	3160 <qspi_wait_for_completion.isra.0>
    374c:	e021      	b.n	3792 <qspi_nor_write+0xea>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    374e:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    3752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3756:	d033      	beq.n	37c0 <qspi_nor_write+0x118>
			if (res == NRFX_SUCCESS) {
    3758:	f8df a070 	ldr.w	sl, [pc, #112]	; 37cc <qspi_nor_write+0x124>
			size_t len = MIN(slen, sizeof(buf));
    375c:	2e10      	cmp	r6, #16
    375e:	46b1      	mov	r9, r6
    3760:	bf28      	it	cs
    3762:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    3766:	4641      	mov	r1, r8
    3768:	464a      	mov	r2, r9
    376a:	4668      	mov	r0, sp
    376c:	f004 fce3 	bl	8136 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    3770:	463a      	mov	r2, r7
    3772:	2110      	movs	r1, #16
    3774:	4668      	mov	r0, sp
    3776:	f005 f912 	bl	899e <nrfx_qspi_write>
    377a:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    377c:	4601      	mov	r1, r0
    377e:	6928      	ldr	r0, [r5, #16]
    3780:	f7ff fcee 	bl	3160 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    3784:	4554      	cmp	r4, sl
    3786:	d104      	bne.n	3792 <qspi_nor_write+0xea>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    3788:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
    378c:	44c8      	add	r8, r9
				addr += len;
    378e:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    3790:	d1e4      	bne.n	375c <qspi_nor_write+0xb4>
	k_sem_give(&dev_data->sem);
    3792:	6928      	ldr	r0, [r5, #16]
    3794:	3010      	adds	r0, #16
    3796:	f004 fdcd 	bl	8334 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
    379a:	2101      	movs	r1, #1
    379c:	4628      	mov	r0, r5
    379e:	f004 fdde 	bl	835e <qspi_nor_write_protection_set>
    37a2:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    37a4:	6928      	ldr	r0, [r5, #16]
    37a6:	f004 fdc5 	bl	8334 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    37aa:	2c00      	cmp	r4, #0
    37ac:	bf14      	ite	ne
    37ae:	4620      	movne	r0, r4
    37b0:	4630      	moveq	r0, r6
    37b2:	f7ff fcbb 	bl	312c <qspi_get_zephyr_ret_code>
    37b6:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    37b8:	4628      	mov	r0, r5
    37ba:	f7ff fd49 	bl	3250 <qspi_device_uninit>
	return rc;
    37be:	e790      	b.n	36e2 <qspi_nor_write+0x3a>
			res = nrfx_qspi_write(src, size, addr);
    37c0:	463a      	mov	r2, r7
    37c2:	4631      	mov	r1, r6
    37c4:	4640      	mov	r0, r8
    37c6:	e7ba      	b.n	373e <qspi_nor_write+0x96>
    37c8:	0000a1a7 	.word	0x0000a1a7
    37cc:	0bad0000 	.word	0x0bad0000

000037d0 <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    37d0:	4b02      	ldr	r3, [pc, #8]	; (37dc <flash_sim_page_layout+0xc>)
    37d2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    37d4:	2301      	movs	r3, #1
    37d6:	6013      	str	r3, [r2, #0]
}
    37d8:	4770      	bx	lr
    37da:	bf00      	nop
    37dc:	000094dc 	.word	0x000094dc

000037e0 <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    37e0:	4800      	ldr	r0, [pc, #0]	; (37e4 <flash_sim_get_parameters+0x4>)
    37e2:	4770      	bx	lr
    37e4:	000094e4 	.word	0x000094e4

000037e8 <flash_sim_write>:
{
    37e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    37ec:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    37ee:	440b      	add	r3, r1
    37f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    37f4:	460d      	mov	r5, r1
    37f6:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    37f8:	d82c      	bhi.n	3854 <flash_sim_write+0x6c>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    37fa:	2900      	cmp	r1, #0
    37fc:	db2a      	blt.n	3854 <flash_sim_write+0x6c>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    37fe:	ea41 0604 	orr.w	r6, r1, r4
    3802:	f016 0603 	ands.w	r6, r6, #3
    3806:	d125      	bne.n	3854 <flash_sim_write+0x6c>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    3808:	2204      	movs	r2, #4
    380a:	21ff      	movs	r1, #255	; 0xff
    380c:	eb0d 0002 	add.w	r0, sp, r2
    3810:	f004 fc9c 	bl	814c <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    3814:	f8df 8044 	ldr.w	r8, [pc, #68]	; 385c <flash_sim_write+0x74>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    3818:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    381c:	42a6      	cmp	r6, r4
    381e:	d309      	bcc.n	3834 <flash_sim_write+0x4c>
    3820:	463a      	mov	r2, r7
    3822:	eb08 0305 	add.w	r3, r8, r5
    3826:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    3828:	42a2      	cmp	r2, r4
    382a:	d10c      	bne.n	3846 <flash_sim_write+0x5e>
	return 0;
    382c:	2000      	movs	r0, #0
}
    382e:	b003      	add	sp, #12
    3830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    3834:	2204      	movs	r2, #4
    3836:	eb09 0106 	add.w	r1, r9, r6
    383a:	eb0d 0002 	add.w	r0, sp, r2
    383e:	f004 fc53 	bl	80e8 <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    3842:	3604      	adds	r6, #4
    3844:	e7ea      	b.n	381c <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    3846:	7819      	ldrb	r1, [r3, #0]
    3848:	f812 0b01 	ldrb.w	r0, [r2], #1
    384c:	4001      	ands	r1, r0
    384e:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i = 0; i < len; i++) {
    3852:	e7e9      	b.n	3828 <flash_sim_write+0x40>
		return -EINVAL;
    3854:	f06f 0015 	mvn.w	r0, #21
    3858:	e7e9      	b.n	382e <flash_sim_write+0x46>
    385a:	bf00      	nop
    385c:	20004f6e 	.word	0x20004f6e

00003860 <flash_sim_read>:
{
    3860:	4610      	mov	r0, r2
    3862:	b508      	push	{r3, lr}
    3864:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    3866:	440b      	add	r3, r1
    3868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    386c:	d807      	bhi.n	387e <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    386e:	2900      	cmp	r1, #0
    3870:	db05      	blt.n	387e <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    3872:	4b04      	ldr	r3, [pc, #16]	; (3884 <flash_sim_read+0x24>)
    3874:	4419      	add	r1, r3
    3876:	f004 fc5e 	bl	8136 <memcpy>
	return 0;
    387a:	2000      	movs	r0, #0
}
    387c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    387e:	f06f 0015 	mvn.w	r0, #21
    3882:	e7fb      	b.n	387c <flash_sim_read+0x1c>
    3884:	20004f6e 	.word	0x20004f6e

00003888 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    3888:	188b      	adds	r3, r1, r2
    388a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    388e:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    3890:	d81b      	bhi.n	38ca <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    3892:	2900      	cmp	r1, #0
    3894:	db19      	blt.n	38ca <flash_sim_erase+0x42>
	    (len % FLASH_SIMULATOR_ERASE_UNIT)) {
    3896:	ea42 0601 	orr.w	r6, r2, r1
    389a:	f3c6 060b 	ubfx	r6, r6, #0, #12
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    389e:	b9a6      	cbnz	r6, 38ca <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    38a0:	4c0b      	ldr	r4, [pc, #44]	; (38d0 <flash_sim_erase+0x48>)
    38a2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    38a6:	f021 010f 	bic.w	r1, r1, #15
    38aa:	0b15      	lsrs	r5, r2, #12
    38ac:	440c      	add	r4, r1
    38ae:	42ae      	cmp	r6, r5
    38b0:	d101      	bne.n	38b6 <flash_sim_erase+0x2e>
    38b2:	2000      	movs	r0, #0
}
    38b4:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    38b6:	4620      	mov	r0, r4
    38b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    38bc:	21ff      	movs	r1, #255	; 0xff
    38be:	f004 fc45 	bl	814c <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    38c2:	3601      	adds	r6, #1
    38c4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    38c8:	e7f1      	b.n	38ae <flash_sim_erase+0x26>
		return -EINVAL;
    38ca:	f06f 0015 	mvn.w	r0, #21
    38ce:	e7f1      	b.n	38b4 <flash_sim_erase+0x2c>
    38d0:	20004f6e 	.word	0x20004f6e

000038d4 <flash_init>:
}

#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    38d4:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    38d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    38da:	21ff      	movs	r1, #255	; 0xff
    38dc:	4802      	ldr	r0, [pc, #8]	; (38e8 <flash_init+0x14>)
    38de:	f004 fc35 	bl	814c <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    38e2:	2000      	movs	r0, #0
    38e4:	bd08      	pop	{r3, pc}
    38e6:	bf00      	nop
    38e8:	20004f6e 	.word	0x20004f6e

000038ec <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    38ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    38f0:	4801      	ldr	r0, [pc, #4]	; (38f8 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    38f2:	600b      	str	r3, [r1, #0]
}
    38f4:	4770      	bx	lr
    38f6:	bf00      	nop
    38f8:	20004f6e 	.word	0x20004f6e

000038fc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    38fc:	4b02      	ldr	r3, [pc, #8]	; (3908 <flash_nrf_pages_layout+0xc>)
    38fe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3900:	2301      	movs	r3, #1
    3902:	6013      	str	r3, [r2, #0]
}
    3904:	4770      	bx	lr
    3906:	bf00      	nop
    3908:	20004c00 	.word	0x20004c00

0000390c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    390c:	4800      	ldr	r0, [pc, #0]	; (3910 <flash_nrf_get_parameters+0x4>)
    390e:	4770      	bx	lr
    3910:	00009514 	.word	0x00009514

00003914 <flash_nrf_read>:
{
    3914:	b570      	push	{r4, r5, r6, lr}
    3916:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    3918:	4619      	mov	r1, r3
    391a:	4628      	mov	r0, r5
{
    391c:	4616      	mov	r6, r2
    391e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3920:	f004 fd4d 	bl	83be <is_regular_addr_valid>
    3924:	b940      	cbnz	r0, 3938 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3926:	4808      	ldr	r0, [pc, #32]	; (3948 <flash_nrf_read+0x34>)
    3928:	4623      	mov	r3, r4
    392a:	462a      	mov	r2, r5
    392c:	2145      	movs	r1, #69	; 0x45
    392e:	f004 fb3c 	bl	7faa <z_log_minimal_printk>
    3932:	f06f 0015 	mvn.w	r0, #21
}
    3936:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    3938:	b124      	cbz	r4, 3944 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    393a:	4622      	mov	r2, r4
    393c:	4629      	mov	r1, r5
    393e:	4630      	mov	r0, r6
    3940:	f004 fbf9 	bl	8136 <memcpy>
		return 0;
    3944:	2000      	movs	r0, #0
    3946:	e7f6      	b.n	3936 <flash_nrf_read+0x22>
    3948:	0000a22a 	.word	0x0000a22a

0000394c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    394c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    394e:	2201      	movs	r2, #1
    3950:	4806      	ldr	r0, [pc, #24]	; (396c <nrf_flash_init+0x20>)
    3952:	4611      	mov	r1, r2
    3954:	f005 f8ad 	bl	8ab2 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3958:	f005 f81b 	bl	8992 <nrfx_nvmc_flash_page_count_get>
    395c:	4c04      	ldr	r4, [pc, #16]	; (3970 <nrf_flash_init+0x24>)
    395e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3960:	f005 f814 	bl	898c <nrfx_nvmc_flash_page_size_get>
    3964:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3966:	2000      	movs	r0, #0
    3968:	bd10      	pop	{r4, pc}
    396a:	bf00      	nop
    396c:	20004c08 	.word	0x20004c08
    3970:	20004c00 	.word	0x20004c00

00003974 <flash_nrf_erase>:
{
    3974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3976:	460e      	mov	r6, r1
    3978:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    397a:	f005 f807 	bl	898c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    397e:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3980:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    3982:	4630      	mov	r0, r6
    3984:	f004 fd1b 	bl	83be <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3988:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    398a:	b350      	cbz	r0, 39e2 <flash_nrf_erase+0x6e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    398c:	fbb6 f3f5 	udiv	r3, r6, r5
    3990:	fb05 6313 	mls	r3, r5, r3, r6
    3994:	b923      	cbnz	r3, 39a0 <flash_nrf_erase+0x2c>
    3996:	fbb4 f3f5 	udiv	r3, r4, r5
    399a:	fb05 4313 	mls	r3, r5, r3, r4
    399e:	b143      	cbz	r3, 39b2 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    39a0:	4623      	mov	r3, r4
    39a2:	4632      	mov	r2, r6
    39a4:	2145      	movs	r1, #69	; 0x45
    39a6:	4811      	ldr	r0, [pc, #68]	; (39ec <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    39a8:	f004 faff 	bl	7faa <z_log_minimal_printk>
			return -EINVAL;
    39ac:	f06f 0015 	mvn.w	r0, #21
    39b0:	e002      	b.n	39b8 <flash_nrf_erase+0x44>
		if (!n_pages) {
    39b2:	42a5      	cmp	r5, r4
    39b4:	d901      	bls.n	39ba <flash_nrf_erase+0x46>
			return 0;
    39b6:	2000      	movs	r0, #0
}
    39b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
    39ba:	f04f 32ff 	mov.w	r2, #4294967295
    39be:	f04f 33ff 	mov.w	r3, #4294967295
    39c2:	480b      	ldr	r0, [pc, #44]	; (39f0 <flash_nrf_erase+0x7c>)
    39c4:	f002 fa1c 	bl	5e00 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    39c8:	f004 ffe0 	bl	898c <nrfx_nvmc_flash_page_size_get>
    39cc:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    39ce:	4638      	mov	r0, r7
    39d0:	f001 fbcc 	bl	516c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    39d4:	1b64      	subs	r4, r4, r5
    39d6:	442f      	add	r7, r5
    39d8:	d1f9      	bne.n	39ce <flash_nrf_erase+0x5a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    39da:	4805      	ldr	r0, [pc, #20]	; (39f0 <flash_nrf_erase+0x7c>)
    39dc:	f002 f9f0 	bl	5dc0 <z_impl_k_sem_give>
}
    39e0:	e7e9      	b.n	39b6 <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    39e2:	4623      	mov	r3, r4
    39e4:	4632      	mov	r2, r6
    39e6:	2145      	movs	r1, #69	; 0x45
    39e8:	4802      	ldr	r0, [pc, #8]	; (39f4 <flash_nrf_erase+0x80>)
    39ea:	e7dd      	b.n	39a8 <flash_nrf_erase+0x34>
    39ec:	0000a24c 	.word	0x0000a24c
    39f0:	20004c08 	.word	0x20004c08
    39f4:	0000a22a 	.word	0x0000a22a

000039f8 <flash_nrf_write>:
{
    39f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39fc:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    39fe:	4619      	mov	r1, r3
    3a00:	4628      	mov	r0, r5
{
    3a02:	4616      	mov	r6, r2
    3a04:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3a06:	f004 fcda 	bl	83be <is_regular_addr_valid>
    3a0a:	b948      	cbnz	r0, 3a20 <flash_nrf_write+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3a0c:	4821      	ldr	r0, [pc, #132]	; (3a94 <flash_nrf_write+0x9c>)
    3a0e:	4623      	mov	r3, r4
    3a10:	462a      	mov	r2, r5
    3a12:	2145      	movs	r1, #69	; 0x45
    3a14:	f004 fac9 	bl	7faa <z_log_minimal_printk>
		return -EINVAL;
    3a18:	f06f 0015 	mvn.w	r0, #21
}
    3a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
    3a20:	b90c      	cbnz	r4, 3a26 <flash_nrf_write+0x2e>
		return 0;
    3a22:	2000      	movs	r0, #0
    3a24:	e7fa      	b.n	3a1c <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
    3a26:	f04f 32ff 	mov.w	r2, #4294967295
    3a2a:	f04f 33ff 	mov.w	r3, #4294967295
    3a2e:	481a      	ldr	r0, [pc, #104]	; (3a98 <flash_nrf_write+0xa0>)
    3a30:	f002 f9e6 	bl	5e00 <z_impl_k_sem_take>
		nrf_flash_sync_get_timestamp_begin();
	}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
    3a34:	f015 0703 	ands.w	r7, r5, #3
    3a38:	d00c      	beq.n	3a54 <flash_nrf_write+0x5c>
		uint32_t count = sizeof(uint32_t) - (w_ctx->flash_addr & 0x3);
    3a3a:	f1c7 0704 	rsb	r7, r7, #4
    3a3e:	42a7      	cmp	r7, r4
    3a40:	bf28      	it	cs
    3a42:	4627      	movcs	r7, r4

		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    3a44:	4631      	mov	r1, r6
    3a46:	4628      	mov	r0, r5
    3a48:	463a      	mov	r2, r7
    3a4a:	f001 fbbd 	bl	51c8 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
    3a4e:	443d      	add	r5, r7
	w_ctx->data_addr += shift;
    3a50:	443e      	add	r6, r7
	w_ctx->len -= shift;
    3a52:	1be4      	subs	r4, r4, r7
{
    3a54:	2700      	movs	r7, #0
    3a56:	f024 0803 	bic.w	r8, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3a5a:	45b8      	cmp	r8, r7
    3a5c:	eb07 0005 	add.w	r0, r7, r5
    3a60:	d112      	bne.n	3a88 <flash_nrf_write+0x90>
    3a62:	f06f 0203 	mvn.w	r2, #3
    3a66:	08a3      	lsrs	r3, r4, #2
    3a68:	fb02 4203 	mla	r2, r2, r3, r4
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#if IS_ENABLED(CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS)
	/* Write remaining unaligned data */
	if (w_ctx->len) {
    3a6c:	b11a      	cbz	r2, 3a76 <flash_nrf_write+0x7e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
    3a6e:	eb06 0108 	add.w	r1, r6, r8
    3a72:	f001 fba9 	bl	51c8 <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3a76:	4a09      	ldr	r2, [pc, #36]	; (3a9c <flash_nrf_write+0xa4>)
    3a78:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3a7c:	07db      	lsls	r3, r3, #31
    3a7e:	d5fb      	bpl.n	3a78 <flash_nrf_write+0x80>
	z_impl_k_sem_give(sem);
    3a80:	4805      	ldr	r0, [pc, #20]	; (3a98 <flash_nrf_write+0xa0>)
    3a82:	f002 f99d 	bl	5dc0 <z_impl_k_sem_give>
	return ret;
    3a86:	e7cc      	b.n	3a22 <flash_nrf_write+0x2a>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3a88:	59f1      	ldr	r1, [r6, r7]
    3a8a:	f001 fb8d 	bl	51a8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    3a8e:	3704      	adds	r7, #4
}
    3a90:	e7e3      	b.n	3a5a <flash_nrf_write+0x62>
    3a92:	bf00      	nop
    3a94:	0000a22a 	.word	0x0000a22a
    3a98:	20004c08 	.word	0x20004c08
    3a9c:	50039000 	.word	0x50039000

00003aa0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3aa2:	794b      	ldrb	r3, [r1, #5]
    3aa4:	2b01      	cmp	r3, #1
    3aa6:	d029      	beq.n	3afc <uarte_nrfx_configure+0x5c>
    3aa8:	2b03      	cmp	r3, #3
    3aaa:	d124      	bne.n	3af6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3aac:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3aae:	798b      	ldrb	r3, [r1, #6]
    3ab0:	2b03      	cmp	r3, #3
    3ab2:	d120      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3ab4:	79ce      	ldrb	r6, [r1, #7]
    3ab6:	b10e      	cbz	r6, 3abc <uarte_nrfx_configure+0x1c>
    3ab8:	2e01      	cmp	r6, #1
    3aba:	d11c      	bne.n	3af6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3abc:	790a      	ldrb	r2, [r1, #4]
    3abe:	2a01      	cmp	r2, #1
    3ac0:	d01e      	beq.n	3b00 <uarte_nrfx_configure+0x60>
    3ac2:	2a02      	cmp	r2, #2
    3ac4:	d020      	beq.n	3b08 <uarte_nrfx_configure+0x68>
    3ac6:	b9b2      	cbnz	r2, 3af6 <uarte_nrfx_configure+0x56>
    3ac8:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3aca:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3acc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3ace:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3ad2:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    3ad6:	d06e      	beq.n	3bb6 <uarte_nrfx_configure+0x116>
    3ad8:	d833      	bhi.n	3b42 <uarte_nrfx_configure+0xa2>
    3ada:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3ade:	d06d      	beq.n	3bbc <uarte_nrfx_configure+0x11c>
    3ae0:	d81c      	bhi.n	3b1c <uarte_nrfx_configure+0x7c>
    3ae2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ae6:	d06b      	beq.n	3bc0 <uarte_nrfx_configure+0x120>
    3ae8:	d810      	bhi.n	3b0c <uarte_nrfx_configure+0x6c>
    3aea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3aee:	d06a      	beq.n	3bc6 <uarte_nrfx_configure+0x126>
    3af0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3af4:	d06a      	beq.n	3bcc <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    3af6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3afa:	e05b      	b.n	3bb4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    3afc:	2700      	movs	r7, #0
    3afe:	e7d6      	b.n	3aae <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    3b00:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3b04:	220e      	movs	r2, #14
    3b06:	e7e0      	b.n	3aca <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    3b08:	2400      	movs	r4, #0
    3b0a:	e7fb      	b.n	3b04 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    3b0c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3b10:	d05f      	beq.n	3bd2 <uarte_nrfx_configure+0x132>
    3b12:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3b16:	d1ee      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3b18:	4b38      	ldr	r3, [pc, #224]	; (3bfc <uarte_nrfx_configure+0x15c>)
    3b1a:	e03c      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b1c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3b20:	d05a      	beq.n	3bd8 <uarte_nrfx_configure+0x138>
    3b22:	d807      	bhi.n	3b34 <uarte_nrfx_configure+0x94>
    3b24:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3b28:	d058      	beq.n	3bdc <uarte_nrfx_configure+0x13c>
    3b2a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3b2e:	d1e2      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3b30:	4b33      	ldr	r3, [pc, #204]	; (3c00 <uarte_nrfx_configure+0x160>)
    3b32:	e030      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b34:	f647 2512 	movw	r5, #31250	; 0x7a12
    3b38:	42ab      	cmp	r3, r5
    3b3a:	d1dc      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3b3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3b40:	e029      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b42:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3b46:	d04b      	beq.n	3be0 <uarte_nrfx_configure+0x140>
    3b48:	d813      	bhi.n	3b72 <uarte_nrfx_configure+0xd2>
    3b4a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3b4e:	d04a      	beq.n	3be6 <uarte_nrfx_configure+0x146>
    3b50:	d809      	bhi.n	3b66 <uarte_nrfx_configure+0xc6>
    3b52:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    3b56:	42ab      	cmp	r3, r5
    3b58:	d047      	beq.n	3bea <uarte_nrfx_configure+0x14a>
    3b5a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3b5e:	d1ca      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3b60:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3b64:	e017      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b66:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3b6a:	d1c4      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3b6c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3b70:	e011      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b72:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3b76:	d03b      	beq.n	3bf0 <uarte_nrfx_configure+0x150>
    3b78:	d808      	bhi.n	3b8c <uarte_nrfx_configure+0xec>
    3b7a:	4d22      	ldr	r5, [pc, #136]	; (3c04 <uarte_nrfx_configure+0x164>)
    3b7c:	42ab      	cmp	r3, r5
    3b7e:	d03a      	beq.n	3bf6 <uarte_nrfx_configure+0x156>
    3b80:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3b84:	d1b7      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3b86:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3b8a:	e004      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3b8c:	4d1e      	ldr	r5, [pc, #120]	; (3c08 <uarte_nrfx_configure+0x168>)
    3b8e:	42ab      	cmp	r3, r5
    3b90:	d1b1      	bne.n	3af6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3b92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3b96:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3b98:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    3b9c:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    3b9e:	433a      	orrs	r2, r7
    3ba0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    3ba2:	4334      	orrs	r4, r6
    3ba4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3ba6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3baa:	1d2b      	adds	r3, r5, #4
    3bac:	c903      	ldmia	r1, {r0, r1}
    3bae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3bb2:	2000      	movs	r0, #0
}
    3bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3bb6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3bba:	e7ec      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3bbc:	4b13      	ldr	r3, [pc, #76]	; (3c0c <uarte_nrfx_configure+0x16c>)
    3bbe:	e7ea      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3bc0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3bc4:	e7e7      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    3bc6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3bca:	e7e4      	b.n	3b96 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    3bcc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3bd0:	e7e1      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3bd2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3bd6:	e7de      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3bd8:	4b0d      	ldr	r3, [pc, #52]	; (3c10 <uarte_nrfx_configure+0x170>)
    3bda:	e7dc      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3bdc:	4b0d      	ldr	r3, [pc, #52]	; (3c14 <uarte_nrfx_configure+0x174>)
    3bde:	e7da      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3be0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3be4:	e7d7      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3be6:	4b0c      	ldr	r3, [pc, #48]	; (3c18 <uarte_nrfx_configure+0x178>)
    3be8:	e7d5      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3bea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3bee:	e7d2      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3bf0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3bf4:	e7cf      	b.n	3b96 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3bf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3bfa:	e7cc      	b.n	3b96 <uarte_nrfx_configure+0xf6>
    3bfc:	0013b000 	.word	0x0013b000
    3c00:	004ea000 	.word	0x004ea000
    3c04:	0003d090 	.word	0x0003d090
    3c08:	000f4240 	.word	0x000f4240
    3c0c:	00275000 	.word	0x00275000
    3c10:	0075c000 	.word	0x0075c000
    3c14:	003af000 	.word	0x003af000
    3c18:	013a9000 	.word	0x013a9000

00003c1c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3c20:	4680      	mov	r8, r0
    3c22:	2200      	movs	r2, #0
    3c24:	2101      	movs	r1, #1
    3c26:	2008      	movs	r0, #8
    3c28:	f7fe fa9e 	bl	2168 <z_arm_irq_priority_set>
    3c2c:	2008      	movs	r0, #8
    3c2e:	f7fe fa6b 	bl	2108 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3c32:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    3c34:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    3c38:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    3c3c:	683c      	ldr	r4, [r7, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    3c3e:	aa01      	add	r2, sp, #4
    3c40:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    3c44:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3c48:	f8d7 900c 	ldr.w	r9, [r7, #12]
    3c4c:	4648      	mov	r0, r9
    3c4e:	f004 fc6b 	bl	8528 <pinctrl_lookup_state>
	if (ret < 0) {
    3c52:	1e05      	subs	r5, r0, #0
    3c54:	db1e      	blt.n	3c94 <uarte_0_init+0x78>
	return pinctrl_apply_state_direct(config, state);
    3c56:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3c58:	f8d9 2000 	ldr.w	r2, [r9]
    3c5c:	7919      	ldrb	r1, [r3, #4]
    3c5e:	6818      	ldr	r0, [r3, #0]
    3c60:	f000 fab8 	bl	41d4 <pinctrl_configure_pins>
	if (err < 0) {
    3c64:	1e05      	subs	r5, r0, #0
    3c66:	db15      	blt.n	3c94 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3c68:	4640      	mov	r0, r8
    3c6a:	1d31      	adds	r1, r6, #4
    3c6c:	f7ff ff18 	bl	3aa0 <uarte_nrfx_configure>
	if (err) {
    3c70:	4605      	mov	r5, r0
    3c72:	b978      	cbnz	r0, 3c94 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3c74:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3c76:	0799      	lsls	r1, r3, #30
    3c78:	d51d      	bpl.n	3cb6 <uarte_0_init+0x9a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3c7a:	f106 0018 	add.w	r0, r6, #24
    3c7e:	f000 feef 	bl	4a60 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3c82:	4b21      	ldr	r3, [pc, #132]	; (3d08 <uarte_0_init+0xec>)
    3c84:	4298      	cmp	r0, r3
    3c86:	d009      	beq.n	3c9c <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    3c88:	2145      	movs	r1, #69	; 0x45
    3c8a:	4820      	ldr	r0, [pc, #128]	; (3d0c <uarte_0_init+0xf0>)
    3c8c:	f004 f98d 	bl	7faa <z_log_minimal_printk>
		return -EIO;
    3c90:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    3c94:	4628      	mov	r0, r5
    3c96:	b003      	add	sp, #12
    3c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3c9c:	7e33      	ldrb	r3, [r6, #24]
    3c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3ca2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3ca6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3caa:	2301      	movs	r3, #1
    3cac:	7e32      	ldrb	r2, [r6, #24]
    3cae:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3cb0:	4a17      	ldr	r2, [pc, #92]	; (3d10 <uarte_0_init+0xf4>)
    3cb2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3cb6:	2308      	movs	r3, #8
    3cb8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3cbc:	7a3b      	ldrb	r3, [r7, #8]
    3cbe:	b953      	cbnz	r3, 3cd6 <uarte_0_init+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cc0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3cc4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3cc8:	6973      	ldr	r3, [r6, #20]
    3cca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3cce:	2301      	movs	r3, #1
    3cd0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cd4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3cda:	bf5c      	itt	pl
    3cdc:	f44f 7380 	movpl.w	r3, #256	; 0x100
    3ce0:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	06db      	lsls	r3, r3, #27
    3ce8:	bf44      	itt	mi
    3cea:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3cee:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3cf2:	6933      	ldr	r3, [r6, #16]
    3cf4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3cf8:	2300      	movs	r3, #0
    3cfa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cfe:	2301      	movs	r3, #1
    3d00:	60a3      	str	r3, [r4, #8]
    3d02:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3d04:	e7c6      	b.n	3c94 <uarte_0_init+0x78>
    3d06:	bf00      	nop
    3d08:	0bad0000 	.word	0x0bad0000
    3d0c:	0000a291 	.word	0x0000a291
    3d10:	50017000 	.word	0x50017000

00003d14 <uarte_nrfx_poll_out>:
{
    3d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d16:	4604      	mov	r4, r0
    3d18:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    3d1a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3d1c:	f004 fea6 	bl	8a6c <k_is_in_isr>
    3d20:	b9b0      	cbnz	r0, 3d50 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    3d22:	4b2e      	ldr	r3, [pc, #184]	; (3ddc <uarte_nrfx_poll_out+0xc8>)
    3d24:	781b      	ldrb	r3, [r3, #0]
    3d26:	b19b      	cbz	r3, 3d50 <uarte_nrfx_poll_out+0x3c>
{
    3d28:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3d2a:	6860      	ldr	r0, [r4, #4]
    3d2c:	f004 fba7 	bl	847e <is_tx_ready.isra.0>
    3d30:	bb00      	cbnz	r0, 3d74 <uarte_nrfx_poll_out+0x60>
    3d32:	2001      	movs	r0, #1
    3d34:	f004 fc88 	bl	8648 <nrfx_busy_wait>
    3d38:	3e01      	subs	r6, #1
    3d3a:	d1f6      	bne.n	3d2a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    3d3c:	2100      	movs	r1, #0
    3d3e:	2021      	movs	r0, #33	; 0x21
    3d40:	f002 fb4e 	bl	63e0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3d44:	e7f0      	b.n	3d28 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3d46:	f386 8811 	msr	BASEPRI, r6
    3d4a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3d4e:	e7f5      	b.n	3d3c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3d50:	f04f 0320 	mov.w	r3, #32
    3d54:	f3ef 8611 	mrs	r6, BASEPRI
    3d58:	f383 8812 	msr	BASEPRI_MAX, r3
    3d5c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3d60:	6860      	ldr	r0, [r4, #4]
    3d62:	4631      	mov	r1, r6
    3d64:	f004 fb8b 	bl	847e <is_tx_ready.isra.0>
    3d68:	b990      	cbnz	r0, 3d90 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    3d6a:	f386 8811 	msr	BASEPRI, r6
    3d6e:	f3bf 8f6f 	isb	sy
}
    3d72:	e7ed      	b.n	3d50 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3d74:	f04f 0320 	mov.w	r3, #32
    3d78:	f3ef 8611 	mrs	r6, BASEPRI
    3d7c:	f383 8812 	msr	BASEPRI_MAX, r3
    3d80:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3d84:	6860      	ldr	r0, [r4, #4]
    3d86:	4631      	mov	r1, r6
    3d88:	f004 fb79 	bl	847e <is_tx_ready.isra.0>
    3d8c:	2800      	cmp	r0, #0
    3d8e:	d0da      	beq.n	3d46 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    3d90:	693b      	ldr	r3, [r7, #16]
    3d92:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    3d94:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3d96:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    3d98:	6813      	ldr	r3, [r2, #0]
    3d9a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3d9e:	2001      	movs	r0, #1
    3da0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3da4:	2000      	movs	r0, #0
    3da6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    3daa:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    3dae:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3db2:	6852      	ldr	r2, [r2, #4]
    3db4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3db8:	06d2      	lsls	r2, r2, #27
    3dba:	d508      	bpl.n	3dce <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3dbc:	2008      	movs	r0, #8
	return config->uarte_regs;
    3dbe:	6862      	ldr	r2, [r4, #4]
    3dc0:	6812      	ldr	r2, [r2, #0]
    3dc2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3dc6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3dca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dce:	2201      	movs	r2, #1
    3dd0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3dd2:	f381 8811 	msr	BASEPRI, r1
    3dd6:	f3bf 8f6f 	isb	sy
}
    3dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ddc:	20044f70 	.word	0x20044f70

00003de0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3de0:	2301      	movs	r3, #1
    3de2:	4083      	lsls	r3, r0
{
    3de4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3de6:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3de8:	4a0b      	ldr	r2, [pc, #44]	; (3e18 <compare_int_lock+0x38>)
    3dea:	e8d2 1fef 	ldaex	r1, [r2]
    3dee:	ea01 0504 	and.w	r5, r1, r4
    3df2:	e8c2 5fe6 	stlex	r6, r5, [r2]
    3df6:	2e00      	cmp	r6, #0
    3df8:	d1f7      	bne.n	3dea <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3dfe:	4082      	lsls	r2, r0
    3e00:	4806      	ldr	r0, [pc, #24]	; (3e1c <compare_int_lock+0x3c>)
    3e02:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3e06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e0a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3e0e:	420b      	tst	r3, r1
}
    3e10:	bf14      	ite	ne
    3e12:	2001      	movne	r0, #1
    3e14:	2000      	moveq	r0, #0
    3e16:	bd70      	pop	{r4, r5, r6, pc}
    3e18:	20004c1c 	.word	0x20004c1c
    3e1c:	50015000 	.word	0x50015000

00003e20 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3e20:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3e22:	490e      	ldr	r1, [pc, #56]	; (3e5c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    3e24:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3e28:	e9d1 3400 	ldrd	r3, r4, [r1]
    3e2c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    3e2e:	18c3      	adds	r3, r0, r3
    3e30:	f144 0400 	adc.w	r4, r4, #0
    3e34:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3e38:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3e40:	d209      	bcs.n	3e56 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3e42:	4b07      	ldr	r3, [pc, #28]	; (3e60 <sys_clock_timeout_handler+0x40>)
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	0a1a      	lsrs	r2, r3, #8
    3e48:	061b      	lsls	r3, r3, #24
    3e4a:	199c      	adds	r4, r3, r6
    3e4c:	4b05      	ldr	r3, [pc, #20]	; (3e64 <sys_clock_timeout_handler+0x44>)
    3e4e:	f142 0500 	adc.w	r5, r2, #0
    3e52:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    3e56:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    3e58:	f002 bc28 	b.w	66ac <sys_clock_announce>
    3e5c:	20002228 	.word	0x20002228
    3e60:	20004c20 	.word	0x20004c20
    3e64:	20002230 	.word	0x20002230

00003e68 <compare_int_unlock>:
	if (key) {
    3e68:	b1d9      	cbz	r1, 3ea2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    3e6a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e6c:	4a0d      	ldr	r2, [pc, #52]	; (3ea4 <compare_int_unlock+0x3c>)
    3e6e:	4083      	lsls	r3, r0
    3e70:	e8d2 cfef 	ldaex	ip, [r2]
    3e74:	ea4c 0c03 	orr.w	ip, ip, r3
    3e78:	e8c2 cfe1 	stlex	r1, ip, [r2]
    3e7c:	2900      	cmp	r1, #0
    3e7e:	d1f7      	bne.n	3e70 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3e84:	4a08      	ldr	r2, [pc, #32]	; (3ea8 <compare_int_unlock+0x40>)
    3e86:	4083      	lsls	r3, r0
    3e88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3e8c:	4b07      	ldr	r3, [pc, #28]	; (3eac <compare_int_unlock+0x44>)
    3e8e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3e92:	40c3      	lsrs	r3, r0
    3e94:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e96:	bf42      	ittt	mi
    3e98:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3e9c:	4b04      	ldrmi	r3, [pc, #16]	; (3eb0 <compare_int_unlock+0x48>)
    3e9e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3ea2:	4770      	bx	lr
    3ea4:	20004c1c 	.word	0x20004c1c
    3ea8:	50015000 	.word	0x50015000
    3eac:	20004c18 	.word	0x20004c18
    3eb0:	e000e100 	.word	0xe000e100

00003eb4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3eb4:	4b0d      	ldr	r3, [pc, #52]	; (3eec <z_nrf_rtc_timer_read+0x38>)
    3eb6:	6818      	ldr	r0, [r3, #0]
    3eb8:	0a01      	lsrs	r1, r0, #8
    3eba:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3ebc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3ec0:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <z_nrf_rtc_timer_read+0x3c>)
    3ec2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3ec6:	1818      	adds	r0, r3, r0
    3ec8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ed0:	d20a      	bcs.n	3ee8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ed2:	4b08      	ldr	r3, [pc, #32]	; (3ef4 <z_nrf_rtc_timer_read+0x40>)
    3ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ed8:	4290      	cmp	r0, r2
    3eda:	eb71 0303 	sbcs.w	r3, r1, r3
    3ede:	d203      	bcs.n	3ee8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3ee0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3ee4:	f141 0100 	adc.w	r1, r1, #0
}
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	20004c20 	.word	0x20004c20
    3ef0:	50015000 	.word	0x50015000
    3ef4:	20002230 	.word	0x20002230

00003ef8 <compare_set>:
{
    3ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3efc:	4616      	mov	r6, r2
    3efe:	461f      	mov	r7, r3
    3f00:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3f02:	f7ff ff6d 	bl	3de0 <compare_int_lock>
    3f06:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3f08:	f7ff ffd4 	bl	3eb4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3f0c:	42b0      	cmp	r0, r6
    3f0e:	eb71 0307 	sbcs.w	r3, r1, r7
    3f12:	d250      	bcs.n	3fb6 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3f14:	4b38      	ldr	r3, [pc, #224]	; (3ff8 <compare_set+0x100>)
    3f16:	1a30      	subs	r0, r6, r0
    3f18:	eb67 0101 	sbc.w	r1, r7, r1
    3f1c:	4298      	cmp	r0, r3
    3f1e:	f171 0100 	sbcs.w	r1, r1, #0
    3f22:	d265      	bcs.n	3ff0 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    3f24:	4b35      	ldr	r3, [pc, #212]	; (3ffc <compare_set+0x104>)
    3f26:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3f2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3f2e:	429f      	cmp	r7, r3
    3f30:	bf08      	it	eq
    3f32:	4296      	cmpeq	r6, r2
    3f34:	d049      	beq.n	3fca <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f36:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    3f3a:	4931      	ldr	r1, [pc, #196]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3f3c:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    3f40:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    3f42:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    3f46:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    3f4a:	f004 fae1 	bl	8510 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    3f4e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    3f52:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3f54:	f104 0550 	add.w	r5, r4, #80	; 0x50
    3f58:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f5a:	b2ad      	uxth	r5, r5
    3f5c:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    3f60:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3f64:	4a27      	ldr	r2, [pc, #156]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f66:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    3f6a:	9301      	str	r3, [sp, #4]
    3f6c:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f70:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    3f74:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    3f78:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    3f7c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f80:	eba0 0008 	sub.w	r0, r0, r8
    3f84:	3803      	subs	r0, #3
    3f86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3f8a:	4290      	cmp	r0, r2
    3f8c:	d91d      	bls.n	3fca <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f8e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3f90:	b160      	cbz	r0, 3fac <compare_set+0xb4>
     return p_reg->COUNTER;
    3f92:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f96:	eba8 000b 	sub.w	r0, r8, fp
    3f9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3f9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fa2:	d912      	bls.n	3fca <compare_set+0xd2>
					event_clear(chan);
    3fa4:	4620      	mov	r0, r4
    3fa6:	f004 fab3 	bl	8510 <event_clear>
    3faa:	4a16      	ldr	r2, [pc, #88]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
			cc_val = now + cc_inc;
    3fac:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    3fb0:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3fb4:	e7da      	b.n	3f6c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3fb6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3fb8:	4a13      	ldr	r2, [pc, #76]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
    3fba:	40a3      	lsls	r3, r4
    3fbc:	e8d2 0fef 	ldaex	r0, [r2]
    3fc0:	4318      	orrs	r0, r3
    3fc2:	e8c2 0fe1 	stlex	r1, r0, [r2]
    3fc6:	2900      	cmp	r1, #0
    3fc8:	d1f8      	bne.n	3fbc <compare_set+0xc4>
	return ret;
    3fca:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    3fcc:	490b      	ldr	r1, [pc, #44]	; (3ffc <compare_set+0x104>)
	cc_data[chan].callback = handler;
    3fce:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3fd0:	0123      	lsls	r3, r4, #4
    3fd2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    3fd6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    3fd8:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    3fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3fde:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    3fe0:	4620      	mov	r0, r4
    3fe2:	9900      	ldr	r1, [sp, #0]
    3fe4:	f7ff ff40 	bl	3e68 <compare_int_unlock>
}
    3fe8:	4628      	mov	r0, r5
    3fea:	b003      	add	sp, #12
    3fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3ff0:	f06f 0515 	mvn.w	r5, #21
    3ff4:	e7f4      	b.n	3fe0 <compare_set+0xe8>
    3ff6:	bf00      	nop
    3ff8:	00800001 	.word	0x00800001
    3ffc:	20002218 	.word	0x20002218
    4000:	50015000 	.word	0x50015000
    4004:	007ffffd 	.word	0x007ffffd
    4008:	20004c18 	.word	0x20004c18

0000400c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    400c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PRESCALER = val;
    400e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4010:	f04f 30ff 	mov.w	r0, #4294967295
    4014:	f04f 31ff 	mov.w	r1, #4294967295
    4018:	4d16      	ldr	r5, [pc, #88]	; (4074 <sys_clock_driver_init+0x68>)
    401a:	4b17      	ldr	r3, [pc, #92]	; (4078 <sys_clock_driver_init+0x6c>)
    401c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4020:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4028:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    402c:	2302      	movs	r3, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    402e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4032:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    4036:	4b11      	ldr	r3, [pc, #68]	; (407c <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4038:	2101      	movs	r1, #1
    403a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    403e:	2015      	movs	r0, #21
    4040:	4622      	mov	r2, r4
    4042:	f7fe f891 	bl	2168 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4046:	2015      	movs	r0, #21
    4048:	f7fe f85e 	bl	2108 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    404c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    404e:	4a0c      	ldr	r2, [pc, #48]	; (4080 <sys_clock_driver_init+0x74>)
    4050:	60ab      	str	r3, [r5, #8]
    4052:	602b      	str	r3, [r5, #0]
    4054:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4056:	4b0b      	ldr	r3, [pc, #44]	; (4084 <sys_clock_driver_init+0x78>)
    4058:	4a0b      	ldr	r2, [pc, #44]	; (4088 <sys_clock_driver_init+0x7c>)
    405a:	9300      	str	r3, [sp, #0]
    405c:	4620      	mov	r0, r4
    405e:	2300      	movs	r3, #0
    4060:	9401      	str	r4, [sp, #4]
    4062:	f7ff ff49 	bl	3ef8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4066:	4620      	mov	r0, r4
    4068:	f7fe fea0 	bl	2dac <z_nrf_clock_control_lf_on>

	return 0;
}
    406c:	4620      	mov	r0, r4
    406e:	b003      	add	sp, #12
    4070:	bd30      	pop	{r4, r5, pc}
    4072:	bf00      	nop
    4074:	50015000 	.word	0x50015000
    4078:	20002218 	.word	0x20002218
    407c:	e000e100 	.word	0xe000e100
    4080:	20004c1c 	.word	0x20004c1c
    4084:	00003e21 	.word	0x00003e21
    4088:	007fffff 	.word	0x007fffff

0000408c <rtc_nrf_isr>:
{
    408c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4090:	4b2e      	ldr	r3, [pc, #184]	; (414c <rtc_nrf_isr+0xc0>)
    4092:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4096:	0790      	lsls	r0, r2, #30
    4098:	d50b      	bpl.n	40b2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    409a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    409e:	b142      	cbz	r2, 40b2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40a0:	2200      	movs	r2, #0
    40a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    40a6:	4a2a      	ldr	r2, [pc, #168]	; (4150 <rtc_nrf_isr+0xc4>)
    40a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    40ac:	6813      	ldr	r3, [r2, #0]
    40ae:	3301      	adds	r3, #1
    40b0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    40b2:	4a26      	ldr	r2, [pc, #152]	; (414c <rtc_nrf_isr+0xc0>)
    40b4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    40b8:	03d9      	lsls	r1, r3, #15
    40ba:	d527      	bpl.n	410c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    40bc:	4b25      	ldr	r3, [pc, #148]	; (4154 <rtc_nrf_isr+0xc8>)
    40be:	e8d3 1fef 	ldaex	r1, [r3]
    40c2:	f021 0001 	bic.w	r0, r1, #1
    40c6:	e8c3 0fe4 	stlex	r4, r0, [r3]
    40ca:	2c00      	cmp	r4, #0
    40cc:	d1f7      	bne.n	40be <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    40ce:	07cb      	lsls	r3, r1, #31
    40d0:	d402      	bmi.n	40d8 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40d2:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    40d6:	b1cb      	cbz	r3, 410c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40d8:	2500      	movs	r5, #0
    40da:	4c1c      	ldr	r4, [pc, #112]	; (414c <rtc_nrf_isr+0xc0>)
    40dc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    40e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    40e4:	f7ff fee6 	bl	3eb4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    40e8:	f04f 0320 	mov.w	r3, #32
    40ec:	f3ef 8211 	mrs	r2, BASEPRI
    40f0:	f383 8812 	msr	BASEPRI_MAX, r3
    40f4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    40f8:	4b17      	ldr	r3, [pc, #92]	; (4158 <rtc_nrf_isr+0xcc>)
    40fa:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    40fe:	42b0      	cmp	r0, r6
    4100:	41b9      	sbcs	r1, r7
    4102:	d206      	bcs.n	4112 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    4104:	f382 8811 	msr	BASEPRI, r2
    4108:	f3bf 8f6f 	isb	sy
}
    410c:	b003      	add	sp, #12
    410e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4112:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    4116:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    411a:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    411e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4120:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    4124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4128:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    412c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4130:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4134:	f382 8811 	msr	BASEPRI, r2
    4138:	f3bf 8f6f 	isb	sy
		if (handler) {
    413c:	2900      	cmp	r1, #0
    413e:	d0e5      	beq.n	410c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    4140:	9000      	str	r0, [sp, #0]
    4142:	4632      	mov	r2, r6
    4144:	463b      	mov	r3, r7
    4146:	4628      	mov	r0, r5
    4148:	4788      	blx	r1
    414a:	e7df      	b.n	410c <rtc_nrf_isr+0x80>
    414c:	50015000 	.word	0x50015000
    4150:	20004c20 	.word	0x20004c20
    4154:	20004c18 	.word	0x20004c18
    4158:	20002218 	.word	0x20002218

0000415c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    415c:	1c43      	adds	r3, r0, #1
{
    415e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    4160:	d021      	beq.n	41a6 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    4162:	2801      	cmp	r0, #1
    4164:	dd21      	ble.n	41aa <sys_clock_set_timeout+0x4e>
    4166:	4a12      	ldr	r2, [pc, #72]	; (41b0 <sys_clock_set_timeout+0x54>)
    4168:	4b12      	ldr	r3, [pc, #72]	; (41b4 <sys_clock_set_timeout+0x58>)
    416a:	4290      	cmp	r0, r2
    416c:	bfd4      	ite	le
    416e:	4604      	movle	r4, r0
    4170:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4172:	f7ff fe9f 	bl	3eb4 <z_nrf_rtc_timer_read>
    4176:	4b10      	ldr	r3, [pc, #64]	; (41b8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    4178:	490e      	ldr	r1, [pc, #56]	; (41b4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    417a:	e9d3 2300 	ldrd	r2, r3, [r3]
    417e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    4180:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4184:	bf28      	it	cs
    4186:	2400      	movcs	r4, #0
	cyc += unannounced;
    4188:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    418a:	428c      	cmp	r4, r1
    418c:	bf28      	it	cs
    418e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    4190:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4192:	490a      	ldr	r1, [pc, #40]	; (41bc <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    4194:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4196:	9001      	str	r0, [sp, #4]
    4198:	9100      	str	r1, [sp, #0]
    419a:	f143 0300 	adc.w	r3, r3, #0
    419e:	f7ff feab 	bl	3ef8 <compare_set>
}
    41a2:	b002      	add	sp, #8
    41a4:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    41a6:	4c03      	ldr	r4, [pc, #12]	; (41b4 <sys_clock_set_timeout+0x58>)
    41a8:	e7e3      	b.n	4172 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    41aa:	2401      	movs	r4, #1
    41ac:	e7e1      	b.n	4172 <sys_clock_set_timeout+0x16>
    41ae:	bf00      	nop
    41b0:	007ffffe 	.word	0x007ffffe
    41b4:	007fffff 	.word	0x007fffff
    41b8:	20002228 	.word	0x20002228
    41bc:	00003e21 	.word	0x00003e21

000041c0 <sys_clock_elapsed>:
{
    41c0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    41c2:	f7ff fe77 	bl	3eb4 <z_nrf_rtc_timer_read>
    41c6:	4b02      	ldr	r3, [pc, #8]	; (41d0 <sys_clock_elapsed+0x10>)
    41c8:	681b      	ldr	r3, [r3, #0]
}
    41ca:	1ac0      	subs	r0, r0, r3
    41cc:	bd08      	pop	{r3, pc}
    41ce:	bf00      	nop
    41d0:	20002228 	.word	0x20002228

000041d4 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    41d4:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    41d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    41dc:	4e5b      	ldr	r6, [pc, #364]	; (434c <pinctrl_configure_pins+0x178>)
    41de:	4f5c      	ldr	r7, [pc, #368]	; (4350 <pinctrl_configure_pins+0x17c>)
    41e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    41e4:	4281      	cmp	r1, r0
    41e6:	d102      	bne.n	41ee <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    41e8:	2000      	movs	r0, #0
}
    41ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    41ee:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    41f0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    41f4:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    41f8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    41fa:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    41fe:	bf08      	it	eq
    4200:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    4204:	2c22      	cmp	r4, #34	; 0x22
    4206:	f200 809d 	bhi.w	4344 <pinctrl_configure_pins+0x170>
    420a:	e8df f004 	tbb	[pc, r4]
    420e:	2312      	.short	0x2312
    4210:	3e2b4228 	.word	0x3e2b4228
    4214:	9b9b9b42 	.word	0x9b9b9b42
    4218:	9b72459b 	.word	0x9b72459b
    421c:	9b9b9b9b 	.word	0x9b9b9b9b
    4220:	9b9b9b9b 	.word	0x9b9b9b9b
    4224:	83807d75 	.word	0x83807d75
    4228:	869b9b9b 	.word	0x869b9b9b
    422c:	95928f8c 	.word	0x95928f8c
    4230:	98          	.byte	0x98
    4231:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    4232:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    4236:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    423a:	f1b8 0f01 	cmp.w	r8, #1
    423e:	bf14      	ite	ne
    4240:	46b6      	movne	lr, r6
    4242:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    4244:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4248:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    424c:	f8ce 4008 	str.w	r4, [lr, #8]
    4250:	2401      	movs	r4, #1
    4252:	e002      	b.n	425a <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    4254:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4258:	2400      	movs	r4, #0
    425a:	46a6      	mov	lr, r4
    425c:	e023      	b.n	42a6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    425e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4262:	e7e8      	b.n	4236 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4264:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4266:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    426a:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    426e:	f1b9 0f01 	cmp.w	r9, #1
    4272:	bf14      	ite	ne
    4274:	46b0      	movne	r8, r6
    4276:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    4278:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    427c:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    4280:	f8c8 e00c 	str.w	lr, [r8, #12]
    4284:	f04f 0e01 	mov.w	lr, #1
    4288:	e00d      	b.n	42a6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    428a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    428e:	2401      	movs	r4, #1
    4290:	e7eb      	b.n	426a <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    4292:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4296:	e7df      	b.n	4258 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4298:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    429c:	2d00      	cmp	r5, #0
    429e:	d1db      	bne.n	4258 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    42a0:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    42a2:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    42a4:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    42a6:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    42aa:	f003 091f 	and.w	r9, r3, #31
    42ae:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    42b2:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    42b6:	ea4f 1353 	mov.w	r3, r3, lsr #5
    42ba:	bf1c      	itt	ne
    42bc:	2401      	movne	r4, #1
    42be:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    42c2:	2b01      	cmp	r3, #1
    42c4:	bf0c      	ite	eq
    42c6:	46b8      	moveq	r8, r7
    42c8:	46b0      	movne	r8, r6
    42ca:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    42ce:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    42d2:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    42d6:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    42da:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    42dc:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    42e0:	ea43 030e 	orr.w	r3, r3, lr
    42e4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    42e8:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    42ec:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    42f0:	e778      	b.n	41e4 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    42f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    42f6:	e7d1      	b.n	429c <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    42f8:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    42fc:	6804      	ldr	r4, [r0, #0]
    42fe:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    4302:	2c00      	cmp	r4, #0
    4304:	d0c3      	beq.n	428e <pinctrl_configure_pins+0xba>
    4306:	e796      	b.n	4236 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    4308:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    430c:	e7f6      	b.n	42fc <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    430e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    4312:	e7f3      	b.n	42fc <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4314:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    4318:	e7f0      	b.n	42fc <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    431a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    431e:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4320:	f04f 0e00 	mov.w	lr, #0
    4324:	e7bf      	b.n	42a6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    4326:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    432a:	e784      	b.n	4236 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    432c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    4330:	e7f5      	b.n	431e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    4332:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    4336:	e7f2      	b.n	431e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    4338:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    433c:	e7ef      	b.n	431e <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    433e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    4342:	e7ec      	b.n	431e <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    4344:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4348:	e74f      	b.n	41ea <pinctrl_configure_pins+0x16>
    434a:	bf00      	nop
    434c:	50842500 	.word	0x50842500
    4350:	50842800 	.word	0x50842800

00004354 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    4354:	ea40 0301 	orr.w	r3, r0, r1
    4358:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    435c:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    435e:	b98b      	cbnz	r3, 4384 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    4360:	f240 1515 	movw	r5, #277	; 0x115
    4364:	4c09      	ldr	r4, [pc, #36]	; (438c <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    4366:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    4368:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    436c:	4299      	cmp	r1, r3
    436e:	d101      	bne.n	4374 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    4370:	2000      	movs	r0, #0
}
    4372:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    4374:	18c2      	adds	r2, r0, r3
    4376:	b2d2      	uxtb	r2, r2
    4378:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    437c:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    4380:	3301      	adds	r3, #1
    4382:	e7f3      	b.n	436c <fprotect_area+0x18>
		return -EINVAL;
    4384:	f06f 0015 	mvn.w	r0, #21
    4388:	e7f3      	b.n	4372 <fprotect_area+0x1e>
    438a:	bf00      	nop
    438c:	50003000 	.word	0x50003000

00004390 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4390:	4803      	ldr	r0, [pc, #12]	; (43a0 <k_sys_fatal_error_handler+0x10>)
    4392:	2145      	movs	r1, #69	; 0x45
{
    4394:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    4396:	f003 fe08 	bl	7faa <z_log_minimal_printk>
		sys_arch_reboot(0);
    439a:	2000      	movs	r0, #0
    439c:	f7fe f9e4 	bl	2768 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    43a0:	0000a2cf 	.word	0x0000a2cf

000043a4 <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    43a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    43a8:	6818      	ldr	r0, [r3, #0]
    43aa:	4b05      	ldr	r3, [pc, #20]	; (43c0 <pcd_fw_copy_status_get+0x1c>)
    43ac:	4298      	cmp	r0, r3
    43ae:	d005      	beq.n	43bc <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
    43b0:	4b04      	ldr	r3, [pc, #16]	; (43c4 <pcd_fw_copy_status_get+0x20>)
    43b2:	4298      	cmp	r0, r3
    43b4:	bf0c      	ite	eq
    43b6:	2001      	moveq	r0, #1
    43b8:	2002      	movne	r0, #2
    43ba:	4770      	bx	lr
		return PCD_STATUS_COPY;
    43bc:	2000      	movs	r0, #0
}
    43be:	4770      	bx	lr
    43c0:	b5b4b3b6 	.word	0xb5b4b3b6
    43c4:	f103ce5d 	.word	0xf103ce5d

000043c8 <network_core_finished_check_handler>:
	 */
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
}

static void network_core_finished_check_handler(struct k_timer *timer)
{
    43c8:	b508      	push	{r3, lr}
	if (pcd_fw_copy_status_get() != PCD_STATUS_COPY) {
    43ca:	f7ff ffeb 	bl	43a4 <pcd_fw_copy_status_get>
    43ce:	b130      	cbz	r0, 43de <network_core_finished_check_handler+0x16>
	z_impl_k_timer_stop(timer);
    43d0:	4803      	ldr	r0, [pc, #12]	; (43e0 <network_core_finished_check_handler+0x18>)
    43d2:	f004 fc7b 	bl	8ccc <z_impl_k_timer_stop>
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    43d6:	2200      	movs	r2, #0
    43d8:	4b02      	ldr	r3, [pc, #8]	; (43e4 <network_core_finished_check_handler+0x1c>)
    43da:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		 * successfully, tidy up and cancel timer
		 */
		k_timer_stop(&network_core_finished_check_timer);
		network_core_pcd_tidy();
	}
}
    43de:	bd08      	pop	{r3, pc}
    43e0:	20002190 	.word	0x20002190
    43e4:	50003000 	.word	0x50003000

000043e8 <network_core_pcd_cmdset>:

	return 0;
}

static int network_core_pcd_cmdset(const void *src_addr, size_t len, bool wait)
{
    43e8:	b538      	push	{r3, r4, r5, lr}
    43ea:	4614      	mov	r4, r2
}

#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    p_reg->NETWORK.FORCEOFF = (hold ? RESET_NETWORK_FORCEOFF_FORCEOFF_Hold :
    43ec:	2301      	movs	r3, #1
    43ee:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    43f2:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    43f6:	b308      	cbz	r0, 443c <network_core_pcd_cmdset+0x54>
    43f8:	b301      	cbz	r1, 443c <network_core_pcd_cmdset+0x54>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    43fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    43fe:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    4400:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    4404:	4d1a      	ldr	r5, [pc, #104]	; (4470 <network_core_pcd_cmdset+0x88>)
	cmd->offset = offset;
    4406:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    4408:	e9c3 5000 	strd	r5, r0, [r3]
    440c:	2300      	movs	r3, #0
		LOG_INF("Error while writing PCD cmd: %d", err);
		return err;
	}

	nrf_reset_network_force_off(NRF_RESET, false);
	LOG_INF("Turned on network core");
    440e:	2149      	movs	r1, #73	; 0x49
    4410:	4818      	ldr	r0, [pc, #96]	; (4474 <network_core_pcd_cmdset+0x8c>)
    4412:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    4416:	f003 fdc8 	bl	7faa <z_log_minimal_printk>

	if (!wait) {
    441a:	b334      	cbz	r4, 446a <network_core_pcd_cmdset+0x82>
	z_impl_k_busy_wait(usec_to_wait);
    441c:	4d16      	ldr	r5, [pc, #88]	; (4478 <network_core_pcd_cmdset+0x90>)
    441e:	4628      	mov	r0, r5
    4420:	f004 fc50 	bl	8cc4 <z_impl_k_busy_wait>
		/* Wait for 1 second to avoid issue where network core
		 * is unable to write to shared RAM.
		 */
		k_busy_wait(1 * USEC_PER_SEC);

		err = pcd_fw_copy_status_get();
    4424:	f7ff ffbe 	bl	43a4 <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    4428:	4604      	mov	r4, r0
    442a:	2800      	cmp	r0, #0
    442c:	d0f7      	beq.n	441e <network_core_pcd_cmdset+0x36>

	if (err == PCD_STATUS_COPY_FAILED) {
    442e:	2802      	cmp	r0, #2
    4430:	d10e      	bne.n	4450 <network_core_pcd_cmdset+0x68>
		LOG_ERR("Network core update failed");
    4432:	2145      	movs	r1, #69	; 0x45
    4434:	4811      	ldr	r0, [pc, #68]	; (447c <network_core_pcd_cmdset+0x94>)
    4436:	f003 fdb8 	bl	7faa <z_log_minimal_printk>
		return err;
    443a:	e007      	b.n	444c <network_core_pcd_cmdset+0x64>
		LOG_INF("Error while writing PCD cmd: %d", err);
    443c:	f06f 0215 	mvn.w	r2, #21
    4440:	2149      	movs	r1, #73	; 0x49
    4442:	480f      	ldr	r0, [pc, #60]	; (4480 <network_core_pcd_cmdset+0x98>)
    4444:	f003 fdb1 	bl	7faa <z_log_minimal_printk>
		return err;
    4448:	f06f 0415 	mvn.w	r4, #21

	nrf_reset_network_force_off(NRF_RESET, true);
	LOG_INF("Turned off network core");
	network_core_pcd_tidy();
	return 0;
}
    444c:	4620      	mov	r0, r4
    444e:	bd38      	pop	{r3, r4, r5, pc}
    4450:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4454:	2201      	movs	r2, #1
	LOG_INF("Turned off network core");
    4456:	2149      	movs	r1, #73	; 0x49
    4458:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    445c:	4809      	ldr	r0, [pc, #36]	; (4484 <network_core_pcd_cmdset+0x9c>)
    445e:	f003 fda4 	bl	7faa <z_log_minimal_printk>
    4462:	2200      	movs	r2, #0
    4464:	4b08      	ldr	r3, [pc, #32]	; (4488 <network_core_pcd_cmdset+0xa0>)
    4466:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		return 0;
    446a:	2400      	movs	r4, #0
    446c:	e7ee      	b.n	444c <network_core_pcd_cmdset+0x64>
    446e:	bf00      	nop
    4470:	b5b4b3b6 	.word	0xb5b4b3b6
    4474:	0000a2f1 	.word	0x0000a2f1
    4478:	000f4240 	.word	0x000f4240
    447c:	0000a332 	.word	0x0000a332
    4480:	0000a30d 	.word	0x0000a30d
    4484:	0000a352 	.word	0x0000a352
    4488:	50003000 	.word	0x50003000

0000448c <pcd_network_core_update_initiate>:
    448c:	2210      	movs	r2, #16
    448e:	4b0b      	ldr	r3, [pc, #44]	; (44bc <pcd_network_core_update_initiate+0x30>)

	return network_core_pcd_cmdset(src_addr, len, wait);
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    4490:	b513      	push	{r0, r1, r4, lr}
    4492:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	return network_core_pcd_cmdset(src_addr, len, wait);
    4496:	2200      	movs	r2, #0
    4498:	f7ff ffa6 	bl	43e8 <network_core_pcd_cmdset>
	int rc = network_core_update(src_addr, len, false);

	if (rc == 0) {
    449c:	4604      	mov	r4, r0
    449e:	b950      	cbnz	r0, 44b6 <pcd_network_core_update_initiate+0x2a>
		k_timer_start(&network_core_finished_check_timer,
    44a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    44a4:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
    44a6:	4806      	ldr	r0, [pc, #24]	; (44c0 <pcd_network_core_update_initiate+0x34>)
    44a8:	e9cd 2300 	strd	r2, r3, [sp]
    44ac:	f002 f9de 	bl	686c <z_impl_k_timer_start>
	z_impl_k_busy_wait(usec_to_wait);
    44b0:	4804      	ldr	r0, [pc, #16]	; (44c4 <pcd_network_core_update_initiate+0x38>)
    44b2:	f004 fc07 	bl	8cc4 <z_impl_k_busy_wait>
			      NETWORK_CORE_UPDATE_CHECK_TIME);
		k_busy_wait(1 * USEC_PER_SEC);
	}

	return rc;
}
    44b6:	4620      	mov	r0, r4
    44b8:	b002      	add	sp, #8
    44ba:	bd10      	pop	{r4, pc}
    44bc:	50003000 	.word	0x50003000
    44c0:	20002190 	.word	0x20002190
    44c4:	000f4240 	.word	0x000f4240

000044c8 <pcd_network_core_update>:
    44c8:	2210      	movs	r2, #16
    44ca:	4b03      	ldr	r3, [pc, #12]	; (44d8 <pcd_network_core_update+0x10>)
    44cc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	return network_core_pcd_cmdset(src_addr, len, wait);
    44d0:	2201      	movs	r2, #1
    44d2:	f7ff bf89 	b.w	43e8 <network_core_pcd_cmdset>
    44d6:	bf00      	nop
    44d8:	50003000 	.word	0x50003000

000044dc <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    44dc:	f44f 7282 	mov.w	r2, #260	; 0x104
    44e0:	4b01      	ldr	r3, [pc, #4]	; (44e8 <pcd_lock_ram+0xc>)
    44e2:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    44e6:	4770      	bx	lr
    44e8:	50003000 	.word	0x50003000

000044ec <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    44ec:	2801      	cmp	r0, #1
    44ee:	d10f      	bne.n	4510 <boot_read_image_header_hook+0x24>
    44f0:	b979      	cbnz	r1, 4512 <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    44f2:	4b08      	ldr	r3, [pc, #32]	; (4514 <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    44f4:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    44f6:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    44f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    44fc:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    44fe:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    4502:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    4506:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    450a:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    450c:	61d1      	str	r1, [r2, #28]
		return 0;
    450e:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    4510:	2001      	movs	r0, #1
}
    4512:	4770      	bx	lr
    4514:	96f3b83d 	.word	0x96f3b83d

00004518 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    4518:	2801      	cmp	r0, #1
    451a:	d103      	bne.n	4524 <boot_image_check_hook+0xc>
    451c:	b919      	cbnz	r1, 4526 <boot_image_check_hook+0xe>
		FIH_RET(FIH_SUCCESS);
    451e:	4b02      	ldr	r3, [pc, #8]	; (4528 <boot_image_check_hook+0x10>)
    4520:	6818      	ldr	r0, [r3, #0]
    4522:	4770      	bx	lr
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    4524:	2001      	movs	r0, #1
}
    4526:	4770      	bx	lr
    4528:	20002340 	.word	0x20002340

0000452c <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    452c:	b513      	push	{r0, r1, r4, lr}
    452e:	4604      	mov	r4, r0
    4530:	4810      	ldr	r0, [pc, #64]	; (4574 <network_core_update+0x48>)
    4532:	f004 fa3f 	bl	89b4 <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    4536:	b1b0      	cbz	r0, 4566 <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    4538:	2000      	movs	r0, #0
    453a:	a901      	add	r1, sp, #4
    453c:	f7ff f9d6 	bl	38ec <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    4540:	4b0d      	ldr	r3, [pc, #52]	; (4578 <network_core_update+0x4c>)
    4542:	6802      	ldr	r2, [r0, #0]
    4544:	429a      	cmp	r2, r3
    4546:	d111      	bne.n	456c <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    4548:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    454a:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    454c:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    454e:	6843      	ldr	r3, [r0, #4]
    4550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4554:	d90a      	bls.n	456c <network_core_update+0x40>
			if (wait) {
    4556:	b11c      	cbz	r4, 4560 <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    4558:	f7ff ffb6 	bl	44c8 <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    455c:	b002      	add	sp, #8
    455e:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    4560:	f7ff ff94 	bl	448c <pcd_network_core_update_initiate>
    4564:	e7fa      	b.n	455c <network_core_update+0x30>
		return -ENODEV;
    4566:	f06f 0012 	mvn.w	r0, #18
    456a:	e7f7      	b.n	455c <network_core_update+0x30>
	return -ENODATA;
    456c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    4570:	e7f4      	b.n	455c <network_core_update+0x30>
    4572:	bf00      	nop
    4574:	00008dd8 	.word	0x00008dd8
    4578:	96f3b83d 	.word	0x96f3b83d

0000457c <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    457c:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    457e:	6881      	ldr	r1, [r0, #8]
{
    4580:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4582:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    4584:	f021 0407 	bic.w	r4, r1, #7
{
    4588:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    458a:	f003 fd61 	bl	8050 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    458e:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    4590:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    4592:	4668      	mov	r0, sp
    4594:	f003 fdda 	bl	814c <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    4598:	2210      	movs	r2, #16
    459a:	4668      	mov	r0, sp
    459c:	4906      	ldr	r1, [pc, #24]	; (45b8 <boot_write_magic+0x3c>)
    459e:	f003 fdca 	bl	8136 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    45a2:	2310      	movs	r3, #16
    45a4:	466a      	mov	r2, sp
    45a6:	4621      	mov	r1, r4
    45a8:	4628      	mov	r0, r5
    45aa:	f003 fd21 	bl	7ff0 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    45ae:	3800      	subs	r0, #0
    45b0:	bf18      	it	ne
    45b2:	2001      	movne	r0, #1
    45b4:	b005      	add	sp, #20
    45b6:	bd30      	pop	{r4, r5, pc}
    45b8:	00009636 	.word	0x00009636

000045bc <boot_read_swap_state>:
{
    45bc:	b530      	push	{r4, r5, lr}
    45be:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    45c0:	6881      	ldr	r1, [r0, #8]
{
    45c2:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    45c4:	2310      	movs	r3, #16
    45c6:	aa02      	add	r2, sp, #8
    45c8:	3910      	subs	r1, #16
{
    45ca:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    45cc:	f003 fcfb 	bl	7fc6 <flash_area_read>
    if (rc < 0) {
    45d0:	2800      	cmp	r0, #0
    45d2:	da02      	bge.n	45da <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    45d4:	2001      	movs	r0, #1
}
    45d6:	b007      	add	sp, #28
    45d8:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    45da:	2210      	movs	r2, #16
    45dc:	4620      	mov	r0, r4
    45de:	a902      	add	r1, sp, #8
    45e0:	f003 ffe8 	bl	85b4 <bootutil_buffer_is_erased>
    45e4:	2800      	cmp	r0, #0
    45e6:	d13a      	bne.n	465e <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    45e8:	2210      	movs	r2, #16
    45ea:	491e      	ldr	r1, [pc, #120]	; (4664 <boot_read_swap_state+0xa8>)
    45ec:	a802      	add	r0, sp, #8
    45ee:	f003 fd7b 	bl	80e8 <memcmp>
    return BOOT_MAGIC_BAD;
    45f2:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    45f4:	bf0c      	ite	eq
    45f6:	2301      	moveq	r3, #1
    45f8:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    45fa:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    45fc:	4620      	mov	r0, r4
    45fe:	f003 ffc5 	bl	858c <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4602:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    4604:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4606:	f10d 0207 	add.w	r2, sp, #7
    460a:	4620      	mov	r0, r4
    460c:	f003 fcdb 	bl	7fc6 <flash_area_read>
    if (rc < 0) {
    4610:	2800      	cmp	r0, #0
    4612:	dbdf      	blt.n	45d4 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4614:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    4618:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    461a:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    461e:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4620:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4622:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    4624:	2201      	movs	r2, #1
    4626:	f10d 0107 	add.w	r1, sp, #7
    462a:	f003 ffc3 	bl	85b4 <bootutil_buffer_is_erased>
    462e:	b910      	cbnz	r0, 4636 <boot_read_swap_state+0x7a>
    4630:	786b      	ldrb	r3, [r5, #1]
    4632:	2b04      	cmp	r3, #4
    4634:	d903      	bls.n	463e <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    4636:	2301      	movs	r3, #1
    4638:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    463a:	2300      	movs	r3, #0
    463c:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    463e:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    4640:	4620      	mov	r0, r4
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    4642:	3a18      	subs	r2, #24
    4644:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    4648:	3a08      	subs	r2, #8
    464a:	1ca9      	adds	r1, r5, #2
    464c:	f003 ffc5 	bl	85da <boot_read_flag>
    if (rc) {
    4650:	2800      	cmp	r0, #0
    4652:	d1bf      	bne.n	45d4 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    4654:	4620      	mov	r0, r4
    4656:	1ce9      	adds	r1, r5, #3
    4658:	f003 ffdb 	bl	8612 <boot_read_image_ok>
    465c:	e7bb      	b.n	45d6 <boot_read_swap_state+0x1a>
    465e:	2303      	movs	r3, #3
    4660:	e7cb      	b.n	45fa <boot_read_swap_state+0x3e>
    4662:	bf00      	nop
    4664:	00009636 	.word	0x00009636

00004668 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    4668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    466a:	4669      	mov	r1, sp
{
    466c:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    466e:	f003 ff70 	bl	8552 <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    4672:	2801      	cmp	r0, #1
    4674:	d15e      	bne.n	4734 <boot_swap_type_multi+0xcc>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4676:	4669      	mov	r1, sp
    4678:	2c00      	cmp	r4, #0
    467a:	d055      	beq.n	4728 <boot_swap_type_multi+0xc0>
    467c:	2c01      	cmp	r4, #1
    467e:	d04e      	beq.n	471e <boot_swap_type_multi+0xb6>
    4680:	20ff      	movs	r0, #255	; 0xff
    4682:	f003 ffcc 	bl	861e <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    4686:	2800      	cmp	r0, #0
    4688:	d15c      	bne.n	4744 <boot_swap_type_multi+0xdc>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    468a:	20ff      	movs	r0, #255	; 0xff
    468c:	a902      	add	r1, sp, #8
    468e:	f003 ffc6 	bl	861e <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    4692:	2801      	cmp	r0, #1
    4694:	d154      	bne.n	4740 <boot_swap_type_multi+0xd8>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    4696:	4622      	mov	r2, r4
    4698:	2149      	movs	r1, #73	; 0x49
    469a:	4833      	ldr	r0, [pc, #204]	; (4768 <boot_swap_type_multi+0x100>)
    469c:	f003 fc85 	bl	7faa <z_log_minimal_printk>
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    46a0:	4b32      	ldr	r3, [pc, #200]	; (476c <boot_swap_type_multi+0x104>)
    46a2:	9302      	str	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
        secondary_slot.image_num = 0;
    46a4:	2300      	movs	r3, #0
    46a6:	f88d 300c 	strb.w	r3, [sp, #12]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    46aa:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    46ac:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    46b0:	f89d 6008 	ldrb.w	r6, [sp, #8]
    46b4:	4c2e      	ldr	r4, [pc, #184]	; (4770 <boot_swap_type_multi+0x108>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    46b6:	4629      	mov	r1, r5
    46b8:	7820      	ldrb	r0, [r4, #0]
    46ba:	f003 ff6d 	bl	8598 <boot_magic_compatible_check>
    46be:	2800      	cmp	r0, #0
    46c0:	d047      	beq.n	4752 <boot_swap_type_multi+0xea>
            boot_magic_compatible_check(table->magic_secondary_slot,
    46c2:	4631      	mov	r1, r6
    46c4:	7860      	ldrb	r0, [r4, #1]
    46c6:	f003 ff67 	bl	8598 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    46ca:	2800      	cmp	r0, #0
    46cc:	d041      	beq.n	4752 <boot_swap_type_multi+0xea>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    46ce:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    46d0:	2b04      	cmp	r3, #4
    46d2:	d003      	beq.n	46dc <boot_swap_type_multi+0x74>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    46d4:	f89d 1003 	ldrb.w	r1, [sp, #3]
    46d8:	4299      	cmp	r1, r3
    46da:	d13a      	bne.n	4752 <boot_swap_type_multi+0xea>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    46dc:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    46de:	2b04      	cmp	r3, #4
    46e0:	d003      	beq.n	46ea <boot_swap_type_multi+0x82>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    46e2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    46e6:	4299      	cmp	r1, r3
    46e8:	d133      	bne.n	4752 <boot_swap_type_multi+0xea>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    46ea:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    46ec:	2b04      	cmp	r3, #4
    46ee:	d003      	beq.n	46f8 <boot_swap_type_multi+0x90>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    46f0:	f89d 1002 	ldrb.w	r1, [sp, #2]
    46f4:	4299      	cmp	r1, r3
    46f6:	d12c      	bne.n	4752 <boot_swap_type_multi+0xea>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    46f8:	7963      	ldrb	r3, [r4, #5]
    46fa:	2b02      	cmp	r3, #2
    46fc:	d025      	beq.n	474a <boot_swap_type_multi+0xe2>
    46fe:	2b03      	cmp	r3, #3
    4700:	d025      	beq.n	474e <boot_swap_type_multi+0xe6>
    4702:	4a1c      	ldr	r2, [pc, #112]	; (4774 <boot_swap_type_multi+0x10c>)
    4704:	491c      	ldr	r1, [pc, #112]	; (4778 <boot_swap_type_multi+0x110>)
    4706:	2b04      	cmp	r3, #4
    4708:	bf08      	it	eq
    470a:	460a      	moveq	r2, r1
    470c:	481b      	ldr	r0, [pc, #108]	; (477c <boot_swap_type_multi+0x114>)
    470e:	2149      	movs	r1, #73	; 0x49
    4710:	f003 fc4b 	bl	7faa <z_log_minimal_printk>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    4714:	7960      	ldrb	r0, [r4, #5]
    4716:	1e83      	subs	r3, r0, #2
    4718:	2b02      	cmp	r3, #2
    471a:	d914      	bls.n	4746 <boot_swap_type_multi+0xde>
    471c:	e012      	b.n	4744 <boot_swap_type_multi+0xdc>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    471e:	f003 ff7e 	bl	861e <boot_read_swap_state_by_id>
    if (rc) {
    4722:	b978      	cbnz	r0, 4744 <boot_swap_type_multi+0xdc>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4724:	2008      	movs	r0, #8
    4726:	e7b1      	b.n	468c <boot_swap_type_multi+0x24>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4728:	2004      	movs	r0, #4
    472a:	f003 ff78 	bl	861e <boot_read_swap_state_by_id>
    if (rc) {
    472e:	b948      	cbnz	r0, 4744 <boot_swap_type_multi+0xdc>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4730:	2002      	movs	r0, #2
    4732:	e7ab      	b.n	468c <boot_swap_type_multi+0x24>
    if (rc) {
    4734:	b930      	cbnz	r0, 4744 <boot_swap_type_multi+0xdc>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4736:	2c00      	cmp	r4, #0
    4738:	d0fa      	beq.n	4730 <boot_swap_type_multi+0xc8>
    473a:	2c01      	cmp	r4, #1
    473c:	d1a5      	bne.n	468a <boot_swap_type_multi+0x22>
    473e:	e7f1      	b.n	4724 <boot_swap_type_multi+0xbc>
    } else if (rc) {
    4740:	2800      	cmp	r0, #0
    4742:	d0b2      	beq.n	46aa <boot_swap_type_multi+0x42>
        return BOOT_SWAP_TYPE_PANIC;
    4744:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    4746:	b004      	add	sp, #16
    4748:	bd70      	pop	{r4, r5, r6, pc}
            BOOT_LOG_INF("Swap type: %s",
    474a:	4a0d      	ldr	r2, [pc, #52]	; (4780 <boot_swap_type_multi+0x118>)
    474c:	e7de      	b.n	470c <boot_swap_type_multi+0xa4>
    474e:	4a0d      	ldr	r2, [pc, #52]	; (4784 <boot_swap_type_multi+0x11c>)
    4750:	e7dc      	b.n	470c <boot_swap_type_multi+0xa4>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    4752:	3201      	adds	r2, #1
    4754:	2a03      	cmp	r2, #3
    4756:	f104 0406 	add.w	r4, r4, #6
    475a:	d1ac      	bne.n	46b6 <boot_swap_type_multi+0x4e>
    BOOT_LOG_INF("Swap type: none");
    475c:	480a      	ldr	r0, [pc, #40]	; (4788 <boot_swap_type_multi+0x120>)
    475e:	2149      	movs	r1, #73	; 0x49
    4760:	f003 fc23 	bl	7faa <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    4764:	2001      	movs	r0, #1
    4766:	e7ee      	b.n	4746 <boot_swap_type_multi+0xde>
    4768:	0000a396 	.word	0x0000a396
    476c:	03030103 	.word	0x03030103
    4770:	0000a409 	.word	0x0000a409
    4774:	0000a37d 	.word	0x0000a37d
    4778:	0000a38f 	.word	0x0000a38f
    477c:	0000a3e1 	.word	0x0000a3e1
    4780:	0000a378 	.word	0x0000a378
    4784:	0000a373 	.word	0x0000a373
    4788:	0000a3f4 	.word	0x0000a3f4

0000478c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    478c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4790:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4794:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    4798:	2a07      	cmp	r2, #7
    479a:	d105      	bne.n	47a8 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    479c:	3b02      	subs	r3, #2
    479e:	2b03      	cmp	r3, #3
    47a0:	d802      	bhi.n	47a8 <nrf53_errata_42+0x1c>
    47a2:	4a02      	ldr	r2, [pc, #8]	; (47ac <nrf53_errata_42+0x20>)
    47a4:	5cd0      	ldrb	r0, [r2, r3]
    47a6:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    47a8:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    47aa:	4770      	bx	lr
    47ac:	0000a41f 	.word	0x0000a41f

000047b0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    47b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    47b4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    47b8:	4b03      	ldr	r3, [pc, #12]	; (47c8 <SystemCoreClockUpdate+0x18>)
    47ba:	f002 0203 	and.w	r2, r2, #3
    47be:	40d3      	lsrs	r3, r2
    47c0:	4a02      	ldr	r2, [pc, #8]	; (47cc <SystemCoreClockUpdate+0x1c>)
    47c2:	6013      	str	r3, [r2, #0]
#endif
}
    47c4:	4770      	bx	lr
    47c6:	bf00      	nop
    47c8:	07a12000 	.word	0x07a12000
    47cc:	20002090 	.word	0x20002090

000047d0 <SystemInit>:

void SystemInit(void)
{
    47d0:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    47d2:	f7ff ffdb 	bl	478c <nrf53_errata_42>
    47d6:	b158      	cbz	r0, 47f0 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    47d8:	4b4f      	ldr	r3, [pc, #316]	; (4918 <SystemInit+0x148>)
    47da:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    47de:	b93a      	cbnz	r2, 47f0 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    47e0:	210d      	movs	r1, #13
    47e2:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    47e6:	2101      	movs	r1, #1
    47e8:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    47ec:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    47f0:	2200      	movs	r2, #0
    47f2:	00d3      	lsls	r3, r2, #3
    47f4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    47f8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    47fc:	3101      	adds	r1, #1
    47fe:	d007      	beq.n	4810 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4800:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    4804:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    4806:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    480a:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    480c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    480e:	d1f0      	bne.n	47f2 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    4810:	f7ff ffbc 	bl	478c <nrf53_errata_42>
    4814:	2800      	cmp	r0, #0
    4816:	d176      	bne.n	4906 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    4818:	f7ff ffb8 	bl	478c <nrf53_errata_42>
    481c:	b140      	cbz	r0, 4830 <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    481e:	4b3f      	ldr	r3, [pc, #252]	; (491c <SystemInit+0x14c>)
    4820:	4a3f      	ldr	r2, [pc, #252]	; (4920 <SystemInit+0x150>)
    4822:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    4826:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    482a:	2201      	movs	r2, #1
    482c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4830:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4834:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4838:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    483c:	2a07      	cmp	r2, #7
    483e:	d109      	bne.n	4854 <SystemInit+0x84>
                {
                    switch(var2)
    4840:	3b02      	subs	r3, #2
    4842:	2b03      	cmp	r3, #3
    4844:	d806      	bhi.n	4854 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    4846:	4a37      	ldr	r2, [pc, #220]	; (4924 <SystemInit+0x154>)
    4848:	5cd3      	ldrb	r3, [r2, r3]
    484a:	b11b      	cbz	r3, 4854 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    484c:	2200      	movs	r2, #0
    484e:	4b36      	ldr	r3, [pc, #216]	; (4928 <SystemInit+0x158>)
    4850:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    4854:	f7ff ff9a 	bl	478c <nrf53_errata_42>
    4858:	b150      	cbz	r0, 4870 <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    485a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    485e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4862:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    4864:	bf42      	ittt	mi
    4866:	2200      	movmi	r2, #0
    4868:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    486c:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4870:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4874:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4878:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    487c:	2a07      	cmp	r2, #7
    487e:	d109      	bne.n	4894 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    4880:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4884:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4888:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    488a:	bf44      	itt	mi
    488c:	f06f 0201 	mvnmi.w	r2, #1
    4890:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    4894:	f7ff ff7a 	bl	478c <nrf53_errata_42>
    4898:	b118      	cbz	r0, 48a2 <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    489a:	2265      	movs	r2, #101	; 0x65
    489c:	4b1e      	ldr	r3, [pc, #120]	; (4918 <SystemInit+0x148>)
    489e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    48a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    48a6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    48aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    48ae:	2a07      	cmp	r2, #7
    48b0:	d116      	bne.n	48e0 <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    48b2:	4b1d      	ldr	r3, [pc, #116]	; (4928 <SystemInit+0x158>)
    48b4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    48b8:	2b00      	cmp	r3, #0
    48ba:	da11      	bge.n	48e0 <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    48bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    48c0:	2203      	movs	r2, #3
    48c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    48c6:	2201      	movs	r2, #1
    48c8:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    48ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    48ce:	2a00      	cmp	r2, #0
    48d0:	d0fb      	beq.n	48ca <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    48d2:	2200      	movs	r2, #0
    48d4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    48d8:	2201      	movs	r2, #1
    48da:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    48dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    48e0:	4a12      	ldr	r2, [pc, #72]	; (492c <SystemInit+0x15c>)
    48e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    48e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    48ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    48ee:	4a10      	ldr	r2, [pc, #64]	; (4930 <SystemInit+0x160>)
    48f0:	4b10      	ldr	r3, [pc, #64]	; (4934 <SystemInit+0x164>)
    48f2:	6811      	ldr	r1, [r2, #0]
    48f4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    48f8:	69d2      	ldr	r2, [r2, #28]
    48fa:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    48fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    4902:	f7ff bf55 	b.w	47b0 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    4906:	2229      	movs	r2, #41	; 0x29
    4908:	4b03      	ldr	r3, [pc, #12]	; (4918 <SystemInit+0x148>)
    490a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    490e:	2203      	movs	r2, #3
    4910:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    4914:	e780      	b.n	4818 <SystemInit+0x48>
    4916:	bf00      	nop
    4918:	50004000 	.word	0x50004000
    491c:	50039000 	.word	0x50039000
    4920:	beef0044 	.word	0xbeef0044
    4924:	0000a41b 	.word	0x0000a41b
    4928:	50032000 	.word	0x50032000
    492c:	e000ed00 	.word	0xe000ed00
    4930:	00ff8000 	.word	0x00ff8000
    4934:	50006000 	.word	0x50006000

00004938 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4938:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    493a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    493c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    493e:	fab2 f382 	clz	r3, r2
    4942:	f1c3 031f 	rsb	r3, r3, #31
    4946:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4948:	fa05 f403 	lsl.w	r4, r5, r3
    494c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4950:	e8d0 6fef 	ldaex	r6, [r0]
    4954:	4296      	cmp	r6, r2
    4956:	d104      	bne.n	4962 <nrfx_flag32_alloc+0x2a>
    4958:	e8c0 4fec 	stlex	ip, r4, [r0]
    495c:	f1bc 0f00 	cmp.w	ip, #0
    4960:	d1f6      	bne.n	4950 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4962:	d1eb      	bne.n	493c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4964:	4801      	ldr	r0, [pc, #4]	; (496c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    4966:	700b      	strb	r3, [r1, #0]
}
    4968:	bd70      	pop	{r4, r5, r6, pc}
    496a:	bf00      	nop
    496c:	0bad0000 	.word	0x0bad0000

00004970 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4970:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4972:	6803      	ldr	r3, [r0, #0]
    4974:	40cb      	lsrs	r3, r1
    4976:	07db      	lsls	r3, r3, #31
    4978:	d410      	bmi.n	499c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    497a:	2301      	movs	r3, #1
    497c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    497e:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4980:	ea43 0102 	orr.w	r1, r3, r2
    4984:	e8d0 4fef 	ldaex	r4, [r0]
    4988:	4294      	cmp	r4, r2
    498a:	d104      	bne.n	4996 <nrfx_flag32_free+0x26>
    498c:	e8c0 1fec 	stlex	ip, r1, [r0]
    4990:	f1bc 0f00 	cmp.w	ip, #0
    4994:	d1f6      	bne.n	4984 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4996:	d1f2      	bne.n	497e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4998:	4801      	ldr	r0, [pc, #4]	; (49a0 <nrfx_flag32_free+0x30>)
}
    499a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    499c:	4801      	ldr	r0, [pc, #4]	; (49a4 <nrfx_flag32_free+0x34>)
    499e:	e7fc      	b.n	499a <nrfx_flag32_free+0x2a>
    49a0:	0bad0000 	.word	0x0bad0000
    49a4:	0bad0004 	.word	0x0bad0004

000049a8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    49a8:	4b04      	ldr	r3, [pc, #16]	; (49bc <nrfx_clock_init+0x14>)
    49aa:	791a      	ldrb	r2, [r3, #4]
    49ac:	b922      	cbnz	r2, 49b8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    49ae:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    49b0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    49b2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    49b4:	4802      	ldr	r0, [pc, #8]	; (49c0 <nrfx_clock_init+0x18>)
    49b6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    49b8:	4802      	ldr	r0, [pc, #8]	; (49c4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    49ba:	4770      	bx	lr
    49bc:	20004c24 	.word	0x20004c24
    49c0:	0bad0000 	.word	0x0bad0000
    49c4:	0bad000c 	.word	0x0bad000c

000049c8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49cc:	b510      	push	{r4, lr}
    49ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49d2:	b152      	cbz	r2, 49ea <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49d4:	2000      	movs	r0, #0
    49d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    49da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    49de:	2201      	movs	r2, #1
    49e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    49e4:	4b1d      	ldr	r3, [pc, #116]	; (4a5c <nrfx_power_clock_irq_handler+0x94>)
    49e6:	681b      	ldr	r3, [r3, #0]
    49e8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    49ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    49f2:	b15a      	cbz	r2, 4a0c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49f4:	2200      	movs	r2, #0
    49f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    49fe:	2202      	movs	r2, #2
    4a00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a04:	4b15      	ldr	r3, [pc, #84]	; (4a5c <nrfx_power_clock_irq_handler+0x94>)
    4a06:	2001      	movs	r0, #1
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a10:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    4a14:	b162      	cbz	r2, 4a30 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a16:	2200      	movs	r2, #0
    4a18:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4a1c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    4a20:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    4a28:	4b0c      	ldr	r3, [pc, #48]	; (4a5c <nrfx_power_clock_irq_handler+0x94>)
    4a2a:	2004      	movs	r0, #4
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a34:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    4a38:	b172      	cbz	r2, 4a58 <nrfx_power_clock_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a3a:	2200      	movs	r2, #0
    4a3c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4a40:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    4a44:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4a4c:	4b03      	ldr	r3, [pc, #12]	; (4a5c <nrfx_power_clock_irq_handler+0x94>)
    4a4e:	2005      	movs	r0, #5
    }
#endif
}
    4a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	4718      	bx	r3
}
    4a58:	bd10      	pop	{r4, pc}
    4a5a:	bf00      	nop
    4a5c:	20004c24 	.word	0x20004c24

00004a60 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4a60:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4a62:	4801      	ldr	r0, [pc, #4]	; (4a68 <nrfx_dppi_channel_alloc+0x8>)
    4a64:	f7ff bf68 	b.w	4938 <nrfx_flag32_alloc>
    4a68:	20002094 	.word	0x20002094

00004a6c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4a6c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4a6e:	f003 021f 	and.w	r2, r3, #31
    4a72:	6002      	str	r2, [r0, #0]
}
    4a74:	4a03      	ldr	r2, [pc, #12]	; (4a84 <nrf_gpio_pin_port_decode+0x18>)
    4a76:	4804      	ldr	r0, [pc, #16]	; (4a88 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    4a78:	095b      	lsrs	r3, r3, #5
}
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	bf18      	it	ne
    4a7e:	4610      	movne	r0, r2
    4a80:	4770      	bx	lr
    4a82:	bf00      	nop
    4a84:	50842500 	.word	0x50842500
    4a88:	50842800 	.word	0x50842800

00004a8c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a8c:	4b03      	ldr	r3, [pc, #12]	; (4a9c <pin_in_use_by_te+0x10>)
    4a8e:	3008      	adds	r0, #8
    4a90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4a94:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4a98:	4770      	bx	lr
    4a9a:	bf00      	nop
    4a9c:	20002098 	.word	0x20002098

00004aa0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4aa0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4aa2:	4c0d      	ldr	r4, [pc, #52]	; (4ad8 <call_handler+0x38>)
    4aa4:	f100 0308 	add.w	r3, r0, #8
    4aa8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4aac:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4aae:	05da      	lsls	r2, r3, #23
{
    4ab0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ab2:	d507      	bpl.n	4ac4 <call_handler+0x24>
    4ab4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4ab8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4abc:	6852      	ldr	r2, [r2, #4]
    4abe:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4ac2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4ac4:	68a3      	ldr	r3, [r4, #8]
    4ac6:	b12b      	cbz	r3, 4ad4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4ac8:	4631      	mov	r1, r6
    4aca:	4628      	mov	r0, r5
    4acc:	68e2      	ldr	r2, [r4, #12]
    }
}
    4ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4ad2:	4718      	bx	r3
}
    4ad4:	bd70      	pop	{r4, r5, r6, pc}
    4ad6:	bf00      	nop
    4ad8:	20002098 	.word	0x20002098

00004adc <release_handler>:
{
    4adc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ade:	4a12      	ldr	r2, [pc, #72]	; (4b28 <release_handler+0x4c>)
    4ae0:	3008      	adds	r0, #8
    4ae2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4ae6:	05d9      	lsls	r1, r3, #23
    4ae8:	d51b      	bpl.n	4b22 <release_handler+0x46>
    4aea:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4aee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4af2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4af6:	2000      	movs	r0, #0
    4af8:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4afc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4b00:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b04:	d003      	beq.n	4b0e <release_handler+0x32>
    4b06:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4b0a:	4299      	cmp	r1, r3
    4b0c:	d009      	beq.n	4b22 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b0e:	3001      	adds	r0, #1
    4b10:	2830      	cmp	r0, #48	; 0x30
    4b12:	d1f3      	bne.n	4afc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4b14:	2300      	movs	r3, #0
    4b16:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b1a:	4804      	ldr	r0, [pc, #16]	; (4b2c <release_handler+0x50>)
}
    4b1c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b1e:	f7ff bf27 	b.w	4970 <nrfx_flag32_free>
}
    4b22:	bc10      	pop	{r4}
    4b24:	4770      	bx	lr
    4b26:	bf00      	nop
    4b28:	20002098 	.word	0x20002098
    4b2c:	2000210c 	.word	0x2000210c

00004b30 <pin_handler_trigger_uninit>:
{
    4b30:	b538      	push	{r3, r4, r5, lr}
    4b32:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4b34:	f7ff ffaa 	bl	4a8c <pin_in_use_by_te>
    4b38:	4c0b      	ldr	r4, [pc, #44]	; (4b68 <pin_handler_trigger_uninit+0x38>)
    4b3a:	f102 0508 	add.w	r5, r2, #8
    4b3e:	b160      	cbz	r0, 4b5a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b40:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b42:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b46:	0b5b      	lsrs	r3, r3, #13
    4b48:	009b      	lsls	r3, r3, #2
    4b4a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4b4e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4b52:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4b56:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4b5a:	4610      	mov	r0, r2
    4b5c:	f7ff ffbe 	bl	4adc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b60:	2300      	movs	r3, #0
    4b62:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b66:	bd38      	pop	{r3, r4, r5, pc}
    4b68:	20002098 	.word	0x20002098

00004b6c <nrfx_gpiote_input_configure>:
{
    4b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4b70:	4604      	mov	r4, r0
    4b72:	4690      	mov	r8, r2
    4b74:	461d      	mov	r5, r3
    if (p_input_config)
    4b76:	b301      	cbz	r1, 4bba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b78:	4e4f      	ldr	r6, [pc, #316]	; (4cb8 <nrfx_gpiote_input_configure+0x14c>)
    4b7a:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b7e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4b82:	079b      	lsls	r3, r3, #30
    4b84:	d502      	bpl.n	4b8c <nrfx_gpiote_input_configure+0x20>
    4b86:	f7ff ff81 	bl	4a8c <pin_in_use_by_te>
    4b8a:	bb28      	cbnz	r0, 4bd8 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b8c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b8e:	4620      	mov	r0, r4
    4b90:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b94:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4b98:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b9c:	f10d 020f 	add.w	r2, sp, #15
    4ba0:	460b      	mov	r3, r1
    4ba2:	f10d 010e 	add.w	r1, sp, #14
    4ba6:	f003 fe83 	bl	88b0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4baa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4bae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4bb2:	f043 0301 	orr.w	r3, r3, #1
    4bb6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    4bba:	f1b8 0f00 	cmp.w	r8, #0
    4bbe:	d02d      	beq.n	4c1c <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bc0:	4e3d      	ldr	r6, [pc, #244]	; (4cb8 <nrfx_gpiote_input_configure+0x14c>)
    4bc2:	f104 0708 	add.w	r7, r4, #8
    4bc6:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4bca:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    4bce:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4bd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    4bd4:	d502      	bpl.n	4bdc <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    4bd6:	b1cb      	cbz	r3, 4c0c <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    4bd8:	4838      	ldr	r0, [pc, #224]	; (4cbc <nrfx_gpiote_input_configure+0x150>)
    4bda:	e021      	b.n	4c20 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4bdc:	f021 0120 	bic.w	r1, r1, #32
    4be0:	04c9      	lsls	r1, r1, #19
    4be2:	0cc9      	lsrs	r1, r1, #19
    4be4:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    4be8:	b183      	cbz	r3, 4c0c <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    4bea:	2803      	cmp	r0, #3
    4bec:	d8f4      	bhi.n	4bd8 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4bee:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4bf2:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4bf6:	4662      	mov	r2, ip
    4bf8:	0092      	lsls	r2, r2, #2
    4bfa:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4bfe:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4c02:	b980      	cbnz	r0, 4c26 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    4c04:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4c08:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4c0c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4c10:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4c14:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    4c18:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    4c1c:	bb1d      	cbnz	r5, 4c66 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    4c1e:	4828      	ldr	r0, [pc, #160]	; (4cc0 <nrfx_gpiote_input_configure+0x154>)
}
    4c20:	b004      	add	sp, #16
    4c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4c26:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c2a:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4c2e:	f023 0303 	bic.w	r3, r3, #3
    4c32:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c36:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    4c3a:	f041 0120 	orr.w	r1, r1, #32
    4c3e:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    4c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4c46:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c4a:	0223      	lsls	r3, r4, #8
    4c4c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c50:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4c54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    4c58:	ea43 030e 	orr.w	r3, r3, lr
    4c5c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    4c60:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4c64:	e7d2      	b.n	4c0c <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    4c66:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c68:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c6c:	f7ff ff36 	bl	4adc <release_handler>
    if (!handler)
    4c70:	2e00      	cmp	r6, #0
    4c72:	d0d4      	beq.n	4c1e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c74:	4d10      	ldr	r5, [pc, #64]	; (4cb8 <nrfx_gpiote_input_configure+0x14c>)
    4c76:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c7a:	4296      	cmp	r6, r2
    4c7c:	d101      	bne.n	4c82 <nrfx_gpiote_input_configure+0x116>
    4c7e:	429f      	cmp	r7, r3
    4c80:	d018      	beq.n	4cb4 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c82:	4810      	ldr	r0, [pc, #64]	; (4cc4 <nrfx_gpiote_input_configure+0x158>)
    4c84:	f10d 010f 	add.w	r1, sp, #15
    4c88:	f7ff fe56 	bl	4938 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c8c:	4b0c      	ldr	r3, [pc, #48]	; (4cc0 <nrfx_gpiote_input_configure+0x154>)
    4c8e:	4298      	cmp	r0, r3
    4c90:	d1c6      	bne.n	4c20 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    4c92:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    4c96:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c9a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c9c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c9e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4ca2:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ca6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4cae:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4cb2:	e7b4      	b.n	4c1e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4cb4:	2200      	movs	r2, #0
    4cb6:	e7ee      	b.n	4c96 <nrfx_gpiote_input_configure+0x12a>
    4cb8:	20002098 	.word	0x20002098
    4cbc:	0bad0004 	.word	0x0bad0004
    4cc0:	0bad0000 	.word	0x0bad0000
    4cc4:	2000210c 	.word	0x2000210c

00004cc8 <nrfx_gpiote_output_configure>:
{
    4cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cca:	4604      	mov	r4, r0
    4ccc:	4615      	mov	r5, r2
    4cce:	b085      	sub	sp, #20
    if (p_config)
    4cd0:	b319      	cbz	r1, 4d1a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cd2:	4e34      	ldr	r6, [pc, #208]	; (4da4 <nrfx_gpiote_output_configure+0xdc>)
    4cd4:	f100 0708 	add.w	r7, r0, #8
    4cd8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4cdc:	0793      	lsls	r3, r2, #30
    4cde:	d403      	bmi.n	4ce8 <nrfx_gpiote_output_configure+0x20>
    4ce0:	f7ff fed4 	bl	4a8c <pin_in_use_by_te>
    4ce4:	2800      	cmp	r0, #0
    4ce6:	d15a      	bne.n	4d9e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4ce8:	f012 0f1c 	tst.w	r2, #28
    4cec:	d002      	beq.n	4cf4 <nrfx_gpiote_output_configure+0x2c>
    4cee:	784b      	ldrb	r3, [r1, #1]
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d054      	beq.n	4d9e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4cf4:	2301      	movs	r3, #1
    4cf6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4cfa:	2300      	movs	r3, #0
    4cfc:	1c4a      	adds	r2, r1, #1
    4cfe:	e9cd 1300 	strd	r1, r3, [sp]
    4d02:	4620      	mov	r0, r4
    4d04:	1c8b      	adds	r3, r1, #2
    4d06:	f10d 010f 	add.w	r1, sp, #15
    4d0a:	f003 fdd1 	bl	88b0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4d0e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4d12:	f043 0303 	orr.w	r3, r3, #3
    4d16:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4d1a:	b915      	cbnz	r5, 4d22 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4d1c:	4822      	ldr	r0, [pc, #136]	; (4da8 <nrfx_gpiote_output_configure+0xe0>)
}
    4d1e:	b005      	add	sp, #20
    4d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d22:	4e20      	ldr	r6, [pc, #128]	; (4da4 <nrfx_gpiote_output_configure+0xdc>)
    4d24:	f104 0708 	add.w	r7, r4, #8
    4d28:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4d2c:	0783      	lsls	r3, r0, #30
    4d2e:	d536      	bpl.n	4d9e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    4d30:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4d34:	2300      	movs	r3, #0
    4d36:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d38:	f020 0020 	bic.w	r0, r0, #32
    4d3c:	0089      	lsls	r1, r1, #2
    4d3e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d42:	04c0      	lsls	r0, r0, #19
    4d44:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4d48:	0cc0      	lsrs	r0, r0, #19
    4d4a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d4e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4d52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d56:	786a      	ldrb	r2, [r5, #1]
    4d58:	2a00      	cmp	r2, #0
    4d5a:	d0df      	beq.n	4d1c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d5c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4d60:	78ad      	ldrb	r5, [r5, #2]
    4d62:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4d66:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d6a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d6e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d72:	0223      	lsls	r3, r4, #8
    4d74:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d78:	0412      	lsls	r2, r2, #16
    4d7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d7e:	ea43 030e 	orr.w	r3, r3, lr
    4d82:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d84:	052a      	lsls	r2, r5, #20
    4d86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d8a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d8e:	4313      	orrs	r3, r2
    4d90:	f040 0020 	orr.w	r0, r0, #32
    4d94:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d98:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d9c:	e7be      	b.n	4d1c <nrfx_gpiote_output_configure+0x54>
{
    4d9e:	4803      	ldr	r0, [pc, #12]	; (4dac <nrfx_gpiote_output_configure+0xe4>)
    4da0:	e7bd      	b.n	4d1e <nrfx_gpiote_output_configure+0x56>
    4da2:	bf00      	nop
    4da4:	20002098 	.word	0x20002098
    4da8:	0bad0000 	.word	0x0bad0000
    4dac:	0bad0004 	.word	0x0bad0004

00004db0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4db0:	4b01      	ldr	r3, [pc, #4]	; (4db8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4db2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4db6:	4770      	bx	lr
    4db8:	20002098 	.word	0x20002098

00004dbc <nrfx_gpiote_channel_get>:
{
    4dbc:	b508      	push	{r3, lr}
    4dbe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4dc0:	f7ff fe64 	bl	4a8c <pin_in_use_by_te>
    4dc4:	b138      	cbz	r0, 4dd6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4dc6:	4b05      	ldr	r3, [pc, #20]	; (4ddc <nrfx_gpiote_channel_get+0x20>)
    4dc8:	3208      	adds	r2, #8
    4dca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4dce:	4804      	ldr	r0, [pc, #16]	; (4de0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4dd0:	0b5b      	lsrs	r3, r3, #13
    4dd2:	700b      	strb	r3, [r1, #0]
}
    4dd4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4dd6:	4803      	ldr	r0, [pc, #12]	; (4de4 <nrfx_gpiote_channel_get+0x28>)
    4dd8:	e7fc      	b.n	4dd4 <nrfx_gpiote_channel_get+0x18>
    4dda:	bf00      	nop
    4ddc:	20002098 	.word	0x20002098
    4de0:	0bad0000 	.word	0x0bad0000
    4de4:	0bad0004 	.word	0x0bad0004

00004de8 <nrfx_gpiote_init>:
{
    4de8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4dea:	4c0f      	ldr	r4, [pc, #60]	; (4e28 <nrfx_gpiote_init+0x40>)
    4dec:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4df0:	b9bd      	cbnz	r5, 4e22 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4df2:	2260      	movs	r2, #96	; 0x60
    4df4:	4629      	mov	r1, r5
    4df6:	f104 0010 	add.w	r0, r4, #16
    4dfa:	f003 f9a7 	bl	814c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4dfe:	200d      	movs	r0, #13
    4e00:	f7fd f982 	bl	2108 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e04:	4b09      	ldr	r3, [pc, #36]	; (4e2c <nrfx_gpiote_init+0x44>)
    return err_code;
    4e06:	480a      	ldr	r0, [pc, #40]	; (4e30 <nrfx_gpiote_init+0x48>)
    4e08:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4e0c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4e10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4e18:	2301      	movs	r3, #1
    4e1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4e1e:	6763      	str	r3, [r4, #116]	; 0x74
}
    4e20:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4e22:	4804      	ldr	r0, [pc, #16]	; (4e34 <nrfx_gpiote_init+0x4c>)
    4e24:	e7fc      	b.n	4e20 <nrfx_gpiote_init+0x38>
    4e26:	bf00      	nop
    4e28:	20002098 	.word	0x20002098
    4e2c:	5000d000 	.word	0x5000d000
    4e30:	0bad0000 	.word	0x0bad0000
    4e34:	0bad0005 	.word	0x0bad0005

00004e38 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e38:	4b03      	ldr	r3, [pc, #12]	; (4e48 <nrfx_gpiote_is_init+0x10>)
    4e3a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4e3e:	3800      	subs	r0, #0
    4e40:	bf18      	it	ne
    4e42:	2001      	movne	r0, #1
    4e44:	4770      	bx	lr
    4e46:	bf00      	nop
    4e48:	20002098 	.word	0x20002098

00004e4c <nrfx_gpiote_channel_free>:
{
    4e4c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e4e:	4801      	ldr	r0, [pc, #4]	; (4e54 <nrfx_gpiote_channel_free+0x8>)
    4e50:	f7ff bd8e 	b.w	4970 <nrfx_flag32_free>
    4e54:	20002108 	.word	0x20002108

00004e58 <nrfx_gpiote_channel_alloc>:
{
    4e58:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e5a:	4801      	ldr	r0, [pc, #4]	; (4e60 <nrfx_gpiote_channel_alloc+0x8>)
    4e5c:	f7ff bd6c 	b.w	4938 <nrfx_flag32_alloc>
    4e60:	20002108 	.word	0x20002108

00004e64 <nrfx_gpiote_trigger_enable>:
{
    4e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e66:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e68:	f7ff fe10 	bl	4a8c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e6c:	4b1e      	ldr	r3, [pc, #120]	; (4ee8 <nrfx_gpiote_trigger_enable+0x84>)
    4e6e:	f104 0208 	add.w	r2, r4, #8
    4e72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e76:	b1e8      	cbz	r0, 4eb4 <nrfx_gpiote_trigger_enable+0x50>
    4e78:	f013 0502 	ands.w	r5, r3, #2
    4e7c:	d11a      	bne.n	4eb4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e7e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e80:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4e82:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4e86:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4e8a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e8e:	6005      	str	r5, [r0, #0]
    4e90:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4e94:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e96:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4e9a:	f040 0001 	orr.w	r0, r0, #1
    4e9e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4ea2:	b129      	cbz	r1, 4eb0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4ea4:	2201      	movs	r2, #1
    4ea6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4eaa:	4a10      	ldr	r2, [pc, #64]	; (4eec <nrfx_gpiote_trigger_enable+0x88>)
    4eac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4eb0:	b003      	add	sp, #12
    4eb2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4eb4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4eb8:	2b04      	cmp	r3, #4
    4eba:	d011      	beq.n	4ee0 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4ebc:	2b05      	cmp	r3, #5
    4ebe:	d011      	beq.n	4ee4 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ec0:	a801      	add	r0, sp, #4
    4ec2:	9401      	str	r4, [sp, #4]
    4ec4:	f7ff fdd2 	bl	4a6c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4ec8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4eca:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4ecc:	40d9      	lsrs	r1, r3
    4ece:	f001 0101 	and.w	r1, r1, #1
    4ed2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ed4:	4620      	mov	r0, r4
}
    4ed6:	b003      	add	sp, #12
    4ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4edc:	f003 bd31 	b.w	8942 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4ee0:	2103      	movs	r1, #3
    4ee2:	e7f7      	b.n	4ed4 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4ee4:	2102      	movs	r1, #2
    4ee6:	e7f5      	b.n	4ed4 <nrfx_gpiote_trigger_enable+0x70>
    4ee8:	20002098 	.word	0x20002098
    4eec:	5000d000 	.word	0x5000d000

00004ef0 <nrfx_gpiote_trigger_disable>:
{
    4ef0:	b508      	push	{r3, lr}
    4ef2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ef4:	f7ff fdca 	bl	4a8c <pin_in_use_by_te>
    4ef8:	b1c0      	cbz	r0, 4f2c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4efa:	4b0f      	ldr	r3, [pc, #60]	; (4f38 <nrfx_gpiote_trigger_disable+0x48>)
    4efc:	f102 0108 	add.w	r1, r2, #8
    4f00:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f04:	0799      	lsls	r1, r3, #30
    4f06:	d411      	bmi.n	4f2c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f08:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f0a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f0c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4f0e:	490b      	ldr	r1, [pc, #44]	; (4f3c <nrfx_gpiote_trigger_disable+0x4c>)
    4f10:	009b      	lsls	r3, r3, #2
    4f12:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4f16:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f1a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4f1e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f22:	f022 0203 	bic.w	r2, r2, #3
    4f26:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f2a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f2c:	2100      	movs	r1, #0
}
    4f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f32:	4610      	mov	r0, r2
    4f34:	f003 bd05 	b.w	8942 <nrf_gpio_cfg_sense_set>
    4f38:	20002098 	.word	0x20002098
    4f3c:	5000d000 	.word	0x5000d000

00004f40 <nrfx_gpiote_pin_uninit>:
{
    4f40:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f42:	4b10      	ldr	r3, [pc, #64]	; (4f84 <nrfx_gpiote_pin_uninit+0x44>)
    4f44:	f100 0208 	add.w	r2, r0, #8
    4f48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4f4c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f4e:	07db      	lsls	r3, r3, #31
    4f50:	d516      	bpl.n	4f80 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    4f52:	f7ff ffcd 	bl	4ef0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f56:	4620      	mov	r0, r4
    4f58:	f7ff fdea 	bl	4b30 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f5c:	a801      	add	r0, sp, #4
    4f5e:	9401      	str	r4, [sp, #4]
    4f60:	f7ff fd84 	bl	4a6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4f64:	9b01      	ldr	r3, [sp, #4]
    4f66:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4f6a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    4f6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f72:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    4f76:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    4f7a:	4803      	ldr	r0, [pc, #12]	; (4f88 <nrfx_gpiote_pin_uninit+0x48>)
}
    4f7c:	b002      	add	sp, #8
    4f7e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f80:	4802      	ldr	r0, [pc, #8]	; (4f8c <nrfx_gpiote_pin_uninit+0x4c>)
    4f82:	e7fb      	b.n	4f7c <nrfx_gpiote_pin_uninit+0x3c>
    4f84:	20002098 	.word	0x20002098
    4f88:	0bad0000 	.word	0x0bad0000
    4f8c:	0bad0004 	.word	0x0bad0004

00004f90 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4f94:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f96:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f98:	4634      	mov	r4, r6
{
    4f9a:	4b63      	ldr	r3, [pc, #396]	; (5128 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4f9c:	4863      	ldr	r0, [pc, #396]	; (512c <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f9e:	4964      	ldr	r1, [pc, #400]	; (5130 <nrfx_gpiote_irq_handler+0x1a0>)
{
    4fa0:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fa2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4fa4:	b135      	cbz	r5, 4fb4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4fa6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4faa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fac:	bf1e      	ittt	ne
    4fae:	601c      	strne	r4, [r3, #0]
    4fb0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4fb2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fb4:	3304      	adds	r3, #4
    4fb6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4fb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fbc:	d1f1      	bne.n	4fa2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fbe:	f8df a16c 	ldr.w	sl, [pc, #364]	; 512c <nrfx_gpiote_irq_handler+0x19c>
    4fc2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	f000 8091 	beq.w	50ee <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4fcc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 5134 <nrfx_gpiote_irq_handler+0x1a4>
    4fd0:	f8d8 3020 	ldr.w	r3, [r8, #32]
    4fd4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4fd6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    4fda:	4b57      	ldr	r3, [pc, #348]	; (5138 <nrfx_gpiote_irq_handler+0x1a8>)
    4fdc:	6a1a      	ldr	r2, [r3, #32]
    4fde:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4fe0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4fe2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    4fe6:	f10d 0b10 	add.w	fp, sp, #16
    4fea:	ea4f 1349 	mov.w	r3, r9, lsl #5
    4fee:	9300      	str	r3, [sp, #0]
    4ff0:	e048      	b.n	5084 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    4ff2:	fa94 f4a4 	rbit	r4, r4
    4ff6:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4ffa:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4ffc:	4a4f      	ldr	r2, [pc, #316]	; (513c <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    4ffe:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5000:	f104 0308 	add.w	r3, r4, #8
    5004:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5008:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    500a:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    500c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5010:	fa03 f202 	lsl.w	r2, r3, r2
    5014:	f81b 3000 	ldrb.w	r3, [fp, r0]
    5018:	9403      	str	r4, [sp, #12]
    501a:	ea23 0302 	bic.w	r3, r3, r2
    501e:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5022:	a803      	add	r0, sp, #12
    5024:	f7ff fd22 	bl	4a6c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5028:	9b03      	ldr	r3, [sp, #12]
    502a:	08b9      	lsrs	r1, r7, #2
    502c:	3380      	adds	r3, #128	; 0x80
    502e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5032:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    5036:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5038:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    503a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    503e:	d52b      	bpl.n	5098 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    5040:	4620      	mov	r0, r4
    5042:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5044:	b2dd      	uxtb	r5, r3
    5046:	f7ff fd2b 	bl	4aa0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    504a:	a803      	add	r0, sp, #12
    504c:	9403      	str	r4, [sp, #12]
    504e:	f7ff fd0d 	bl	4a6c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5052:	9b03      	ldr	r3, [sp, #12]
    5054:	3380      	adds	r3, #128	; 0x80
    5056:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    505a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    505e:	429d      	cmp	r5, r3
    5060:	d107      	bne.n	5072 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5062:	2100      	movs	r1, #0
    5064:	4620      	mov	r0, r4
    5066:	f003 fc6c 	bl	8942 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    506a:	4629      	mov	r1, r5
    506c:	4620      	mov	r0, r4
    506e:	f003 fc68 	bl	8942 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5072:	a803      	add	r0, sp, #12
    5074:	9403      	str	r4, [sp, #12]
    5076:	f7ff fcf9 	bl	4a6c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    507a:	2201      	movs	r2, #1
    507c:	9b03      	ldr	r3, [sp, #12]
    507e:	fa02 f303 	lsl.w	r3, r2, r3
    5082:	6203      	str	r3, [r0, #32]
            while (latch[i])
    5084:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    5088:	2c00      	cmp	r4, #0
    508a:	d1b2      	bne.n	4ff2 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    508c:	f1b9 0f00 	cmp.w	r9, #0
    5090:	d11d      	bne.n	50ce <nrfx_gpiote_irq_handler+0x13e>
    5092:	f04f 0901 	mov.w	r9, #1
    5096:	e7a8      	b.n	4fea <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5098:	2b02      	cmp	r3, #2
    509a:	d10c      	bne.n	50b6 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    509c:	2103      	movs	r1, #3
    509e:	4620      	mov	r0, r4
    50a0:	f003 fc4f 	bl	8942 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50a4:	f005 0305 	and.w	r3, r5, #5
    50a8:	2b01      	cmp	r3, #1
    50aa:	d1e2      	bne.n	5072 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    50ac:	4639      	mov	r1, r7
    50ae:	4620      	mov	r0, r4
    50b0:	f7ff fcf6 	bl	4aa0 <call_handler>
    50b4:	e7dd      	b.n	5072 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    50b6:	2102      	movs	r1, #2
    50b8:	4620      	mov	r0, r4
    50ba:	9301      	str	r3, [sp, #4]
    50bc:	f003 fc41 	bl	8942 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50c0:	2d03      	cmp	r5, #3
    50c2:	d0f3      	beq.n	50ac <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50c4:	9b01      	ldr	r3, [sp, #4]
    50c6:	2b03      	cmp	r3, #3
    50c8:	d1d3      	bne.n	5072 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50ca:	2d02      	cmp	r5, #2
    50cc:	e7ed      	b.n	50aa <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    50ce:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    50d2:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    50d6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    50da:	4917      	ldr	r1, [pc, #92]	; (5138 <nrfx_gpiote_irq_handler+0x1a8>)
    50dc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    50de:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    50e2:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    50e4:	4313      	orrs	r3, r2
    50e6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    50e8:	620a      	str	r2, [r1, #32]
    50ea:	f47f af7a 	bne.w	4fe2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    50ee:	2401      	movs	r4, #1
    while (mask)
    50f0:	b916      	cbnz	r6, 50f8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    50f2:	b007      	add	sp, #28
    50f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    50f8:	fa96 f3a6 	rbit	r3, r6
    50fc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5100:	fa04 f203 	lsl.w	r2, r4, r3
    5104:	009b      	lsls	r3, r3, #2
    5106:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    510a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    510e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5112:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5116:	f3c0 2005 	ubfx	r0, r0, #8, #6
    511a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    511e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5122:	f7ff fcbd 	bl	4aa0 <call_handler>
    5126:	e7e3      	b.n	50f0 <nrfx_gpiote_irq_handler+0x160>
    5128:	5000d100 	.word	0x5000d100
    512c:	5000d000 	.word	0x5000d000
    5130:	5000d120 	.word	0x5000d120
    5134:	50842500 	.word	0x50842500
    5138:	50842800 	.word	0x50842800
    513c:	20002098 	.word	0x20002098

00005140 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    5140:	2200      	movs	r2, #0
    5142:	4b03      	ldr	r3, [pc, #12]	; (5150 <nvmc_readonly_mode_set+0x10>)
    5144:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    5148:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    514c:	4770      	bx	lr
    514e:	bf00      	nop
    5150:	50039000 	.word	0x50039000

00005154 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5154:	4a04      	ldr	r2, [pc, #16]	; (5168 <nvmc_word_write+0x14>)
    5156:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    515a:	07db      	lsls	r3, r3, #31
    515c:	d5fb      	bpl.n	5156 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    515e:	6001      	str	r1, [r0, #0]
    5160:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    5164:	4770      	bx	lr
    5166:	bf00      	nop
    5168:	50039000 	.word	0x50039000

0000516c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    516c:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    516e:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    5172:	b983      	cbnz	r3, 5196 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    5174:	2202      	movs	r2, #2
    5176:	4b09      	ldr	r3, [pc, #36]	; (519c <nrfx_nvmc_page_erase+0x30>)
    5178:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    517c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    5180:	f04f 32ff 	mov.w	r2, #4294967295
    5184:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    5186:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    518a:	07d2      	lsls	r2, r2, #31
    518c:	d5fb      	bpl.n	5186 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    518e:	f7ff ffd7 	bl	5140 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    5192:	4803      	ldr	r0, [pc, #12]	; (51a0 <nrfx_nvmc_page_erase+0x34>)
}
    5194:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    5196:	4803      	ldr	r0, [pc, #12]	; (51a4 <nrfx_nvmc_page_erase+0x38>)
    5198:	e7fc      	b.n	5194 <nrfx_nvmc_page_erase+0x28>
    519a:	bf00      	nop
    519c:	50039000 	.word	0x50039000
    51a0:	0bad0000 	.word	0x0bad0000
    51a4:	0bad000a 	.word	0x0bad000a

000051a8 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    51a8:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    51aa:	b508      	push	{r3, lr}
    51ac:	4b05      	ldr	r3, [pc, #20]	; (51c4 <nrfx_nvmc_word_write+0x1c>)
    51ae:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    51b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    51b6:	f7ff ffcd 	bl	5154 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    51ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    51be:	f7ff bfbf 	b.w	5140 <nvmc_readonly_mode_set>
    51c2:	bf00      	nop
    51c4:	50039000 	.word	0x50039000

000051c8 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    51c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51cc:	4615      	mov	r5, r2
    p_reg->CONFIGNS = (uint32_t)mode;
    51ce:	2201      	movs	r2, #1
    51d0:	4b1d      	ldr	r3, [pc, #116]	; (5248 <nrfx_nvmc_bytes_write+0x80>)
    51d2:	4604      	mov	r4, r0
    51d4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    51d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
    51dc:	f010 0303 	ands.w	r3, r0, #3
{
    51e0:	460e      	mov	r6, r1
    if (unaligned_bytes != 0)
    51e2:	d010      	beq.n	5206 <nrfx_nvmc_bytes_write+0x3e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
    51e4:	f1c3 0704 	rsb	r7, r3, #4
    51e8:	42af      	cmp	r7, r5
    51ea:	bf28      	it	cs
    51ec:	462f      	movcs	r7, r5
        if (leading_bytes > num_bytes)
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
    51ee:	463a      	mov	r2, r7
    51f0:	eba0 0803 	sub.w	r8, r0, r3
    51f4:	f003 fbb4 	bl	8960 <partial_word_create>
    51f8:	4601      	mov	r1, r0
    51fa:	4640      	mov	r0, r8
    51fc:	f7ff ffaa 	bl	5154 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
    5200:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
    5202:	443c      	add	r4, r7
        bytes_src += leading_bytes;
    5204:	443e      	add	r6, r7
    for (uint32_t i = 0; i < num_words; i++)
    5206:	4637      	mov	r7, r6
    5208:	f025 0803 	bic.w	r8, r5, #3
    520c:	44b0      	add	r8, r6
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    520e:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
    5212:	45b8      	cmp	r8, r7
    5214:	d111      	bne.n	523a <nrfx_nvmc_bytes_write+0x72>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
    5216:	f015 0203 	ands.w	r2, r5, #3
    521a:	d00a      	beq.n	5232 <nrfx_nvmc_bytes_write+0x6a>
        addr += word_count * NVMC_BYTES_IN_WORD;
    521c:	f025 0503 	bic.w	r5, r5, #3
    5220:	442c      	add	r4, r5
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
    5222:	1971      	adds	r1, r6, r5
    5224:	4620      	mov	r0, r4
    5226:	f003 fb9b 	bl	8960 <partial_word_create>
    522a:	4601      	mov	r1, r0
    522c:	4620      	mov	r0, r4
    522e:	f7ff ff91 	bl	5154 <nvmc_word_write>
    }

    nvmc_readonly_mode_set();
}
    5232:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    nvmc_readonly_mode_set();
    5236:	f7ff bf83 	b.w	5140 <nvmc_readonly_mode_set>
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    523a:	eb09 0007 	add.w	r0, r9, r7
    523e:	f857 1b04 	ldr.w	r1, [r7], #4
    5242:	f7ff ff87 	bl	5154 <nvmc_word_write>
    for (uint32_t i = 0; i < num_words; i++)
    5246:	e7e4      	b.n	5212 <nrfx_nvmc_bytes_write+0x4a>
    5248:	50039000 	.word	0x50039000

0000524c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    524c:	b570      	push	{r4, r5, r6, lr}
    524e:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    5252:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    5256:	d168      	bne.n	532a <qspi_xfer+0xde>
    5258:	0784      	lsls	r4, r0, #30
    525a:	d166      	bne.n	532a <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    525c:	4d35      	ldr	r5, [pc, #212]	; (5334 <qspi_xfer+0xe8>)
    525e:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    5262:	2c01      	cmp	r4, #1
    5264:	d001      	beq.n	526a <qspi_xfer+0x1e>
    5266:	429c      	cmp	r4, r3
    5268:	d161      	bne.n	532e <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    526a:	682c      	ldr	r4, [r5, #0]
    526c:	bb04      	cbnz	r4, 52b0 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    526e:	2b02      	cmp	r3, #2
    5270:	4b31      	ldr	r3, [pc, #196]	; (5338 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    5272:	bf0b      	itete	eq
    5274:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    5278:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    527c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    5280:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    5284:	bf0b      	itete	eq
    5286:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    528a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    528e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    5290:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5292:	2100      	movs	r1, #0
    5294:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5298:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    529c:	2201      	movs	r2, #1
    529e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    52a2:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52a4:	4a24      	ldr	r2, [pc, #144]	; (5338 <qspi_xfer+0xec>)
    52a6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    52aa:	2b00      	cmp	r3, #0
    52ac:	d0fb      	beq.n	52a6 <qspi_xfer+0x5a>
    52ae:	e00d      	b.n	52cc <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    52b0:	68ae      	ldr	r6, [r5, #8]
    52b2:	4c21      	ldr	r4, [pc, #132]	; (5338 <qspi_xfer+0xec>)
    52b4:	b166      	cbz	r6, 52d0 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    52b6:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    52b8:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    52ba:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    52bc:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    52be:	d12d      	bne.n	531c <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    52c0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    52c4:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    52c8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    52cc:	481b      	ldr	r0, [pc, #108]	; (533c <qspi_xfer+0xf0>)
}
    52ce:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    52d0:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    52d2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    52d6:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    52d8:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    52da:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    52dc:	bf0c      	ite	eq
    52de:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    52e2:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52e6:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    52ea:	bf0b      	itete	eq
    52ec:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    52f0:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    52f4:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    52f8:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    52fc:	bf08      	it	eq
    52fe:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5300:	490d      	ldr	r1, [pc, #52]	; (5338 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    5302:	bf18      	it	ne
    5304:	2304      	movne	r3, #4
    5306:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    530a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    530c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5310:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    5314:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5318:	601a      	str	r2, [r3, #0]
}
    531a:	e7d7      	b.n	52cc <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    531c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    5320:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    5324:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    5328:	e7d0      	b.n	52cc <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    532a:	4805      	ldr	r0, [pc, #20]	; (5340 <qspi_xfer+0xf4>)
    532c:	e7cf      	b.n	52ce <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    532e:	4805      	ldr	r0, [pc, #20]	; (5344 <qspi_xfer+0xf8>)
    5330:	e7cd      	b.n	52ce <qspi_xfer+0x82>
    5332:	bf00      	nop
    5334:	20004c2c 	.word	0x20004c2c
    5338:	5002b000 	.word	0x5002b000
    533c:	0bad0000 	.word	0x0bad0000
    5340:	0bad000a 	.word	0x0bad000a
    5344:	0bad000b 	.word	0x0bad000b

00005348 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    5348:	b538      	push	{r3, r4, r5, lr}
    534a:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    534c:	4d06      	ldr	r5, [pc, #24]	; (5368 <qspi_ready_wait+0x20>)
    534e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    5352:	b933      	cbnz	r3, 5362 <qspi_ready_wait+0x1a>
    5354:	200a      	movs	r0, #10
    5356:	f003 f977 	bl	8648 <nrfx_busy_wait>
    535a:	3c01      	subs	r4, #1
    535c:	d1f7      	bne.n	534e <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    535e:	4803      	ldr	r0, [pc, #12]	; (536c <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    5360:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    5362:	4803      	ldr	r0, [pc, #12]	; (5370 <qspi_ready_wait+0x28>)
    5364:	e7fc      	b.n	5360 <qspi_ready_wait+0x18>
    5366:	bf00      	nop
    5368:	5002b000 	.word	0x5002b000
    536c:	0bad0007 	.word	0x0bad0007
    5370:	0bad0000 	.word	0x0bad0000

00005374 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    5374:	4b08      	ldr	r3, [pc, #32]	; (5398 <qspi_event_xfer_handle.constprop.0+0x24>)
    5376:	689a      	ldr	r2, [r3, #8]
    5378:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    537a:	691a      	ldr	r2, [r3, #16]
    537c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    537e:	699a      	ldr	r2, [r3, #24]
    5380:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    5382:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    5384:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    5386:	b132      	cbz	r2, 5396 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    5388:	695a      	ldr	r2, [r3, #20]
    538a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    538c:	69da      	ldr	r2, [r3, #28]
    538e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    5390:	2200      	movs	r2, #0
    5392:	60da      	str	r2, [r3, #12]
    5394:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    5396:	4770      	bx	lr
    5398:	20004c2c 	.word	0x20004c2c

0000539c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    539c:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    539e:	4a0a      	ldr	r2, [pc, #40]	; (53c8 <nrf_gpio_cfg.constprop.0+0x2c>)
    53a0:	4c0a      	ldr	r4, [pc, #40]	; (53cc <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    53a2:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    53a6:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    53a8:	2801      	cmp	r0, #1
    53aa:	bf18      	it	ne
    53ac:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    53ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    53b2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    53b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    53ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    53be:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    53c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    53c6:	bd10      	pop	{r4, pc}
    53c8:	50842800 	.word	0x50842800
    53cc:	50842500 	.word	0x50842500

000053d0 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    53d0:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    53d2:	4b0e      	ldr	r3, [pc, #56]	; (540c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    53d4:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    53d6:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    53da:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    53de:	2807      	cmp	r0, #7
    53e0:	d813      	bhi.n	540a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    53e2:	e8df f000 	tbb	[pc, r0]
    53e6:	0f11      	.short	0x0f11
    53e8:	080a0b0d 	.word	0x080a0b0d
    53ec:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    53ee:	0e10      	lsrs	r0, r2, #24
    53f0:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    53f2:	0c10      	lsrs	r0, r2, #16
    53f4:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    53f6:	0a10      	lsrs	r0, r2, #8
    53f8:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    53fa:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    53fc:	0e1a      	lsrs	r2, r3, #24
    53fe:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    5400:	0c1a      	lsrs	r2, r3, #16
    5402:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    5404:	0a1a      	lsrs	r2, r3, #8
    5406:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    5408:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    540a:	bd10      	pop	{r4, pc}
    540c:	5002b000 	.word	0x5002b000

00005410 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    5410:	3802      	subs	r0, #2
    5412:	2807      	cmp	r0, #7
    5414:	d81f      	bhi.n	5456 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    5416:	e8df f000 	tbb	[pc, r0]
    541a:	2729      	.short	0x2729
    541c:	21231125 	.word	0x21231125
    5420:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    5422:	79cb      	ldrb	r3, [r1, #7]
    5424:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    5426:	798a      	ldrb	r2, [r1, #6]
    5428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    542c:	794a      	ldrb	r2, [r1, #5]
    542e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    5432:	790a      	ldrb	r2, [r1, #4]
    5434:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    5436:	4a0e      	ldr	r2, [pc, #56]	; (5470 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    5438:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    543c:	78cb      	ldrb	r3, [r1, #3]
    543e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    5440:	788a      	ldrb	r2, [r1, #2]
    5442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    5446:	784a      	ldrb	r2, [r1, #1]
    5448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    544c:	780a      	ldrb	r2, [r1, #0]
    544e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    5450:	4a07      	ldr	r2, [pc, #28]	; (5470 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    5452:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    5456:	4770      	bx	lr
    switch (length)
    5458:	2300      	movs	r3, #0
    545a:	e7e4      	b.n	5426 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    545c:	2300      	movs	r3, #0
    545e:	e7e5      	b.n	542c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    5460:	2300      	movs	r3, #0
    5462:	e7e6      	b.n	5432 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    5464:	2300      	movs	r3, #0
    5466:	e7eb      	b.n	5440 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    5468:	2300      	movs	r3, #0
    546a:	e7ec      	b.n	5446 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    546c:	2300      	movs	r3, #0
    546e:	e7ed      	b.n	544c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    5470:	5002b000 	.word	0x5002b000

00005474 <nrfx_qspi_init>:
{
    5474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    5476:	4f67      	ldr	r7, [pc, #412]	; (5614 <nrfx_qspi_init+0x1a0>)
{
    5478:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    547a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
    547e:	460d      	mov	r5, r1
    5480:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    5482:	2b00      	cmp	r3, #0
    5484:	f040 80c2 	bne.w	560c <nrfx_qspi_init+0x198>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    5488:	7cc2      	ldrb	r2, [r0, #19]
    548a:	b112      	cbz	r2, 5492 <nrfx_qspi_init+0x1e>
    548c:	7d03      	ldrb	r3, [r0, #20]
    548e:	2b00      	cmp	r3, #0
    5490:	d16c      	bne.n	556c <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    5492:	7920      	ldrb	r0, [r4, #4]
    5494:	28ff      	cmp	r0, #255	; 0xff
    5496:	f000 80bb 	beq.w	5610 <nrfx_qspi_init+0x19c>
    549a:	7963      	ldrb	r3, [r4, #5]
    549c:	2bff      	cmp	r3, #255	; 0xff
    549e:	f000 80b7 	beq.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    54a2:	79a3      	ldrb	r3, [r4, #6]
    54a4:	2bff      	cmp	r3, #255	; 0xff
    54a6:	f000 80b3 	beq.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    54aa:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    54ac:	29ff      	cmp	r1, #255	; 0xff
    54ae:	f000 80af 	beq.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    54b2:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    54b4:	f8df c160 	ldr.w	ip, [pc, #352]	; 5618 <nrfx_qspi_init+0x1a4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    54b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    54bc:	4563      	cmp	r3, ip
    54be:	f040 80a7 	bne.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    54c2:	290e      	cmp	r1, #14
    54c4:	f040 80a4 	bne.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    54c8:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    54ca:	2bff      	cmp	r3, #255	; 0xff
    54cc:	d002      	beq.n	54d4 <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    54ce:	2b0f      	cmp	r3, #15
    54d0:	f040 809e 	bne.w	5610 <nrfx_qspi_init+0x19c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    54d4:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    54d6:	2bff      	cmp	r3, #255	; 0xff
    54d8:	d002      	beq.n	54e0 <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    54da:	2b10      	cmp	r3, #16
    54dc:	f040 8098 	bne.w	5610 <nrfx_qspi_init+0x19c>
    if (!p_config->skip_gpio_cfg)
    54e0:	b9b2      	cbnz	r2, 5510 <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    54e2:	2103      	movs	r1, #3
    54e4:	f7ff ff5a 	bl	539c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    54e8:	7960      	ldrb	r0, [r4, #5]
    54ea:	f7ff ff57 	bl	539c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    54ee:	79a0      	ldrb	r0, [r4, #6]
    54f0:	f7ff ff54 	bl	539c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    54f4:	79e0      	ldrb	r0, [r4, #7]
    54f6:	f7ff ff51 	bl	539c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    54fa:	7a20      	ldrb	r0, [r4, #8]
    54fc:	28ff      	cmp	r0, #255	; 0xff
    54fe:	d001      	beq.n	5504 <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    5500:	f7ff ff4c 	bl	539c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    5504:	7a60      	ldrb	r0, [r4, #9]
    5506:	28ff      	cmp	r0, #255	; 0xff
    5508:	d002      	beq.n	5510 <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    550a:	2103      	movs	r1, #3
    550c:	f7ff ff46 	bl	539c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    5510:	7d23      	ldrb	r3, [r4, #20]
    5512:	bb5b      	cbnz	r3, 556c <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    5514:	7923      	ldrb	r3, [r4, #4]
    5516:	2bff      	cmp	r3, #255	; 0xff
    5518:	bf14      	ite	ne
    551a:	461a      	movne	r2, r3
    551c:	f04f 32ff 	moveq.w	r2, #4294967295
    5520:	4b3e      	ldr	r3, [pc, #248]	; (561c <nrfx_qspi_init+0x1a8>)
    5522:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    5526:	7962      	ldrb	r2, [r4, #5]
    5528:	2aff      	cmp	r2, #255	; 0xff
    552a:	bf08      	it	eq
    552c:	f04f 32ff 	moveq.w	r2, #4294967295
    5530:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    5534:	79a2      	ldrb	r2, [r4, #6]
    5536:	2aff      	cmp	r2, #255	; 0xff
    5538:	bf08      	it	eq
    553a:	f04f 32ff 	moveq.w	r2, #4294967295
    553e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    5542:	79e2      	ldrb	r2, [r4, #7]
    5544:	2aff      	cmp	r2, #255	; 0xff
    5546:	bf08      	it	eq
    5548:	f04f 32ff 	moveq.w	r2, #4294967295
    554c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    5550:	7a22      	ldrb	r2, [r4, #8]
    5552:	2aff      	cmp	r2, #255	; 0xff
    5554:	bf08      	it	eq
    5556:	f04f 32ff 	moveq.w	r2, #4294967295
    555a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    555e:	7a62      	ldrb	r2, [r4, #9]
    5560:	2aff      	cmp	r2, #255	; 0xff
    5562:	bf08      	it	eq
    5564:	f04f 32ff 	moveq.w	r2, #4294967295
    5568:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    556c:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    556e:	4a2b      	ldr	r2, [pc, #172]	; (561c <nrfx_qspi_init+0x1a8>)
    5570:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    5574:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    5576:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
    5578:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    557a:	019b      	lsls	r3, r3, #6
    557c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
    5580:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    5582:	7b61      	ldrb	r1, [r4, #13]
    5584:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
    5588:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    558c:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
    558e:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
    5592:	bbb1      	cbnz	r1, 5602 <nrfx_qspi_init+0x18e>
        regval |= ((1 << 16) | (1 << 17));
    5594:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    5598:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    559c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    55a0:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    55a4:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
    55a8:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    55aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    55ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
    55b2:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    55b4:	7be1      	ldrb	r1, [r4, #15]
    55b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    55ba:	7c21      	ldrb	r1, [r4, #16]
    55bc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    55c0:	7c61      	ldrb	r1, [r4, #17]
    55c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
    55c6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    55ca:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    55cc:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    55d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
    55d4:	2301      	movs	r3, #1
    55d6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
    55da:	b115      	cbz	r5, 55e2 <nrfx_qspi_init+0x16e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    55dc:	202b      	movs	r0, #43	; 0x2b
    55de:	f7fc fd93 	bl	2108 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
    55e2:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    55e4:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    55e6:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    55ea:	4b0c      	ldr	r3, [pc, #48]	; (561c <nrfx_qspi_init+0x1a8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    55ec:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
    55f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55f4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55f8:	601a      	str	r2, [r3, #0]
}
    55fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
    55fe:	f7ff bea3 	b.w	5348 <qspi_ready_wait>
        regval &= ~(1 << 17);
    5602:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    5606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    560a:	e7c5      	b.n	5598 <nrfx_qspi_init+0x124>
        return NRFX_ERROR_INVALID_STATE;
    560c:	4804      	ldr	r0, [pc, #16]	; (5620 <nrfx_qspi_init+0x1ac>)
}
    560e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5610:	4804      	ldr	r0, [pc, #16]	; (5624 <nrfx_qspi_init+0x1b0>)
    5612:	e7fc      	b.n	560e <nrfx_qspi_init+0x19a>
    5614:	20004c2c 	.word	0x20004c2c
    5618:	000d1211 	.word	0x000d1211
    561c:	5002b000 	.word	0x5002b000
    5620:	0bad0005 	.word	0x0bad0005
    5624:	0bad0004 	.word	0x0bad0004

00005628 <nrfx_qspi_cinstr_xfer>:
{
    5628:	b570      	push	{r4, r5, r6, lr}
    562a:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    562c:	4a19      	ldr	r2, [pc, #100]	; (5694 <nrfx_qspi_cinstr_xfer+0x6c>)
{
    562e:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    5630:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    5634:	2a01      	cmp	r2, #1
    5636:	d12b      	bne.n	5690 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5638:	2200      	movs	r2, #0
    563a:	4e17      	ldr	r6, [pc, #92]	; (5698 <nrfx_qspi_cinstr_xfer+0x70>)
    563c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
    5640:	b111      	cbz	r1, 5648 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    5642:	7840      	ldrb	r0, [r0, #1]
    5644:	f7ff fee4 	bl	5410 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    5648:	2301      	movs	r3, #1
    564a:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    564e:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    5650:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    5652:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    5654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    5658:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    565a:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    565c:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    565e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    5662:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    5664:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    5668:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    566a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    566e:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    5672:	f7ff fe69 	bl	5348 <qspi_ready_wait>
    5676:	4b09      	ldr	r3, [pc, #36]	; (569c <nrfx_qspi_cinstr_xfer+0x74>)
    5678:	4298      	cmp	r0, r3
    567a:	d008      	beq.n	568e <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    567c:	2300      	movs	r3, #0
    567e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
    5682:	b11c      	cbz	r4, 568c <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    5684:	4621      	mov	r1, r4
    5686:	7868      	ldrb	r0, [r5, #1]
    5688:	f7ff fea2 	bl	53d0 <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
    568c:	4804      	ldr	r0, [pc, #16]	; (56a0 <nrfx_qspi_cinstr_xfer+0x78>)
}
    568e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
    5690:	4804      	ldr	r0, [pc, #16]	; (56a4 <nrfx_qspi_cinstr_xfer+0x7c>)
    5692:	e7fc      	b.n	568e <nrfx_qspi_cinstr_xfer+0x66>
    5694:	20004c2c 	.word	0x20004c2c
    5698:	5002b000 	.word	0x5002b000
    569c:	0bad0007 	.word	0x0bad0007
    56a0:	0bad0000 	.word	0x0bad0000
    56a4:	0bad000b 	.word	0x0bad000b

000056a8 <nrfx_qspi_mem_busy_check>:
{
    56a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    56aa:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    56ac:	4a0c      	ldr	r2, [pc, #48]	; (56e0 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    56ae:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    56b0:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    56b2:	f10d 0207 	add.w	r2, sp, #7
    56b6:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    56b8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    56bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    56c0:	f7ff ffb2 	bl	5628 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    56c4:	4b07      	ldr	r3, [pc, #28]	; (56e4 <nrfx_qspi_mem_busy_check+0x3c>)
    56c6:	4298      	cmp	r0, r3
    56c8:	d106      	bne.n	56d8 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    56ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    56ce:	f013 0f01 	tst.w	r3, #1
    56d2:	4b05      	ldr	r3, [pc, #20]	; (56e8 <nrfx_qspi_mem_busy_check+0x40>)
    56d4:	bf18      	it	ne
    56d6:	4618      	movne	r0, r3
}
    56d8:	b005      	add	sp, #20
    56da:	f85d fb04 	ldr.w	pc, [sp], #4
    56de:	bf00      	nop
    56e0:	01000205 	.word	0x01000205
    56e4:	0bad0000 	.word	0x0bad0000
    56e8:	0bad000b 	.word	0x0bad000b

000056ec <nrfx_qspi_uninit>:
{
    56ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    56f0:	202b      	movs	r0, #43	; 0x2b
    56f2:	f7fc fd17 	bl	2124 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    56f6:	4b21      	ldr	r3, [pc, #132]	; (577c <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    56f8:	4e21      	ldr	r6, [pc, #132]	; (5780 <nrfx_qspi_uninit+0x94>)
    56fa:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    56fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    5702:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    5706:	bf04      	itt	eq
    5708:	4a1e      	ldreq	r2, [pc, #120]	; (5784 <nrfx_qspi_uninit+0x98>)
    570a:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    570e:	2201      	movs	r2, #1
    5710:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5714:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    5716:	2200      	movs	r2, #0
    5718:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    571c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    5720:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    5724:	bb22      	cbnz	r2, 5770 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    5726:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    572a:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    572e:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    5730:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    5734:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    5738:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    573c:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    5740:	f003 f92a 	bl	8998 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    5744:	fa5f f089 	uxtb.w	r0, r9
    5748:	f003 f926 	bl	8998 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    574c:	fa5f f088 	uxtb.w	r0, r8
    5750:	f003 f922 	bl	8998 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    5754:	b2f8      	uxtb	r0, r7
    5756:	f003 f91f 	bl	8998 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    575a:	b2e8      	uxtb	r0, r5
    575c:	28ff      	cmp	r0, #255	; 0xff
    575e:	b2e4      	uxtb	r4, r4
    5760:	d001      	beq.n	5766 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    5762:	f003 f919 	bl	8998 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    5766:	2cff      	cmp	r4, #255	; 0xff
    5768:	d002      	beq.n	5770 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    576a:	4620      	mov	r0, r4
    576c:	f003 f914 	bl	8998 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    5770:	2300      	movs	r3, #0
    5772:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    5776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    577a:	bf00      	nop
    577c:	5002b000 	.word	0x5002b000
    5780:	20004c2c 	.word	0x20004c2c
    5784:	00030100 	.word	0x00030100

00005788 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    5788:	078b      	lsls	r3, r1, #30
    578a:	d121      	bne.n	57d0 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    578c:	4a12      	ldr	r2, [pc, #72]	; (57d8 <nrfx_qspi_erase+0x50>)
    578e:	6813      	ldr	r3, [r2, #0]
    5790:	b11b      	cbz	r3, 579a <nrfx_qspi_erase+0x12>
    5792:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    5796:	2b01      	cmp	r3, #1
    5798:	d11c      	bne.n	57d4 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    579a:	2304      	movs	r3, #4
    579c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    57a0:	4b0e      	ldr	r3, [pc, #56]	; (57dc <nrfx_qspi_erase+0x54>)
    57a2:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57a6:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    57a8:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57ac:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57b0:	2101      	movs	r1, #1
    57b2:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    57b4:	6810      	ldr	r0, [r2, #0]
    57b6:	b940      	cbnz	r0, 57ca <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57b8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    57bc:	2900      	cmp	r1, #0
    57be:	d0fb      	beq.n	57b8 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    57c0:	2301      	movs	r3, #1
    57c2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    57c6:	4806      	ldr	r0, [pc, #24]	; (57e0 <nrfx_qspi_erase+0x58>)
    57c8:	4770      	bx	lr
    p_reg->INTENSET = mask;
    57ca:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    57ce:	e7fa      	b.n	57c6 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    57d0:	4804      	ldr	r0, [pc, #16]	; (57e4 <nrfx_qspi_erase+0x5c>)
    57d2:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    57d4:	4804      	ldr	r0, [pc, #16]	; (57e8 <nrfx_qspi_erase+0x60>)
}
    57d6:	4770      	bx	lr
    57d8:	20004c2c 	.word	0x20004c2c
    57dc:	5002b000 	.word	0x5002b000
    57e0:	0bad0000 	.word	0x0bad0000
    57e4:	0bad000a 	.word	0x0bad000a
    57e8:	0bad000b 	.word	0x0bad000b

000057ec <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    57ec:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57ee:	4b17      	ldr	r3, [pc, #92]	; (584c <nrfx_qspi_irq_handler+0x60>)
    57f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    57f4:	b1e2      	cbz	r2, 5830 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57f6:	2200      	movs	r2, #0
    switch (m_cb.state)
    57f8:	4c15      	ldr	r4, [pc, #84]	; (5850 <nrfx_qspi_irq_handler+0x64>)
    57fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    57fe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    5802:	2a03      	cmp	r2, #3
    5804:	d015      	beq.n	5832 <nrfx_qspi_irq_handler+0x46>
    5806:	2a04      	cmp	r2, #4
    5808:	d015      	beq.n	5836 <nrfx_qspi_irq_handler+0x4a>
    580a:	2a02      	cmp	r2, #2
    580c:	d104      	bne.n	5818 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    580e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    5810:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    5814:	f7ff fdae 	bl	5374 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    5818:	68a3      	ldr	r3, [r4, #8]
    581a:	b913      	cbnz	r3, 5822 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    581c:	2301      	movs	r3, #1
    581e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    5822:	e9d4 3100 	ldrd	r3, r1, [r4]
    5826:	2000      	movs	r0, #0
    5828:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    582a:	2300      	movs	r3, #0
    582c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    5830:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    5832:	2302      	movs	r3, #2
    5834:	e7ec      	b.n	5810 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    5836:	2203      	movs	r2, #3
    5838:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    583c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    5840:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    5842:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    5846:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    584a:	e7e5      	b.n	5818 <nrfx_qspi_irq_handler+0x2c>
    584c:	5002b000 	.word	0x5002b000
    5850:	20004c2c 	.word	0x20004c2c

00005854 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5856:	4605      	mov	r5, r0
    5858:	460e      	mov	r6, r1
	__asm__ volatile(
    585a:	f04f 0320 	mov.w	r3, #32
    585e:	f3ef 8711 	mrs	r7, BASEPRI
    5862:	f383 8812 	msr	BASEPRI_MAX, r3
    5866:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    586a:	f000 fdd3 	bl	6414 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    586e:	2200      	movs	r2, #0
    5870:	2d04      	cmp	r5, #4
    5872:	bf98      	it	ls
    5874:	4b18      	ldrls	r3, [pc, #96]	; (58d8 <z_fatal_error+0x84>)
    5876:	4604      	mov	r4, r0
	switch (reason) {
    5878:	bf94      	ite	ls
    587a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    587e:	4b17      	ldrhi	r3, [pc, #92]	; (58dc <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5880:	9200      	str	r2, [sp, #0]
    5882:	2145      	movs	r1, #69	; 0x45
    5884:	462a      	mov	r2, r5
    5886:	4816      	ldr	r0, [pc, #88]	; (58e0 <z_fatal_error+0x8c>)
    5888:	f002 fb8f 	bl	7faa <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    588c:	b13e      	cbz	r6, 589e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    588e:	69f3      	ldr	r3, [r6, #28]
    5890:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5894:	b11b      	cbz	r3, 589e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    5896:	2145      	movs	r1, #69	; 0x45
    5898:	4812      	ldr	r0, [pc, #72]	; (58e4 <z_fatal_error+0x90>)
    589a:	f002 fb86 	bl	7faa <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    589e:	b134      	cbz	r4, 58ae <z_fatal_error+0x5a>
    58a0:	4620      	mov	r0, r4
    58a2:	f003 f8e9 	bl	8a78 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    58a6:	4603      	mov	r3, r0
    58a8:	b108      	cbz	r0, 58ae <z_fatal_error+0x5a>
    58aa:	7802      	ldrb	r2, [r0, #0]
    58ac:	b902      	cbnz	r2, 58b0 <z_fatal_error+0x5c>
		thread_name = "unknown";
    58ae:	4b0e      	ldr	r3, [pc, #56]	; (58e8 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    58b0:	4622      	mov	r2, r4
    58b2:	2145      	movs	r1, #69	; 0x45
    58b4:	480d      	ldr	r0, [pc, #52]	; (58ec <z_fatal_error+0x98>)
    58b6:	f002 fb78 	bl	7faa <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    58ba:	4631      	mov	r1, r6
    58bc:	4628      	mov	r0, r5
    58be:	f7fe fd67 	bl	4390 <k_sys_fatal_error_handler>
	__asm__ volatile(
    58c2:	f387 8811 	msr	BASEPRI, r7
    58c6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    58ca:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    58cc:	b003      	add	sp, #12
    58ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    58d2:	f7fc bf93 	b.w	27fc <z_impl_k_thread_abort>
    58d6:	bf00      	nop
    58d8:	00009568 	.word	0x00009568
    58dc:	0000a44d 	.word	0x0000a44d
    58e0:	0000a463 	.word	0x0000a463
    58e4:	0000a490 	.word	0x0000a490
    58e8:	0000a45b 	.word	0x0000a45b
    58ec:	0000a4b6 	.word	0x0000a4b6

000058f0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58f0:	4b0f      	ldr	r3, [pc, #60]	; (5930 <z_sys_init_run_level+0x40>)
{
    58f2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    58f4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    58f8:	3001      	adds	r0, #1
    58fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    58fe:	42a6      	cmp	r6, r4
    5900:	d800      	bhi.n	5904 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5902:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5904:	e9d4 3500 	ldrd	r3, r5, [r4]
    5908:	4628      	mov	r0, r5
    590a:	4798      	blx	r3
		if (dev != NULL) {
    590c:	b16d      	cbz	r5, 592a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    590e:	b138      	cbz	r0, 5920 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5910:	2800      	cmp	r0, #0
    5912:	bfb8      	it	lt
    5914:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    5916:	28ff      	cmp	r0, #255	; 0xff
    5918:	bfa8      	it	ge
    591a:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    591c:	68eb      	ldr	r3, [r5, #12]
    591e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5920:	68ea      	ldr	r2, [r5, #12]
    5922:	7853      	ldrb	r3, [r2, #1]
    5924:	f043 0301 	orr.w	r3, r3, #1
    5928:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    592a:	3408      	adds	r4, #8
    592c:	e7e7      	b.n	58fe <z_sys_init_run_level+0xe>
    592e:	bf00      	nop
    5930:	0000957c 	.word	0x0000957c

00005934 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5934:	2201      	movs	r2, #1
{
    5936:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5938:	4b09      	ldr	r3, [pc, #36]	; (5960 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    593a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    593c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    593e:	f7ff ffd7 	bl	58f0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5942:	f000 ffdf 	bl	6904 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    5946:	2004      	movs	r0, #4
    5948:	f7ff ffd2 	bl	58f0 <z_sys_init_run_level>

	z_init_static_threads();
    594c:	f000 f926 	bl	5b9c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    5950:	f7fa fd68 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5954:	4a03      	ldr	r2, [pc, #12]	; (5964 <bg_thread_main+0x30>)
    5956:	7b13      	ldrb	r3, [r2, #12]
    5958:	f023 0301 	bic.w	r3, r3, #1
    595c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    595e:	bd08      	pop	{r3, pc}
    5960:	20044f70 	.word	0x20044f70
    5964:	200022b8 	.word	0x200022b8

00005968 <z_bss_zero>:
{
    5968:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    596a:	4803      	ldr	r0, [pc, #12]	; (5978 <z_bss_zero+0x10>)
    596c:	4a03      	ldr	r2, [pc, #12]	; (597c <z_bss_zero+0x14>)
    596e:	2100      	movs	r1, #0
    5970:	1a12      	subs	r2, r2, r0
    5972:	f003 f82a 	bl	89ca <z_early_memset>
}
    5976:	bd08      	pop	{r3, pc}
    5978:	20002218 	.word	0x20002218
    597c:	20044f74 	.word	0x20044f74

00005980 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    5980:	2300      	movs	r3, #0
    5982:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5984:	b570      	push	{r4, r5, r6, lr}
    5986:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5988:	e9cd 2304 	strd	r2, r3, [sp, #16]
    598c:	220f      	movs	r2, #15
    598e:	9301      	str	r3, [sp, #4]
    5990:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5994:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    5996:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    599a:	4d0e      	ldr	r5, [pc, #56]	; (59d4 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    599c:	4e0e      	ldr	r6, [pc, #56]	; (59d8 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    599e:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    59a2:	490e      	ldr	r1, [pc, #56]	; (59dc <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    59a4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    59a8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    59aa:	fb02 1100 	mla	r1, r2, r0, r1
    59ae:	4b0c      	ldr	r3, [pc, #48]	; (59e0 <z_init_cpu+0x60>)
    59b0:	4630      	mov	r0, r6
    59b2:	9500      	str	r5, [sp, #0]
    59b4:	f000 f8c2 	bl	5b3c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    59b8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    59ba:	752c      	strb	r4, [r5, #20]
    59bc:	f023 0304 	bic.w	r3, r3, #4
    59c0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    59c2:	4b08      	ldr	r3, [pc, #32]	; (59e4 <z_init_cpu+0x64>)
    59c4:	3401      	adds	r4, #1
    59c6:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    59ca:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    59cc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    59ce:	b006      	add	sp, #24
    59d0:	bd70      	pop	{r4, r5, r6, pc}
    59d2:	bf00      	nop
    59d4:	20004c60 	.word	0x20004c60
    59d8:	20002238 	.word	0x20002238
    59dc:	20045778 	.word	0x20045778
    59e0:	00008a7d 	.word	0x00008a7d
    59e4:	20044f78 	.word	0x20044f78

000059e8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    59e8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    59ea:	2000      	movs	r0, #0
{
    59ec:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    59ee:	f7ff ff7f 	bl	58f0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    59f2:	4b2b      	ldr	r3, [pc, #172]	; (5aa0 <z_cstart+0xb8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    59f4:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59f8:	2400      	movs	r4, #0
    59fa:	23e0      	movs	r3, #224	; 0xe0
    59fc:	4d29      	ldr	r5, [pc, #164]	; (5aa4 <z_cstart+0xbc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    59fe:	4e2a      	ldr	r6, [pc, #168]	; (5aa8 <z_cstart+0xc0>)
    5a00:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5a04:	77ec      	strb	r4, [r5, #31]
    5a06:	762c      	strb	r4, [r5, #24]
    5a08:	766c      	strb	r4, [r5, #25]
    5a0a:	76ac      	strb	r4, [r5, #26]
    5a0c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5a10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5a12:	4f26      	ldr	r7, [pc, #152]	; (5aac <z_cstart+0xc4>)
    5a14:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5a18:	626b      	str	r3, [r5, #36]	; 0x24
    5a1a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5a1e:	f7fc fe55 	bl	26cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5a22:	f7fc fb23 	bl	206c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5a26:	f04f 33ff 	mov.w	r3, #4294967295
    5a2a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5a2c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5a2e:	f7fd f88d 	bl	2b4c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5a32:	f7fc fef9 	bl	2828 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5a36:	f240 1301 	movw	r3, #257	; 0x101
    5a3a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5a3e:	ab06      	add	r3, sp, #24
    5a40:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5a42:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    5a46:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5a48:	f002 ffb3 	bl	89b2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5a4c:	2001      	movs	r0, #1
    5a4e:	f7ff ff4f 	bl	58f0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5a52:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    5a54:	4d16      	ldr	r5, [pc, #88]	; (5ab0 <z_cstart+0xc8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5a56:	f7ff ff4b 	bl	58f0 <z_sys_init_run_level>
	z_sched_init();
    5a5a:	f000 fc33 	bl	62c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5a5e:	4b15      	ldr	r3, [pc, #84]	; (5ab4 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    5a60:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5a62:	9305      	str	r3, [sp, #20]
    5a64:	2301      	movs	r3, #1
    5a66:	4914      	ldr	r1, [pc, #80]	; (5ab8 <z_cstart+0xd0>)
    5a68:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5a6c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5a70:	4628      	mov	r0, r5
    5a72:	463b      	mov	r3, r7
    5a74:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5a78:	9400      	str	r4, [sp, #0]
    5a7a:	f000 f85f 	bl	5b3c <z_setup_new_thread>
    5a7e:	4606      	mov	r6, r0
    5a80:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    5a82:	4628      	mov	r0, r5
    5a84:	f022 0204 	bic.w	r2, r2, #4
    5a88:	736a      	strb	r2, [r5, #13]
    5a8a:	f003 f87a 	bl	8b82 <z_ready_thread>
	z_init_cpu(0);
    5a8e:	4620      	mov	r0, r4
    5a90:	f7ff ff76 	bl	5980 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5a94:	463a      	mov	r2, r7
    5a96:	4631      	mov	r1, r6
    5a98:	4628      	mov	r0, r5
    5a9a:	f7fc fc05 	bl	22a8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5a9e:	bf00      	nop
    5aa0:	20045778 	.word	0x20045778
    5aa4:	e000ed00 	.word	0xe000ed00
    5aa8:	20004c60 	.word	0x20004c60
    5aac:	00005935 	.word	0x00005935
    5ab0:	200022b8 	.word	0x200022b8
    5ab4:	0000a51d 	.word	0x0000a51d
    5ab8:	200458b8 	.word	0x200458b8

00005abc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    5abc:	2000      	movs	r0, #0
{
    5abe:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5ac0:	4c05      	ldr	r4, [pc, #20]	; (5ad8 <init_mem_slab_module+0x1c>)
    5ac2:	4d06      	ldr	r5, [pc, #24]	; (5adc <init_mem_slab_module+0x20>)
    5ac4:	42ac      	cmp	r4, r5
    5ac6:	d300      	bcc.n	5aca <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    5ac8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    5aca:	4620      	mov	r0, r4
    5acc:	f002 ff81 	bl	89d2 <create_free_list>
		if (rc < 0) {
    5ad0:	2800      	cmp	r0, #0
    5ad2:	dbf9      	blt.n	5ac8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5ad4:	341c      	adds	r4, #28
    5ad6:	e7f5      	b.n	5ac4 <init_mem_slab_module+0x8>
    5ad8:	200021c8 	.word	0x200021c8
    5adc:	200021c8 	.word	0x200021c8

00005ae0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ae2:	460c      	mov	r4, r1
	__asm__ volatile(
    5ae4:	f04f 0520 	mov.w	r5, #32
    5ae8:	f3ef 8111 	mrs	r1, BASEPRI
    5aec:	f385 8812 	msr	BASEPRI_MAX, r5
    5af0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5af4:	6945      	ldr	r5, [r0, #20]
    5af6:	b15d      	cbz	r5, 5b10 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5af8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5afa:	682b      	ldr	r3, [r5, #0]
    5afc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5afe:	6983      	ldr	r3, [r0, #24]
    5b00:	3301      	adds	r3, #1
    5b02:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5b04:	2000      	movs	r0, #0
	__asm__ volatile(
    5b06:	f381 8811 	msr	BASEPRI, r1
    5b0a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5b0e:	e011      	b.n	5b34 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5b10:	ea52 0603 	orrs.w	r6, r2, r3
    5b14:	d103      	bne.n	5b1e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    5b16:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    5b1a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5b1c:	e7f3      	b.n	5b06 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5b1e:	e9cd 2300 	strd	r2, r3, [sp]
    5b22:	4602      	mov	r2, r0
    5b24:	3008      	adds	r0, #8
    5b26:	f000 fad7 	bl	60d8 <z_pend_curr>
		if (result == 0) {
    5b2a:	b918      	cbnz	r0, 5b34 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5b2c:	4b02      	ldr	r3, [pc, #8]	; (5b38 <k_mem_slab_alloc+0x58>)
    5b2e:	689b      	ldr	r3, [r3, #8]
    5b30:	695b      	ldr	r3, [r3, #20]
    5b32:	6023      	str	r3, [r4, #0]
}
    5b34:	b002      	add	sp, #8
    5b36:	bd70      	pop	{r4, r5, r6, pc}
    5b38:	20004c60 	.word	0x20004c60

00005b3c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5b3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5b40:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5b42:	f100 0558 	add.w	r5, r0, #88	; 0x58
    5b46:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5b48:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5b4a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    5b4e:	2500      	movs	r5, #0
{
    5b50:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    5b52:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5b54:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5b56:	e9c0 5506 	strd	r5, r5, [r0, #24]
    5b5a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b5c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b60:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    5b64:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5b68:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5b6a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5b6c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b6e:	9202      	str	r2, [sp, #8]
    5b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    5b72:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b76:	9201      	str	r2, [sp, #4]
    5b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b7a:	9200      	str	r2, [sp, #0]
    5b7c:	4642      	mov	r2, r8
    5b7e:	f7fc fb77 	bl	2270 <arch_new_thread>
	if (!_current) {
    5b82:	4b05      	ldr	r3, [pc, #20]	; (5b98 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5b84:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5b86:	689b      	ldr	r3, [r3, #8]
    5b88:	b103      	cbz	r3, 5b8c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    5b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    5b8c:	4640      	mov	r0, r8
    5b8e:	6723      	str	r3, [r4, #112]	; 0x70
    5b90:	b004      	add	sp, #16
    5b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b96:	bf00      	nop
    5b98:	20004c60 	.word	0x20004c60

00005b9c <z_init_static_threads>:
{
    5b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ba0:	4c29      	ldr	r4, [pc, #164]	; (5c48 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5ba2:	4d2a      	ldr	r5, [pc, #168]	; (5c4c <z_init_static_threads+0xb0>)
{
    5ba4:	b087      	sub	sp, #28
    5ba6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5ba8:	42ae      	cmp	r6, r5
    5baa:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5bae:	d30f      	bcc.n	5bd0 <z_init_static_threads+0x34>
	k_sched_lock();
    5bb0:	f000 fb58 	bl	6264 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5bb4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5bb8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5bbc:	4c22      	ldr	r4, [pc, #136]	; (5c48 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5bbe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5c50 <z_init_static_threads+0xb4>
    5bc2:	42ac      	cmp	r4, r5
    5bc4:	d320      	bcc.n	5c08 <z_init_static_threads+0x6c>
}
    5bc6:	b007      	add	sp, #28
    5bc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5bcc:	f000 bb5e 	b.w	628c <k_sched_unlock>
		z_setup_new_thread(
    5bd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5bd4:	9305      	str	r3, [sp, #20]
    5bd6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5bda:	9304      	str	r3, [sp, #16]
    5bdc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5be0:	9303      	str	r3, [sp, #12]
    5be2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5be6:	9302      	str	r3, [sp, #8]
    5be8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5bec:	9301      	str	r3, [sp, #4]
    5bee:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5bf2:	9300      	str	r3, [sp, #0]
    5bf4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5bf8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5bfc:	f7ff ff9e 	bl	5b3c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5c00:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5c04:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5c06:	e7ce      	b.n	5ba6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5c0a:	1c5a      	adds	r2, r3, #1
    5c0c:	d00d      	beq.n	5c2a <z_init_static_threads+0x8e>
    5c0e:	2100      	movs	r1, #0
    5c10:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    5c12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5c16:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c1a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5c1e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c22:	d104      	bne.n	5c2e <z_init_static_threads+0x92>
	z_sched_start(thread);
    5c24:	4640      	mov	r0, r8
    5c26:	f000 facd 	bl	61c4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5c2a:	3430      	adds	r4, #48	; 0x30
    5c2c:	e7c9      	b.n	5bc2 <z_init_static_threads+0x26>
    5c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c32:	2300      	movs	r3, #0
    5c34:	f7fa fa8e 	bl	154 <__aeabi_uldivmod>
    5c38:	4602      	mov	r2, r0
    5c3a:	460b      	mov	r3, r1
    5c3c:	f108 0018 	add.w	r0, r8, #24
    5c40:	4649      	mov	r1, r9
    5c42:	f000 fcb5 	bl	65b0 <z_add_timeout>
    5c46:	e7f0      	b.n	5c2a <z_init_static_threads+0x8e>
    5c48:	00009048 	.word	0x00009048
    5c4c:	00009048 	.word	0x00009048
    5c50:	00008aef 	.word	0x00008aef

00005c54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5c58:	4604      	mov	r4, r0
    5c5a:	4617      	mov	r7, r2
    5c5c:	461e      	mov	r6, r3
	__asm__ volatile(
    5c5e:	f04f 0320 	mov.w	r3, #32
    5c62:	f3ef 8811 	mrs	r8, BASEPRI
    5c66:	f383 8812 	msr	BASEPRI_MAX, r3
    5c6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5c6e:	68c3      	ldr	r3, [r0, #12]
    5c70:	4a33      	ldr	r2, [pc, #204]	; (5d40 <z_impl_k_mutex_lock+0xec>)
    5c72:	b17b      	cbz	r3, 5c94 <z_impl_k_mutex_lock+0x40>
    5c74:	6880      	ldr	r0, [r0, #8]
    5c76:	6891      	ldr	r1, [r2, #8]
    5c78:	4288      	cmp	r0, r1
    5c7a:	d019      	beq.n	5cb0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5c7c:	ea57 0306 	orrs.w	r3, r7, r6
    5c80:	d118      	bne.n	5cb4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5c82:	f388 8811 	msr	BASEPRI, r8
    5c86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5c8a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5c8e:	b002      	add	sp, #8
    5c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5c94:	6891      	ldr	r1, [r2, #8]
    5c96:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    5c9a:	3301      	adds	r3, #1
    5c9c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5c9e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5ca0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    5ca2:	60a3      	str	r3, [r4, #8]
    5ca4:	f388 8811 	msr	BASEPRI, r8
    5ca8:	f3bf 8f6f 	isb	sy
		return 0;
    5cac:	2000      	movs	r0, #0
    5cae:	e7ee      	b.n	5c8e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5cb0:	6921      	ldr	r1, [r4, #16]
    5cb2:	e7f2      	b.n	5c9a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5cb4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5cb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5cbc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5cc0:	4299      	cmp	r1, r3
    5cc2:	bfa8      	it	ge
    5cc4:	4619      	movge	r1, r3
    5cc6:	4291      	cmp	r1, r2
    5cc8:	bfb8      	it	lt
    5cca:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5ccc:	428b      	cmp	r3, r1
    5cce:	dd2e      	ble.n	5d2e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5cd0:	f002 fee0 	bl	8a94 <adjust_owner_prio.isra.0>
    5cd4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5cd6:	4622      	mov	r2, r4
    5cd8:	4641      	mov	r1, r8
    5cda:	e9cd 7600 	strd	r7, r6, [sp]
    5cde:	4819      	ldr	r0, [pc, #100]	; (5d44 <z_impl_k_mutex_lock+0xf0>)
    5ce0:	f000 f9fa 	bl	60d8 <z_pend_curr>
	if (got_mutex == 0) {
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d0e1      	beq.n	5cac <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5ce8:	f04f 0320 	mov.w	r3, #32
    5cec:	f3ef 8611 	mrs	r6, BASEPRI
    5cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    5cf4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5cf8:	68a0      	ldr	r0, [r4, #8]
    5cfa:	b1d0      	cbz	r0, 5d32 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5cfc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5cfe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d00:	429c      	cmp	r4, r3
    5d02:	d00a      	beq.n	5d1a <z_impl_k_mutex_lock+0xc6>
    5d04:	b14b      	cbz	r3, 5d1a <z_impl_k_mutex_lock+0xc6>
    5d06:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5d0a:	4299      	cmp	r1, r3
    5d0c:	bfa8      	it	ge
    5d0e:	4619      	movge	r1, r3
    5d10:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5d14:	4299      	cmp	r1, r3
    5d16:	bfb8      	it	lt
    5d18:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    5d1a:	f002 febb 	bl	8a94 <adjust_owner_prio.isra.0>
    5d1e:	b140      	cbz	r0, 5d32 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5d20:	4631      	mov	r1, r6
    5d22:	4808      	ldr	r0, [pc, #32]	; (5d44 <z_impl_k_mutex_lock+0xf0>)
    5d24:	f000 fa3c 	bl	61a0 <z_reschedule>
	return -EAGAIN;
    5d28:	f06f 000a 	mvn.w	r0, #10
    5d2c:	e7af      	b.n	5c8e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    5d2e:	2500      	movs	r5, #0
    5d30:	e7d1      	b.n	5cd6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    5d32:	2d00      	cmp	r5, #0
    5d34:	d1f4      	bne.n	5d20 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5d36:	f386 8811 	msr	BASEPRI, r6
    5d3a:	f3bf 8f6f 	isb	sy
    5d3e:	e7f3      	b.n	5d28 <z_impl_k_mutex_lock+0xd4>
    5d40:	20004c60 	.word	0x20004c60
    5d44:	20044f71 	.word	0x20044f71

00005d48 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5d48:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5d4a:	6883      	ldr	r3, [r0, #8]
{
    5d4c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5d4e:	b36b      	cbz	r3, 5dac <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5d50:	4a19      	ldr	r2, [pc, #100]	; (5db8 <z_impl_k_mutex_unlock+0x70>)
    5d52:	6892      	ldr	r2, [r2, #8]
    5d54:	4293      	cmp	r3, r2
    5d56:	d12c      	bne.n	5db2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5d58:	68c3      	ldr	r3, [r0, #12]
    5d5a:	2b01      	cmp	r3, #1
    5d5c:	d903      	bls.n	5d66 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5d5e:	3b01      	subs	r3, #1
    5d60:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    5d62:	2000      	movs	r0, #0
}
    5d64:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5d66:	f04f 0320 	mov.w	r3, #32
    5d6a:	f3ef 8511 	mrs	r5, BASEPRI
    5d6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d72:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5d76:	6901      	ldr	r1, [r0, #16]
    5d78:	6880      	ldr	r0, [r0, #8]
    5d7a:	f002 fe8b 	bl	8a94 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5d7e:	4620      	mov	r0, r4
    5d80:	f002 ff36 	bl	8bf0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5d84:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5d86:	b158      	cbz	r0, 5da0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5d88:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5d8c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5d8e:	2200      	movs	r2, #0
    5d90:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5d92:	f002 fef6 	bl	8b82 <z_ready_thread>
		z_reschedule(&lock, key);
    5d96:	4629      	mov	r1, r5
    5d98:	4808      	ldr	r0, [pc, #32]	; (5dbc <z_impl_k_mutex_unlock+0x74>)
    5d9a:	f000 fa01 	bl	61a0 <z_reschedule>
    5d9e:	e7e0      	b.n	5d62 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5da0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5da2:	f385 8811 	msr	BASEPRI, r5
    5da6:	f3bf 8f6f 	isb	sy
    5daa:	e7da      	b.n	5d62 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5dac:	f06f 0015 	mvn.w	r0, #21
    5db0:	e7d8      	b.n	5d64 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5db2:	f04f 30ff 	mov.w	r0, #4294967295
    5db6:	e7d5      	b.n	5d64 <z_impl_k_mutex_unlock+0x1c>
    5db8:	20004c60 	.word	0x20004c60
    5dbc:	20044f71 	.word	0x20044f71

00005dc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5dc0:	b538      	push	{r3, r4, r5, lr}
    5dc2:	4604      	mov	r4, r0
	__asm__ volatile(
    5dc4:	f04f 0320 	mov.w	r3, #32
    5dc8:	f3ef 8511 	mrs	r5, BASEPRI
    5dcc:	f383 8812 	msr	BASEPRI_MAX, r3
    5dd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5dd4:	f002 ff0c 	bl	8bf0 <z_unpend_first_thread>

	if (thread != NULL) {
    5dd8:	b148      	cbz	r0, 5dee <z_impl_k_sem_give+0x2e>
    5dda:	2200      	movs	r2, #0
    5ddc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5dde:	f002 fed0 	bl	8b82 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5de2:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5de8:	4804      	ldr	r0, [pc, #16]	; (5dfc <z_impl_k_sem_give+0x3c>)
    5dea:	f000 b9d9 	b.w	61a0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5dee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5df2:	429a      	cmp	r2, r3
    5df4:	bf18      	it	ne
    5df6:	3301      	addne	r3, #1
    5df8:	60a3      	str	r3, [r4, #8]
}
    5dfa:	e7f2      	b.n	5de2 <z_impl_k_sem_give+0x22>
    5dfc:	20044f71 	.word	0x20044f71

00005e00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5e00:	b513      	push	{r0, r1, r4, lr}
    5e02:	f04f 0420 	mov.w	r4, #32
    5e06:	f3ef 8111 	mrs	r1, BASEPRI
    5e0a:	f384 8812 	msr	BASEPRI_MAX, r4
    5e0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5e12:	6884      	ldr	r4, [r0, #8]
    5e14:	b144      	cbz	r4, 5e28 <z_impl_k_sem_take+0x28>
		sem->count--;
    5e16:	3c01      	subs	r4, #1
    5e18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5e1a:	f381 8811 	msr	BASEPRI, r1
    5e1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5e22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5e24:	b002      	add	sp, #8
    5e26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5e28:	ea52 0403 	orrs.w	r4, r2, r3
    5e2c:	d106      	bne.n	5e3c <z_impl_k_sem_take+0x3c>
    5e2e:	f381 8811 	msr	BASEPRI, r1
    5e32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5e36:	f06f 000f 	mvn.w	r0, #15
    5e3a:	e7f3      	b.n	5e24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5e3c:	e9cd 2300 	strd	r2, r3, [sp]
    5e40:	4602      	mov	r2, r0
    5e42:	4802      	ldr	r0, [pc, #8]	; (5e4c <z_impl_k_sem_take+0x4c>)
    5e44:	f000 f948 	bl	60d8 <z_pend_curr>
	return ret;
    5e48:	e7ec      	b.n	5e24 <z_impl_k_sem_take+0x24>
    5e4a:	bf00      	nop
    5e4c:	20044f71 	.word	0x20044f71

00005e50 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5e50:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5e52:	4d07      	ldr	r5, [pc, #28]	; (5e70 <z_reset_time_slice+0x20>)
    5e54:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5e56:	b154      	cbz	r4, 5e6e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5e58:	f7fe f9b2 	bl	41c0 <sys_clock_elapsed>
    5e5c:	4b05      	ldr	r3, [pc, #20]	; (5e74 <z_reset_time_slice+0x24>)
    5e5e:	4404      	add	r4, r0
    5e60:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5e62:	6828      	ldr	r0, [r5, #0]
    5e64:	2100      	movs	r1, #0
	}
}
    5e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5e6a:	f002 bf09 	b.w	8c80 <z_set_timeout_expiry>
}
    5e6e:	bd38      	pop	{r3, r4, r5, pc}
    5e70:	20004c8c 	.word	0x20004c8c
    5e74:	20004c60 	.word	0x20004c60

00005e78 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5e78:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5e7a:	4d0d      	ldr	r5, [pc, #52]	; (5eb0 <update_cache+0x38>)
    5e7c:	462b      	mov	r3, r5
    5e7e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e82:	429c      	cmp	r4, r3
    5e84:	d000      	beq.n	5e88 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5e86:	b904      	cbnz	r4, 5e8a <update_cache+0x12>
    5e88:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5e8a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5e8c:	b938      	cbnz	r0, 5e9e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5e8e:	7b5a      	ldrb	r2, [r3, #13]
    5e90:	06d2      	lsls	r2, r2, #27
    5e92:	d104      	bne.n	5e9e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5e94:	69a2      	ldr	r2, [r4, #24]
    5e96:	b912      	cbnz	r2, 5e9e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5e98:	89da      	ldrh	r2, [r3, #14]
    5e9a:	2a7f      	cmp	r2, #127	; 0x7f
    5e9c:	d805      	bhi.n	5eaa <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5e9e:	429c      	cmp	r4, r3
    5ea0:	d002      	beq.n	5ea8 <update_cache+0x30>
			z_reset_time_slice(thread);
    5ea2:	4620      	mov	r0, r4
    5ea4:	f7ff ffd4 	bl	5e50 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5ea8:	4623      	mov	r3, r4
    5eaa:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5eac:	bd38      	pop	{r3, r4, r5, pc}
    5eae:	bf00      	nop
    5eb0:	20004c60 	.word	0x20004c60

00005eb4 <move_thread_to_end_of_prio_q>:
{
    5eb4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5eb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5eba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5ebc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5ebe:	7b43      	ldrb	r3, [r0, #13]
    5ec0:	da04      	bge.n	5ecc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ec6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5ec8:	f002 fdff 	bl	8aca <sys_dlist_remove>
	return list->head == list;
    5ecc:	4a15      	ldr	r2, [pc, #84]	; (5f24 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5ece:	7b4b      	ldrb	r3, [r1, #13]
    5ed0:	4610      	mov	r0, r2
    5ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ed6:	734b      	strb	r3, [r1, #13]
    5ed8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5edc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ede:	4283      	cmp	r3, r0
    5ee0:	bf08      	it	eq
    5ee2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ee4:	b923      	cbnz	r3, 5ef0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5ee6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5eea:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5eec:	6211      	str	r1, [r2, #32]
}
    5eee:	e00c      	b.n	5f0a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5ef0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5ef4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5ef8:	42b5      	cmp	r5, r6
    5efa:	d00e      	beq.n	5f1a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5efc:	42ae      	cmp	r6, r5
    5efe:	dd0c      	ble.n	5f1a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5f00:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5f02:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5f06:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5f08:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5f0a:	6890      	ldr	r0, [r2, #8]
}
    5f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5f10:	1a43      	subs	r3, r0, r1
    5f12:	4258      	negs	r0, r3
    5f14:	4158      	adcs	r0, r3
    5f16:	f7ff bfaf 	b.w	5e78 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f1a:	429c      	cmp	r4, r3
    5f1c:	d0e3      	beq.n	5ee6 <move_thread_to_end_of_prio_q+0x32>
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	e7e0      	b.n	5ee4 <move_thread_to_end_of_prio_q+0x30>
    5f22:	bf00      	nop
    5f24:	20004c60 	.word	0x20004c60

00005f28 <ready_thread>:
{
    5f28:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5f2a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5f2e:	7b42      	ldrb	r2, [r0, #13]
    5f30:	2b00      	cmp	r3, #0
    5f32:	db29      	blt.n	5f88 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5f34:	06d3      	lsls	r3, r2, #27
    5f36:	d127      	bne.n	5f88 <ready_thread+0x60>
	return node->next != NULL;
    5f38:	6983      	ldr	r3, [r0, #24]
    5f3a:	bb2b      	cbnz	r3, 5f88 <ready_thread+0x60>
	return list->head == list;
    5f3c:	4913      	ldr	r1, [pc, #76]	; (5f8c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5f42:	7342      	strb	r2, [r0, #13]
    5f44:	460a      	mov	r2, r1
    5f46:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f4a:	4294      	cmp	r4, r2
    5f4c:	bf18      	it	ne
    5f4e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5f50:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f52:	b923      	cbnz	r3, 5f5e <ready_thread+0x36>
	node->prev = tail;
    5f54:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5f58:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5f5a:	6208      	str	r0, [r1, #32]
}
    5f5c:	e00c      	b.n	5f78 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5f5e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5f62:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5f66:	42b5      	cmp	r5, r6
    5f68:	d00a      	beq.n	5f80 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f6a:	42ae      	cmp	r6, r5
    5f6c:	dd08      	ble.n	5f80 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5f6e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f70:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5f74:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5f76:	6058      	str	r0, [r3, #4]
		update_cache(0);
    5f78:	2000      	movs	r0, #0
}
    5f7a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5f7c:	f7ff bf7c 	b.w	5e78 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5f80:	42a3      	cmp	r3, r4
    5f82:	d0e7      	beq.n	5f54 <ready_thread+0x2c>
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	e7e4      	b.n	5f52 <ready_thread+0x2a>
}
    5f88:	bc70      	pop	{r4, r5, r6}
    5f8a:	4770      	bx	lr
    5f8c:	20004c60 	.word	0x20004c60

00005f90 <unready_thread>:
{
    5f90:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5f92:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5f96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5f98:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5f9a:	7b43      	ldrb	r3, [r0, #13]
    5f9c:	da04      	bge.n	5fa8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5fa2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5fa4:	f002 fd91 	bl	8aca <sys_dlist_remove>
	update_cache(thread == _current);
    5fa8:	4b04      	ldr	r3, [pc, #16]	; (5fbc <unready_thread+0x2c>)
    5faa:	6898      	ldr	r0, [r3, #8]
    5fac:	1a43      	subs	r3, r0, r1
    5fae:	4258      	negs	r0, r3
    5fb0:	4158      	adcs	r0, r3
}
    5fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5fb6:	f7ff bf5f 	b.w	5e78 <update_cache>
    5fba:	bf00      	nop
    5fbc:	20004c60 	.word	0x20004c60

00005fc0 <pend_locked>:
{
    5fc0:	b570      	push	{r4, r5, r6, lr}
    5fc2:	4615      	mov	r5, r2
    5fc4:	461c      	mov	r4, r3
    5fc6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5fc8:	f002 fdb3 	bl	8b32 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5fcc:	f1b4 3fff 	cmp.w	r4, #4294967295
    5fd0:	bf08      	it	eq
    5fd2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5fd6:	d008      	beq.n	5fea <pend_locked+0x2a>
    5fd8:	462a      	mov	r2, r5
    5fda:	4623      	mov	r3, r4
    5fdc:	f106 0018 	add.w	r0, r6, #24
    5fe0:	4902      	ldr	r1, [pc, #8]	; (5fec <pend_locked+0x2c>)
}
    5fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fe6:	f000 bae3 	b.w	65b0 <z_add_timeout>
    5fea:	bd70      	pop	{r4, r5, r6, pc}
    5fec:	00008aef 	.word	0x00008aef

00005ff0 <k_sched_time_slice_set>:
{
    5ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ff2:	4604      	mov	r4, r0
    5ff4:	460d      	mov	r5, r1
	__asm__ volatile(
    5ff6:	f04f 0320 	mov.w	r3, #32
    5ffa:	f3ef 8711 	mrs	r7, BASEPRI
    5ffe:	f383 8812 	msr	BASEPRI_MAX, r3
    6002:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    6006:	2600      	movs	r6, #0
    6008:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    600c:	f240 30e7 	movw	r0, #999	; 0x3e7
    6010:	4631      	mov	r1, r6
    6012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6016:	2300      	movs	r3, #0
    6018:	fbe4 010c 	umlal	r0, r1, r4, ip
    601c:	f7fa f89a 	bl	154 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6020:	42b4      	cmp	r4, r6
    6022:	dd02      	ble.n	602a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    6024:	2802      	cmp	r0, #2
    6026:	bfb8      	it	lt
    6028:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    602a:	4a07      	ldr	r2, [pc, #28]	; (6048 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    602c:	4b07      	ldr	r3, [pc, #28]	; (604c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    602e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    6030:	4a07      	ldr	r2, [pc, #28]	; (6050 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    6032:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    6034:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    6036:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    6038:	f7ff ff0a 	bl	5e50 <z_reset_time_slice>
	__asm__ volatile(
    603c:	f387 8811 	msr	BASEPRI, r7
    6040:	f3bf 8f6f 	isb	sy
}
    6044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6046:	bf00      	nop
    6048:	20004c8c 	.word	0x20004c8c
    604c:	20004c60 	.word	0x20004c60
    6050:	20004c88 	.word	0x20004c88

00006054 <z_time_slice>:
{
    6054:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6056:	f04f 0320 	mov.w	r3, #32
    605a:	f3ef 8511 	mrs	r5, BASEPRI
    605e:	f383 8812 	msr	BASEPRI_MAX, r3
    6062:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    6066:	4b17      	ldr	r3, [pc, #92]	; (60c4 <z_time_slice+0x70>)
    6068:	4a17      	ldr	r2, [pc, #92]	; (60c8 <z_time_slice+0x74>)
    606a:	689c      	ldr	r4, [r3, #8]
    606c:	6811      	ldr	r1, [r2, #0]
    606e:	428c      	cmp	r4, r1
    6070:	d107      	bne.n	6082 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    6072:	4620      	mov	r0, r4
    6074:	f7ff feec 	bl	5e50 <z_reset_time_slice>
	__asm__ volatile(
    6078:	f385 8811 	msr	BASEPRI, r5
    607c:	f3bf 8f6f 	isb	sy
}
    6080:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    6082:	2100      	movs	r1, #0
    6084:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    6086:	4a11      	ldr	r2, [pc, #68]	; (60cc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    6088:	6812      	ldr	r2, [r2, #0]
    608a:	b1c2      	cbz	r2, 60be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    608c:	89e2      	ldrh	r2, [r4, #14]
    608e:	2a7f      	cmp	r2, #127	; 0x7f
    6090:	d815      	bhi.n	60be <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    6092:	7b62      	ldrb	r2, [r4, #13]
    6094:	06d2      	lsls	r2, r2, #27
    6096:	d112      	bne.n	60be <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6098:	4a0d      	ldr	r2, [pc, #52]	; (60d0 <z_time_slice+0x7c>)
    609a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    609e:	6812      	ldr	r2, [r2, #0]
    60a0:	4291      	cmp	r1, r2
    60a2:	db0c      	blt.n	60be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    60a4:	4a0b      	ldr	r2, [pc, #44]	; (60d4 <z_time_slice+0x80>)
    60a6:	4294      	cmp	r4, r2
    60a8:	d009      	beq.n	60be <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    60aa:	691a      	ldr	r2, [r3, #16]
    60ac:	4282      	cmp	r2, r0
    60ae:	dc03      	bgt.n	60b8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    60b0:	4620      	mov	r0, r4
    60b2:	f7ff feff 	bl	5eb4 <move_thread_to_end_of_prio_q>
    60b6:	e7dc      	b.n	6072 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    60b8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    60ba:	611a      	str	r2, [r3, #16]
    60bc:	e7dc      	b.n	6078 <z_time_slice+0x24>
    60be:	2200      	movs	r2, #0
    60c0:	e7fb      	b.n	60ba <z_time_slice+0x66>
    60c2:	bf00      	nop
    60c4:	20004c60 	.word	0x20004c60
    60c8:	20004c84 	.word	0x20004c84
    60cc:	20004c8c 	.word	0x20004c8c
    60d0:	20004c88 	.word	0x20004c88
    60d4:	20002238 	.word	0x20002238

000060d8 <z_pend_curr>:
{
    60d8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    60da:	480c      	ldr	r0, [pc, #48]	; (610c <z_pend_curr+0x34>)
    60dc:	4d0c      	ldr	r5, [pc, #48]	; (6110 <z_pend_curr+0x38>)
    60de:	6886      	ldr	r6, [r0, #8]
{
    60e0:	460c      	mov	r4, r1
	pending_current = _current;
    60e2:	602e      	str	r6, [r5, #0]
{
    60e4:	4611      	mov	r1, r2
    60e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    60ea:	f04f 0620 	mov.w	r6, #32
    60ee:	f3ef 8511 	mrs	r5, BASEPRI
    60f2:	f386 8812 	msr	BASEPRI_MAX, r6
    60f6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    60fa:	6880      	ldr	r0, [r0, #8]
    60fc:	f7ff ff60 	bl	5fc0 <pend_locked>
	ret = arch_swap(key);
    6100:	4620      	mov	r0, r4
}
    6102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6106:	f7fc b865 	b.w	21d4 <arch_swap>
    610a:	bf00      	nop
    610c:	20004c60 	.word	0x20004c60
    6110:	20004c84 	.word	0x20004c84

00006114 <z_set_prio>:
{
    6114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6116:	4604      	mov	r4, r0
    6118:	f04f 0320 	mov.w	r3, #32
    611c:	f3ef 8611 	mrs	r6, BASEPRI
    6120:	f383 8812 	msr	BASEPRI_MAX, r3
    6124:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    6128:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    612a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    612c:	06da      	lsls	r2, r3, #27
    612e:	d119      	bne.n	6164 <z_set_prio+0x50>
	return node->next != NULL;
    6130:	6985      	ldr	r5, [r0, #24]
    6132:	b9bd      	cbnz	r5, 6164 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6138:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    613a:	f002 fcc6 	bl	8aca <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    613e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    6140:	4a16      	ldr	r2, [pc, #88]	; (619c <z_set_prio+0x88>)
    6142:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6146:	7343      	strb	r3, [r0, #13]
    6148:	4613      	mov	r3, r2
				thread->base.prio = prio;
    614a:	7381      	strb	r1, [r0, #14]
    614c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6150:	4298      	cmp	r0, r3
    6152:	bf18      	it	ne
    6154:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    6156:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6158:	b95d      	cbnz	r5, 6172 <z_set_prio+0x5e>
	node->prev = tail;
    615a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    615e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    6160:	6214      	str	r4, [r2, #32]
}
    6162:	e011      	b.n	6188 <z_set_prio+0x74>
    6164:	2000      	movs	r0, #0
			thread->base.prio = prio;
    6166:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    6168:	f386 8811 	msr	BASEPRI, r6
    616c:	f3bf 8f6f 	isb	sy
}
    6170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    6172:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    6176:	42b9      	cmp	r1, r7
    6178:	d00b      	beq.n	6192 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    617a:	428f      	cmp	r7, r1
    617c:	dd09      	ble.n	6192 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    617e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    6180:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6184:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6186:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6188:	2001      	movs	r0, #1
    618a:	f7ff fe75 	bl	5e78 <update_cache>
    618e:	2001      	movs	r0, #1
    6190:	e7ea      	b.n	6168 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    6192:	42a8      	cmp	r0, r5
    6194:	d0e1      	beq.n	615a <z_set_prio+0x46>
    6196:	682d      	ldr	r5, [r5, #0]
    6198:	e7de      	b.n	6158 <z_set_prio+0x44>
    619a:	bf00      	nop
    619c:	20004c60 	.word	0x20004c60

000061a0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    61a0:	b949      	cbnz	r1, 61b6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    61a2:	f3ef 8005 	mrs	r0, IPSR
    61a6:	b930      	cbnz	r0, 61b6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    61a8:	4b05      	ldr	r3, [pc, #20]	; (61c0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    61aa:	699a      	ldr	r2, [r3, #24]
    61ac:	689b      	ldr	r3, [r3, #8]
    61ae:	429a      	cmp	r2, r3
    61b0:	d001      	beq.n	61b6 <z_reschedule+0x16>
    61b2:	f7fc b80f 	b.w	21d4 <arch_swap>
    61b6:	f381 8811 	msr	BASEPRI, r1
    61ba:	f3bf 8f6f 	isb	sy
}
    61be:	4770      	bx	lr
    61c0:	20004c60 	.word	0x20004c60

000061c4 <z_sched_start>:
{
    61c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    61c6:	f04f 0220 	mov.w	r2, #32
    61ca:	f3ef 8411 	mrs	r4, BASEPRI
    61ce:	f382 8812 	msr	BASEPRI_MAX, r2
    61d2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    61d6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    61d8:	0751      	lsls	r1, r2, #29
    61da:	d404      	bmi.n	61e6 <z_sched_start+0x22>
	__asm__ volatile(
    61dc:	f384 8811 	msr	BASEPRI, r4
    61e0:	f3bf 8f6f 	isb	sy
}
    61e4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    61e6:	f022 0204 	bic.w	r2, r2, #4
    61ea:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    61ec:	f7ff fe9c 	bl	5f28 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    61f0:	4621      	mov	r1, r4
}
    61f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    61f6:	4801      	ldr	r0, [pc, #4]	; (61fc <z_sched_start+0x38>)
    61f8:	f7ff bfd2 	b.w	61a0 <z_reschedule>
    61fc:	20044f71 	.word	0x20044f71

00006200 <z_impl_k_thread_suspend>:
{
    6200:	b570      	push	{r4, r5, r6, lr}
    6202:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6204:	3018      	adds	r0, #24
    6206:	f002 fd25 	bl	8c54 <z_abort_timeout>
	__asm__ volatile(
    620a:	f04f 0320 	mov.w	r3, #32
    620e:	f3ef 8611 	mrs	r6, BASEPRI
    6212:	f383 8812 	msr	BASEPRI_MAX, r3
    6216:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    621a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    621e:	7b63      	ldrb	r3, [r4, #13]
    6220:	2a00      	cmp	r2, #0
    6222:	da05      	bge.n	6230 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    6228:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    622a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    622c:	f002 fc4d 	bl	8aca <sys_dlist_remove>
		update_cache(thread == _current);
    6230:	4d0b      	ldr	r5, [pc, #44]	; (6260 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6232:	7b63      	ldrb	r3, [r4, #13]
    6234:	68a8      	ldr	r0, [r5, #8]
    6236:	f043 0310 	orr.w	r3, r3, #16
    623a:	7363      	strb	r3, [r4, #13]
    623c:	1b03      	subs	r3, r0, r4
    623e:	4258      	negs	r0, r3
    6240:	4158      	adcs	r0, r3
    6242:	f7ff fe19 	bl	5e78 <update_cache>
	__asm__ volatile(
    6246:	f386 8811 	msr	BASEPRI, r6
    624a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    624e:	68ab      	ldr	r3, [r5, #8]
    6250:	42a3      	cmp	r3, r4
    6252:	d103      	bne.n	625c <z_impl_k_thread_suspend+0x5c>
}
    6254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6258:	f002 bcf2 	b.w	8c40 <z_reschedule_unlocked>
}
    625c:	bd70      	pop	{r4, r5, r6, pc}
    625e:	bf00      	nop
    6260:	20004c60 	.word	0x20004c60

00006264 <k_sched_lock>:
	__asm__ volatile(
    6264:	f04f 0320 	mov.w	r3, #32
    6268:	f3ef 8111 	mrs	r1, BASEPRI
    626c:	f383 8812 	msr	BASEPRI_MAX, r3
    6270:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6274:	4b04      	ldr	r3, [pc, #16]	; (6288 <k_sched_lock+0x24>)
    6276:	689a      	ldr	r2, [r3, #8]
    6278:	7bd3      	ldrb	r3, [r2, #15]
    627a:	3b01      	subs	r3, #1
    627c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    627e:	f381 8811 	msr	BASEPRI, r1
    6282:	f3bf 8f6f 	isb	sy
}
    6286:	4770      	bx	lr
    6288:	20004c60 	.word	0x20004c60

0000628c <k_sched_unlock>:
{
    628c:	b510      	push	{r4, lr}
	__asm__ volatile(
    628e:	f04f 0320 	mov.w	r3, #32
    6292:	f3ef 8411 	mrs	r4, BASEPRI
    6296:	f383 8812 	msr	BASEPRI_MAX, r3
    629a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    629e:	4b08      	ldr	r3, [pc, #32]	; (62c0 <k_sched_unlock+0x34>)
		update_cache(0);
    62a0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    62a2:	689a      	ldr	r2, [r3, #8]
    62a4:	7bd3      	ldrb	r3, [r2, #15]
    62a6:	3301      	adds	r3, #1
    62a8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    62aa:	f7ff fde5 	bl	5e78 <update_cache>
	__asm__ volatile(
    62ae:	f384 8811 	msr	BASEPRI, r4
    62b2:	f3bf 8f6f 	isb	sy
}
    62b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    62ba:	f002 bcc1 	b.w	8c40 <z_reschedule_unlocked>
    62be:	bf00      	nop
    62c0:	20004c60 	.word	0x20004c60

000062c4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    62c4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    62c6:	4b04      	ldr	r3, [pc, #16]	; (62d8 <z_sched_init+0x14>)
    62c8:	4608      	mov	r0, r1
    62ca:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    62ce:	e9c3 2207 	strd	r2, r2, [r3, #28]
    62d2:	f7ff be8d 	b.w	5ff0 <k_sched_time_slice_set>
    62d6:	bf00      	nop
    62d8:	20004c60 	.word	0x20004c60

000062dc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    62dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    62de:	f04f 0320 	mov.w	r3, #32
    62e2:	f3ef 8511 	mrs	r5, BASEPRI
    62e6:	f383 8812 	msr	BASEPRI_MAX, r3
    62ea:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    62ee:	4919      	ldr	r1, [pc, #100]	; (6354 <z_impl_k_yield+0x78>)
    62f0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    62f2:	7b43      	ldrb	r3, [r0, #13]
    62f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    62f8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    62fa:	f002 fbe6 	bl	8aca <sys_dlist_remove>
	return list->head == list;
    62fe:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    6300:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6302:	7b5a      	ldrb	r2, [r3, #13]
    6304:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6308:	735a      	strb	r2, [r3, #13]
    630a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    630e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6310:	4282      	cmp	r2, r0
    6312:	bf08      	it	eq
    6314:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6316:	b922      	cbnz	r2, 6322 <z_impl_k_yield+0x46>
	node->prev = tail;
    6318:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    631c:	6023      	str	r3, [r4, #0]
	list->tail = node;
    631e:	620b      	str	r3, [r1, #32]
}
    6320:	e00c      	b.n	633c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    6322:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6326:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    632a:	42be      	cmp	r6, r7
    632c:	d00e      	beq.n	634c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    632e:	42b7      	cmp	r7, r6
    6330:	dd0c      	ble.n	634c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    6332:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6334:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6338:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    633a:	6053      	str	r3, [r2, #4]
	update_cache(1);
    633c:	2001      	movs	r0, #1
    633e:	f7ff fd9b 	bl	5e78 <update_cache>
    6342:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6348:	f7fb bf44 	b.w	21d4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    634c:	42a2      	cmp	r2, r4
    634e:	d0e3      	beq.n	6318 <z_impl_k_yield+0x3c>
    6350:	6812      	ldr	r2, [r2, #0]
    6352:	e7e0      	b.n	6316 <z_impl_k_yield+0x3a>
    6354:	20004c60 	.word	0x20004c60

00006358 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6358:	ea50 0301 	orrs.w	r3, r0, r1
{
    635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6360:	4605      	mov	r5, r0
    6362:	460e      	mov	r6, r1
	if (ticks == 0) {
    6364:	d103      	bne.n	636e <z_tick_sleep+0x16>
	z_impl_k_yield();
    6366:	f7ff ffb9 	bl	62dc <z_impl_k_yield>
		k_yield();
		return 0;
    636a:	2000      	movs	r0, #0
    636c:	e02c      	b.n	63c8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    636e:	1c83      	adds	r3, r0, #2
    6370:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6374:	db2a      	blt.n	63cc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6376:	f002 fc9f 	bl	8cb8 <sys_clock_tick_get_32>
    637a:	182c      	adds	r4, r5, r0
    637c:	f04f 0320 	mov.w	r3, #32
    6380:	f3ef 8811 	mrs	r8, BASEPRI
    6384:	f383 8812 	msr	BASEPRI_MAX, r3
    6388:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    638c:	4f11      	ldr	r7, [pc, #68]	; (63d4 <z_tick_sleep+0x7c>)
    638e:	4b12      	ldr	r3, [pc, #72]	; (63d8 <z_tick_sleep+0x80>)
    6390:	68b8      	ldr	r0, [r7, #8]
    6392:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6394:	f7ff fdfc 	bl	5f90 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6398:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    639a:	4910      	ldr	r1, [pc, #64]	; (63dc <z_tick_sleep+0x84>)
    639c:	462a      	mov	r2, r5
    639e:	4633      	mov	r3, r6
    63a0:	3018      	adds	r0, #24
    63a2:	f000 f905 	bl	65b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    63a6:	68ba      	ldr	r2, [r7, #8]
    63a8:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    63aa:	7b53      	ldrb	r3, [r2, #13]
    63ac:	f043 0310 	orr.w	r3, r3, #16
    63b0:	7353      	strb	r3, [r2, #13]
    63b2:	f7fb ff0f 	bl	21d4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    63b6:	f002 fc7f 	bl	8cb8 <sys_clock_tick_get_32>
    63ba:	1a20      	subs	r0, r4, r0
    63bc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    63c0:	2801      	cmp	r0, #1
    63c2:	f173 0300 	sbcs.w	r3, r3, #0
    63c6:	dbd0      	blt.n	636a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    63c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    63cc:	f06f 0401 	mvn.w	r4, #1
    63d0:	1a24      	subs	r4, r4, r0
    63d2:	e7d3      	b.n	637c <z_tick_sleep+0x24>
    63d4:	20004c60 	.word	0x20004c60
    63d8:	20004c84 	.word	0x20004c84
    63dc:	00008aef 	.word	0x00008aef

000063e0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    63e4:	bf08      	it	eq
    63e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    63ea:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    63ec:	d106      	bne.n	63fc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    63ee:	4b08      	ldr	r3, [pc, #32]	; (6410 <z_impl_k_sleep+0x30>)
    63f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    63f2:	f7ff ff05 	bl	6200 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    63f6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    63fa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    63fc:	f7ff ffac 	bl	6358 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6404:	fb80 0303 	smull	r0, r3, r0, r3
    6408:	0bc0      	lsrs	r0, r0, #15
    640a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    640e:	e7f4      	b.n	63fa <z_impl_k_sleep+0x1a>
    6410:	20004c60 	.word	0x20004c60

00006414 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6414:	4b01      	ldr	r3, [pc, #4]	; (641c <z_impl_z_current_get+0x8>)
    6416:	6898      	ldr	r0, [r3, #8]
    6418:	4770      	bx	lr
    641a:	bf00      	nop
    641c:	20004c60 	.word	0x20004c60

00006420 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6424:	4604      	mov	r4, r0
    6426:	f04f 0320 	mov.w	r3, #32
    642a:	f3ef 8611 	mrs	r6, BASEPRI
    642e:	f383 8812 	msr	BASEPRI_MAX, r3
    6432:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    6436:	7b03      	ldrb	r3, [r0, #12]
    6438:	07d9      	lsls	r1, r3, #31
    643a:	d50b      	bpl.n	6454 <z_thread_abort+0x34>
	__asm__ volatile(
    643c:	f386 8811 	msr	BASEPRI, r6
    6440:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    6444:	4040      	eors	r0, r0
    6446:	f380 8811 	msr	BASEPRI, r0
    644a:	f04f 0004 	mov.w	r0, #4
    644e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6454:	7b43      	ldrb	r3, [r0, #13]
    6456:	071a      	lsls	r2, r3, #28
    6458:	d504      	bpl.n	6464 <z_thread_abort+0x44>
    645a:	f386 8811 	msr	BASEPRI, r6
    645e:	f3bf 8f6f 	isb	sy
    6462:	e7f5      	b.n	6450 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6464:	f023 0220 	bic.w	r2, r3, #32
    6468:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    646c:	09d2      	lsrs	r2, r2, #7
    646e:	d120      	bne.n	64b2 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6470:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6472:	68a3      	ldr	r3, [r4, #8]
    6474:	b113      	cbz	r3, 647c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6476:	4620      	mov	r0, r4
    6478:	f002 fb2f 	bl	8ada <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    647c:	f104 0018 	add.w	r0, r4, #24
    6480:	f002 fbe8 	bl	8c54 <z_abort_timeout>
    6484:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6488:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    648c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    648e:	42bd      	cmp	r5, r7
    6490:	d000      	beq.n	6494 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6492:	b9b5      	cbnz	r5, 64c2 <z_thread_abort+0xa2>
		update_cache(1);
    6494:	2001      	movs	r0, #1
    6496:	f7ff fcef 	bl	5e78 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    649a:	4b10      	ldr	r3, [pc, #64]	; (64dc <z_thread_abort+0xbc>)
    649c:	689b      	ldr	r3, [r3, #8]
    649e:	42a3      	cmp	r3, r4
    64a0:	d1db      	bne.n	645a <z_thread_abort+0x3a>
    64a2:	f3ef 8305 	mrs	r3, IPSR
    64a6:	2b00      	cmp	r3, #0
    64a8:	d1d7      	bne.n	645a <z_thread_abort+0x3a>
    64aa:	4630      	mov	r0, r6
    64ac:	f7fb fe92 	bl	21d4 <arch_swap>
	return ret;
    64b0:	e7d3      	b.n	645a <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    64b2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    64b6:	f043 0308 	orr.w	r3, r3, #8
    64ba:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    64bc:	f002 fb05 	bl	8aca <sys_dlist_remove>
}
    64c0:	e7d7      	b.n	6472 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    64c2:	4628      	mov	r0, r5
    64c4:	f002 fb09 	bl	8ada <unpend_thread_no_timeout>
    64c8:	f105 0018 	add.w	r0, r5, #24
    64cc:	f002 fbc2 	bl	8c54 <z_abort_timeout>
		ready_thread(thread);
    64d0:	4628      	mov	r0, r5
    64d2:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    64d6:	f7ff fd27 	bl	5f28 <ready_thread>
    64da:	e7d7      	b.n	648c <z_thread_abort+0x6c>
    64dc:	20004c60 	.word	0x20004c60

000064e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    64e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    64e2:	4806      	ldr	r0, [pc, #24]	; (64fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    64e4:	4a06      	ldr	r2, [pc, #24]	; (6500 <z_data_copy+0x20>)
    64e6:	4907      	ldr	r1, [pc, #28]	; (6504 <z_data_copy+0x24>)
    64e8:	1a12      	subs	r2, r2, r0
    64ea:	f002 fa70 	bl	89ce <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    64ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    64f2:	4a05      	ldr	r2, [pc, #20]	; (6508 <z_data_copy+0x28>)
    64f4:	4905      	ldr	r1, [pc, #20]	; (650c <z_data_copy+0x2c>)
    64f6:	4806      	ldr	r0, [pc, #24]	; (6510 <z_data_copy+0x30>)
    64f8:	f002 ba69 	b.w	89ce <z_early_memcpy>
    64fc:	20002000 	.word	0x20002000
    6500:	20002218 	.word	0x20002218
    6504:	0000a554 	.word	0x0000a554
    6508:	00000000 	.word	0x00000000
    650c:	0000a554 	.word	0x0000a554
    6510:	20002000 	.word	0x20002000

00006514 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6514:	4b03      	ldr	r3, [pc, #12]	; (6524 <elapsed+0x10>)
    6516:	681b      	ldr	r3, [r3, #0]
    6518:	b90b      	cbnz	r3, 651e <elapsed+0xa>
    651a:	f7fd be51 	b.w	41c0 <sys_clock_elapsed>
}
    651e:	2000      	movs	r0, #0
    6520:	4770      	bx	lr
    6522:	bf00      	nop
    6524:	20004c90 	.word	0x20004c90

00006528 <next_timeout>:

static int32_t next_timeout(void)
{
    6528:	b510      	push	{r4, lr}
	return list->head == list;
    652a:	4b11      	ldr	r3, [pc, #68]	; (6570 <next_timeout+0x48>)
    652c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    652e:	429c      	cmp	r4, r3
    6530:	d10a      	bne.n	6548 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6532:	f7ff ffef 	bl	6514 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    6536:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    653a:	4b0e      	ldr	r3, [pc, #56]	; (6574 <next_timeout+0x4c>)
    653c:	691b      	ldr	r3, [r3, #16]
    653e:	b113      	cbz	r3, 6546 <next_timeout+0x1e>
    6540:	4298      	cmp	r0, r3
    6542:	bfa8      	it	ge
    6544:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6546:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    6548:	f7ff ffe4 	bl	6514 <elapsed>
	if ((to == NULL) ||
    654c:	2c00      	cmp	r4, #0
    654e:	d0f2      	beq.n	6536 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6550:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6554:	1a1b      	subs	r3, r3, r0
    6556:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    655a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    655e:	f172 0100 	sbcs.w	r1, r2, #0
    6562:	dae8      	bge.n	6536 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    6564:	2a00      	cmp	r2, #0
    6566:	bfac      	ite	ge
    6568:	4618      	movge	r0, r3
    656a:	2000      	movlt	r0, #0
    656c:	e7e5      	b.n	653a <next_timeout+0x12>
    656e:	bf00      	nop
    6570:	20002114 	.word	0x20002114
    6574:	20004c60 	.word	0x20004c60

00006578 <remove_timeout>:
{
    6578:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    657a:	b170      	cbz	r0, 659a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    657c:	4b0b      	ldr	r3, [pc, #44]	; (65ac <remove_timeout+0x34>)
    657e:	685b      	ldr	r3, [r3, #4]
    6580:	4298      	cmp	r0, r3
    6582:	d00a      	beq.n	659a <remove_timeout+0x22>
    6584:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    6586:	b143      	cbz	r3, 659a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6588:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    658c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6590:	1912      	adds	r2, r2, r4
    6592:	eb41 0105 	adc.w	r1, r1, r5
    6596:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    659a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    659e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    65a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    65a2:	2300      	movs	r3, #0
	node->prev = NULL;
    65a4:	e9c0 3300 	strd	r3, r3, [r0]
}
    65a8:	bd30      	pop	{r4, r5, pc}
    65aa:	bf00      	nop
    65ac:	20002114 	.word	0x20002114

000065b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    65b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    65b4:	bf08      	it	eq
    65b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    65ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65bc:	4604      	mov	r4, r0
    65be:	461d      	mov	r5, r3
    65c0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    65c2:	d061      	beq.n	6688 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    65c4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    65c6:	f04f 0320 	mov.w	r3, #32
    65ca:	f3ef 8711 	mrs	r7, BASEPRI
    65ce:	f383 8812 	msr	BASEPRI_MAX, r3
    65d2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    65d6:	3201      	adds	r2, #1
    65d8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    65dc:	da24      	bge.n	6628 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    65de:	f06f 0301 	mvn.w	r3, #1
    65e2:	492f      	ldr	r1, [pc, #188]	; (66a0 <z_add_timeout+0xf0>)
    65e4:	e9d1 2000 	ldrd	r2, r0, [r1]
    65e8:	1a9b      	subs	r3, r3, r2
    65ea:	f04f 32ff 	mov.w	r2, #4294967295
    65ee:	eb62 0000 	sbc.w	r0, r2, r0
    65f2:	1b9e      	subs	r6, r3, r6
    65f4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    65f8:	2e01      	cmp	r6, #1
    65fa:	f170 0300 	sbcs.w	r3, r0, #0
    65fe:	da01      	bge.n	6604 <z_add_timeout+0x54>
    6600:	2601      	movs	r6, #1
    6602:	2000      	movs	r0, #0
    6604:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    6608:	4e26      	ldr	r6, [pc, #152]	; (66a4 <z_add_timeout+0xf4>)
    660a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    660e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6610:	45b4      	cmp	ip, r6
    6612:	bf08      	it	eq
    6614:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    6618:	f1bc 0f00 	cmp.w	ip, #0
    661c:	d10d      	bne.n	663a <z_add_timeout+0x8a>
	node->prev = tail;
    661e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    6622:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6624:	6074      	str	r4, [r6, #4]
}
    6626:	e01c      	b.n	6662 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    6628:	f7ff ff74 	bl	6514 <elapsed>
    662c:	3601      	adds	r6, #1
    662e:	f145 0500 	adc.w	r5, r5, #0
    6632:	1836      	adds	r6, r6, r0
    6634:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    6638:	e7e4      	b.n	6604 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    663a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    663e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    6642:	4293      	cmp	r3, r2
    6644:	eb71 0e00 	sbcs.w	lr, r1, r0
    6648:	da1f      	bge.n	668a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    664a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    664c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6650:	eb60 0001 	sbc.w	r0, r0, r1
    6654:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    6658:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    665c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    665e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    6662:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6664:	42b3      	cmp	r3, r6
    6666:	d00b      	beq.n	6680 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6668:	429c      	cmp	r4, r3
    666a:	d109      	bne.n	6680 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    666c:	f7ff ff5c 	bl	6528 <next_timeout>

			if (next_time == 0 ||
    6670:	b118      	cbz	r0, 667a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    6672:	4b0d      	ldr	r3, [pc, #52]	; (66a8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    6674:	691b      	ldr	r3, [r3, #16]
    6676:	4283      	cmp	r3, r0
    6678:	d002      	beq.n	6680 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    667a:	2100      	movs	r1, #0
    667c:	f7fd fd6e 	bl	415c <sys_clock_set_timeout>
	__asm__ volatile(
    6680:	f387 8811 	msr	BASEPRI, r7
    6684:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    668a:	1a9b      	subs	r3, r3, r2
    668c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    6690:	45ac      	cmp	ip, r5
    6692:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6696:	d0c2      	beq.n	661e <z_add_timeout+0x6e>
    6698:	f8dc c000 	ldr.w	ip, [ip]
    669c:	e7bc      	b.n	6618 <z_add_timeout+0x68>
    669e:	bf00      	nop
    66a0:	20002338 	.word	0x20002338
    66a4:	20002114 	.word	0x20002114
    66a8:	20004c60 	.word	0x20004c60

000066ac <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    66ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66b0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    66b2:	f7ff fccf 	bl	6054 <z_time_slice>
	__asm__ volatile(
    66b6:	f04f 0320 	mov.w	r3, #32
    66ba:	f3ef 8611 	mrs	r6, BASEPRI
    66be:	f383 8812 	msr	BASEPRI_MAX, r3
    66c2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    66c6:	4f24      	ldr	r7, [pc, #144]	; (6758 <sys_clock_announce+0xac>)
	return list->head == list;
    66c8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 675c <sys_clock_announce+0xb0>
    66cc:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    66d0:	4a23      	ldr	r2, [pc, #140]	; (6760 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66d2:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    66d4:	603c      	str	r4, [r7, #0]
	return list->head == list;
    66d6:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    66da:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66de:	d00b      	beq.n	66f8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    66e0:	b150      	cbz	r0, 66f8 <sys_clock_announce+0x4c>
    66e2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    66e6:	42ac      	cmp	r4, r5
    66e8:	eb71 090c 	sbcs.w	r9, r1, ip
    66ec:	da17      	bge.n	671e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    66ee:	1b2d      	subs	r5, r5, r4
    66f0:	eb6c 0c01 	sbc.w	ip, ip, r1
    66f4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    66f8:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    66fa:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    66fe:	eb4e 0101 	adc.w	r1, lr, r1
    6702:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    6706:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6708:	f7ff ff0e 	bl	6528 <next_timeout>
    670c:	4621      	mov	r1, r4
    670e:	f7fd fd25 	bl	415c <sys_clock_set_timeout>
	__asm__ volatile(
    6712:	f386 8811 	msr	BASEPRI, r6
    6716:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    671a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    671e:	18eb      	adds	r3, r5, r3
    6720:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    6724:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    6728:	2200      	movs	r2, #0
    672a:	2300      	movs	r3, #0
    672c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    6730:	f7ff ff22 	bl	6578 <remove_timeout>
    6734:	f386 8811 	msr	BASEPRI, r6
    6738:	f3bf 8f6f 	isb	sy
		t->fn(t);
    673c:	6883      	ldr	r3, [r0, #8]
    673e:	4798      	blx	r3
	__asm__ volatile(
    6740:	f04f 0320 	mov.w	r3, #32
    6744:	f3ef 8611 	mrs	r6, BASEPRI
    6748:	f383 8812 	msr	BASEPRI_MAX, r3
    674c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    6750:	683c      	ldr	r4, [r7, #0]
    6752:	1b64      	subs	r4, r4, r5
    6754:	e7ba      	b.n	66cc <sys_clock_announce+0x20>
    6756:	bf00      	nop
    6758:	20004c90 	.word	0x20004c90
    675c:	20002114 	.word	0x20002114
    6760:	20002338 	.word	0x20002338

00006764 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6764:	b510      	push	{r4, lr}
    6766:	f04f 0320 	mov.w	r3, #32
    676a:	f3ef 8411 	mrs	r4, BASEPRI
    676e:	f383 8812 	msr	BASEPRI_MAX, r3
    6772:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    6776:	f7ff fecd 	bl	6514 <elapsed>
    677a:	4603      	mov	r3, r0
    677c:	4a05      	ldr	r2, [pc, #20]	; (6794 <sys_clock_tick_get+0x30>)
    677e:	e9d2 0100 	ldrd	r0, r1, [r2]
    6782:	1818      	adds	r0, r3, r0
    6784:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    6788:	f384 8811 	msr	BASEPRI, r4
    678c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6790:	bd10      	pop	{r4, pc}
    6792:	bf00      	nop
    6794:	20002338 	.word	0x20002338

00006798 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6798:	b570      	push	{r4, r5, r6, lr}
    679a:	4604      	mov	r4, r0
	__asm__ volatile(
    679c:	f04f 0320 	mov.w	r3, #32
    67a0:	f3ef 8511 	mrs	r5, BASEPRI
    67a4:	f383 8812 	msr	BASEPRI_MAX, r3
    67a8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    67ac:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    67b0:	3301      	adds	r3, #1
    67b2:	f142 0200 	adc.w	r2, r2, #0
    67b6:	2b02      	cmp	r3, #2
    67b8:	f172 0200 	sbcs.w	r2, r2, #0
    67bc:	d322      	bcc.n	6804 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    67be:	f002 fa7f 	bl	8cc0 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    67c2:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    67c6:	3001      	adds	r0, #1
    67c8:	f141 0100 	adc.w	r1, r1, #0
    67cc:	18c0      	adds	r0, r0, r3
    67ce:	eb41 0102 	adc.w	r1, r1, r2
    67d2:	2801      	cmp	r0, #1
    67d4:	f171 0100 	sbcs.w	r1, r1, #0
    67d8:	db32      	blt.n	6840 <z_timer_expiration_handler+0xa8>
    67da:	f002 fa71 	bl	8cc0 <z_impl_k_uptime_ticks>
    67de:	3001      	adds	r0, #1
    67e0:	f141 0300 	adc.w	r3, r1, #0
    67e4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    67e8:	1880      	adds	r0, r0, r2
    67ea:	f06f 0201 	mvn.w	r2, #1
    67ee:	eb43 0301 	adc.w	r3, r3, r1
    67f2:	f04f 31ff 	mov.w	r1, #4294967295
    67f6:	1a12      	subs	r2, r2, r0
    67f8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    67fc:	4620      	mov	r0, r4
    67fe:	491a      	ldr	r1, [pc, #104]	; (6868 <z_timer_expiration_handler+0xd0>)
    6800:	f7ff fed6 	bl	65b0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    6804:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6806:	3301      	adds	r3, #1
    6808:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    680a:	6a23      	ldr	r3, [r4, #32]
    680c:	b173      	cbz	r3, 682c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    680e:	f385 8811 	msr	BASEPRI, r5
    6812:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6816:	4620      	mov	r0, r4
    6818:	6a23      	ldr	r3, [r4, #32]
    681a:	4798      	blx	r3
	__asm__ volatile(
    681c:	f04f 0320 	mov.w	r3, #32
    6820:	f3ef 8511 	mrs	r5, BASEPRI
    6824:	f383 8812 	msr	BASEPRI_MAX, r3
    6828:	f3bf 8f6f 	isb	sy
	return list->head == list;
    682c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6830:	42a6      	cmp	r6, r4
    6832:	d000      	beq.n	6836 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6834:	b94e      	cbnz	r6, 684a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    6836:	f385 8811 	msr	BASEPRI, r5
    683a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    683e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6840:	f06f 0201 	mvn.w	r2, #1
    6844:	f04f 33ff 	mov.w	r3, #4294967295
    6848:	e7d8      	b.n	67fc <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    684a:	4630      	mov	r0, r6
    684c:	f002 f9a9 	bl	8ba2 <z_unpend_thread_no_timeout>
    6850:	2300      	movs	r3, #0
    6852:	67b3      	str	r3, [r6, #120]	; 0x78
    6854:	f385 8811 	msr	BASEPRI, r5
    6858:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    685c:	4630      	mov	r0, r6
}
    685e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6862:	f002 b98e 	b.w	8b82 <z_ready_thread>
    6866:	bf00      	nop
    6868:	00006799 	.word	0x00006799

0000686c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    686c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6870:	bf08      	it	eq
    6872:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    687a:	4619      	mov	r1, r3
    687c:	4605      	mov	r5, r0
    687e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    6882:	4614      	mov	r4, r2
    6884:	4691      	mov	r9, r2
    6886:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6888:	d037      	beq.n	68fa <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    688a:	f1b0 3fff 	cmp.w	r0, #4294967295
    688e:	bf08      	it	eq
    6890:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6894:	4637      	mov	r7, r6
    6896:	4682      	mov	sl, r0
    6898:	d011      	beq.n	68be <z_impl_k_timer_start+0x52>
    689a:	ea50 0306 	orrs.w	r3, r0, r6
    689e:	d00e      	beq.n	68be <z_impl_k_timer_start+0x52>
    68a0:	1c72      	adds	r2, r6, #1
    68a2:	f170 33ff 	sbcs.w	r3, r0, #4294967295
    68a6:	db0a      	blt.n	68be <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    68a8:	2e02      	cmp	r6, #2
    68aa:	4684      	mov	ip, r0
    68ac:	f170 0000 	sbcs.w	r0, r0, #0
    68b0:	bfbc      	itt	lt
    68b2:	2702      	movlt	r7, #2
    68b4:	f04f 0c00 	movlt.w	ip, #0
    68b8:	3f01      	subs	r7, #1
    68ba:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    68be:	1c63      	adds	r3, r4, #1
    68c0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    68c4:	db0a      	blt.n	68dc <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    68c6:	2c01      	cmp	r4, #1
    68c8:	f171 0300 	sbcs.w	r3, r1, #0
    68cc:	4622      	mov	r2, r4
    68ce:	bfbc      	itt	lt
    68d0:	2201      	movlt	r2, #1
    68d2:	2100      	movlt	r1, #0
    68d4:	f112 39ff 	adds.w	r9, r2, #4294967295
    68d8:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    68dc:	4628      	mov	r0, r5
    68de:	f002 f9b9 	bl	8c54 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    68e2:	2300      	movs	r3, #0
	timer->period = period;
    68e4:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    68e8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    68ea:	464a      	mov	r2, r9
    68ec:	4643      	mov	r3, r8
    68ee:	4628      	mov	r0, r5
		     duration);
}
    68f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    68f4:	4902      	ldr	r1, [pc, #8]	; (6900 <z_impl_k_timer_start+0x94>)
    68f6:	f7ff be5b 	b.w	65b0 <z_add_timeout>
}
    68fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68fe:	bf00      	nop
    6900:	00006799 	.word	0x00006799

00006904 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6904:	4801      	ldr	r0, [pc, #4]	; (690c <boot_banner+0x8>)
    6906:	f001 ba5f 	b.w	7dc8 <printk>
    690a:	bf00      	nop
    690c:	0000a525 	.word	0x0000a525

00006910 <nrf_cc3xx_platform_init_no_rng>:
    6910:	b510      	push	{r4, lr}
    6912:	4c0a      	ldr	r4, [pc, #40]	; (693c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6914:	6823      	ldr	r3, [r4, #0]
    6916:	b11b      	cbz	r3, 6920 <nrf_cc3xx_platform_init_no_rng+0x10>
    6918:	2301      	movs	r3, #1
    691a:	2000      	movs	r0, #0
    691c:	6023      	str	r3, [r4, #0]
    691e:	bd10      	pop	{r4, pc}
    6920:	f000 f8fe 	bl	6b20 <CC_LibInitNoRng>
    6924:	2800      	cmp	r0, #0
    6926:	d0f7      	beq.n	6918 <nrf_cc3xx_platform_init_no_rng+0x8>
    6928:	3801      	subs	r0, #1
    692a:	2807      	cmp	r0, #7
    692c:	d803      	bhi.n	6936 <nrf_cc3xx_platform_init_no_rng+0x26>
    692e:	4b04      	ldr	r3, [pc, #16]	; (6940 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6930:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6934:	bd10      	pop	{r4, pc}
    6936:	4803      	ldr	r0, [pc, #12]	; (6944 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6938:	bd10      	pop	{r4, pc}
    693a:	bf00      	nop
    693c:	20004c94 	.word	0x20004c94
    6940:	00009594 	.word	0x00009594
    6944:	ffff8ffe 	.word	0xffff8ffe

00006948 <nrf_cc3xx_platform_abort>:
    6948:	f3bf 8f4f 	dsb	sy
    694c:	4905      	ldr	r1, [pc, #20]	; (6964 <nrf_cc3xx_platform_abort+0x1c>)
    694e:	4b06      	ldr	r3, [pc, #24]	; (6968 <nrf_cc3xx_platform_abort+0x20>)
    6950:	68ca      	ldr	r2, [r1, #12]
    6952:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6956:	4313      	orrs	r3, r2
    6958:	60cb      	str	r3, [r1, #12]
    695a:	f3bf 8f4f 	dsb	sy
    695e:	bf00      	nop
    6960:	e7fd      	b.n	695e <nrf_cc3xx_platform_abort+0x16>
    6962:	bf00      	nop
    6964:	e000ed00 	.word	0xe000ed00
    6968:	05fa0004 	.word	0x05fa0004

0000696c <CC_PalAbort>:
    696c:	b430      	push	{r4, r5}
    696e:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6972:	2500      	movs	r5, #0
    6974:	4b0b      	ldr	r3, [pc, #44]	; (69a4 <CC_PalAbort+0x38>)
    6976:	4c0c      	ldr	r4, [pc, #48]	; (69a8 <CC_PalAbort+0x3c>)
    6978:	490c      	ldr	r1, [pc, #48]	; (69ac <CC_PalAbort+0x40>)
    697a:	6849      	ldr	r1, [r1, #4]
    697c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6980:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6984:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6988:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    698c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    6990:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    6994:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    6998:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    699c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    69a0:	bc30      	pop	{r4, r5}
    69a2:	4708      	bx	r1
    69a4:	50845000 	.word	0x50845000
    69a8:	50844000 	.word	0x50844000
    69ac:	2000211c 	.word	0x2000211c

000069b0 <nrf_cc3xx_platform_set_abort>:
    69b0:	4b02      	ldr	r3, [pc, #8]	; (69bc <nrf_cc3xx_platform_set_abort+0xc>)
    69b2:	e9d0 1200 	ldrd	r1, r2, [r0]
    69b6:	e9c3 1200 	strd	r1, r2, [r3]
    69ba:	4770      	bx	lr
    69bc:	2000211c 	.word	0x2000211c

000069c0 <mutex_free>:
    69c0:	b510      	push	{r4, lr}
    69c2:	4604      	mov	r4, r0
    69c4:	b150      	cbz	r0, 69dc <mutex_free+0x1c>
    69c6:	6863      	ldr	r3, [r4, #4]
    69c8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    69cc:	d005      	beq.n	69da <mutex_free+0x1a>
    69ce:	4a06      	ldr	r2, [pc, #24]	; (69e8 <mutex_free+0x28>)
    69d0:	4293      	cmp	r3, r2
    69d2:	d002      	beq.n	69da <mutex_free+0x1a>
    69d4:	2300      	movs	r3, #0
    69d6:	6062      	str	r2, [r4, #4]
    69d8:	6023      	str	r3, [r4, #0]
    69da:	bd10      	pop	{r4, pc}
    69dc:	4b03      	ldr	r3, [pc, #12]	; (69ec <mutex_free+0x2c>)
    69de:	4804      	ldr	r0, [pc, #16]	; (69f0 <mutex_free+0x30>)
    69e0:	685b      	ldr	r3, [r3, #4]
    69e2:	4798      	blx	r3
    69e4:	e7ef      	b.n	69c6 <mutex_free+0x6>
    69e6:	bf00      	nop
    69e8:	a95c5f2c 	.word	0xa95c5f2c
    69ec:	2000211c 	.word	0x2000211c
    69f0:	000095b4 	.word	0x000095b4

000069f4 <mutex_lock>:
    69f4:	b1c8      	cbz	r0, 6a2a <mutex_lock+0x36>
    69f6:	6843      	ldr	r3, [r0, #4]
    69f8:	4a0d      	ldr	r2, [pc, #52]	; (6a30 <mutex_lock+0x3c>)
    69fa:	4293      	cmp	r3, r2
    69fc:	d013      	beq.n	6a26 <mutex_lock+0x32>
    69fe:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6a02:	d00e      	beq.n	6a22 <mutex_lock+0x2e>
    6a04:	2301      	movs	r3, #1
    6a06:	e850 2f00 	ldrex	r2, [r0]
    6a0a:	4619      	mov	r1, r3
    6a0c:	e840 1c00 	strex	ip, r1, [r0]
    6a10:	f09c 0f00 	teq	ip, #0
    6a14:	d1f7      	bne.n	6a06 <mutex_lock+0x12>
    6a16:	2a01      	cmp	r2, #1
    6a18:	d0f5      	beq.n	6a06 <mutex_lock+0x12>
    6a1a:	f3bf 8f5f 	dmb	sy
    6a1e:	2000      	movs	r0, #0
    6a20:	4770      	bx	lr
    6a22:	4804      	ldr	r0, [pc, #16]	; (6a34 <mutex_lock+0x40>)
    6a24:	4770      	bx	lr
    6a26:	4804      	ldr	r0, [pc, #16]	; (6a38 <mutex_lock+0x44>)
    6a28:	4770      	bx	lr
    6a2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6a2e:	4770      	bx	lr
    6a30:	a95c5f2c 	.word	0xa95c5f2c
    6a34:	ffff8fe9 	.word	0xffff8fe9
    6a38:	ffff8fea 	.word	0xffff8fea

00006a3c <mutex_unlock>:
    6a3c:	4603      	mov	r3, r0
    6a3e:	b180      	cbz	r0, 6a62 <mutex_unlock+0x26>
    6a40:	6842      	ldr	r2, [r0, #4]
    6a42:	4909      	ldr	r1, [pc, #36]	; (6a68 <mutex_unlock+0x2c>)
    6a44:	428a      	cmp	r2, r1
    6a46:	d00a      	beq.n	6a5e <mutex_unlock+0x22>
    6a48:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    6a4c:	d005      	beq.n	6a5a <mutex_unlock+0x1e>
    6a4e:	f3bf 8f5f 	dmb	sy
    6a52:	2200      	movs	r2, #0
    6a54:	4610      	mov	r0, r2
    6a56:	601a      	str	r2, [r3, #0]
    6a58:	4770      	bx	lr
    6a5a:	4804      	ldr	r0, [pc, #16]	; (6a6c <mutex_unlock+0x30>)
    6a5c:	4770      	bx	lr
    6a5e:	4804      	ldr	r0, [pc, #16]	; (6a70 <mutex_unlock+0x34>)
    6a60:	4770      	bx	lr
    6a62:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6a66:	4770      	bx	lr
    6a68:	a95c5f2c 	.word	0xa95c5f2c
    6a6c:	ffff8fe9 	.word	0xffff8fe9
    6a70:	ffff8fea 	.word	0xffff8fea

00006a74 <mutex_init>:
    6a74:	b510      	push	{r4, lr}
    6a76:	4604      	mov	r4, r0
    6a78:	b120      	cbz	r0, 6a84 <mutex_init+0x10>
    6a7a:	2300      	movs	r3, #0
    6a7c:	4a03      	ldr	r2, [pc, #12]	; (6a8c <mutex_init+0x18>)
    6a7e:	6023      	str	r3, [r4, #0]
    6a80:	6062      	str	r2, [r4, #4]
    6a82:	bd10      	pop	{r4, pc}
    6a84:	4802      	ldr	r0, [pc, #8]	; (6a90 <mutex_init+0x1c>)
    6a86:	f7ff ff71 	bl	696c <CC_PalAbort>
    6a8a:	e7f6      	b.n	6a7a <mutex_init+0x6>
    6a8c:	3a00003a 	.word	0x3a00003a
    6a90:	000095dc 	.word	0x000095dc

00006a94 <nrf_cc3xx_platform_set_mutexes>:
    6a94:	b570      	push	{r4, r5, r6, lr}
    6a96:	4c19      	ldr	r4, [pc, #100]	; (6afc <nrf_cc3xx_platform_set_mutexes+0x68>)
    6a98:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6a9c:	6806      	ldr	r6, [r0, #0]
    6a9e:	f8c4 c004 	str.w	ip, [r4, #4]
    6aa2:	f8d0 c008 	ldr.w	ip, [r0, #8]
    6aa6:	68c0      	ldr	r0, [r0, #12]
    6aa8:	f8c4 c008 	str.w	ip, [r4, #8]
    6aac:	60e0      	str	r0, [r4, #12]
    6aae:	6026      	str	r6, [r4, #0]
    6ab0:	6808      	ldr	r0, [r1, #0]
    6ab2:	4b13      	ldr	r3, [pc, #76]	; (6b00 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    6ab4:	4d13      	ldr	r5, [pc, #76]	; (6b04 <nrf_cc3xx_platform_set_mutexes+0x70>)
    6ab6:	6018      	str	r0, [r3, #0]
    6ab8:	6848      	ldr	r0, [r1, #4]
    6aba:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    6abe:	6058      	str	r0, [r3, #4]
    6ac0:	6888      	ldr	r0, [r1, #8]
    6ac2:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    6ac6:	6098      	str	r0, [r3, #8]
    6ac8:	68c8      	ldr	r0, [r1, #12]
    6aca:	6909      	ldr	r1, [r1, #16]
    6acc:	60d8      	str	r0, [r3, #12]
    6ace:	6119      	str	r1, [r3, #16]
    6ad0:	d012      	beq.n	6af8 <nrf_cc3xx_platform_set_mutexes+0x64>
    6ad2:	2300      	movs	r3, #0
    6ad4:	4a0c      	ldr	r2, [pc, #48]	; (6b08 <nrf_cc3xx_platform_set_mutexes+0x74>)
    6ad6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6ada:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    6ade:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    6ae2:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    6ae6:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    6aea:	47b0      	blx	r6
    6aec:	6823      	ldr	r3, [r4, #0]
    6aee:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6af6:	4718      	bx	r3
    6af8:	bd70      	pop	{r4, r5, r6, pc}
    6afa:	bf00      	nop
    6afc:	2000212c 	.word	0x2000212c
    6b00:	2000213c 	.word	0x2000213c
    6b04:	20004cac 	.word	0x20004cac
    6b08:	a95c5f2c 	.word	0xa95c5f2c

00006b0c <mbedtls_platform_zeroize>:
    6b0c:	b138      	cbz	r0, 6b1e <mbedtls_platform_zeroize+0x12>
    6b0e:	b131      	cbz	r1, 6b1e <mbedtls_platform_zeroize+0x12>
    6b10:	2200      	movs	r2, #0
    6b12:	4401      	add	r1, r0
    6b14:	4603      	mov	r3, r0
    6b16:	3001      	adds	r0, #1
    6b18:	4288      	cmp	r0, r1
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	d1fa      	bne.n	6b14 <mbedtls_platform_zeroize+0x8>
    6b1e:	4770      	bx	lr

00006b20 <CC_LibInitNoRng>:
    6b20:	b508      	push	{r3, lr}
    6b22:	f000 f811 	bl	6b48 <CC_HalInit>
    6b26:	b930      	cbnz	r0, 6b36 <CC_LibInitNoRng+0x16>
    6b28:	f000 f810 	bl	6b4c <CC_PalInit>
    6b2c:	b938      	cbnz	r0, 6b3e <CC_LibInitNoRng+0x1e>
    6b2e:	4a05      	ldr	r2, [pc, #20]	; (6b44 <CC_LibInitNoRng+0x24>)
    6b30:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    6b34:	bd08      	pop	{r3, pc}
    6b36:	f000 f837 	bl	6ba8 <CC_PalTerminate>
    6b3a:	2003      	movs	r0, #3
    6b3c:	bd08      	pop	{r3, pc}
    6b3e:	2004      	movs	r0, #4
    6b40:	bd08      	pop	{r3, pc}
    6b42:	bf00      	nop
    6b44:	50845000 	.word	0x50845000

00006b48 <CC_HalInit>:
    6b48:	2000      	movs	r0, #0
    6b4a:	4770      	bx	lr

00006b4c <CC_PalInit>:
    6b4c:	b510      	push	{r4, lr}
    6b4e:	4811      	ldr	r0, [pc, #68]	; (6b94 <CC_PalInit+0x48>)
    6b50:	f000 f848 	bl	6be4 <CC_PalMutexCreate>
    6b54:	b100      	cbz	r0, 6b58 <CC_PalInit+0xc>
    6b56:	bd10      	pop	{r4, pc}
    6b58:	480f      	ldr	r0, [pc, #60]	; (6b98 <CC_PalInit+0x4c>)
    6b5a:	f000 f843 	bl	6be4 <CC_PalMutexCreate>
    6b5e:	2800      	cmp	r0, #0
    6b60:	d1f9      	bne.n	6b56 <CC_PalInit+0xa>
    6b62:	4c0e      	ldr	r4, [pc, #56]	; (6b9c <CC_PalInit+0x50>)
    6b64:	4620      	mov	r0, r4
    6b66:	f000 f83d 	bl	6be4 <CC_PalMutexCreate>
    6b6a:	2800      	cmp	r0, #0
    6b6c:	d1f3      	bne.n	6b56 <CC_PalInit+0xa>
    6b6e:	4b0c      	ldr	r3, [pc, #48]	; (6ba0 <CC_PalInit+0x54>)
    6b70:	480c      	ldr	r0, [pc, #48]	; (6ba4 <CC_PalInit+0x58>)
    6b72:	601c      	str	r4, [r3, #0]
    6b74:	f000 f836 	bl	6be4 <CC_PalMutexCreate>
    6b78:	4601      	mov	r1, r0
    6b7a:	2800      	cmp	r0, #0
    6b7c:	d1eb      	bne.n	6b56 <CC_PalInit+0xa>
    6b7e:	f000 f82d 	bl	6bdc <CC_PalDmaInit>
    6b82:	4604      	mov	r4, r0
    6b84:	b108      	cbz	r0, 6b8a <CC_PalInit+0x3e>
    6b86:	4620      	mov	r0, r4
    6b88:	bd10      	pop	{r4, pc}
    6b8a:	f000 f83f 	bl	6c0c <CC_PalPowerSaveModeInit>
    6b8e:	4620      	mov	r0, r4
    6b90:	e7fa      	b.n	6b88 <CC_PalInit+0x3c>
    6b92:	bf00      	nop
    6b94:	20002174 	.word	0x20002174
    6b98:	20002168 	.word	0x20002168
    6b9c:	20002170 	.word	0x20002170
    6ba0:	20002178 	.word	0x20002178
    6ba4:	2000216c 	.word	0x2000216c

00006ba8 <CC_PalTerminate>:
    6ba8:	b508      	push	{r3, lr}
    6baa:	4808      	ldr	r0, [pc, #32]	; (6bcc <CC_PalTerminate+0x24>)
    6bac:	f000 f824 	bl	6bf8 <CC_PalMutexDestroy>
    6bb0:	4807      	ldr	r0, [pc, #28]	; (6bd0 <CC_PalTerminate+0x28>)
    6bb2:	f000 f821 	bl	6bf8 <CC_PalMutexDestroy>
    6bb6:	4807      	ldr	r0, [pc, #28]	; (6bd4 <CC_PalTerminate+0x2c>)
    6bb8:	f000 f81e 	bl	6bf8 <CC_PalMutexDestroy>
    6bbc:	4806      	ldr	r0, [pc, #24]	; (6bd8 <CC_PalTerminate+0x30>)
    6bbe:	f000 f81b 	bl	6bf8 <CC_PalMutexDestroy>
    6bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6bc6:	f000 b80b 	b.w	6be0 <CC_PalDmaTerminate>
    6bca:	bf00      	nop
    6bcc:	20002174 	.word	0x20002174
    6bd0:	20002168 	.word	0x20002168
    6bd4:	20002170 	.word	0x20002170
    6bd8:	2000216c 	.word	0x2000216c

00006bdc <CC_PalDmaInit>:
    6bdc:	2000      	movs	r0, #0
    6bde:	4770      	bx	lr

00006be0 <CC_PalDmaTerminate>:
    6be0:	4770      	bx	lr
    6be2:	bf00      	nop

00006be4 <CC_PalMutexCreate>:
    6be4:	b508      	push	{r3, lr}
    6be6:	4b03      	ldr	r3, [pc, #12]	; (6bf4 <CC_PalMutexCreate+0x10>)
    6be8:	6802      	ldr	r2, [r0, #0]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	6810      	ldr	r0, [r2, #0]
    6bee:	4798      	blx	r3
    6bf0:	2000      	movs	r0, #0
    6bf2:	bd08      	pop	{r3, pc}
    6bf4:	2000212c 	.word	0x2000212c

00006bf8 <CC_PalMutexDestroy>:
    6bf8:	b508      	push	{r3, lr}
    6bfa:	4b03      	ldr	r3, [pc, #12]	; (6c08 <CC_PalMutexDestroy+0x10>)
    6bfc:	6802      	ldr	r2, [r0, #0]
    6bfe:	685b      	ldr	r3, [r3, #4]
    6c00:	6810      	ldr	r0, [r2, #0]
    6c02:	4798      	blx	r3
    6c04:	2000      	movs	r0, #0
    6c06:	bd08      	pop	{r3, pc}
    6c08:	2000212c 	.word	0x2000212c

00006c0c <CC_PalPowerSaveModeInit>:
    6c0c:	b570      	push	{r4, r5, r6, lr}
    6c0e:	4c09      	ldr	r4, [pc, #36]	; (6c34 <CC_PalPowerSaveModeInit+0x28>)
    6c10:	4d09      	ldr	r5, [pc, #36]	; (6c38 <CC_PalPowerSaveModeInit+0x2c>)
    6c12:	6920      	ldr	r0, [r4, #16]
    6c14:	68ab      	ldr	r3, [r5, #8]
    6c16:	4798      	blx	r3
    6c18:	b118      	cbz	r0, 6c22 <CC_PalPowerSaveModeInit+0x16>
    6c1a:	4b08      	ldr	r3, [pc, #32]	; (6c3c <CC_PalPowerSaveModeInit+0x30>)
    6c1c:	4808      	ldr	r0, [pc, #32]	; (6c40 <CC_PalPowerSaveModeInit+0x34>)
    6c1e:	685b      	ldr	r3, [r3, #4]
    6c20:	4798      	blx	r3
    6c22:	2100      	movs	r1, #0
    6c24:	4a07      	ldr	r2, [pc, #28]	; (6c44 <CC_PalPowerSaveModeInit+0x38>)
    6c26:	68eb      	ldr	r3, [r5, #12]
    6c28:	6011      	str	r1, [r2, #0]
    6c2a:	6920      	ldr	r0, [r4, #16]
    6c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c30:	4718      	bx	r3
    6c32:	bf00      	nop
    6c34:	2000213c 	.word	0x2000213c
    6c38:	2000212c 	.word	0x2000212c
    6c3c:	2000211c 	.word	0x2000211c
    6c40:	00009600 	.word	0x00009600
    6c44:	20004ca8 	.word	0x20004ca8

00006c48 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    6c48:	b121      	cbz	r1, 6c54 <flash_area_id_from_multi_image_slot+0xc>
    6c4a:	2901      	cmp	r1, #1
    6c4c:	d007      	beq.n	6c5e <flash_area_id_from_multi_image_slot+0x16>
    6c4e:	f06f 0015 	mvn.w	r0, #21
    6c52:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    6c54:	b148      	cbz	r0, 6c6a <flash_area_id_from_multi_image_slot+0x22>
#if !defined(CONFIG_SINGLE_APPLICATION_SLOT)
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    6c56:	2801      	cmp	r0, #1
    6c58:	bf18      	it	ne
    6c5a:	20ff      	movne	r0, #255	; 0xff
    6c5c:	4770      	bx	lr
    6c5e:	b130      	cbz	r0, 6c6e <flash_area_id_from_multi_image_slot+0x26>
    6c60:	2801      	cmp	r0, #1
    6c62:	bf14      	ite	ne
    6c64:	20ff      	movne	r0, #255	; 0xff
    6c66:	2008      	moveq	r0, #8
    6c68:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    6c6a:	2004      	movs	r0, #4
    6c6c:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    6c6e:	2002      	movs	r0, #2
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    6c70:	4770      	bx	lr

00006c72 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    6c72:	2000      	movs	r0, #0
    6c74:	4770      	bx	lr

00006c76 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    6c76:	4770      	bx	lr

00006c78 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    6c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6c7c:	460e      	mov	r6, r1
    6c7e:	4617      	mov	r7, r2
    6c80:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    6c82:	4604      	mov	r4, r0
    6c84:	b928      	cbnz	r0, 6c92 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    6c86:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    6c8a:	4640      	mov	r0, r8
    6c8c:	b003      	add	sp, #12
    6c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    6c92:	2900      	cmp	r1, #0
    6c94:	d0f7      	beq.n	6c86 <bootutil_tlv_iter_begin+0xe>
    6c96:	2a00      	cmp	r2, #0
    6c98:	d0f5      	beq.n	6c86 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    6c9a:	68cb      	ldr	r3, [r1, #12]
    6c9c:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    6c9e:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    6ca0:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    6ca2:	2304      	movs	r3, #4
    6ca4:	4629      	mov	r1, r5
    6ca6:	eb0d 0203 	add.w	r2, sp, r3
    6caa:	f001 f98c 	bl	7fc6 <flash_area_read>
    6cae:	4680      	mov	r8, r0
    6cb0:	2800      	cmp	r0, #0
    6cb2:	d1e8      	bne.n	6c86 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6cb4:	f646 1208 	movw	r2, #26888	; 0x6908
    6cb8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6cbc:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    6cbe:	4291      	cmp	r1, r2
    6cc0:	d125      	bne.n	6d0e <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    6cc2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    6cc6:	4299      	cmp	r1, r3
    6cc8:	d1dd      	bne.n	6c86 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    6cca:	2304      	movs	r3, #4
    6ccc:	4638      	mov	r0, r7
    6cce:	eb0d 0203 	add.w	r2, sp, r3
    6cd2:	4429      	add	r1, r5
    6cd4:	f001 f977 	bl	7fc6 <flash_area_read>
    6cd8:	2800      	cmp	r0, #0
    6cda:	d1d4      	bne.n	6c86 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    6cdc:	f646 1307 	movw	r3, #26887	; 0x6907
    6ce0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    6ce4:	429a      	cmp	r2, r3
    6ce6:	d1ce      	bne.n	6c86 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    6ce8:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    6cec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    6cf0:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    6cf4:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    6cf6:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6cf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    6cfc:	442b      	add	r3, r5
    6cfe:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6d00:	8973      	ldrh	r3, [r6, #10]
    6d02:	4413      	add	r3, r2
    6d04:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    6d06:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    6d08:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    6d0a:	6125      	str	r5, [r4, #16]
    return 0;
    6d0c:	e7bd      	b.n	6c8a <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    6d0e:	2b00      	cmp	r3, #0
    6d10:	d0e4      	beq.n	6cdc <bootutil_tlv_iter_begin+0x64>
    6d12:	e7b8      	b.n	6c86 <bootutil_tlv_iter_begin+0xe>

00006d14 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    6d14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6d18:	460e      	mov	r6, r1
    6d1a:	4617      	mov	r7, r2
    6d1c:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    6d1e:	4604      	mov	r4, r0
    6d20:	b920      	cbnz	r0, 6d2c <bootutil_tlv_iter_next+0x18>
        return -1;
    6d22:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    6d26:	b002      	add	sp, #8
    6d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    6d2c:	6803      	ldr	r3, [r0, #0]
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d0f7      	beq.n	6d22 <bootutil_tlv_iter_next+0xe>
    6d32:	6843      	ldr	r3, [r0, #4]
    6d34:	2b00      	cmp	r3, #0
    6d36:	d0f4      	beq.n	6d22 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6d38:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    6d3c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6d40:	429a      	cmp	r2, r3
    6d42:	d216      	bcs.n	6d72 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    6d44:	6823      	ldr	r3, [r4, #0]
    6d46:	895b      	ldrh	r3, [r3, #10]
    6d48:	b123      	cbz	r3, 6d54 <bootutil_tlv_iter_next+0x40>
    6d4a:	68e3      	ldr	r3, [r4, #12]
    6d4c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    6d4e:	bf04      	itt	eq
    6d50:	3304      	addeq	r3, #4
    6d52:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    6d54:	2304      	movs	r3, #4
    6d56:	6921      	ldr	r1, [r4, #16]
    6d58:	6860      	ldr	r0, [r4, #4]
    6d5a:	eb0d 0203 	add.w	r2, sp, r3
    6d5e:	f001 f932 	bl	7fc6 <flash_area_read>
        if (rc) {
    6d62:	2800      	cmp	r0, #0
    6d64:	d1dd      	bne.n	6d22 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    6d66:	7aa3      	ldrb	r3, [r4, #10]
    6d68:	b12b      	cbz	r3, 6d76 <bootutil_tlv_iter_next+0x62>
    6d6a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    6d6e:	429a      	cmp	r2, r3
    6d70:	d301      	bcc.n	6d76 <bootutil_tlv_iter_next+0x62>
            return 1;
    6d72:	2001      	movs	r0, #1
    6d74:	e7d7      	b.n	6d26 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6d76:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6d78:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    6d7c:	4543      	cmp	r3, r8
    6d7e:	f101 0204 	add.w	r2, r1, #4
    6d82:	d003      	beq.n	6d8c <bootutil_tlv_iter_next+0x78>
    6d84:	f8bd c004 	ldrh.w	ip, [sp, #4]
    6d88:	459c      	cmp	ip, r3
    6d8a:	d10b      	bne.n	6da4 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    6d8c:	b115      	cbz	r5, 6d94 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    6d8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6d92:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    6d94:	6923      	ldr	r3, [r4, #16]
    6d96:	3304      	adds	r3, #4
    6d98:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    6d9a:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    6d9c:	6923      	ldr	r3, [r4, #16]
    6d9e:	4413      	add	r3, r2
    6da0:	6123      	str	r3, [r4, #16]
            return 0;
    6da2:	e7c0      	b.n	6d26 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    6da4:	6923      	ldr	r3, [r4, #16]
    6da6:	4413      	add	r3, r2
    6da8:	6123      	str	r3, [r4, #16]
    6daa:	e7c7      	b.n	6d3c <bootutil_tlv_iter_next+0x28>

00006dac <bootutil_read_bigint>:
{
    6dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6dae:	460c      	mov	r4, r1
    6db0:	4606      	mov	r6, r0
    6db2:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    6db4:	2302      	movs	r3, #2
    6db6:	4620      	mov	r0, r4
    6db8:	aa01      	add	r2, sp, #4
    6dba:	f000 f937 	bl	702c <mbedtls_asn1_get_tag>
    6dbe:	4605      	mov	r5, r0
    6dc0:	b9e8      	cbnz	r0, 6dfe <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    6dc2:	9a01      	ldr	r2, [sp, #4]
    6dc4:	2a1f      	cmp	r2, #31
    6dc6:	d90e      	bls.n	6de6 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    6dc8:	f1a2 0120 	sub.w	r1, r2, #32
    6dcc:	4630      	mov	r0, r6
    6dce:	2220      	movs	r2, #32
    6dd0:	6823      	ldr	r3, [r4, #0]
    6dd2:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    6dd4:	f001 f9af 	bl	8136 <memcpy>
    *cp += len;
    6dd8:	6823      	ldr	r3, [r4, #0]
    6dda:	9a01      	ldr	r2, [sp, #4]
    6ddc:	4413      	add	r3, r2
    6dde:	6023      	str	r3, [r4, #0]
}
    6de0:	4628      	mov	r0, r5
    6de2:	b002      	add	sp, #8
    6de4:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    6de6:	4601      	mov	r1, r0
    6de8:	f1c2 0220 	rsb	r2, r2, #32
    6dec:	4630      	mov	r0, r6
    6dee:	f001 f9ad 	bl	814c <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    6df2:	9a01      	ldr	r2, [sp, #4]
    6df4:	6821      	ldr	r1, [r4, #0]
    6df6:	f1c2 0020 	rsb	r0, r2, #32
    6dfa:	4430      	add	r0, r6
    6dfc:	e7ea      	b.n	6dd4 <bootutil_read_bigint+0x28>
        return -3;
    6dfe:	f06f 0502 	mvn.w	r5, #2
    6e02:	e7ed      	b.n	6de0 <bootutil_read_bigint+0x34>

00006e04 <boot_fih_memequal>:
 */
#ifdef MCUBOOT_FIH_PROFILE_OFF
inline
fih_int boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
    return memcmp(s1, s2, n);
    6e04:	f001 b970 	b.w	80e8 <memcmp>

00006e08 <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    6e08:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    6e0c:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    6e0e:	3030      	adds	r0, #48	; 0x30
    6e10:	4770      	bx	lr

00006e12 <bootutil_max_image_size>:
                   * this value to fail.
                   */
    }
    return flash_sector_get_off(&sector);
#elif defined(MCUBOOT_OVERWRITE_ONLY)
    return boot_swap_info_off(fap);
    6e12:	f001 bbbb 	b.w	858c <boot_swap_info_off>

00006e16 <boot_initialize_area>:
{
    6e16:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6e18:	22f0      	movs	r2, #240	; 0xf0
{
    6e1a:	b513      	push	{r0, r1, r4, lr}
    6e1c:	4608      	mov	r0, r1
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    6e1e:	f893 10b8 	ldrb.w	r1, [r3, #184]	; 0xb8
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    6e22:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    6e24:	b199      	cbz	r1, 6e4e <boot_initialize_area+0x38>
    6e26:	2901      	cmp	r1, #1
    6e28:	d003      	beq.n	6e32 <boot_initialize_area+0x1c>
    6e2a:	28ff      	cmp	r0, #255	; 0xff
    6e2c:	d011      	beq.n	6e52 <boot_initialize_area+0x3c>
        return BOOT_EFLASH;
    6e2e:	2001      	movs	r0, #1
    6e30:	e01d      	b.n	6e6e <boot_initialize_area+0x58>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    6e32:	2801      	cmp	r0, #1
    6e34:	d00d      	beq.n	6e52 <boot_initialize_area+0x3c>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    6e36:	2208      	movs	r2, #8
    6e38:	4282      	cmp	r2, r0
    6e3a:	d1f8      	bne.n	6e2e <boot_initialize_area+0x18>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    6e3c:	2458      	movs	r4, #88	; 0x58
    6e3e:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    6e42:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    6e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    6e48:	f103 0454 	add.w	r4, r3, #84	; 0x54
    6e4c:	e009      	b.n	6e62 <boot_initialize_area+0x4c>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    6e4e:	2804      	cmp	r0, #4
    6e50:	d10f      	bne.n	6e72 <boot_initialize_area+0x5c>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    6e52:	2458      	movs	r4, #88	; 0x58
    6e54:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    6e58:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    6e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    6e5e:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    6e62:	a901      	add	r1, sp, #4
    6e64:	f7fa ffd4 	bl	1e10 <flash_area_get_sectors>
    if (rc != 0) {
    6e68:	b908      	cbnz	r0, 6e6e <boot_initialize_area+0x58>
    *out_num_sectors = num_sectors;
    6e6a:	9b01      	ldr	r3, [sp, #4]
    6e6c:	6023      	str	r3, [r4, #0]
}
    6e6e:	b002      	add	sp, #8
    6e70:	bd10      	pop	{r4, pc}
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    6e72:	2202      	movs	r2, #2
    6e74:	e7e0      	b.n	6e38 <boot_initialize_area+0x22>

00006e76 <boot_read_sectors>:
{
    6e76:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    6e78:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
{
    6e7c:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    6e7e:	b1e9      	cbz	r1, 6ebc <boot_read_sectors+0x46>
    6e80:	2901      	cmp	r1, #1
    6e82:	d006      	beq.n	6e92 <boot_read_sectors+0x1c>
    6e84:	21ff      	movs	r1, #255	; 0xff
    6e86:	f7ff ffc6 	bl	6e16 <boot_initialize_area>
    if (rc != 0) {
    6e8a:	b1f0      	cbz	r0, 6eca <boot_read_sectors+0x54>
        return BOOT_EFLASH;
    6e8c:	2501      	movs	r5, #1
}
    6e8e:	4628      	mov	r0, r5
    6e90:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    6e92:	f7ff ffc0 	bl	6e16 <boot_initialize_area>
    if (rc != 0) {
    6e96:	2800      	cmp	r0, #0
    6e98:	d1f8      	bne.n	6e8c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    6e9a:	2108      	movs	r1, #8
    6e9c:	4620      	mov	r0, r4
    6e9e:	f7ff ffba 	bl	6e16 <boot_initialize_area>
    if (rc != 0) {
    6ea2:	4605      	mov	r5, r0
    6ea4:	b998      	cbnz	r0, 6ece <boot_read_sectors+0x58>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    6ea6:	2258      	movs	r2, #88	; 0x58
    6ea8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    6eac:	fb02 4303 	mla	r3, r2, r3, r4
    6eb0:	6a18      	ldr	r0, [r3, #32]
    6eb2:	f001 f8c6 	bl	8042 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    6eb6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    return 0;
    6eba:	e7e8      	b.n	6e8e <boot_read_sectors+0x18>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    6ebc:	2104      	movs	r1, #4
    6ebe:	f7ff ffaa 	bl	6e16 <boot_initialize_area>
    if (rc != 0) {
    6ec2:	2800      	cmp	r0, #0
    6ec4:	d1e2      	bne.n	6e8c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    6ec6:	2102      	movs	r1, #2
    6ec8:	e7e8      	b.n	6e9c <boot_read_sectors+0x26>
    6eca:	21ff      	movs	r1, #255	; 0xff
    6ecc:	e7e6      	b.n	6e9c <boot_read_sectors+0x26>
        return BOOT_EFLASH_SEC;
    6ece:	2509      	movs	r5, #9
    6ed0:	e7dd      	b.n	6e8e <boot_read_sectors+0x18>

00006ed2 <boot_read_image_headers>:
{
    6ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ed6:	4604      	mov	r4, r0
    6ed8:	460d      	mov	r5, r1
    6eda:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    6edc:	f04f 0900 	mov.w	r9, #0
    6ee0:	f04f 082c 	mov.w	r8, #44	; 0x2c
    return &BOOT_IMG(state, slot).hdr;
    6ee4:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    6ee6:	fb08 fa09 	mul.w	sl, r8, r9
    6eea:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    6eee:	4649      	mov	r1, r9
    6ef0:	fb17 a200 	smlabb	r2, r7, r0, sl
    6ef4:	4422      	add	r2, r4
    6ef6:	f7fd faf9 	bl	44ec <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    6efa:	2801      	cmp	r0, #1
    6efc:	d109      	bne.n	6f12 <boot_read_image_headers+0x40>
    6efe:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    6f02:	4633      	mov	r3, r6
    6f04:	fb17 a202 	smlabb	r2, r7, r2, sl
    6f08:	4649      	mov	r1, r9
    6f0a:	4620      	mov	r0, r4
    6f0c:	4422      	add	r2, r4
    6f0e:	f000 f825 	bl	6f5c <boot_read_image_header>
        if (rc != 0) {
    6f12:	b138      	cbz	r0, 6f24 <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    6f14:	f1b9 0f00 	cmp.w	r9, #0
    6f18:	d002      	beq.n	6f20 <boot_read_image_headers+0x4e>
                return 0;
    6f1a:	2d00      	cmp	r5, #0
    6f1c:	bf08      	it	eq
    6f1e:	2000      	moveq	r0, #0
}
    6f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    6f24:	f1b9 0f00 	cmp.w	r9, #0
    6f28:	d1fa      	bne.n	6f20 <boot_read_image_headers+0x4e>
    6f2a:	f04f 0901 	mov.w	r9, #1
    6f2e:	e7da      	b.n	6ee6 <boot_read_image_headers+0x14>

00006f30 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    6f30:	2301      	movs	r3, #1
    6f32:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    6f34:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    6f38:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    6f3a:	2300      	movs	r3, #0
    bs->source = 0;
    6f3c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    6f40:	4770      	bx	lr

00006f42 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    6f42:	7943      	ldrb	r3, [r0, #5]
    6f44:	2b01      	cmp	r3, #1
    6f46:	d107      	bne.n	6f58 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    6f48:	6803      	ldr	r3, [r0, #0]
    6f4a:	2b01      	cmp	r3, #1
    6f4c:	d104      	bne.n	6f58 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    6f4e:	7900      	ldrb	r0, [r0, #4]
    6f50:	1e43      	subs	r3, r0, #1
    6f52:	4258      	negs	r0, r3
    6f54:	4158      	adcs	r0, r3
    6f56:	4770      	bx	lr
    6f58:	2000      	movs	r0, #0
}
    6f5a:	4770      	bx	lr

00006f5c <boot_read_image_header>:
{
    6f5c:	b513      	push	{r0, r1, r4, lr}
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6f5e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    6f62:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    6f64:	f7ff fe70 	bl	6c48 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    6f68:	a901      	add	r1, sp, #4
    6f6a:	b2c0      	uxtb	r0, r0
    6f6c:	f7fa ff28 	bl	1dc0 <flash_area_open>
    if (rc == 0) {
    6f70:	4601      	mov	r1, r0
    6f72:	b968      	cbnz	r0, 6f90 <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    6f74:	4622      	mov	r2, r4
    6f76:	2320      	movs	r3, #32
    6f78:	9801      	ldr	r0, [sp, #4]
    6f7a:	f001 f824 	bl	7fc6 <flash_area_read>
    6f7e:	4604      	mov	r4, r0
        flash_area_close(fap);
    6f80:	9801      	ldr	r0, [sp, #4]
    6f82:	f001 f81f 	bl	7fc4 <flash_area_close>
    if (rc != 0) {
    6f86:	1e20      	subs	r0, r4, #0
    6f88:	bf18      	it	ne
    6f8a:	2001      	movne	r0, #1
}
    6f8c:	b002      	add	sp, #8
    6f8e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6f90:	2001      	movs	r0, #1
    return rc;
    6f92:	e7fb      	b.n	6f8c <boot_read_image_header+0x30>

00006f94 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6f94:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6f96:	6803      	ldr	r3, [r0, #0]
    6f98:	1acd      	subs	r5, r1, r3
    6f9a:	2d00      	cmp	r5, #0
    6f9c:	dc02      	bgt.n	6fa4 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6f9e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    6fa2:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    6fa4:	f993 6000 	ldrsb.w	r6, [r3]
    6fa8:	781c      	ldrb	r4, [r3, #0]
    6faa:	2e00      	cmp	r6, #0
    6fac:	db0a      	blt.n	6fc4 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    6fae:	1c5c      	adds	r4, r3, #1
    6fb0:	6004      	str	r4, [r0, #0]
    6fb2:	781b      	ldrb	r3, [r3, #0]
    6fb4:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    6fb6:	6803      	ldr	r3, [r0, #0]
    6fb8:	1ac9      	subs	r1, r1, r3
    6fba:	6813      	ldr	r3, [r2, #0]
    6fbc:	428b      	cmp	r3, r1
    6fbe:	d8ee      	bhi.n	6f9e <mbedtls_asn1_get_len+0xa>
    return( 0 );
    6fc0:	2000      	movs	r0, #0
    6fc2:	e7ee      	b.n	6fa2 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    6fc4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6fc8:	3c01      	subs	r4, #1
    6fca:	2c03      	cmp	r4, #3
    6fcc:	d82b      	bhi.n	7026 <mbedtls_asn1_get_len+0x92>
    6fce:	e8df f004 	tbb	[pc, r4]
    6fd2:	0a02      	.short	0x0a02
    6fd4:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    6fd6:	2d01      	cmp	r5, #1
    6fd8:	d0e1      	beq.n	6f9e <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    6fda:	785b      	ldrb	r3, [r3, #1]
    6fdc:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6fde:	6803      	ldr	r3, [r0, #0]
    6fe0:	3302      	adds	r3, #2
            (*p) += 5;
    6fe2:	6003      	str	r3, [r0, #0]
            break;
    6fe4:	e7e7      	b.n	6fb6 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    6fe6:	2d02      	cmp	r5, #2
    6fe8:	ddd9      	ble.n	6f9e <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6fea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    6fee:	ba5b      	rev16	r3, r3
    6ff0:	b29b      	uxth	r3, r3
    6ff2:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6ff4:	6803      	ldr	r3, [r0, #0]
    6ff6:	3303      	adds	r3, #3
    6ff8:	e7f3      	b.n	6fe2 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    6ffa:	2d03      	cmp	r5, #3
    6ffc:	ddcf      	ble.n	6f9e <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6ffe:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7000:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7002:	0224      	lsls	r4, r4, #8
    7004:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7006:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    700a:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    700c:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    700e:	6803      	ldr	r3, [r0, #0]
    7010:	3304      	adds	r3, #4
    7012:	e7e6      	b.n	6fe2 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    7014:	2d04      	cmp	r5, #4
    7016:	ddc2      	ble.n	6f9e <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7018:	f8d3 3001 	ldr.w	r3, [r3, #1]
    701c:	ba1b      	rev	r3, r3
    701e:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    7020:	6803      	ldr	r3, [r0, #0]
    7022:	3305      	adds	r3, #5
    7024:	e7dd      	b.n	6fe2 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    7026:	f06f 0063 	mvn.w	r0, #99	; 0x63
    702a:	e7ba      	b.n	6fa2 <mbedtls_asn1_get_len+0xe>

0000702c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    702c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    702e:	6804      	ldr	r4, [r0, #0]
    7030:	1b0e      	subs	r6, r1, r4
    7032:	2e00      	cmp	r6, #0
    7034:	dd07      	ble.n	7046 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    7036:	7826      	ldrb	r6, [r4, #0]
    7038:	429e      	cmp	r6, r3
    703a:	d108      	bne.n	704e <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    703c:	3401      	adds	r4, #1
    703e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7040:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7042:	f7ff bfa7 	b.w	6f94 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7046:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    704a:	bc70      	pop	{r4, r5, r6}
    704c:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    704e:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7052:	e7fa      	b.n	704a <mbedtls_asn1_get_tag+0x1e>

00007054 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    7054:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7056:	2303      	movs	r3, #3
{
    7058:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    705a:	f7ff ffe7 	bl	702c <mbedtls_asn1_get_tag>
    705e:	b918      	cbnz	r0, 7068 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    7060:	6813      	ldr	r3, [r2, #0]
    7062:	b913      	cbnz	r3, 706a <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    7064:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    7068:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    706a:	3b01      	subs	r3, #1
    706c:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    706e:	6823      	ldr	r3, [r4, #0]
    7070:	781a      	ldrb	r2, [r3, #0]
    7072:	2a00      	cmp	r2, #0
    7074:	d1f6      	bne.n	7064 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    7076:	3301      	adds	r3, #1
    7078:	6023      	str	r3, [r4, #0]
    return( 0 );
    707a:	e7f5      	b.n	7068 <mbedtls_asn1_get_bitstring_null+0x14>

0000707c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    707c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7080:	4690      	mov	r8, r2
    7082:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    7084:	aa01      	add	r2, sp, #4
    7086:	2330      	movs	r3, #48	; 0x30
{
    7088:	4605      	mov	r5, r0
    708a:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    708c:	f7ff ffce 	bl	702c <mbedtls_asn1_get_tag>
    7090:	4604      	mov	r4, r0
    7092:	b9f0      	cbnz	r0, 70d2 <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    7094:	682b      	ldr	r3, [r5, #0]
    7096:	1af6      	subs	r6, r6, r3
    7098:	2e00      	cmp	r6, #0
    709a:	dd34      	ble.n	7106 <mbedtls_asn1_get_alg+0x8a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    709c:	4642      	mov	r2, r8
    709e:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    70a0:	4628      	mov	r0, r5
    alg->tag = **p;
    70a2:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
    70a6:	682e      	ldr	r6, [r5, #0]
    70a8:	9b01      	ldr	r3, [sp, #4]
    70aa:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    70ac:	4631      	mov	r1, r6
    70ae:	2306      	movs	r3, #6
    70b0:	f7ff ffbc 	bl	702c <mbedtls_asn1_get_tag>
    70b4:	4604      	mov	r4, r0
    70b6:	b960      	cbnz	r0, 70d2 <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
    70b8:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
    70ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
    70be:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
    70c2:	1899      	adds	r1, r3, r2

    if( *p == end )
    70c4:	42b1      	cmp	r1, r6
    *p += alg->len;
    70c6:	6029      	str	r1, [r5, #0]
    if( *p == end )
    70c8:	d107      	bne.n	70da <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    70ca:	210c      	movs	r1, #12
    70cc:	4638      	mov	r0, r7
    70ce:	f7ff fd1d 	bl	6b0c <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    70d2:	4620      	mov	r0, r4
    70d4:	b002      	add	sp, #8
    70d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
    70da:	5c9b      	ldrb	r3, [r3, r2]
    70dc:	463a      	mov	r2, r7
    70de:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
    70e2:	682b      	ldr	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    70e4:	4631      	mov	r1, r6
    (*p)++;
    70e6:	3301      	adds	r3, #1
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    70e8:	4628      	mov	r0, r5
    (*p)++;
    70ea:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    70ec:	f7ff ff52 	bl	6f94 <mbedtls_asn1_get_len>
    70f0:	b960      	cbnz	r0, 710c <mbedtls_asn1_get_alg+0x90>
    params->p = *p;
    70f2:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    70f4:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    70f6:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    70f8:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    70fa:	42b3      	cmp	r3, r6
    70fc:	bf18      	it	ne
    70fe:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    7102:	602b      	str	r3, [r5, #0]
    if( *p != end )
    7104:	e7e5      	b.n	70d2 <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7106:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    710a:	e7e2      	b.n	70d2 <mbedtls_asn1_get_alg+0x56>
    710c:	4604      	mov	r4, r0
    710e:	e7e0      	b.n	70d2 <mbedtls_asn1_get_alg+0x56>

00007110 <uECC_vli_add>:
{
    7110:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
    7112:	2400      	movs	r4, #0
{
    7114:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
    7116:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
    7118:	b265      	sxtb	r5, r4
    711a:	42ab      	cmp	r3, r5
    711c:	dc00      	bgt.n	7120 <uECC_vli_add+0x10>
}
    711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
    7120:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
    7124:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
    7128:	443d      	add	r5, r7
    712a:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
    712c:	42af      	cmp	r7, r5
    712e:	f000 0001 	and.w	r0, r0, #1
    7132:	bf18      	it	ne
    7134:	2000      	movne	r0, #0
		result[i] = sum;
    7136:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
    713a:	bf88      	it	hi
    713c:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
    7140:	3401      	adds	r4, #1
    7142:	e7e9      	b.n	7118 <uECC_vli_add+0x8>

00007144 <uECC_vli_rshift1>:
	uECC_word_t carry = 0;
    7144:	2300      	movs	r3, #0
	vli += num_words;
    7146:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	while (vli-- > end) {
    714a:	4288      	cmp	r0, r1
    714c:	d300      	bcc.n	7150 <uECC_vli_rshift1+0xc>
}
    714e:	4770      	bx	lr
		uECC_word_t temp = *vli;
    7150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
    7154:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    7158:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
    715a:	07d3      	lsls	r3, r2, #31
    715c:	e7f5      	b.n	714a <uECC_vli_rshift1+0x6>

0000715e <vli_modInv_update>:
{
    715e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
    7160:	6803      	ldr	r3, [r0, #0]
{
    7162:	4605      	mov	r5, r0
	if (!EVEN(uv)) {
    7164:	07db      	lsls	r3, r3, #31
{
    7166:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
    7168:	d404      	bmi.n	7174 <vli_modInv_update+0x16>
}
    716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
    716e:	4611      	mov	r1, r2
    7170:	f7ff bfe8 	b.w	7144 <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
    7174:	4613      	mov	r3, r2
    7176:	460a      	mov	r2, r1
    7178:	4601      	mov	r1, r0
    717a:	f7ff ffc9 	bl	7110 <uECC_vli_add>
    717e:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
    7180:	4621      	mov	r1, r4
    7182:	4628      	mov	r0, r5
    7184:	f7ff ffde 	bl	7144 <uECC_vli_rshift1>
	if (carry) {
    7188:	b146      	cbz	r6, 719c <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
    718a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    718e:	3c01      	subs	r4, #1
    7190:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7198:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    719c:	bd70      	pop	{r4, r5, r6, pc}

0000719e <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
    719e:	f04f 0c00 	mov.w	ip, #0
{
    71a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
    71a6:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
    71a8:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
    71aa:	fa4f f98c 	sxtb.w	r9, ip
    71ae:	454b      	cmp	r3, r9
    71b0:	dc16      	bgt.n	71e0 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
    71b2:	f04f 36ff 	mov.w	r6, #4294967295
    71b6:	f04f 0800 	mov.w	r8, #0
    71ba:	eb06 0643 	add.w	r6, r6, r3, lsl #1
    71be:	9601      	str	r6, [sp, #4]
    71c0:	9f01      	ldr	r7, [sp, #4]
    71c2:	fa53 fe88 	uxtab	lr, r3, r8
    71c6:	fa4f fe8e 	sxtb.w	lr, lr
    71ca:	45be      	cmp	lr, r7
    71cc:	fa5f f688 	uxtb.w	r6, r8
    71d0:	db28      	blt.n	7224 <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
    71d2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    71d6:	f840 4c04 	str.w	r4, [r0, #-4]
}
    71da:	b003      	add	sp, #12
    71dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
    71e0:	f04f 0e00 	mov.w	lr, #0
    71e4:	46f0      	mov	r8, lr
    71e6:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
	uECC_dword_t p = (uECC_dword_t)a * b;
    71ea:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
    71ee:	f85a 6904 	ldr.w	r6, [sl], #-4
	r01 += p;
    71f2:	f04f 0b00 	mov.w	fp, #0
	uECC_dword_t p = (uECC_dword_t)a * b;
    71f6:	fba6 6707 	umull	r6, r7, r6, r7
    71fa:	1936      	adds	r6, r6, r4
    71fc:	416f      	adcs	r7, r5
    71fe:	bf28      	it	cs
    7200:	f04f 0b01 	movcs.w	fp, #1
		for (i = 0; i <= k; ++i) {
    7204:	f10e 0e01 	add.w	lr, lr, #1
	*r0 = (uECC_word_t)r01;
    7208:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
    720a:	fa4f f68e 	sxtb.w	r6, lr
    720e:	454e      	cmp	r6, r9
	*r1 = r01 >> uECC_WORD_BITS;
    7210:	463d      	mov	r5, r7
	*r2 += (r01 < p);
    7212:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
    7214:	dde9      	ble.n	71ea <uECC_vli_mult+0x4c>
		result[k] = r0;
    7216:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
    721a:	4645      	mov	r5, r8
	*r1 = r01 >> uECC_WORD_BITS;
    721c:	463c      	mov	r4, r7
    721e:	f10c 0c01 	add.w	ip, ip, #1
    7222:	e7c2      	b.n	71aa <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
    7224:	46a9      	mov	r9, r5
    7226:	2500      	movs	r5, #0
    7228:	3601      	adds	r6, #1
    722a:	b276      	sxtb	r6, r6
    722c:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
    7230:	b277      	sxtb	r7, r6
    7232:	42bb      	cmp	r3, r7
    7234:	dc05      	bgt.n	7242 <uECC_vli_mult+0xa4>
		result[k] = r0;
    7236:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
    723a:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
    723e:	464c      	mov	r4, r9
    7240:	e7be      	b.n	71c0 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
    7242:	f06f 0703 	mvn.w	r7, #3
    7246:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
    7248:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
    724c:	f85a 7007 	ldr.w	r7, [sl, r7]
    7250:	f04f 0b00 	mov.w	fp, #0
    7254:	fba7 7c0c 	umull	r7, ip, r7, ip
    7258:	193f      	adds	r7, r7, r4
    725a:	eb5c 0c09 	adcs.w	ip, ip, r9
    725e:	bf28      	it	cs
    7260:	f04f 0b01 	movcs.w	fp, #1
	*r1 = r01 >> uECC_WORD_BITS;
    7264:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
    7266:	463c      	mov	r4, r7
	*r2 += (r01 < p);
    7268:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
    726a:	3601      	adds	r6, #1
    726c:	e7e0      	b.n	7230 <uECC_vli_mult+0x92>

0000726e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
    726e:	2300      	movs	r3, #0
{
    7270:	b510      	push	{r4, lr}
		 vli[i] = 0;
    7272:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
    7274:	b25a      	sxtb	r2, r3
    7276:	4291      	cmp	r1, r2
    7278:	dc00      	bgt.n	727c <uECC_vli_clear+0xe>
}
    727a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
    727c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
    7280:	3301      	adds	r3, #1
    7282:	e7f7      	b.n	7274 <uECC_vli_clear+0x6>

00007284 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
    7284:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
    7286:	461a      	mov	r2, r3
{
    7288:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
    728a:	b25c      	sxtb	r4, r3
    728c:	42a1      	cmp	r1, r4
    728e:	dc03      	bgt.n	7298 <uECC_vli_isZero+0x14>
}
    7290:	fab2 f082 	clz	r0, r2
    7294:	0940      	lsrs	r0, r0, #5
    7296:	bd10      	pop	{r4, pc}
		bits |= vli[i];
    7298:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    729c:	3301      	adds	r3, #1
    729e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
    72a0:	e7f3      	b.n	728a <uECC_vli_isZero+0x6>

000072a2 <uECC_vli_testBit>:
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    72a2:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    72a4:	114a      	asrs	r2, r1, #5
    72a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    72aa:	f001 011f 	and.w	r1, r1, #31
    72ae:	408b      	lsls	r3, r1
}
    72b0:	4018      	ands	r0, r3
    72b2:	4770      	bx	lr

000072b4 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    72b4:	1e4b      	subs	r3, r1, #1
{
    72b6:	b510      	push	{r4, lr}
    72b8:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    72ba:	1d04      	adds	r4, r0, #4
    72bc:	061a      	lsls	r2, r3, #24
    72be:	d403      	bmi.n	72c8 <uECC_vli_numBits+0x14>
    72c0:	1e5a      	subs	r2, r3, #1
    72c2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    72c6:	b171      	cbz	r1, 72e6 <uECC_vli_numBits+0x32>
	return (i + 1);
    72c8:	3301      	adds	r3, #1
    72ca:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
    72cc:	b183      	cbz	r3, 72f0 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
    72ce:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    72d2:	3a01      	subs	r2, #1
    72d4:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
    72d8:	2200      	movs	r2, #0
    72da:	b931      	cbnz	r1, 72ea <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    72dc:	3b01      	subs	r3, #1
    72de:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    72e2:	b210      	sxth	r0, r2
}
    72e4:	bd10      	pop	{r4, pc}
    72e6:	4613      	mov	r3, r2
    72e8:	e7e8      	b.n	72bc <uECC_vli_numBits+0x8>
		digit >>= 1;
    72ea:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
    72ec:	3201      	adds	r2, #1
    72ee:	e7f4      	b.n	72da <uECC_vli_numBits+0x26>
		return 0;
    72f0:	4618      	mov	r0, r3
    72f2:	e7f7      	b.n	72e4 <uECC_vli_numBits+0x30>

000072f4 <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
    72f4:	2300      	movs	r3, #0
{
    72f6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
    72f8:	b25c      	sxtb	r4, r3
    72fa:	42a2      	cmp	r2, r4
    72fc:	dc00      	bgt.n	7300 <uECC_vli_set+0xc>
}
    72fe:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
    7300:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    7304:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
    7308:	3301      	adds	r3, #1
    730a:	e7f5      	b.n	72f8 <uECC_vli_set+0x4>

0000730c <uECC_vli_cmp_unsafe>:
{
    730c:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
    730e:	3a01      	subs	r2, #1
    7310:	b252      	sxtb	r2, r2
    7312:	0613      	lsls	r3, r2, #24
    7314:	d501      	bpl.n	731a <uECC_vli_cmp_unsafe+0xe>
	return 0;
    7316:	2000      	movs	r0, #0
}
    7318:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
    731a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    731e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    7322:	429c      	cmp	r4, r3
    7324:	d805      	bhi.n	7332 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
    7326:	f102 32ff 	add.w	r2, r2, #4294967295
    732a:	d2f2      	bcs.n	7312 <uECC_vli_cmp_unsafe+0x6>
			return -1;
    732c:	f04f 30ff 	mov.w	r0, #4294967295
    7330:	e7f2      	b.n	7318 <uECC_vli_cmp_unsafe+0xc>
			return 1;
    7332:	2001      	movs	r0, #1
    7334:	e7f0      	b.n	7318 <uECC_vli_cmp_unsafe+0xc>

00007336 <uECC_vli_equal>:
	uECC_word_t diff = 0;
    7336:	2300      	movs	r3, #0
{
    7338:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
    733a:	3a01      	subs	r2, #1
    733c:	b252      	sxtb	r2, r2
    733e:	0614      	lsls	r4, r2, #24
    7340:	d503      	bpl.n	734a <uECC_vli_equal+0x14>
}
    7342:	1e18      	subs	r0, r3, #0
    7344:	bf18      	it	ne
    7346:	2001      	movne	r0, #1
    7348:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
    734a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    734e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    7352:	3a01      	subs	r2, #1
    7354:	406c      	eors	r4, r5
    7356:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
    7358:	e7f1      	b.n	733e <uECC_vli_equal+0x8>

0000735a <uECC_vli_sub>:
{
    735a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
    735c:	2400      	movs	r4, #0
{
    735e:	4606      	mov	r6, r0
    7360:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
    7362:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
    7364:	b265      	sxtb	r5, r4
    7366:	4565      	cmp	r5, ip
    7368:	db00      	blt.n	736c <uECC_vli_sub+0x12>
}
    736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
    736c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
    7370:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    7374:	1a3d      	subs	r5, r7, r0
    7376:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
    7378:	42af      	cmp	r7, r5
    737a:	f000 0001 	and.w	r0, r0, #1
    737e:	bf18      	it	ne
    7380:	2000      	movne	r0, #0
		result[i] = diff;
    7382:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
    7386:	bf38      	it	cc
    7388:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
    738c:	3401      	adds	r4, #1
    738e:	e7e9      	b.n	7364 <uECC_vli_sub+0xa>

00007390 <uECC_vli_modAdd>:
{
    7390:	b570      	push	{r4, r5, r6, lr}
    7392:	f99d 6010 	ldrsb.w	r6, [sp, #16]
    7396:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
    7398:	4633      	mov	r3, r6
{
    739a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
    739c:	f7ff feb8 	bl	7110 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    73a0:	b930      	cbnz	r0, 73b0 <uECC_vli_modAdd+0x20>
    73a2:	4632      	mov	r2, r6
    73a4:	4621      	mov	r1, r4
    73a6:	4628      	mov	r0, r5
    73a8:	f7ff ffb0 	bl	730c <uECC_vli_cmp_unsafe>
    73ac:	2801      	cmp	r0, #1
    73ae:	d007      	beq.n	73c0 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
    73b0:	4633      	mov	r3, r6
    73b2:	462a      	mov	r2, r5
    73b4:	4621      	mov	r1, r4
    73b6:	4620      	mov	r0, r4
}
    73b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
    73bc:	f7ff bfcd 	b.w	735a <uECC_vli_sub>
}
    73c0:	bd70      	pop	{r4, r5, r6, pc}

000073c2 <uECC_vli_modSub>:
{
    73c2:	b570      	push	{r4, r5, r6, lr}
    73c4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
    73c8:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    73ca:	4633      	mov	r3, r6
{
    73cc:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    73ce:	f7ff ffc4 	bl	735a <uECC_vli_sub>
	if (l_borrow) {
    73d2:	b138      	cbz	r0, 73e4 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
    73d4:	4633      	mov	r3, r6
    73d6:	462a      	mov	r2, r5
    73d8:	4621      	mov	r1, r4
    73da:	4620      	mov	r0, r4
}
    73dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
    73e0:	f7ff be96 	b.w	7110 <uECC_vli_add>
}
    73e4:	bd70      	pop	{r4, r5, r6, pc}

000073e6 <uECC_vli_mmod>:
{
    73e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73ea:	461d      	mov	r5, r3
    73ec:	b0a5      	sub	sp, #148	; 0x94
	uECC_word_t *v[2] = {tmp, product};
    73ee:	ab14      	add	r3, sp, #80	; 0x50
    73f0:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
    73f4:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
    73f6:	4629      	mov	r1, r5
    73f8:	4610      	mov	r0, r2
{
    73fa:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
    73fc:	f7ff ff5a 	bl	72b4 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
    7400:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
    7404:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
    7406:	4621      	mov	r1, r4
    7408:	2c00      	cmp	r4, #0
    740a:	bfb8      	it	lt
    740c:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    7410:	4263      	negs	r3, r4
    7412:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
    7416:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    741a:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
    741e:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    7420:	bf58      	it	pl
    7422:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
    7424:	f7ff ff23 	bl	726e <uECC_vli_clear>
	if (bit_shift > 0) {
    7428:	2e00      	cmp	r6, #0
    742a:	ea4f 0081 	mov.w	r0, r1, lsl #2
    742e:	dd2d      	ble.n	748c <uECC_vli_mmod+0xa6>
	uECC_word_t carry = 0;
    7430:	2200      	movs	r2, #0
    7432:	ab04      	add	r3, sp, #16
    7434:	4418      	add	r0, r3
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    7436:	4613      	mov	r3, r2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
    7438:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    743c:	429d      	cmp	r5, r3
    743e:	d81a      	bhi.n	7476 <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    7440:	2601      	movs	r6, #1
    7442:	ab04      	add	r3, sp, #16
    7444:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7448:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    744a:	1e6f      	subs	r7, r5, #1
    744c:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
    744e:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    7452:	ea4f 0985 	mov.w	r9, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    7456:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
    745a:	2c00      	cmp	r4, #0
    745c:	da53      	bge.n	7506 <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
    745e:	ab24      	add	r3, sp, #144	; 0x90
    7460:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    7464:	462a      	mov	r2, r5
    7466:	f856 1c88 	ldr.w	r1, [r6, #-136]
    746a:	9801      	ldr	r0, [sp, #4]
    746c:	f7ff ff42 	bl	72f4 <uECC_vli_set>
}
    7470:	b025      	add	sp, #148	; 0x94
    7472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
    7476:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    747a:	3301      	adds	r3, #1
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
    747c:	fa0c f106 	lsl.w	r1, ip, r6
    7480:	430a      	orrs	r2, r1
    7482:	f840 2b04 	str.w	r2, [r0], #4
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
    7486:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    748a:	e7d7      	b.n	743c <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
    748c:	ab04      	add	r3, sp, #16
    748e:	462a      	mov	r2, r5
    7490:	4639      	mov	r1, r7
    7492:	4418      	add	r0, r3
    7494:	f7ff ff2e 	bl	72f4 <uECC_vli_set>
    7498:	e7d2      	b.n	7440 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    749a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
    749e:	f10c 0c01 	add.w	ip, ip, #1
    74a2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    74a6:	ab24      	add	r3, sp, #144	; 0x90
    74a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    74ac:	f853 3c80 	ldr.w	r3, [r3, #-128]
    74b0:	440b      	add	r3, r1
    74b2:	1ad3      	subs	r3, r2, r3
    74b4:	bf34      	ite	cc
    74b6:	f04f 0b01 	movcc.w	fp, #1
    74ba:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
    74be:	429a      	cmp	r2, r3
				borrow = (diff > v[index][i]);
    74c0:	bf18      	it	ne
    74c2:	4659      	movne	r1, fp
			v[1 - index][i] = diff;
    74c4:	f85e 2c88 	ldr.w	r2, [lr, #-136]
    74c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
    74cc:	fa4f f08c 	sxtb.w	r0, ip
    74d0:	4540      	cmp	r0, r8
    74d2:	dbe2      	blt.n	749a <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
    74d4:	1a73      	subs	r3, r6, r1
    74d6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
    74d8:	4629      	mov	r1, r5
    74da:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
    74dc:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
    74de:	f7ff fe31 	bl	7144 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    74e2:	f109 0390 	add.w	r3, r9, #144	; 0x90
    74e6:	446b      	add	r3, sp
    74e8:	f853 2c80 	ldr.w	r2, [r3, #-128]
    74ec:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    74f0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    74f2:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    74f6:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    74f8:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    74fc:	3c01      	subs	r4, #1
    74fe:	f7ff fe21 	bl	7144 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
    7502:	b224      	sxth	r4, r4
    7504:	e7a9      	b.n	745a <uECC_vli_mmod+0x74>
    7506:	f04f 0c00 	mov.w	ip, #0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    750a:	ab24      	add	r3, sp, #144	; 0x90
			v[1 - index][i] = diff;
    750c:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
    7510:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    7512:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
    7516:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    751a:	e7d7      	b.n	74cc <uECC_vli_mmod+0xe6>

0000751c <uECC_vli_modMult>:
{
    751c:	b530      	push	{r4, r5, lr}
    751e:	4604      	mov	r4, r0
    7520:	461d      	mov	r5, r3
    7522:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, num_words);
    7524:	4668      	mov	r0, sp
    7526:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
    752a:	f7ff fe38 	bl	719e <uECC_vli_mult>
	uECC_vli_mmod(result, product, mod, num_words);
    752e:	462a      	mov	r2, r5
    7530:	4669      	mov	r1, sp
    7532:	4620      	mov	r0, r4
    7534:	f7ff ff57 	bl	73e6 <uECC_vli_mmod>
}
    7538:	b011      	add	sp, #68	; 0x44
    753a:	bd30      	pop	{r4, r5, pc}

0000753c <uECC_vli_modMult_fast>:
{
    753c:	b530      	push	{r4, r5, lr}
    753e:	4605      	mov	r5, r0
    7540:	461c      	mov	r4, r3
    7542:	b091      	sub	sp, #68	; 0x44
	uECC_vli_mult(product, left, right, curve->num_words);
    7544:	4668      	mov	r0, sp
    7546:	f993 3000 	ldrsb.w	r3, [r3]
    754a:	f7ff fe28 	bl	719e <uECC_vli_mult>
	curve->mmod_fast(result, product);
    754e:	4669      	mov	r1, sp
    7550:	4628      	mov	r0, r5
    7552:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    7556:	4798      	blx	r3
}
    7558:	b011      	add	sp, #68	; 0x44
    755a:	bd30      	pop	{r4, r5, pc}

0000755c <uECC_vli_modSquare_fast>:
{
    755c:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
    755e:	460a      	mov	r2, r1
    7560:	f7ff bfec 	b.w	753c <uECC_vli_modMult_fast>

00007564 <double_jacobian_default>:
{
    7564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
    7568:	f993 6000 	ldrsb.w	r6, [r3]
{
    756c:	4604      	mov	r4, r0
    756e:	4689      	mov	r9, r1
    7570:	b092      	sub	sp, #72	; 0x48
	if (uECC_vli_isZero(Z1, num_words)) {
    7572:	4631      	mov	r1, r6
    7574:	4610      	mov	r0, r2
{
    7576:	4615      	mov	r5, r2
    7578:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
    757a:	f7ff fe83 	bl	7284 <uECC_vli_isZero>
    757e:	2800      	cmp	r0, #0
    7580:	f040 8091 	bne.w	76a6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
    7584:	463a      	mov	r2, r7
    7586:	4649      	mov	r1, r9
    7588:	a802      	add	r0, sp, #8
    758a:	f7ff ffe7 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
    758e:	463b      	mov	r3, r7
    7590:	4621      	mov	r1, r4
    7592:	aa02      	add	r2, sp, #8
    7594:	a80a      	add	r0, sp, #40	; 0x28
    7596:	f7ff ffd1 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
    759a:	a902      	add	r1, sp, #8
    759c:	4608      	mov	r0, r1
    759e:	463a      	mov	r2, r7
    75a0:	f7ff ffdc 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
    75a4:	463b      	mov	r3, r7
    75a6:	462a      	mov	r2, r5
    75a8:	4649      	mov	r1, r9
    75aa:	4648      	mov	r0, r9
    75ac:	f7ff ffc6 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    75b0:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
    75b4:	463a      	mov	r2, r7
    75b6:	4629      	mov	r1, r5
    75b8:	4628      	mov	r0, r5
    75ba:	f7ff ffcf 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    75be:	4643      	mov	r3, r8
    75c0:	462a      	mov	r2, r5
    75c2:	4621      	mov	r1, r4
    75c4:	4620      	mov	r0, r4
    75c6:	9600      	str	r6, [sp, #0]
    75c8:	f7ff fee2 	bl	7390 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
    75cc:	4643      	mov	r3, r8
    75ce:	462a      	mov	r2, r5
    75d0:	4629      	mov	r1, r5
    75d2:	4628      	mov	r0, r5
    75d4:	9600      	str	r6, [sp, #0]
    75d6:	f7ff fedb 	bl	7390 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
    75da:	4643      	mov	r3, r8
    75dc:	462a      	mov	r2, r5
    75de:	4621      	mov	r1, r4
    75e0:	4628      	mov	r0, r5
    75e2:	9600      	str	r6, [sp, #0]
    75e4:	f7ff feed 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
    75e8:	463b      	mov	r3, r7
    75ea:	462a      	mov	r2, r5
    75ec:	4621      	mov	r1, r4
    75ee:	4620      	mov	r0, r4
    75f0:	f7ff ffa4 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
    75f4:	4643      	mov	r3, r8
    75f6:	4622      	mov	r2, r4
    75f8:	4621      	mov	r1, r4
    75fa:	4628      	mov	r0, r5
    75fc:	9600      	str	r6, [sp, #0]
    75fe:	f7ff fec7 	bl	7390 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
    7602:	4643      	mov	r3, r8
    7604:	462a      	mov	r2, r5
    7606:	4621      	mov	r1, r4
    7608:	4620      	mov	r0, r4
    760a:	9600      	str	r6, [sp, #0]
    760c:	f7ff fec0 	bl	7390 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    7610:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
    7612:	07db      	lsls	r3, r3, #31
    7614:	d54a      	bpl.n	76ac <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
    7616:	4633      	mov	r3, r6
    7618:	4642      	mov	r2, r8
    761a:	4621      	mov	r1, r4
    761c:	4620      	mov	r0, r4
    761e:	f7ff fd77 	bl	7110 <uECC_vli_add>
    7622:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
    7624:	4631      	mov	r1, r6
    7626:	4620      	mov	r0, r4
    7628:	f7ff fd8c 	bl	7144 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
    762c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    7630:	3b01      	subs	r3, #1
    7632:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    7636:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
    763a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
    763e:	463a      	mov	r2, r7
    7640:	4621      	mov	r1, r4
    7642:	4628      	mov	r0, r5
    7644:	f7ff ff8a 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
    7648:	4643      	mov	r3, r8
    764a:	4629      	mov	r1, r5
    764c:	4628      	mov	r0, r5
    764e:	aa0a      	add	r2, sp, #40	; 0x28
    7650:	9600      	str	r6, [sp, #0]
    7652:	f7ff feb6 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
    7656:	4643      	mov	r3, r8
    7658:	4629      	mov	r1, r5
    765a:	4628      	mov	r0, r5
    765c:	aa0a      	add	r2, sp, #40	; 0x28
    765e:	9600      	str	r6, [sp, #0]
    7660:	f7ff feaf 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
    7664:	a90a      	add	r1, sp, #40	; 0x28
    7666:	4608      	mov	r0, r1
    7668:	4643      	mov	r3, r8
    766a:	462a      	mov	r2, r5
    766c:	9600      	str	r6, [sp, #0]
    766e:	f7ff fea8 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
    7672:	463b      	mov	r3, r7
    7674:	4621      	mov	r1, r4
    7676:	4620      	mov	r0, r4
    7678:	aa0a      	add	r2, sp, #40	; 0x28
    767a:	f7ff ff5f 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
    767e:	aa02      	add	r2, sp, #8
    7680:	4643      	mov	r3, r8
    7682:	4610      	mov	r0, r2
    7684:	4621      	mov	r1, r4
    7686:	9600      	str	r6, [sp, #0]
    7688:	f7ff fe9b 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
    768c:	4632      	mov	r2, r6
    768e:	4629      	mov	r1, r5
    7690:	4620      	mov	r0, r4
    7692:	f7ff fe2f 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
    7696:	4649      	mov	r1, r9
    7698:	4628      	mov	r0, r5
    769a:	f7ff fe2b 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
    769e:	4648      	mov	r0, r9
    76a0:	a902      	add	r1, sp, #8
    76a2:	f7ff fe27 	bl	72f4 <uECC_vli_set>
}
    76a6:	b012      	add	sp, #72	; 0x48
    76a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
    76ac:	4631      	mov	r1, r6
    76ae:	4620      	mov	r0, r4
    76b0:	f7ff fd48 	bl	7144 <uECC_vli_rshift1>
    76b4:	e7c3      	b.n	763e <double_jacobian_default+0xda>

000076b6 <x_side_default>:
{
    76b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76ba:	4615      	mov	r5, r2
    76bc:	b08a      	sub	sp, #40	; 0x28
    76be:	4604      	mov	r4, r0
    76c0:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
    76c2:	221c      	movs	r2, #28
    76c4:	2100      	movs	r1, #0
    76c6:	a803      	add	r0, sp, #12
    76c8:	f000 fd40 	bl	814c <memset>
    76cc:	2303      	movs	r3, #3
	wordcount_t num_words = curve->num_words;
    76ce:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
    76d2:	462a      	mov	r2, r5
    76d4:	4631      	mov	r1, r6
    76d6:	4620      	mov	r0, r4
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
    76d8:	1d2f      	adds	r7, r5, #4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
    76da:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
    76dc:	f7ff ff3e 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
    76e0:	463b      	mov	r3, r7
    76e2:	4621      	mov	r1, r4
    76e4:	4620      	mov	r0, r4
    76e6:	aa02      	add	r2, sp, #8
    76e8:	f8cd 8000 	str.w	r8, [sp]
    76ec:	f7ff fe69 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
    76f0:	462b      	mov	r3, r5
    76f2:	4632      	mov	r2, r6
    76f4:	4621      	mov	r1, r4
    76f6:	4620      	mov	r0, r4
    76f8:	f7ff ff20 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
    76fc:	463b      	mov	r3, r7
    76fe:	4621      	mov	r1, r4
    7700:	4620      	mov	r0, r4
    7702:	f8cd 8000 	str.w	r8, [sp]
    7706:	f105 0284 	add.w	r2, r5, #132	; 0x84
    770a:	f7ff fe41 	bl	7390 <uECC_vli_modAdd>
}
    770e:	b00a      	add	sp, #40	; 0x28
    7710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007714 <uECC_vli_modInv>:
{
    7714:	b5f0      	push	{r4, r5, r6, r7, lr}
    7716:	460f      	mov	r7, r1
    7718:	4606      	mov	r6, r0
    771a:	b0a1      	sub	sp, #132	; 0x84
	if (uECC_vli_isZero(input, num_words)) {
    771c:	4619      	mov	r1, r3
    771e:	4638      	mov	r0, r7
{
    7720:	4615      	mov	r5, r2
    7722:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
    7724:	f7ff fdae 	bl	7284 <uECC_vli_isZero>
    7728:	b128      	cbz	r0, 7736 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
    772a:	4630      	mov	r0, r6
}
    772c:	b021      	add	sp, #132	; 0x84
    772e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
    7732:	f7ff bd9c 	b.w	726e <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
    7736:	4622      	mov	r2, r4
    7738:	4639      	mov	r1, r7
    773a:	4668      	mov	r0, sp
    773c:	f7ff fdda 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
    7740:	4629      	mov	r1, r5
    7742:	a808      	add	r0, sp, #32
    7744:	f7ff fdd6 	bl	72f4 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
    7748:	a810      	add	r0, sp, #64	; 0x40
    774a:	4621      	mov	r1, r4
    774c:	f7ff fd8f 	bl	726e <uECC_vli_clear>
	u[0] = 1;
    7750:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
    7752:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
    7754:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
    7756:	f7ff fd8a 	bl	726e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
    775a:	4622      	mov	r2, r4
    775c:	4668      	mov	r0, sp
    775e:	a908      	add	r1, sp, #32
    7760:	f7ff fdd4 	bl	730c <uECC_vli_cmp_unsafe>
    7764:	b930      	cbnz	r0, 7774 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
    7766:	4622      	mov	r2, r4
    7768:	4630      	mov	r0, r6
    776a:	a910      	add	r1, sp, #64	; 0x40
    776c:	f7ff fdc2 	bl	72f4 <uECC_vli_set>
}
    7770:	b021      	add	sp, #132	; 0x84
    7772:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
    7774:	9b00      	ldr	r3, [sp, #0]
    7776:	07da      	lsls	r2, r3, #31
    7778:	d409      	bmi.n	778e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
    777a:	4621      	mov	r1, r4
    777c:	4668      	mov	r0, sp
    777e:	f7ff fce1 	bl	7144 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
    7782:	4622      	mov	r2, r4
    7784:	4629      	mov	r1, r5
    7786:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
    7788:	f7ff fce9 	bl	715e <vli_modInv_update>
    778c:	e7e5      	b.n	775a <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
    778e:	9b08      	ldr	r3, [sp, #32]
    7790:	07db      	lsls	r3, r3, #31
    7792:	d407      	bmi.n	77a4 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
    7794:	4621      	mov	r1, r4
    7796:	a808      	add	r0, sp, #32
    7798:	f7ff fcd4 	bl	7144 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
    779c:	4622      	mov	r2, r4
    779e:	4629      	mov	r1, r5
    77a0:	a818      	add	r0, sp, #96	; 0x60
    77a2:	e7f1      	b.n	7788 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
    77a4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
    77a6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
    77a8:	dd1c      	ble.n	77e4 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
    77aa:	aa08      	add	r2, sp, #32
    77ac:	4669      	mov	r1, sp
    77ae:	4668      	mov	r0, sp
    77b0:	f7ff fdd3 	bl	735a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
    77b4:	4621      	mov	r1, r4
    77b6:	4668      	mov	r0, sp
    77b8:	f7ff fcc4 	bl	7144 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
    77bc:	4622      	mov	r2, r4
    77be:	a918      	add	r1, sp, #96	; 0x60
    77c0:	a810      	add	r0, sp, #64	; 0x40
    77c2:	f7ff fda3 	bl	730c <uECC_vli_cmp_unsafe>
    77c6:	2800      	cmp	r0, #0
    77c8:	da05      	bge.n	77d6 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
    77ca:	a910      	add	r1, sp, #64	; 0x40
    77cc:	4623      	mov	r3, r4
    77ce:	462a      	mov	r2, r5
    77d0:	4608      	mov	r0, r1
    77d2:	f7ff fc9d 	bl	7110 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
    77d6:	a910      	add	r1, sp, #64	; 0x40
    77d8:	4623      	mov	r3, r4
    77da:	4608      	mov	r0, r1
    77dc:	aa18      	add	r2, sp, #96	; 0x60
    77de:	f7ff fdbc 	bl	735a <uECC_vli_sub>
    77e2:	e7ce      	b.n	7782 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
    77e4:	466a      	mov	r2, sp
    77e6:	a808      	add	r0, sp, #32
    77e8:	f7ff fdb7 	bl	735a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
    77ec:	4621      	mov	r1, r4
    77ee:	a808      	add	r0, sp, #32
    77f0:	f7ff fca8 	bl	7144 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
    77f4:	4622      	mov	r2, r4
    77f6:	a910      	add	r1, sp, #64	; 0x40
    77f8:	a818      	add	r0, sp, #96	; 0x60
    77fa:	f7ff fd87 	bl	730c <uECC_vli_cmp_unsafe>
    77fe:	2800      	cmp	r0, #0
    7800:	da05      	bge.n	780e <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
    7802:	a918      	add	r1, sp, #96	; 0x60
    7804:	4623      	mov	r3, r4
    7806:	462a      	mov	r2, r5
    7808:	4608      	mov	r0, r1
    780a:	f7ff fc81 	bl	7110 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
    780e:	a918      	add	r1, sp, #96	; 0x60
    7810:	4623      	mov	r3, r4
    7812:	4608      	mov	r0, r1
    7814:	aa10      	add	r2, sp, #64	; 0x40
    7816:	f7ff fda0 	bl	735a <uECC_vli_sub>
    781a:	e7bf      	b.n	779c <uECC_vli_modInv+0x88>

0000781c <apply_z>:
	return uECC_vli_isZero(point, curve->num_words * 2);
}

void apply_z(uECC_word_t * X1, uECC_word_t * Y1, const uECC_word_t * const Z,
	     uECC_Curve curve)
{
    781c:	b5f0      	push	{r4, r5, r6, r7, lr}
    781e:	4615      	mov	r5, r2
    7820:	461c      	mov	r4, r3
    7822:	4607      	mov	r7, r0
    7824:	460e      	mov	r6, r1
    7826:	b089      	sub	sp, #36	; 0x24
	uECC_word_t t1[NUM_ECC_WORDS];

	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
    7828:	461a      	mov	r2, r3
    782a:	4629      	mov	r1, r5
    782c:	4668      	mov	r0, sp
    782e:	f7ff fe95 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
    7832:	4623      	mov	r3, r4
    7834:	466a      	mov	r2, sp
    7836:	4639      	mov	r1, r7
    7838:	4638      	mov	r0, r7
    783a:	f7ff fe7f 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
    783e:	4623      	mov	r3, r4
    7840:	462a      	mov	r2, r5
    7842:	4669      	mov	r1, sp
    7844:	4668      	mov	r0, sp
    7846:	f7ff fe79 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
    784a:	4623      	mov	r3, r4
    784c:	466a      	mov	r2, sp
    784e:	4631      	mov	r1, r6
    7850:	4630      	mov	r0, r6
    7852:	f7ff fe73 	bl	753c <uECC_vli_modMult_fast>
}
    7856:	b009      	add	sp, #36	; 0x24
    7858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000785a <XYcZ_add>:
}

void XYcZ_add(uECC_word_t * X1, uECC_word_t * Y1,
	      uECC_word_t * X2, uECC_word_t * Y2,
	      uECC_Curve curve)
{
    785a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    785e:	b08a      	sub	sp, #40	; 0x28
    7860:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    7864:	4614      	mov	r4, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
    7866:	4655      	mov	r5, sl
{
    7868:	4680      	mov	r8, r0
    786a:	461f      	mov	r7, r3
    786c:	4689      	mov	r9, r1
	wordcount_t num_words = curve->num_words;
    786e:	f915 6b04 	ldrsb.w	r6, [r5], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    7872:	4602      	mov	r2, r0
    7874:	462b      	mov	r3, r5
    7876:	4621      	mov	r1, r4
    7878:	a802      	add	r0, sp, #8
    787a:	9600      	str	r6, [sp, #0]
    787c:	f7ff fda1 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
    7880:	a902      	add	r1, sp, #8
    7882:	4652      	mov	r2, sl
    7884:	4608      	mov	r0, r1
    7886:	f7ff fe69 	bl	755c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
    788a:	4653      	mov	r3, sl
    788c:	4641      	mov	r1, r8
    788e:	4640      	mov	r0, r8
    7890:	aa02      	add	r2, sp, #8
    7892:	f7ff fe53 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
    7896:	4653      	mov	r3, sl
    7898:	4621      	mov	r1, r4
    789a:	4620      	mov	r0, r4
    789c:	aa02      	add	r2, sp, #8
    789e:	f7ff fe4d 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
    78a2:	462b      	mov	r3, r5
    78a4:	464a      	mov	r2, r9
    78a6:	4639      	mov	r1, r7
    78a8:	4638      	mov	r0, r7
    78aa:	9600      	str	r6, [sp, #0]
    78ac:	f7ff fd89 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
    78b0:	4652      	mov	r2, sl
    78b2:	4639      	mov	r1, r7
    78b4:	a802      	add	r0, sp, #8
    78b6:	f7ff fe51 	bl	755c <uECC_vli_modSquare_fast>

	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
    78ba:	a902      	add	r1, sp, #8
    78bc:	462b      	mov	r3, r5
    78be:	4642      	mov	r2, r8
    78c0:	4608      	mov	r0, r1
    78c2:	9600      	str	r6, [sp, #0]
    78c4:	f7ff fd7d 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
    78c8:	a902      	add	r1, sp, #8
    78ca:	462b      	mov	r3, r5
    78cc:	4622      	mov	r2, r4
    78ce:	4608      	mov	r0, r1
    78d0:	9600      	str	r6, [sp, #0]
    78d2:	f7ff fd76 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
    78d6:	462b      	mov	r3, r5
    78d8:	4642      	mov	r2, r8
    78da:	4621      	mov	r1, r4
    78dc:	4620      	mov	r0, r4
    78de:	9600      	str	r6, [sp, #0]
    78e0:	f7ff fd6f 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
    78e4:	4653      	mov	r3, sl
    78e6:	4622      	mov	r2, r4
    78e8:	4649      	mov	r1, r9
    78ea:	4648      	mov	r0, r9
    78ec:	f7ff fe26 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
    78f0:	462b      	mov	r3, r5
    78f2:	4641      	mov	r1, r8
    78f4:	4620      	mov	r0, r4
    78f6:	aa02      	add	r2, sp, #8
    78f8:	9600      	str	r6, [sp, #0]
    78fa:	f7ff fd62 	bl	73c2 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
    78fe:	4653      	mov	r3, sl
    7900:	4622      	mov	r2, r4
    7902:	4639      	mov	r1, r7
    7904:	4638      	mov	r0, r7
    7906:	f7ff fe19 	bl	753c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
    790a:	462b      	mov	r3, r5
    790c:	464a      	mov	r2, r9
    790e:	4639      	mov	r1, r7
    7910:	4638      	mov	r0, r7
    7912:	9600      	str	r6, [sp, #0]
    7914:	f7ff fd55 	bl	73c2 <uECC_vli_modSub>

	uECC_vli_set(X2, t5, num_words);
    7918:	4632      	mov	r2, r6
    791a:	4620      	mov	r0, r4
    791c:	a902      	add	r1, sp, #8
    791e:	f7ff fce9 	bl	72f4 <uECC_vli_set>
}
    7922:	b00a      	add	sp, #40	; 0x28
    7924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007928 <uECC_vli_bytesToNative>:
}

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792a:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    792c:	1cd1      	adds	r1, r2, #3
    792e:	bf48      	it	mi
    7930:	1d91      	addmi	r1, r2, #6
{
    7932:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    7934:	f341 0187 	sbfx	r1, r1, #2, #8
    7938:	f7ff fc99 	bl	726e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
    793c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
    793e:	1e67      	subs	r7, r4, #1
    7940:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
    7942:	42a2      	cmp	r2, r4
    7944:	f105 0501 	add.w	r5, r5, #1
    7948:	db00      	blt.n	794c <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
    794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
    794c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
    794e:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    7952:	5cb2      	ldrb	r2, [r6, r2]
    7954:	f003 0303 	and.w	r3, r3, #3
    7958:	00db      	lsls	r3, r3, #3
    795a:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
    795c:	5843      	ldr	r3, [r0, r1]
    795e:	4313      	orrs	r3, r2
    7960:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
    7962:	e7ed      	b.n	7940 <uECC_vli_bytesToNative+0x18>

00007964 <bits2int>:
static uECC_RNG_Function g_rng_function = 0;
#endif

static void bits2int(uECC_word_t *native, const uint8_t *bits,
		     unsigned bits_size, uECC_Curve curve)
{
    7964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7968:	461f      	mov	r7, r3
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    796a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
    796e:	4606      	mov	r6, r0
	unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    7970:	f113 041f 	adds.w	r4, r3, #31
    7974:	bf48      	it	mi
    7976:	f103 043e 	addmi.w	r4, r3, #62	; 0x3e
    797a:	1165      	asrs	r5, r4, #5
	unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    797c:	1ddc      	adds	r4, r3, #7
    797e:	bf48      	it	mi
    7980:	f103 040e 	addmi.w	r4, r3, #14
    7984:	10e4      	asrs	r4, r4, #3
    7986:	4294      	cmp	r4, r2
    7988:	bf28      	it	cs
    798a:	4614      	movcs	r4, r2
{
    798c:	4688      	mov	r8, r1

	if (bits_size > num_n_bytes) {
		bits_size = num_n_bytes;
	}

	uECC_vli_clear(native, num_n_words);
    798e:	fa4f f985 	sxtb.w	r9, r5
    7992:	4649      	mov	r1, r9
    7994:	f7ff fc6b 	bl	726e <uECC_vli_clear>
	uECC_vli_bytesToNative(native, bits, bits_size);
    7998:	4622      	mov	r2, r4
    799a:	4641      	mov	r1, r8
    799c:	4630      	mov	r0, r6
    799e:	f7ff ffc3 	bl	7928 <uECC_vli_bytesToNative>
	if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
    79a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    79a6:	00e3      	lsls	r3, r4, #3
    79a8:	ebb2 0fc4 	cmp.w	r2, r4, lsl #3
    79ac:	d220      	bcs.n	79f0 <bits2int+0x8c>
		return;
	}
	shift = bits_size * 8 - curve->num_n_bits;
	carry = 0;
    79ae:	2100      	movs	r1, #0
	shift = bits_size * 8 - curve->num_n_bits;
    79b0:	1a9b      	subs	r3, r3, r2
	ptr = native + num_n_words;
    79b2:	eb06 0485 	add.w	r4, r6, r5, lsl #2
	while (ptr-- > native) {
		uECC_word_t temp = *ptr;
		*ptr = (temp >> shift) | carry;
		carry = temp << (uECC_WORD_BITS - shift);
    79b6:	f1c3 0520 	rsb	r5, r3, #32
	while (ptr-- > native) {
    79ba:	42a6      	cmp	r6, r4
    79bc:	d30f      	bcc.n	79de <bits2int+0x7a>
	}

	/* Reduce mod curve_n */
	if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
    79be:	3724      	adds	r7, #36	; 0x24
    79c0:	464a      	mov	r2, r9
    79c2:	4631      	mov	r1, r6
    79c4:	4638      	mov	r0, r7
    79c6:	f7ff fca1 	bl	730c <uECC_vli_cmp_unsafe>
    79ca:	2801      	cmp	r0, #1
    79cc:	d010      	beq.n	79f0 <bits2int+0x8c>
		uECC_vli_sub(native, native, curve->n, num_n_words);
    79ce:	464b      	mov	r3, r9
    79d0:	463a      	mov	r2, r7
    79d2:	4631      	mov	r1, r6
    79d4:	4630      	mov	r0, r6
	}
}
    79d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uECC_vli_sub(native, native, curve->n, num_n_words);
    79da:	f7ff bcbe 	b.w	735a <uECC_vli_sub>
		uECC_word_t temp = *ptr;
    79de:	f854 0d04 	ldr.w	r0, [r4, #-4]!
		*ptr = (temp >> shift) | carry;
    79e2:	fa20 f203 	lsr.w	r2, r0, r3
    79e6:	430a      	orrs	r2, r1
    79e8:	6022      	str	r2, [r4, #0]
		carry = temp << (uECC_WORD_BITS - shift);
    79ea:	fa00 f105 	lsl.w	r1, r0, r5
    79ee:	e7e4      	b.n	79ba <bits2int+0x56>
}
    79f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000079f4 <uECC_verify>:
}

int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,
		unsigned hash_size, const uint8_t *signature,
	        uECC_Curve curve)
{
    79f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79f8:	b0fd      	sub	sp, #500	; 0x1f4
    79fa:	9d86      	ldr	r5, [sp, #536]	; 0x218
    79fc:	461f      	mov	r7, r3
	bitcount_t i;

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t r[NUM_ECC_WORDS], s[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    79fe:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
{
    7a02:	4681      	mov	r9, r0
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    7a04:	f113 061f 	adds.w	r6, r3, #31
    7a08:	bf48      	it	mi
    7a0a:	f103 063e 	addmi.w	r6, r3, #62	; 0x3e

	rx[num_n_words - 1] = 0;
    7a0e:	2300      	movs	r3, #0
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    7a10:	f346 1647 	sbfx	r6, r6, #5, #8
{
    7a14:	9207      	str	r2, [sp, #28]
	rx[num_n_words - 1] = 0;
    7a16:	f106 3bff 	add.w	fp, r6, #4294967295
	r[num_n_words - 1] = 0;
    7a1a:	aa7c      	add	r2, sp, #496	; 0x1f0
	wordcount_t num_words = curve->num_words;
    7a1c:	f995 4000 	ldrsb.w	r4, [r5]
	r[num_n_words - 1] = 0;
    7a20:	eb02 028b 	add.w	r2, r2, fp, lsl #2
	rx[num_n_words - 1] = 0;
    7a24:	f10d 0890 	add.w	r8, sp, #144	; 0x90
	r[num_n_words - 1] = 0;
    7a28:	f842 3cc0 	str.w	r3, [r2, #-192]
	s[num_n_words - 1] = 0;
    7a2c:	f842 3ca0 	str.w	r3, [r2, #-160]
{
    7a30:	9104      	str	r1, [sp, #16]

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    7a32:	f995 2001 	ldrsb.w	r2, [r5, #1]
    7a36:	4601      	mov	r1, r0
	rx[num_n_words - 1] = 0;
    7a38:	f848 302b 	str.w	r3, [r8, fp, lsl #2]
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    7a3c:	a86c      	add	r0, sp, #432	; 0x1b0
    7a3e:	f7ff ff73 	bl	7928 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
    7a42:	00a3      	lsls	r3, r4, #2
    7a44:	f995 2001 	ldrsb.w	r2, [r5, #1]
    7a48:	9306      	str	r3, [sp, #24]
    7a4a:	ab6c      	add	r3, sp, #432	; 0x1b0
    7a4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7a50:	4618      	mov	r0, r3
    7a52:	eb09 0102 	add.w	r1, r9, r2
    7a56:	9303      	str	r3, [sp, #12]
    7a58:	f7ff ff66 	bl	7928 <uECC_vli_bytesToNative>
			       curve->num_bytes);
	uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    7a5c:	4639      	mov	r1, r7
    7a5e:	f995 2001 	ldrsb.w	r2, [r5, #1]
    7a62:	a84c      	add	r0, sp, #304	; 0x130
    7a64:	f7ff ff60 	bl	7928 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
    7a68:	f995 2001 	ldrsb.w	r2, [r5, #1]
    7a6c:	a854      	add	r0, sp, #336	; 0x150
    7a6e:	18b9      	adds	r1, r7, r2
    7a70:	f7ff ff5a 	bl	7928 <uECC_vli_bytesToNative>

	/* r, s must not be 0. */
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    7a74:	4621      	mov	r1, r4
    7a76:	a84c      	add	r0, sp, #304	; 0x130
    7a78:	f7ff fc04 	bl	7284 <uECC_vli_isZero>
    7a7c:	b118      	cbz	r0, 7a86 <uECC_verify+0x92>
		return 0;
    7a7e:	2000      	movs	r0, #0
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
	}

	/* Accept only if v == r. */
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
}
    7a80:	b07d      	add	sp, #500	; 0x1f4
    7a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    7a86:	4621      	mov	r1, r4
    7a88:	a854      	add	r0, sp, #336	; 0x150
    7a8a:	f7ff fbfb 	bl	7284 <uECC_vli_isZero>
    7a8e:	9002      	str	r0, [sp, #8]
    7a90:	2800      	cmp	r0, #0
    7a92:	d1f4      	bne.n	7a7e <uECC_verify+0x8a>
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    7a94:	f105 0a24 	add.w	sl, r5, #36	; 0x24
    7a98:	4632      	mov	r2, r6
    7a9a:	4650      	mov	r0, sl
    7a9c:	a94c      	add	r1, sp, #304	; 0x130
    7a9e:	f7ff fc35 	bl	730c <uECC_vli_cmp_unsafe>
    7aa2:	2801      	cmp	r0, #1
    7aa4:	d1eb      	bne.n	7a7e <uECC_verify+0x8a>
	    uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
    7aa6:	4632      	mov	r2, r6
    7aa8:	4650      	mov	r0, sl
    7aaa:	a954      	add	r1, sp, #336	; 0x150
    7aac:	f7ff fc2e 	bl	730c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    7ab0:	2801      	cmp	r0, #1
	    uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
    7ab2:	9005      	str	r0, [sp, #20]
	if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    7ab4:	d1e3      	bne.n	7a7e <uECC_verify+0x8a>
	uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
    7ab6:	4633      	mov	r3, r6
    7ab8:	4652      	mov	r2, sl
    7aba:	a954      	add	r1, sp, #336	; 0x150
    7abc:	a81c      	add	r0, sp, #112	; 0x70
    7abe:	f7ff fe29 	bl	7714 <uECC_vli_modInv>
	u1[num_n_words - 1] = 0;
    7ac2:	9b02      	ldr	r3, [sp, #8]
    7ac4:	af0c      	add	r7, sp, #48	; 0x30
    7ac6:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
	bits2int(u1, message_hash, hash_size, curve);
    7aca:	4638      	mov	r0, r7
    7acc:	462b      	mov	r3, r5
    7ace:	9a07      	ldr	r2, [sp, #28]
    7ad0:	9904      	ldr	r1, [sp, #16]
    7ad2:	f7ff ff47 	bl	7964 <bits2int>
	uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
    7ad6:	4639      	mov	r1, r7
    7ad8:	4638      	mov	r0, r7
    7ada:	4653      	mov	r3, sl
    7adc:	aa1c      	add	r2, sp, #112	; 0x70
    7ade:	9600      	str	r6, [sp, #0]
    7ae0:	f7ff fd1c 	bl	751c <uECC_vli_modMult>
	uECC_vli_set(sum, _public, num_words);
    7ae4:	f50d 79b8 	add.w	r9, sp, #368	; 0x170
	uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
    7ae8:	4653      	mov	r3, sl
    7aea:	aa1c      	add	r2, sp, #112	; 0x70
    7aec:	a94c      	add	r1, sp, #304	; 0x130
    7aee:	a814      	add	r0, sp, #80	; 0x50
    7af0:	9600      	str	r6, [sp, #0]
    7af2:	f7ff fd13 	bl	751c <uECC_vli_modMult>
	uECC_vli_set(sum, _public, num_words);
    7af6:	4648      	mov	r0, r9
    7af8:	4622      	mov	r2, r4
    7afa:	a96c      	add	r1, sp, #432	; 0x1b0
    7afc:	f7ff fbfa 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(sum + num_words, _public + num_words, num_words);
    7b00:	00a3      	lsls	r3, r4, #2
    7b02:	eb09 0b03 	add.w	fp, r9, r3
    7b06:	4658      	mov	r0, fp
    7b08:	4622      	mov	r2, r4
    7b0a:	9903      	ldr	r1, [sp, #12]
    7b0c:	f7ff fbf2 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(tx, curve->G, num_words);
    7b10:	f105 0344 	add.w	r3, r5, #68	; 0x44
    7b14:	4619      	mov	r1, r3
    7b16:	4622      	mov	r2, r4
    7b18:	a834      	add	r0, sp, #208	; 0xd0
    7b1a:	9303      	str	r3, [sp, #12]
    7b1c:	f7ff fbea 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(ty, curve->G + num_words, num_words);
    7b20:	9b03      	ldr	r3, [sp, #12]
    7b22:	00a1      	lsls	r1, r4, #2
    7b24:	1859      	adds	r1, r3, r1
    7b26:	4622      	mov	r2, r4
    7b28:	a83c      	add	r0, sp, #240	; 0xf0
    7b2a:	f7ff fbe3 	bl	72f4 <uECC_vli_set>
	uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    7b2e:	4649      	mov	r1, r9
    7b30:	1d2b      	adds	r3, r5, #4
    7b32:	aa34      	add	r2, sp, #208	; 0xd0
    7b34:	a81c      	add	r0, sp, #112	; 0x70
    7b36:	9400      	str	r4, [sp, #0]
    7b38:	9304      	str	r3, [sp, #16]
    7b3a:	f7ff fc42 	bl	73c2 <uECC_vli_modSub>
	XYcZ_add(tx, ty, sum, sum + num_words, curve);
    7b3e:	465b      	mov	r3, fp
    7b40:	464a      	mov	r2, r9
    7b42:	a93c      	add	r1, sp, #240	; 0xf0
    7b44:	a834      	add	r0, sp, #208	; 0xd0
    7b46:	9500      	str	r5, [sp, #0]
    7b48:	f7ff fe87 	bl	785a <XYcZ_add>
	uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
    7b4c:	a91c      	add	r1, sp, #112	; 0x70
    7b4e:	4608      	mov	r0, r1
    7b50:	4623      	mov	r3, r4
    7b52:	1d2a      	adds	r2, r5, #4
    7b54:	f7ff fdde 	bl	7714 <uECC_vli_modInv>
	apply_z(sum, sum + num_words, z, curve);
    7b58:	aa1c      	add	r2, sp, #112	; 0x70
    7b5a:	4659      	mov	r1, fp
    7b5c:	4648      	mov	r0, r9
    7b5e:	462b      	mov	r3, r5
    7b60:	f7ff fe5c 	bl	781c <apply_z>
	points[0] = 0;
    7b64:	9b02      	ldr	r3, [sp, #8]
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
    7b66:	4631      	mov	r1, r6
	points[0] = 0;
    7b68:	9308      	str	r3, [sp, #32]
	points[1] = curve->G;
    7b6a:	9b03      	ldr	r3, [sp, #12]
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
    7b6c:	4638      	mov	r0, r7
	points[1] = curve->G;
    7b6e:	9309      	str	r3, [sp, #36]	; 0x24
	points[2] = _public;
    7b70:	ab6c      	add	r3, sp, #432	; 0x1b0
	points[3] = sum;
    7b72:	e9cd 390a 	strd	r3, r9, [sp, #40]	; 0x28
	num_bits = smax(uECC_vli_numBits(u1, num_n_words),
    7b76:	f7ff fb9d 	bl	72b4 <uECC_vli_numBits>
    7b7a:	4631      	mov	r1, r6
    7b7c:	4681      	mov	r9, r0
    7b7e:	a814      	add	r0, sp, #80	; 0x50
    7b80:	f7ff fb98 	bl	72b4 <uECC_vli_numBits>
	return (a > b ? a : b);
    7b84:	4581      	cmp	r9, r0
    7b86:	bfb8      	it	lt
    7b88:	4681      	movlt	r9, r0
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    7b8a:	fa1f f989 	uxth.w	r9, r9
    7b8e:	f109 31ff 	add.w	r1, r9, #4294967295
    7b92:	b209      	sxth	r1, r1
    7b94:	4638      	mov	r0, r7
    7b96:	9102      	str	r1, [sp, #8]
    7b98:	f7ff fb83 	bl	72a2 <uECC_vli_testBit>
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    7b9c:	9902      	ldr	r1, [sp, #8]
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    7b9e:	4607      	mov	r7, r0
                       ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    7ba0:	a814      	add	r0, sp, #80	; 0x50
    7ba2:	f7ff fb7e 	bl	72a2 <uECC_vli_testBit>
    7ba6:	3800      	subs	r0, #0
    7ba8:	bf18      	it	ne
    7baa:	2001      	movne	r0, #1
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    7bac:	3f00      	subs	r7, #0
    7bae:	bf18      	it	ne
    7bb0:	2701      	movne	r7, #1
	points[0] = 0;
    7bb2:	f10d 0b20 	add.w	fp, sp, #32
	point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    7bb6:	ea47 0740 	orr.w	r7, r7, r0, lsl #1
    7bba:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
	uECC_vli_set(rx, point, num_words);
    7bbe:	4622      	mov	r2, r4
    7bc0:	4639      	mov	r1, r7
    7bc2:	4640      	mov	r0, r8
    7bc4:	f7ff fb96 	bl	72f4 <uECC_vli_set>
	uECC_vli_set(ry, point + num_words, num_words);
    7bc8:	00a3      	lsls	r3, r4, #2
    7bca:	18f9      	adds	r1, r7, r3
    7bcc:	4622      	mov	r2, r4
    7bce:	a82c      	add	r0, sp, #176	; 0xb0
    7bd0:	f7ff fb90 	bl	72f4 <uECC_vli_set>
	uECC_vli_clear(z, num_words);
    7bd4:	4621      	mov	r1, r4
    7bd6:	a81c      	add	r0, sp, #112	; 0x70
    7bd8:	f7ff fb49 	bl	726e <uECC_vli_clear>
	z[0] = 1;
    7bdc:	9b05      	ldr	r3, [sp, #20]
	for (i = num_bits - 2; i >= 0; --i) {
    7bde:	f1a9 0902 	sub.w	r9, r9, #2
	z[0] = 1;
    7be2:	931c      	str	r3, [sp, #112]	; 0x70
	for (i = num_bits - 2; i >= 0; --i) {
    7be4:	fa0f f989 	sxth.w	r9, r9
    7be8:	f1b9 0f00 	cmp.w	r9, #0
    7bec:	da21      	bge.n	7c32 <uECC_verify+0x23e>
	uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
    7bee:	a91c      	add	r1, sp, #112	; 0x70
    7bf0:	4608      	mov	r0, r1
    7bf2:	4623      	mov	r3, r4
    7bf4:	9a04      	ldr	r2, [sp, #16]
    7bf6:	f7ff fd8d 	bl	7714 <uECC_vli_modInv>
	apply_z(rx, ry, z, curve);
    7bfa:	462b      	mov	r3, r5
    7bfc:	4640      	mov	r0, r8
    7bfe:	aa1c      	add	r2, sp, #112	; 0x70
    7c00:	a92c      	add	r1, sp, #176	; 0xb0
    7c02:	f7ff fe0b 	bl	781c <apply_z>
	if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
    7c06:	4632      	mov	r2, r6
    7c08:	4641      	mov	r1, r8
    7c0a:	4650      	mov	r0, sl
    7c0c:	f7ff fb7e 	bl	730c <uECC_vli_cmp_unsafe>
    7c10:	2801      	cmp	r0, #1
    7c12:	d005      	beq.n	7c20 <uECC_verify+0x22c>
		uECC_vli_sub(rx, rx, curve->n, num_n_words);
    7c14:	4633      	mov	r3, r6
    7c16:	4652      	mov	r2, sl
    7c18:	4641      	mov	r1, r8
    7c1a:	4640      	mov	r0, r8
    7c1c:	f7ff fb9d 	bl	735a <uECC_vli_sub>
	return (int)(uECC_vli_equal(rx, r, num_words) == 0);
    7c20:	4622      	mov	r2, r4
    7c22:	4640      	mov	r0, r8
    7c24:	a94c      	add	r1, sp, #304	; 0x130
    7c26:	f7ff fb86 	bl	7336 <uECC_vli_equal>
    7c2a:	fab0 f080 	clz	r0, r0
    7c2e:	0940      	lsrs	r0, r0, #5
    7c30:	e726      	b.n	7a80 <uECC_verify+0x8c>
		curve->double_jacobian(rx, ry, z, curve);
    7c32:	462b      	mov	r3, r5
    7c34:	aa1c      	add	r2, sp, #112	; 0x70
    7c36:	4640      	mov	r0, r8
    7c38:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
    7c3c:	a92c      	add	r1, sp, #176	; 0xb0
    7c3e:	47b8      	blx	r7
		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    7c40:	4649      	mov	r1, r9
    7c42:	a80c      	add	r0, sp, #48	; 0x30
    7c44:	f7ff fb2d 	bl	72a2 <uECC_vli_testBit>
    7c48:	4649      	mov	r1, r9
    7c4a:	4607      	mov	r7, r0
    7c4c:	a814      	add	r0, sp, #80	; 0x50
    7c4e:	f7ff fb28 	bl	72a2 <uECC_vli_testBit>
    7c52:	3800      	subs	r0, #0
    7c54:	bf18      	it	ne
    7c56:	2001      	movne	r0, #1
    7c58:	3f00      	subs	r7, #0
    7c5a:	bf18      	it	ne
    7c5c:	2701      	movne	r7, #1
		point = points[index];
    7c5e:	ab08      	add	r3, sp, #32
		index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    7c60:	ea47 0740 	orr.w	r7, r7, r0, lsl #1
		point = points[index];
    7c64:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
		if (point) {
    7c68:	b327      	cbz	r7, 7cb4 <uECC_verify+0x2c0>
			uECC_vli_set(tx, point, num_words);
    7c6a:	4622      	mov	r2, r4
    7c6c:	4639      	mov	r1, r7
    7c6e:	a834      	add	r0, sp, #208	; 0xd0
    7c70:	f7ff fb40 	bl	72f4 <uECC_vli_set>
			uECC_vli_set(ty, point + num_words, num_words);
    7c74:	9b06      	ldr	r3, [sp, #24]
    7c76:	4622      	mov	r2, r4
    7c78:	18f9      	adds	r1, r7, r3
    7c7a:	a83c      	add	r0, sp, #240	; 0xf0
    7c7c:	f7ff fb3a 	bl	72f4 <uECC_vli_set>
			apply_z(tx, ty, z, curve);
    7c80:	462b      	mov	r3, r5
    7c82:	aa1c      	add	r2, sp, #112	; 0x70
    7c84:	a93c      	add	r1, sp, #240	; 0xf0
    7c86:	a834      	add	r0, sp, #208	; 0xd0
    7c88:	f7ff fdc8 	bl	781c <apply_z>
			uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
    7c8c:	4641      	mov	r1, r8
    7c8e:	9b04      	ldr	r3, [sp, #16]
    7c90:	aa34      	add	r2, sp, #208	; 0xd0
    7c92:	a844      	add	r0, sp, #272	; 0x110
    7c94:	9400      	str	r4, [sp, #0]
    7c96:	f7ff fb94 	bl	73c2 <uECC_vli_modSub>
			XYcZ_add(tx, ty, rx, ry, curve);
    7c9a:	4642      	mov	r2, r8
    7c9c:	ab2c      	add	r3, sp, #176	; 0xb0
    7c9e:	a93c      	add	r1, sp, #240	; 0xf0
    7ca0:	a834      	add	r0, sp, #208	; 0xd0
    7ca2:	9500      	str	r5, [sp, #0]
    7ca4:	f7ff fdd9 	bl	785a <XYcZ_add>
			uECC_vli_modMult_fast(z, z, tz, curve);
    7ca8:	a91c      	add	r1, sp, #112	; 0x70
    7caa:	462b      	mov	r3, r5
    7cac:	4608      	mov	r0, r1
    7cae:	aa44      	add	r2, sp, #272	; 0x110
    7cb0:	f7ff fc44 	bl	753c <uECC_vli_modMult_fast>
	for (i = num_bits - 2; i >= 0; --i) {
    7cb4:	f109 39ff 	add.w	r9, r9, #4294967295
    7cb8:	e794      	b.n	7be4 <uECC_verify+0x1f0>

00007cba <tc_sha256_update>:
{
    7cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cbc:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
    7cbe:	b110      	cbz	r0, 7cc6 <tc_sha256_update+0xc>
    7cc0:	b1f9      	cbz	r1, 7d02 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
    7cc2:	b90a      	cbnz	r2, 7cc8 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
    7cc4:	2001      	movs	r0, #1
}
    7cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
    7cc8:	2700      	movs	r7, #0
    7cca:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
    7ccc:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
    7cd0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7cd2:	1c5a      	adds	r2, r3, #1
    7cd4:	6682      	str	r2, [r0, #104]	; 0x68
    7cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
    7cda:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    7cdc:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
    7cde:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    7ce2:	d90b      	bls.n	7cfc <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
    7ce4:	4631      	mov	r1, r6
    7ce6:	f7f9 fb4f 	bl	1388 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    7cea:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    7cee:	f513 7300 	adds.w	r3, r3, #512	; 0x200
    7cf2:	f142 0200 	adc.w	r2, r2, #0
    7cf6:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
    7cfa:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
    7cfc:	42a5      	cmp	r5, r4
    7cfe:	d1e7      	bne.n	7cd0 <tc_sha256_update+0x16>
    7d00:	e7e0      	b.n	7cc4 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
    7d02:	4608      	mov	r0, r1
    7d04:	e7df      	b.n	7cc6 <tc_sha256_update+0xc>

00007d06 <tc_sha256_final>:
{
    7d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d08:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
    7d0a:	4605      	mov	r5, r0
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d054      	beq.n	7dba <tc_sha256_final+0xb4>
    7d10:	2900      	cmp	r1, #0
    7d12:	d053      	beq.n	7dbc <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
    7d14:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    7d16:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
    7d1a:	00d8      	lsls	r0, r3, #3
    7d1c:	1812      	adds	r2, r2, r0
    7d1e:	f141 0100 	adc.w	r1, r1, #0
    7d22:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    7d26:	2280      	movs	r2, #128	; 0x80
    7d28:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    7d2a:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    7d2c:	4423      	add	r3, r4
    7d2e:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
    7d30:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    7d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
    7d38:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    7d3c:	d90a      	bls.n	7d54 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
    7d3e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    7d42:	4639      	mov	r1, r7
    7d44:	4430      	add	r0, r6
    7d46:	f000 f83b 	bl	7dc0 <_set>
		compress(s->iv, s->leftover);
    7d4a:	4631      	mov	r1, r6
    7d4c:	4620      	mov	r0, r4
    7d4e:	f7f9 fb1b 	bl	1388 <compress>
		s->leftover_offset = 0;
    7d52:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
    7d54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    7d56:	2100      	movs	r1, #0
    7d58:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    7d5c:	4430      	add	r0, r6
    7d5e:	f000 f82f 	bl	7dc0 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    7d62:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
    7d64:	4631      	mov	r1, r6
    7d66:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    7d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
    7d6a:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    7d6c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
    7d6e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    7d72:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    7d76:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    7d78:	0e1b      	lsrs	r3, r3, #24
    7d7a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
    7d7e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    7d80:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
    7d84:	f7f9 fb00 	bl	1388 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    7d88:	1d2b      	adds	r3, r5, #4
    7d8a:	1f21      	subs	r1, r4, #4
    7d8c:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
    7d8e:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    7d92:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
    7d94:	0e10      	lsrs	r0, r2, #24
    7d96:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
    7d9a:	0c10      	lsrs	r0, r2, #16
    7d9c:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
    7da0:	0a10      	lsrs	r0, r2, #8
    7da2:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
    7da6:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    7daa:	42ab      	cmp	r3, r5
    7dac:	d1ef      	bne.n	7d8e <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
    7dae:	4620      	mov	r0, r4
    7db0:	2270      	movs	r2, #112	; 0x70
    7db2:	2100      	movs	r1, #0
    7db4:	f000 f804 	bl	7dc0 <_set>
	return TC_CRYPTO_SUCCESS;
    7db8:	2001      	movs	r0, #1
}
    7dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7dbc:	4608      	mov	r0, r1
    7dbe:	e7fc      	b.n	7dba <tc_sha256_final+0xb4>

00007dc0 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    7dc0:	f000 b9c4 	b.w	814c <memset>

00007dc4 <arch_printk_char_out>:
}
    7dc4:	2000      	movs	r0, #0
    7dc6:	4770      	bx	lr

00007dc8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7dc8:	b40f      	push	{r0, r1, r2, r3}
    7dca:	b507      	push	{r0, r1, r2, lr}
    7dcc:	a904      	add	r1, sp, #16
    7dce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7dd2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7dd4:	f7f9 fc5e 	bl	1694 <vprintk>

	va_end(ap);
}
    7dd8:	b003      	add	sp, #12
    7dda:	f85d eb04 	ldr.w	lr, [sp], #4
    7dde:	b004      	add	sp, #16
    7de0:	4770      	bx	lr

00007de2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7de2:	4604      	mov	r4, r0
    7de4:	b508      	push	{r3, lr}
    7de6:	4608      	mov	r0, r1
    7de8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7dea:	461a      	mov	r2, r3
    7dec:	47a0      	blx	r4
	return z_impl_z_current_get();
    7dee:	f7fe fb11 	bl	6414 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7df2:	f7fa fd03 	bl	27fc <z_impl_k_thread_abort>

00007df6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7df6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7df8:	f013 0307 	ands.w	r3, r3, #7
    7dfc:	d105      	bne.n	7e0a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7dfe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7e00:	2b00      	cmp	r3, #0
    7e02:	bf0c      	ite	eq
    7e04:	2000      	moveq	r0, #0
    7e06:	2003      	movne	r0, #3
    7e08:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7e0a:	2b02      	cmp	r3, #2
    7e0c:	d105      	bne.n	7e1a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7e0e:	8b40      	ldrh	r0, [r0, #26]
    7e10:	fab0 f080 	clz	r0, r0
    7e14:	0940      	lsrs	r0, r0, #5
    7e16:	0080      	lsls	r0, r0, #2
    7e18:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7e1a:	2b01      	cmp	r3, #1
    7e1c:	d105      	bne.n	7e2a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7e1e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7e20:	2b00      	cmp	r3, #0
    7e22:	bf0c      	ite	eq
    7e24:	2000      	moveq	r0, #0
    7e26:	2005      	movne	r0, #5
    7e28:	4770      	bx	lr
	int evt = EVT_NOP;
    7e2a:	2000      	movs	r0, #0
}
    7e2c:	4770      	bx	lr

00007e2e <validate_args>:
{
    7e2e:	b510      	push	{r4, lr}
    7e30:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7e32:	b100      	cbz	r0, 7e36 <validate_args+0x8>
    7e34:	b911      	cbnz	r1, 7e3c <validate_args+0xe>
		return -EINVAL;
    7e36:	f06f 0015 	mvn.w	r0, #21
}
    7e3a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    7e3c:	1d08      	adds	r0, r1, #4
    7e3e:	f000 f895 	bl	7f6c <sys_notify_validate>
	if ((rv == 0)
    7e42:	2800      	cmp	r0, #0
    7e44:	d1f9      	bne.n	7e3a <validate_args+0xc>
	    && ((cli->notify.flags
    7e46:	68a3      	ldr	r3, [r4, #8]
    7e48:	2b03      	cmp	r3, #3
    7e4a:	d9f6      	bls.n	7e3a <validate_args+0xc>
    7e4c:	e7f3      	b.n	7e36 <validate_args+0x8>

00007e4e <notify_one>:
{
    7e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e52:	460d      	mov	r5, r1
    7e54:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e56:	4619      	mov	r1, r3
    7e58:	1d28      	adds	r0, r5, #4
{
    7e5a:	4690      	mov	r8, r2
    7e5c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e5e:	f000 f896 	bl	7f8e <sys_notify_finalize>
	if (cb) {
    7e62:	4604      	mov	r4, r0
    7e64:	b138      	cbz	r0, 7e76 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7e66:	4633      	mov	r3, r6
    7e68:	4642      	mov	r2, r8
    7e6a:	4629      	mov	r1, r5
    7e6c:	4638      	mov	r0, r7
    7e6e:	46a4      	mov	ip, r4
}
    7e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7e74:	4760      	bx	ip
}
    7e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e7a <transition_complete>:
{
    7e7a:	b410      	push	{r4}
	__asm__ volatile(
    7e7c:	f04f 0420 	mov.w	r4, #32
    7e80:	f3ef 8211 	mrs	r2, BASEPRI
    7e84:	f384 8812 	msr	BASEPRI_MAX, r4
    7e88:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7e8c:	6141      	str	r1, [r0, #20]
}
    7e8e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    7e90:	2101      	movs	r1, #1
    7e92:	f7f9 bc0d 	b.w	16b0 <process_event>

00007e96 <onoff_manager_init>:
{
    7e96:	b538      	push	{r3, r4, r5, lr}
    7e98:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7e9a:	4605      	mov	r5, r0
    7e9c:	b158      	cbz	r0, 7eb6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7e9e:	b151      	cbz	r1, 7eb6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7ea0:	680b      	ldr	r3, [r1, #0]
    7ea2:	b143      	cbz	r3, 7eb6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7ea4:	684b      	ldr	r3, [r1, #4]
    7ea6:	b133      	cbz	r3, 7eb6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7ea8:	221c      	movs	r2, #28
    7eaa:	2100      	movs	r1, #0
    7eac:	f000 f94e 	bl	814c <memset>
	return 0;
    7eb0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7eb2:	612c      	str	r4, [r5, #16]
}
    7eb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7eb6:	f06f 0015 	mvn.w	r0, #21
    7eba:	e7fb      	b.n	7eb4 <onoff_manager_init+0x1e>

00007ebc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7ebc:	b570      	push	{r4, r5, r6, lr}
    7ebe:	4605      	mov	r5, r0
    7ec0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7ec2:	f7ff ffb4 	bl	7e2e <validate_args>

	if (rv < 0) {
    7ec6:	1e04      	subs	r4, r0, #0
    7ec8:	db15      	blt.n	7ef6 <onoff_request+0x3a>
    7eca:	f04f 0320 	mov.w	r3, #32
    7ece:	f3ef 8211 	mrs	r2, BASEPRI
    7ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7ede:	8b6b      	ldrh	r3, [r5, #26]
    7ee0:	8b2c      	ldrh	r4, [r5, #24]
    7ee2:	428b      	cmp	r3, r1
    7ee4:	f004 0407 	and.w	r4, r4, #7
    7ee8:	d107      	bne.n	7efa <onoff_request+0x3e>
	__asm__ volatile(
    7eea:	f382 8811 	msr	BASEPRI, r2
    7eee:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    7ef2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7ef6:	4620      	mov	r0, r4
    7ef8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    7efa:	2c02      	cmp	r4, #2
    7efc:	d10c      	bne.n	7f18 <onoff_request+0x5c>
		mgr->refs += 1U;
    7efe:	3301      	adds	r3, #1
    7f00:	836b      	strh	r3, [r5, #26]
    7f02:	f382 8811 	msr	BASEPRI, r2
    7f06:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    7f0a:	2300      	movs	r3, #0
    7f0c:	4622      	mov	r2, r4
    7f0e:	4631      	mov	r1, r6
    7f10:	4628      	mov	r0, r5
    7f12:	f7ff ff9c 	bl	7e4e <notify_one>
    7f16:	e7ee      	b.n	7ef6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    7f18:	2c06      	cmp	r4, #6
    7f1a:	d814      	bhi.n	7f46 <onoff_request+0x8a>
    7f1c:	e8df f004 	tbb	[pc, r4]
    7f20:	13131304 	.word	0x13131304
    7f24:	1a04      	.short	0x1a04
    7f26:	04          	.byte	0x04
    7f27:	00          	.byte	0x00
	parent->next = child;
    7f28:	2300      	movs	r3, #0
    7f2a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    7f2c:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    7f2e:	b93b      	cbnz	r3, 7f40 <onoff_request+0x84>
	list->head = node;
    7f30:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    7f34:	b9ac      	cbnz	r4, 7f62 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    7f36:	2102      	movs	r1, #2
    7f38:	4628      	mov	r0, r5
    7f3a:	f7f9 fbb9 	bl	16b0 <process_event>
    7f3e:	e7da      	b.n	7ef6 <onoff_request+0x3a>
	parent->next = child;
    7f40:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7f42:	606e      	str	r6, [r5, #4]
}
    7f44:	e7f6      	b.n	7f34 <onoff_request+0x78>
    7f46:	f382 8811 	msr	BASEPRI, r2
    7f4a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    7f4e:	f06f 0404 	mvn.w	r4, #4
    7f52:	e7d0      	b.n	7ef6 <onoff_request+0x3a>
    7f54:	f382 8811 	msr	BASEPRI, r2
    7f58:	f3bf 8f6f 	isb	sy
    7f5c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7f60:	e7c9      	b.n	7ef6 <onoff_request+0x3a>
    7f62:	f382 8811 	msr	BASEPRI, r2
    7f66:	f3bf 8f6f 	isb	sy
		if (notify) {
    7f6a:	e7c4      	b.n	7ef6 <onoff_request+0x3a>

00007f6c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7f6c:	4603      	mov	r3, r0
    7f6e:	b158      	cbz	r0, 7f88 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7f70:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7f72:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7f76:	2a01      	cmp	r2, #1
    7f78:	d003      	beq.n	7f82 <sys_notify_validate+0x16>
    7f7a:	2a03      	cmp	r2, #3
    7f7c:	d104      	bne.n	7f88 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7f7e:	6802      	ldr	r2, [r0, #0]
    7f80:	b112      	cbz	r2, 7f88 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7f82:	2000      	movs	r0, #0
    7f84:	6098      	str	r0, [r3, #8]
    7f86:	4770      	bx	lr
    7f88:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7f8c:	4770      	bx	lr

00007f8e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7f8e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7f90:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    7f92:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    7f96:	2a03      	cmp	r2, #3
    7f98:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    7f9c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    7f9e:	bf14      	ite	ne
    7fa0:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7fa2:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7fa4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7fa6:	4770      	bx	lr

00007fa8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7fa8:	4770      	bx	lr

00007faa <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    7faa:	b40f      	push	{r0, r1, r2, r3}
    7fac:	b507      	push	{r0, r1, r2, lr}
    7fae:	a904      	add	r1, sp, #16
    7fb0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7fb4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7fb6:	f7f9 fb6d 	bl	1694 <vprintk>
	va_end(ap);
}
    7fba:	b003      	add	sp, #12
    7fbc:	f85d eb04 	ldr.w	lr, [sp], #4
    7fc0:	b004      	add	sp, #16
    7fc2:	4770      	bx	lr

00007fc4 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    7fc4:	4770      	bx	lr

00007fc6 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7fc6:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    7fc8:	b430      	push	{r4, r5}
    7fca:	4604      	mov	r4, r0
    7fcc:	4618      	mov	r0, r3
    7fce:	db0b      	blt.n	7fe8 <flash_area_read+0x22>
    7fd0:	68a5      	ldr	r5, [r4, #8]
    7fd2:	4408      	add	r0, r1
    7fd4:	42a8      	cmp	r0, r5
    7fd6:	d807      	bhi.n	7fe8 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    7fd8:	68e0      	ldr	r0, [r4, #12]
    7fda:	6864      	ldr	r4, [r4, #4]
    7fdc:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    7fde:	6884      	ldr	r4, [r0, #8]
    7fe0:	6824      	ldr	r4, [r4, #0]
    7fe2:	46a4      	mov	ip, r4
}
    7fe4:	bc30      	pop	{r4, r5}
    7fe6:	4760      	bx	ip
    7fe8:	f06f 0015 	mvn.w	r0, #21
    7fec:	bc30      	pop	{r4, r5}
    7fee:	4770      	bx	lr

00007ff0 <flash_area_write>:
    7ff0:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    7ff2:	b430      	push	{r4, r5}
    7ff4:	4604      	mov	r4, r0
    7ff6:	4618      	mov	r0, r3
    7ff8:	db0b      	blt.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7ffa:	68a5      	ldr	r5, [r4, #8]
    7ffc:	4408      	add	r0, r1
    7ffe:	42a8      	cmp	r0, r5
    8000:	d807      	bhi.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    8002:	68e0      	ldr	r0, [r4, #12]
    8004:	6864      	ldr	r4, [r4, #4]
    8006:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    8008:	6884      	ldr	r4, [r0, #8]
    800a:	6864      	ldr	r4, [r4, #4]
    800c:	46a4      	mov	ip, r4
}
    800e:	bc30      	pop	{r4, r5}
    8010:	4760      	bx	ip
    8012:	f06f 0015 	mvn.w	r0, #21
    8016:	bc30      	pop	{r4, r5}
    8018:	4770      	bx	lr

0000801a <flash_area_erase>:
    801a:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    801c:	4603      	mov	r3, r0
    801e:	b410      	push	{r4}
    8020:	4610      	mov	r0, r2
    8022:	db0a      	blt.n	803a <flash_area_erase+0x20>
    8024:	689c      	ldr	r4, [r3, #8]
    8026:	4408      	add	r0, r1
    8028:	42a0      	cmp	r0, r4
    802a:	d806      	bhi.n	803a <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    802c:	68d8      	ldr	r0, [r3, #12]
    802e:	685b      	ldr	r3, [r3, #4]
    8030:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    8032:	6883      	ldr	r3, [r0, #8]
}
    8034:	bc10      	pop	{r4}
    8036:	689b      	ldr	r3, [r3, #8]
    8038:	4718      	bx	r3
    803a:	f06f 0015 	mvn.w	r0, #21
    803e:	bc10      	pop	{r4}
    8040:	4770      	bx	lr

00008042 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    8042:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    8044:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    8046:	6883      	ldr	r3, [r0, #8]
    8048:	68db      	ldr	r3, [r3, #12]
    804a:	4798      	blx	r3
}
    804c:	6800      	ldr	r0, [r0, #0]
    804e:	bd08      	pop	{r3, pc}

00008050 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    8050:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    8052:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    8054:	6883      	ldr	r3, [r0, #8]
    8056:	68db      	ldr	r3, [r3, #12]
    8058:	4798      	blx	r3

	return param->erase_value;
}
    805a:	7900      	ldrb	r0, [r0, #4]
    805c:	bd08      	pop	{r3, pc}

0000805e <get_sectors_cb>:
{
    805e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    8060:	684c      	ldr	r4, [r1, #4]
    8062:	6803      	ldr	r3, [r0, #0]
    8064:	42a3      	cmp	r3, r4
    8066:	d201      	bcs.n	806c <get_sectors_cb+0xe>
		*bail_value = true;
    8068:	2001      	movs	r0, #1
}
    806a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    806c:	688a      	ldr	r2, [r1, #8]
    806e:	4422      	add	r2, r4
    8070:	4293      	cmp	r3, r2
    8072:	d301      	bcc.n	8078 <get_sectors_cb+0x1a>
		*bail_value = false;
    8074:	2000      	movs	r0, #0
    8076:	e7f8      	b.n	806a <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    8078:	694e      	ldr	r6, [r1, #20]
    807a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    807e:	42b5      	cmp	r5, r6
    8080:	d303      	bcc.n	808a <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    8082:	f06f 030b 	mvn.w	r3, #11
    8086:	618b      	str	r3, [r1, #24]
		return true;
    8088:	e7f4      	b.n	8074 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    808a:	1b1b      	subs	r3, r3, r4
    808c:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    8090:	6843      	ldr	r3, [r0, #4]
    8092:	6908      	ldr	r0, [r1, #16]
    8094:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    8098:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    809a:	690b      	ldr	r3, [r1, #16]
    809c:	3301      	adds	r3, #1
    809e:	610b      	str	r3, [r1, #16]
	return true;
    80a0:	e7e2      	b.n	8068 <get_sectors_cb+0xa>

000080a2 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    80a2:	2000      	movs	r0, #0
{
    80a4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    80a6:	f7f9 fe35 	bl	1d14 <sys_reboot>

000080aa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    80aa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    80ac:	6800      	ldr	r0, [r0, #0]
    80ae:	f7f9 bffd 	b.w	20ac <z_arm_fatal_error>

000080b2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    80b2:	2100      	movs	r1, #0
    80b4:	2001      	movs	r0, #1
    80b6:	f7f9 bff9 	b.w	20ac <z_arm_fatal_error>

000080ba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    80ba:	b508      	push	{r3, lr}
	handler();
    80bc:	f7fa f86a 	bl	2194 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    80c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    80c4:	f7fa b916 	b.w	22f4 <z_arm_exc_exit>

000080c8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    80c8:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    80cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    80d0:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    80d2:	bf08      	it	eq
    80d4:	f06f 0015 	mvneq.w	r0, #21
    80d8:	4770      	bx	lr

000080da <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    80da:	4603      	mov	r3, r0
	size_t n = 0;
    80dc:	2000      	movs	r0, #0

	while (*s != '\0') {
    80de:	5c1a      	ldrb	r2, [r3, r0]
    80e0:	b902      	cbnz	r2, 80e4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    80e2:	4770      	bx	lr
		n++;
    80e4:	3001      	adds	r0, #1
    80e6:	e7fa      	b.n	80de <strlen+0x4>

000080e8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    80e8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    80ea:	b15a      	cbz	r2, 8104 <memcmp+0x1c>
    80ec:	3901      	subs	r1, #1
    80ee:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    80f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    80f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    80f8:	42a0      	cmp	r0, r4
    80fa:	d001      	beq.n	8100 <memcmp+0x18>
    80fc:	429a      	cmp	r2, r3
    80fe:	d0f7      	beq.n	80f0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8100:	1ad0      	subs	r0, r2, r3
}
    8102:	bd10      	pop	{r4, pc}
		return 0;
    8104:	4610      	mov	r0, r2
    8106:	e7fc      	b.n	8102 <memcmp+0x1a>

00008108 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    8108:	1a43      	subs	r3, r0, r1
    810a:	4293      	cmp	r3, r2
{
    810c:	b510      	push	{r4, lr}
    810e:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    8112:	d308      	bcc.n	8126 <memmove+0x1e>
	char *dest = d;
    8114:	4602      	mov	r2, r0
    8116:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    8118:	429a      	cmp	r2, r3
    811a:	d00b      	beq.n	8134 <memmove+0x2c>
			*dest = *src;
    811c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8120:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    8124:	e7f8      	b.n	8118 <memmove+0x10>
    8126:	440a      	add	r2, r1
			dest[n] = src[n];
    8128:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    812c:	428a      	cmp	r2, r1
			dest[n] = src[n];
    812e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    8132:	d1f9      	bne.n	8128 <memmove+0x20>
		}
	}

	return d;
}
    8134:	bd10      	pop	{r4, pc}

00008136 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8136:	b510      	push	{r4, lr}
    8138:	1e43      	subs	r3, r0, #1
    813a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    813c:	4291      	cmp	r1, r2
    813e:	d100      	bne.n	8142 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8140:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8142:	f811 4b01 	ldrb.w	r4, [r1], #1
    8146:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    814a:	e7f7      	b.n	813c <memcpy+0x6>

0000814c <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    814c:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    814e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8150:	4402      	add	r2, r0
    8152:	4293      	cmp	r3, r2
    8154:	d100      	bne.n	8158 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8156:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8158:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    815c:	e7f9      	b.n	8152 <memset+0x6>

0000815e <_stdout_hook_default>:
}
    815e:	f04f 30ff 	mov.w	r0, #4294967295
    8162:	4770      	bx	lr

00008164 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8164:	220c      	movs	r2, #12
    8166:	6903      	ldr	r3, [r0, #16]
    8168:	b2c9      	uxtb	r1, r1
    816a:	fb01 3302 	mla	r3, r1, r2, r3
    816e:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    8170:	f000 0007 	and.w	r0, r0, #7
    8174:	4770      	bx	lr

00008176 <set_on_state>:
	__asm__ volatile(
    8176:	f04f 0320 	mov.w	r3, #32
    817a:	f3ef 8211 	mrs	r2, BASEPRI
    817e:	f383 8812 	msr	BASEPRI_MAX, r3
    8182:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8186:	6803      	ldr	r3, [r0, #0]
    8188:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    818c:	f043 0302 	orr.w	r3, r3, #2
    8190:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8192:	f382 8811 	msr	BASEPRI, r2
    8196:	f3bf 8f6f 	isb	sy
}
    819a:	4770      	bx	lr

0000819c <stop>:
{
    819c:	b570      	push	{r4, r5, r6, lr}
    819e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    81a0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    81a2:	f04f 0420 	mov.w	r4, #32
    81a6:	f3ef 8511 	mrs	r5, BASEPRI
    81aa:	f384 8812 	msr	BASEPRI_MAX, r4
    81ae:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    81b2:	260c      	movs	r6, #12
    81b4:	fb06 3401 	mla	r4, r6, r1, r3
    81b8:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    81ba:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    81be:	d008      	beq.n	81d2 <stop+0x36>
    81c0:	42a2      	cmp	r2, r4
    81c2:	d006      	beq.n	81d2 <stop+0x36>
	__asm__ volatile(
    81c4:	f385 8811 	msr	BASEPRI, r5
    81c8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    81cc:	f04f 30ff 	mov.w	r0, #4294967295
}
    81d0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    81d2:	2201      	movs	r2, #1
    81d4:	4371      	muls	r1, r6
    81d6:	440b      	add	r3, r1
    81d8:	679a      	str	r2, [r3, #120]	; 0x78
    81da:	f385 8811 	msr	BASEPRI, r5
    81de:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    81e2:	6843      	ldr	r3, [r0, #4]
    81e4:	440b      	add	r3, r1
    81e6:	685b      	ldr	r3, [r3, #4]
    81e8:	4798      	blx	r3
	return 0;
    81ea:	2000      	movs	r0, #0
    81ec:	e7f0      	b.n	81d0 <stop+0x34>

000081ee <api_stop>:
	return stop(dev, subsys, CTX_API);
    81ee:	2280      	movs	r2, #128	; 0x80
    81f0:	f7ff bfd4 	b.w	819c <stop>

000081f4 <async_start>:
{
    81f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81f6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    81f8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    81fa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    81fc:	f04f 0520 	mov.w	r5, #32
    8200:	f3ef 8611 	mrs	r6, BASEPRI
    8204:	f385 8812 	msr	BASEPRI_MAX, r5
    8208:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    820c:	250c      	movs	r5, #12
    820e:	4369      	muls	r1, r5
    8210:	440c      	add	r4, r1
    8212:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8214:	f005 0c07 	and.w	ip, r5, #7
    8218:	f1bc 0f01 	cmp.w	ip, #1
    821c:	d10b      	bne.n	8236 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    821e:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    8220:	f386 8811 	msr	BASEPRI, r6
    8224:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    8228:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    822c:	6843      	ldr	r3, [r0, #4]
    822e:	585b      	ldr	r3, [r3, r1]
    8230:	4798      	blx	r3
	return 0;
    8232:	2000      	movs	r0, #0
}
    8234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8236:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    823a:	42af      	cmp	r7, r5
    823c:	f386 8811 	msr	BASEPRI, r6
    8240:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    8244:	bf0c      	ite	eq
    8246:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    824a:	f04f 30ff 	movne.w	r0, #4294967295
    824e:	e7f1      	b.n	8234 <async_start+0x40>

00008250 <api_start>:
{
    8250:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8252:	2480      	movs	r4, #128	; 0x80
    8254:	9400      	str	r4, [sp, #0]
    8256:	f7ff ffcd 	bl	81f4 <async_start>
}
    825a:	b002      	add	sp, #8
    825c:	bd10      	pop	{r4, pc}

0000825e <onoff_started_callback>:
{
    825e:	b410      	push	{r4}
	notify(mgr, 0);
    8260:	241c      	movs	r4, #28
	return &data->mgr[type];
    8262:	6900      	ldr	r0, [r0, #16]
    8264:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8266:	fb03 0004 	mla	r0, r3, r4, r0
    826a:	2100      	movs	r1, #0
}
    826c:	bc10      	pop	{r4}
	notify(mgr, 0);
    826e:	4710      	bx	r2

00008270 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    8270:	2003      	movs	r0, #3
    8272:	f000 bac0 	b.w	87f6 <nrfx_clock_start>

00008276 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    8276:	2002      	movs	r0, #2
    8278:	f000 babd 	b.w	87f6 <nrfx_clock_start>

0000827c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    827c:	2000      	movs	r0, #0
    827e:	f000 baba 	b.w	87f6 <nrfx_clock_start>

00008282 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    8282:	2003      	movs	r0, #3
    8284:	f000 bb12 	b.w	88ac <nrfx_clock_stop>

00008288 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    8288:	2002      	movs	r0, #2
    828a:	f000 bb0f 	b.w	88ac <nrfx_clock_stop>

0000828e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    828e:	2000      	movs	r0, #0
    8290:	f000 bb0c 	b.w	88ac <nrfx_clock_stop>

00008294 <blocking_start_callback>:
{
    8294:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8296:	f7fd bd93 	b.w	5dc0 <z_impl_k_sem_give>

0000829a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    829a:	6843      	ldr	r3, [r0, #4]
}
    829c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    829e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    82a0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    82a2:	600b      	str	r3, [r1, #0]
}
    82a4:	4770      	bx	lr

000082a6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82a6:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    82a8:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82ac:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    82ae:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    82b2:	6098      	str	r0, [r3, #8]
}
    82b4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    82b6:	60d9      	str	r1, [r3, #12]
    82b8:	4770      	bx	lr

000082ba <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82ba:	6843      	ldr	r3, [r0, #4]
}
    82bc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82be:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    82c0:	6099      	str	r1, [r3, #8]
}
    82c2:	4770      	bx	lr

000082c4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82c4:	6843      	ldr	r3, [r0, #4]
}
    82c6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82c8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    82ca:	60d9      	str	r1, [r3, #12]
}
    82cc:	4770      	bx	lr

000082ce <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    82ce:	6843      	ldr	r3, [r0, #4]
    82d0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    82d2:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    82d4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    82d8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    82da:	6090      	str	r0, [r2, #8]
}
    82dc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    82de:	60d3      	str	r3, [r2, #12]
    82e0:	4770      	bx	lr

000082e2 <gpio_nrfx_manage_callback>:
{
    82e2:	b510      	push	{r4, lr}
	return port->data;
    82e4:	6903      	ldr	r3, [r0, #16]
	return list->head;
    82e6:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    82e8:	b1f8      	cbz	r0, 832a <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    82ea:	4288      	cmp	r0, r1
    82ec:	d119      	bne.n	8322 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    82ee:	689c      	ldr	r4, [r3, #8]
	return node->next;
    82f0:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    82f2:	42a1      	cmp	r1, r4
	list->head = node;
    82f4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    82f6:	d100      	bne.n	82fa <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    82f8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    82fa:	2000      	movs	r0, #0
    82fc:	6008      	str	r0, [r1, #0]
	if (set) {
    82fe:	b12a      	cbz	r2, 830c <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    8300:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    8302:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    8304:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    8306:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    8308:	b902      	cbnz	r2, 830c <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    830a:	6099      	str	r1, [r3, #8]
	return 0;
    830c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    830e:	e010      	b.n	8332 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8310:	4281      	cmp	r1, r0
    8312:	d106      	bne.n	8322 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    8314:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    8316:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    8318:	6898      	ldr	r0, [r3, #8]
    831a:	4281      	cmp	r1, r0
    831c:	d1ed      	bne.n	82fa <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    831e:	609c      	str	r4, [r3, #8]
}
    8320:	e7eb      	b.n	82fa <gpio_nrfx_manage_callback+0x18>
	return node->next;
    8322:	4604      	mov	r4, r0
    8324:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8326:	2800      	cmp	r0, #0
    8328:	d1f2      	bne.n	8310 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    832a:	2a00      	cmp	r2, #0
    832c:	d1e8      	bne.n	8300 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    832e:	f06f 0015 	mvn.w	r0, #21
}
    8332:	bd10      	pop	{r4, pc}

00008334 <k_sem_give>:
    8334:	f7fd bd44 	b.w	5dc0 <z_impl_k_sem_give>

00008338 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    8338:	b918      	cbnz	r0, 8342 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
    833a:	f101 0020 	add.w	r0, r1, #32
    833e:	f7ff bff9 	b.w	8334 <k_sem_give>
}
    8342:	4770      	bx	lr

00008344 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    8344:	f04f 32ff 	mov.w	r2, #4294967295
    8348:	f04f 33ff 	mov.w	r3, #4294967295
    834c:	3010      	adds	r0, #16
    834e:	f7fd bd57 	b.w	5e00 <z_impl_k_sem_take>

00008352 <qspi_trans_lock.isra.0>:
    8352:	f04f 32ff 	mov.w	r2, #4294967295
    8356:	f04f 33ff 	mov.w	r3, #4294967295
    835a:	f7fd bd51 	b.w	5e00 <z_impl_k_sem_take>

0000835e <qspi_nor_write_protection_set>:
{
    835e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    8360:	2200      	movs	r2, #0
    8362:	4291      	cmp	r1, r2
    8364:	bf0c      	ite	eq
    8366:	2306      	moveq	r3, #6
    8368:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    836a:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    836c:	e9cd 2201 	strd	r2, r2, [sp, #4]
    8370:	9203      	str	r2, [sp, #12]
    8372:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    8376:	f7fa ff27 	bl	31c8 <qspi_send_cmd>
		ret = -EIO;
    837a:	2800      	cmp	r0, #0
}
    837c:	bf18      	it	ne
    837e:	f06f 0004 	mvnne.w	r0, #4
    8382:	b005      	add	sp, #20
    8384:	f85d fb04 	ldr.w	pc, [sp], #4

00008388 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    8388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    838a:	23ff      	movs	r3, #255	; 0xff
    838c:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    8390:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    8394:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    8396:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    8398:	2301      	movs	r3, #1
    839a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    839e:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    83a0:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    83a2:	f88d 300c 	strb.w	r3, [sp, #12]
    83a6:	ab01      	add	r3, sp, #4
    83a8:	9204      	str	r2, [sp, #16]
    83aa:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    83ac:	f7fa ff0c 	bl	31c8 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    83b0:	2800      	cmp	r0, #0
    83b2:	bfa8      	it	ge
    83b4:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    83b8:	b007      	add	sp, #28
    83ba:	f85d fb04 	ldr.w	pc, [sp], #4

000083be <is_regular_addr_valid>:
{
    83be:	b538      	push	{r3, r4, r5, lr}
    83c0:	4605      	mov	r5, r0
    83c2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    83c4:	f000 fadf 	bl	8986 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    83c8:	2d00      	cmp	r5, #0
    83ca:	db07      	blt.n	83dc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    83cc:	42a8      	cmp	r0, r5
    83ce:	d905      	bls.n	83dc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    83d0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    83d2:	4284      	cmp	r4, r0
    83d4:	bf8c      	ite	hi
    83d6:	2000      	movhi	r0, #0
    83d8:	2001      	movls	r0, #1
}
    83da:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    83dc:	2000      	movs	r0, #0
    83de:	e7fc      	b.n	83da <is_regular_addr_valid+0x1c>

000083e0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    83e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    83e4:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    83e6:	6883      	ldr	r3, [r0, #8]
{
    83e8:	b086      	sub	sp, #24
    83ea:	4688      	mov	r8, r1
    83ec:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    83ee:	691b      	ldr	r3, [r3, #16]
    83f0:	aa02      	add	r2, sp, #8
    83f2:	a901      	add	r1, sp, #4
    83f4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    83f6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    83f8:	4625      	mov	r5, r4
    83fa:	9b02      	ldr	r3, [sp, #8]
    83fc:	42ab      	cmp	r3, r5
    83fe:	d802      	bhi.n	8406 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    8400:	b006      	add	sp, #24
    8402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    8406:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    8408:	9f01      	ldr	r7, [sp, #4]
    840a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    840e:	687b      	ldr	r3, [r7, #4]
    8410:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8412:	683a      	ldr	r2, [r7, #0]
    8414:	eb0a 0306 	add.w	r3, sl, r6
    8418:	42b2      	cmp	r2, r6
    841a:	d802      	bhi.n	8422 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    841c:	469a      	mov	sl, r3
    841e:	3501      	adds	r5, #1
    8420:	e7eb      	b.n	83fa <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    8422:	4649      	mov	r1, r9
			page_info.start_offset = off;
    8424:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    8426:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    8428:	a803      	add	r0, sp, #12
    842a:	47c0      	blx	r8
    842c:	2800      	cmp	r0, #0
    842e:	d0e7      	beq.n	8400 <flash_page_foreach+0x20>
			off += page_info.size;
    8430:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8432:	3601      	adds	r6, #1
			off += page_info.size;
    8434:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    8436:	e7ec      	b.n	8412 <flash_page_foreach+0x32>

00008438 <uarte_nrfx_config_get>:
{
    8438:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    843a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    843c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8440:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8444:	2000      	movs	r0, #0
    8446:	4770      	bx	lr

00008448 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8448:	6843      	ldr	r3, [r0, #4]
    844a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    844c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8450:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8454:	4770      	bx	lr

00008456 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8456:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    8458:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    845a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    845c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8460:	b150      	cbz	r0, 8478 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8462:	2000      	movs	r0, #0
	*c = *data->rx_data;
    8464:	6952      	ldr	r2, [r2, #20]
    8466:	7812      	ldrb	r2, [r2, #0]
    8468:	700a      	strb	r2, [r1, #0]
    846a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    846e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8472:	2201      	movs	r2, #1
    8474:	601a      	str	r2, [r3, #0]
	return 0;
    8476:	4770      	bx	lr
		return -1;
    8478:	f04f 30ff 	mov.w	r0, #4294967295
}
    847c:	4770      	bx	lr

0000847e <is_tx_ready.isra.0>:
	return config->uarte_regs;
    847e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    8480:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8482:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8486:	b940      	cbnz	r0, 849a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8488:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    848a:	079b      	lsls	r3, r3, #30
    848c:	d406      	bmi.n	849c <is_tx_ready.isra.0+0x1e>
    848e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    8492:	3800      	subs	r0, #0
    8494:	bf18      	it	ne
    8496:	2001      	movne	r0, #1
    8498:	4770      	bx	lr
    849a:	2001      	movs	r0, #1
}
    849c:	4770      	bx	lr

0000849e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    849e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    84a0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    84a2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    84a6:	05c9      	lsls	r1, r1, #23
    84a8:	d518      	bpl.n	84dc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    84ae:	b1a9      	cbz	r1, 84dc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    84b0:	f04f 0020 	mov.w	r0, #32
    84b4:	f3ef 8111 	mrs	r1, BASEPRI
    84b8:	f380 8812 	msr	BASEPRI_MAX, r0
    84bc:	f3bf 8f6f 	isb	sy
    84c0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    84c4:	b130      	cbz	r0, 84d4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84c6:	2000      	movs	r0, #0
    84c8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    84cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84d0:	2001      	movs	r0, #1
    84d2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    84d4:	f381 8811 	msr	BASEPRI, r1
    84d8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    84dc:	6852      	ldr	r2, [r2, #4]
    84de:	06d2      	lsls	r2, r2, #27
    84e0:	d515      	bpl.n	850e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    84e2:	f04f 0120 	mov.w	r1, #32
    84e6:	f3ef 8211 	mrs	r2, BASEPRI
    84ea:	f381 8812 	msr	BASEPRI_MAX, r1
    84ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84f2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    84f6:	b111      	cbz	r1, 84fe <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    84f8:	2100      	movs	r1, #0
    84fa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    84fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8502:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    8506:	f382 8811 	msr	BASEPRI, r2
    850a:	f3bf 8f6f 	isb	sy
}
    850e:	4770      	bx	lr

00008510 <event_clear>:
    8510:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8512:	f100 0350 	add.w	r3, r0, #80	; 0x50
    8516:	009b      	lsls	r3, r3, #2
    8518:	b29b      	uxth	r3, r3
    851a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    851e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    8522:	601a      	str	r2, [r3, #0]
    8524:	681b      	ldr	r3, [r3, #0]
}
    8526:	4770      	bx	lr

00008528 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8528:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    852a:	6843      	ldr	r3, [r0, #4]
    852c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    852e:	7a05      	ldrb	r5, [r0, #8]
    8530:	6844      	ldr	r4, [r0, #4]
    8532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8536:	42a3      	cmp	r3, r4
    8538:	d302      	bcc.n	8540 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    853a:	f06f 0001 	mvn.w	r0, #1
}
    853e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    8540:	795c      	ldrb	r4, [r3, #5]
    8542:	428c      	cmp	r4, r1
    8544:	d001      	beq.n	854a <pinctrl_lookup_state+0x22>
		(*state)++;
    8546:	3308      	adds	r3, #8
    8548:	e7f0      	b.n	852c <pinctrl_lookup_state+0x4>
			return 0;
    854a:	2000      	movs	r0, #0
    854c:	e7f7      	b.n	853e <pinctrl_lookup_state+0x16>

0000854e <boot_perform_update_hook>:
}
    854e:	2001      	movs	r0, #1
    8550:	4770      	bx	lr

00008552 <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    8552:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    8554:	bf01      	itttt	eq
    8556:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    8558:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    855a:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    855c:	700b      	strbeq	r3, [r1, #0]
		return 0;
    855e:	bf05      	ittet	eq
    8560:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    8562:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    8564:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    8566:	70cb      	strbeq	r3, [r1, #3]
}
    8568:	4770      	bx	lr

0000856a <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    856a:	2801      	cmp	r0, #1
    856c:	d101      	bne.n	8572 <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    856e:	f7fb bfdd 	b.w	452c <network_core_update>
	}

	return 0;
}
    8572:	2000      	movs	r0, #0
    8574:	4770      	bx	lr

00008576 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8576:	f7fe b9cb 	b.w	6910 <nrf_cc3xx_platform_init_no_rng>

0000857a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    857a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    857c:	f7f9 fc78 	bl	1e70 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8580:	f7f9 fd5e 	bl	2040 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8588:	f7fe b9c2 	b.w	6910 <nrf_cc3xx_platform_init_no_rng>

0000858c <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    858c:	6880      	ldr	r0, [r0, #8]
    858e:	3818      	subs	r0, #24
    8590:	f020 0007 	bic.w	r0, r0, #7
}
    8594:	3810      	subs	r0, #16
    8596:	4770      	bx	lr

00008598 <boot_magic_compatible_check>:
    switch (tbl_val) {
    8598:	2804      	cmp	r0, #4
    859a:	d009      	beq.n	85b0 <boot_magic_compatible_check+0x18>
    859c:	2805      	cmp	r0, #5
    859e:	d103      	bne.n	85a8 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    85a0:	1e48      	subs	r0, r1, #1
    85a2:	bf18      	it	ne
    85a4:	2001      	movne	r0, #1
    85a6:	4770      	bx	lr
        return tbl_val == val;
    85a8:	1a43      	subs	r3, r0, r1
    85aa:	4258      	negs	r0, r3
    85ac:	4158      	adcs	r0, r3
    85ae:	4770      	bx	lr
    switch (tbl_val) {
    85b0:	2001      	movs	r0, #1
}
    85b2:	4770      	bx	lr

000085b4 <bootutil_buffer_is_erased>:
{
    85b4:	b538      	push	{r3, r4, r5, lr}
    85b6:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    85b8:	460c      	mov	r4, r1
    85ba:	b161      	cbz	r1, 85d6 <bootutil_buffer_is_erased+0x22>
    85bc:	b15a      	cbz	r2, 85d6 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    85be:	f7ff fd47 	bl	8050 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    85c2:	4621      	mov	r1, r4
    85c4:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    85c6:	f811 3b01 	ldrb.w	r3, [r1], #1
    85ca:	4283      	cmp	r3, r0
    85cc:	d103      	bne.n	85d6 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    85ce:	42a9      	cmp	r1, r5
    85d0:	d1f9      	bne.n	85c6 <bootutil_buffer_is_erased+0x12>
    return true;
    85d2:	2001      	movs	r0, #1
}
    85d4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    85d6:	2000      	movs	r0, #0
    85d8:	e7fc      	b.n	85d4 <bootutil_buffer_is_erased+0x20>

000085da <boot_read_flag>:
{
    85da:	b538      	push	{r3, r4, r5, lr}
    85dc:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    85de:	2301      	movs	r3, #1
{
    85e0:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    85e2:	4622      	mov	r2, r4
{
    85e4:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    85e6:	f7ff fcee 	bl	7fc6 <flash_area_read>
    if (rc < 0) {
    85ea:	2800      	cmp	r0, #0
    85ec:	db0f      	blt.n	860e <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    85ee:	2201      	movs	r2, #1
    85f0:	4621      	mov	r1, r4
    85f2:	4628      	mov	r0, r5
    85f4:	f7ff ffde 	bl	85b4 <bootutil_buffer_is_erased>
    85f8:	b938      	cbnz	r0, 860a <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    85fa:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    85fc:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    85fe:	bf14      	ite	ne
    8600:	2302      	movne	r3, #2
    8602:	2301      	moveq	r3, #1
    8604:	2000      	movs	r0, #0
    8606:	7023      	strb	r3, [r4, #0]
}
    8608:	bd38      	pop	{r3, r4, r5, pc}
    860a:	2303      	movs	r3, #3
    860c:	e7fa      	b.n	8604 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    860e:	2001      	movs	r0, #1
    8610:	e7fa      	b.n	8608 <boot_read_flag+0x2e>

00008612 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8612:	6882      	ldr	r2, [r0, #8]
    8614:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    8616:	f022 0207 	bic.w	r2, r2, #7
    861a:	f7ff bfde 	b.w	85da <boot_read_flag>

0000861e <boot_read_swap_state_by_id>:
{
    861e:	b513      	push	{r0, r1, r4, lr}
    8620:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    8622:	b2c0      	uxtb	r0, r0
    8624:	a901      	add	r1, sp, #4
    8626:	f7f9 fbcb 	bl	1dc0 <flash_area_open>
    if (rc != 0) {
    862a:	b950      	cbnz	r0, 8642 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    862c:	4621      	mov	r1, r4
    862e:	9801      	ldr	r0, [sp, #4]
    8630:	f7fb ffc4 	bl	45bc <boot_read_swap_state>
    8634:	4604      	mov	r4, r0
    flash_area_close(fap);
    8636:	9801      	ldr	r0, [sp, #4]
    8638:	f7ff fcc4 	bl	7fc4 <flash_area_close>
}
    863c:	4620      	mov	r0, r4
    863e:	b002      	add	sp, #8
    8640:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    8642:	2401      	movs	r4, #1
    8644:	e7fa      	b.n	863c <boot_read_swap_state_by_id+0x1e>

00008646 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8646:	4700      	bx	r0

00008648 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8648:	f000 bb3c 	b.w	8cc4 <z_impl_k_busy_wait>

0000864c <clock_stop>:
{
    864c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    864e:	2803      	cmp	r0, #3
    8650:	f200 80a7 	bhi.w	87a2 <clock_stop+0x156>
    8654:	e8df f000 	tbb	[pc, r0]
    8658:	35271902 	.word	0x35271902
    865c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8660:	2202      	movs	r2, #2
    8662:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8666:	2200      	movs	r2, #0
    8668:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    866c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8670:	2201      	movs	r2, #1
    8672:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8674:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8676:	2301      	movs	r3, #1
    8678:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    867c:	2803      	cmp	r0, #3
    867e:	f200 8090 	bhi.w	87a2 <clock_stop+0x156>
    8682:	e8df f000 	tbb	[pc, r0]
    8686:	692c      	.short	0x692c
    8688:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    868a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    868e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8690:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    8692:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8696:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    869a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    869e:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86a2:	605a      	str	r2, [r3, #4]
    86a4:	e7e7      	b.n	8676 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    86a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    86aa:	f44f 7200 	mov.w	r2, #512	; 0x200
    86ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86b2:	2200      	movs	r2, #0
    86b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    86b8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86bc:	2201      	movs	r2, #1
    86be:	625a      	str	r2, [r3, #36]	; 0x24
    86c0:	e7d8      	b.n	8674 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    86c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    86c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    86ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86ce:	2200      	movs	r2, #0
    86d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    86d4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86d8:	2201      	movs	r2, #1
    86da:	61da      	str	r2, [r3, #28]
    86dc:	e7ca      	b.n	8674 <clock_stop+0x28>
    switch (domain)
    86de:	f242 7510 	movw	r5, #10000	; 0x2710
    86e2:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    86e6:	b36c      	cbz	r4, 8744 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    86e8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    86ec:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    86f0:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    86f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    86f6:	03d9      	lsls	r1, r3, #15
    86f8:	d553      	bpl.n	87a2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    86fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    86fe:	2801      	cmp	r0, #1
    8700:	d14f      	bne.n	87a2 <clock_stop+0x156>
    8702:	f7ff ffa1 	bl	8648 <nrfx_busy_wait>
    8706:	3d01      	subs	r5, #1
    8708:	d1ed      	bne.n	86e6 <clock_stop+0x9a>
    870a:	e04a      	b.n	87a2 <clock_stop+0x156>
    870c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8710:	2801      	cmp	r0, #1
    8712:	d146      	bne.n	87a2 <clock_stop+0x156>
    8714:	f7ff ff98 	bl	8648 <nrfx_busy_wait>
    8718:	3d01      	subs	r5, #1
    871a:	d152      	bne.n	87c2 <clock_stop+0x176>
    871c:	e041      	b.n	87a2 <clock_stop+0x156>
    871e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8722:	2801      	cmp	r0, #1
    8724:	d13d      	bne.n	87a2 <clock_stop+0x156>
    8726:	f7ff ff8f 	bl	8648 <nrfx_busy_wait>
    872a:	3d01      	subs	r5, #1
    872c:	d039      	beq.n	87a2 <clock_stop+0x156>
            if (p_clk_src != NULL)
    872e:	b1c4      	cbz	r4, 8762 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8730:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8734:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8738:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    873a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    873e:	03db      	lsls	r3, r3, #15
    8740:	d52f      	bpl.n	87a2 <clock_stop+0x156>
    8742:	e7ec      	b.n	871e <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8744:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8748:	03da      	lsls	r2, r3, #15
    874a:	d52a      	bpl.n	87a2 <clock_stop+0x156>
    874c:	2001      	movs	r0, #1
    874e:	f7ff ff7b 	bl	8648 <nrfx_busy_wait>
    8752:	3d01      	subs	r5, #1
    8754:	d1f6      	bne.n	8744 <clock_stop+0xf8>
    8756:	e024      	b.n	87a2 <clock_stop+0x156>
    switch (domain)
    8758:	f242 7510 	movw	r5, #10000	; 0x2710
    875c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    8760:	e7e5      	b.n	872e <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8762:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8766:	03d8      	lsls	r0, r3, #15
    8768:	d51b      	bpl.n	87a2 <clock_stop+0x156>
    876a:	2001      	movs	r0, #1
    876c:	f7ff ff6c 	bl	8648 <nrfx_busy_wait>
    8770:	3d01      	subs	r5, #1
    8772:	d1f6      	bne.n	8762 <clock_stop+0x116>
    8774:	e015      	b.n	87a2 <clock_stop+0x156>
    switch (domain)
    8776:	f242 7510 	movw	r5, #10000	; 0x2710
    877a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    877e:	b194      	cbz	r4, 87a6 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    8780:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    8784:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8788:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    878a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    878e:	03d9      	lsls	r1, r3, #15
    8790:	d507      	bpl.n	87a2 <clock_stop+0x156>
    8792:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8796:	2801      	cmp	r0, #1
    8798:	d103      	bne.n	87a2 <clock_stop+0x156>
    879a:	f7ff ff55 	bl	8648 <nrfx_busy_wait>
    879e:	3d01      	subs	r5, #1
    87a0:	d1ed      	bne.n	877e <clock_stop+0x132>
}
    87a2:	b002      	add	sp, #8
    87a4:	bd70      	pop	{r4, r5, r6, pc}
    87a6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    87aa:	03da      	lsls	r2, r3, #15
    87ac:	d5f9      	bpl.n	87a2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    87ae:	2001      	movs	r0, #1
    87b0:	f7ff ff4a 	bl	8648 <nrfx_busy_wait>
    87b4:	3d01      	subs	r5, #1
    87b6:	d1f6      	bne.n	87a6 <clock_stop+0x15a>
    87b8:	e7f3      	b.n	87a2 <clock_stop+0x156>
    switch (domain)
    87ba:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    87be:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    87c2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    87c6:	03db      	lsls	r3, r3, #15
    87c8:	d5eb      	bpl.n	87a2 <clock_stop+0x156>
    87ca:	2c00      	cmp	r4, #0
    87cc:	d19e      	bne.n	870c <clock_stop+0xc0>
    87ce:	2001      	movs	r0, #1
    87d0:	e7a0      	b.n	8714 <clock_stop+0xc8>

000087d2 <nrfx_clock_enable>:
{
    87d2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    87d4:	2005      	movs	r0, #5
    87d6:	f7f9 fcb9 	bl	214c <arch_irq_is_enabled>
    87da:	b910      	cbnz	r0, 87e2 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    87dc:	2005      	movs	r0, #5
    87de:	f7f9 fc93 	bl	2108 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    87e2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    87e6:	2201      	movs	r2, #1
    87e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    87ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    87f0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    87f4:	bd08      	pop	{r3, pc}

000087f6 <nrfx_clock_start>:
{
    87f6:	b508      	push	{r3, lr}
    switch (domain)
    87f8:	2803      	cmp	r0, #3
    87fa:	d818      	bhi.n	882e <nrfx_clock_start+0x38>
    87fc:	e8df f000 	tbb	[pc, r0]
    8800:	483a2e02 	.word	0x483a2e02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8804:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8808:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    880c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    8810:	03c9      	lsls	r1, r1, #15
    8812:	d40d      	bmi.n	8830 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8814:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8818:	07d2      	lsls	r2, r2, #31
    881a:	d510      	bpl.n	883e <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    881c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    8820:	f002 0203 	and.w	r2, r2, #3
    8824:	2a01      	cmp	r2, #1
    8826:	d107      	bne.n	8838 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
    8828:	2202      	movs	r2, #2
    882a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    882e:	bd08      	pop	{r3, pc}
    if (!is_correct_clk)
    8830:	f002 0303 	and.w	r3, r2, #3
    8834:	2b01      	cmp	r3, #1
    8836:	d002      	beq.n	883e <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8838:	2000      	movs	r0, #0
    883a:	f7ff ff07 	bl	864c <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    883e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8842:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8844:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    8846:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    884a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    884e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8852:	2102      	movs	r1, #2
    8854:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8858:	609a      	str	r2, [r3, #8]
}
    885a:	e7e8      	b.n	882e <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    885c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8860:	2200      	movs	r2, #0
    8862:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8866:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    886a:	2201      	movs	r2, #1
    886c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8870:	601a      	str	r2, [r3, #0]
}
    8872:	e7dc      	b.n	882e <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8874:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8878:	2200      	movs	r2, #0
    887a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    887e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    8882:	f44f 7200 	mov.w	r2, #512	; 0x200
    8886:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    888a:	2201      	movs	r2, #1
    888c:	621a      	str	r2, [r3, #32]
}
    888e:	e7ce      	b.n	882e <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8890:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8894:	2200      	movs	r2, #0
    8896:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    889a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    889e:	f44f 7280 	mov.w	r2, #256	; 0x100
    88a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88a6:	2201      	movs	r2, #1
    88a8:	619a      	str	r2, [r3, #24]
}
    88aa:	e7c0      	b.n	882e <nrfx_clock_start+0x38>

000088ac <nrfx_clock_stop>:
    clock_stop(domain);
    88ac:	f7ff bece 	b.w	864c <clock_stop>

000088b0 <nrf_gpio_reconfigure>:
{
    88b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88b2:	4616      	mov	r6, r2
    88b4:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    88b8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88ba:	a801      	add	r0, sp, #4
{
    88bc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88be:	f7fc f8d5 	bl	4a6c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    88c2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    88c4:	f1b6 0c00 	subs.w	ip, r6, #0
    88c8:	bf18      	it	ne
    88ca:	f04f 0c01 	movne.w	ip, #1
    88ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    88d2:	1e0b      	subs	r3, r1, #0
    88d4:	bf18      	it	ne
    88d6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    88d8:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    88da:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    88de:	bf14      	ite	ne
    88e0:	f04f 0c0c 	movne.w	ip, #12
    88e4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    88e8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    88ea:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    88ee:	bf14      	ite	ne
    88f0:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    88f4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    88f8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    88fa:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    88fe:	bf14      	ite	ne
    8900:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    8904:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8908:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    890c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    8910:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8914:	b101      	cbz	r1, 8918 <nrf_gpio_reconfigure+0x68>
    8916:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8918:	b10e      	cbz	r6, 891e <nrf_gpio_reconfigure+0x6e>
    891a:	7836      	ldrb	r6, [r6, #0]
    891c:	0076      	lsls	r6, r6, #1
    891e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8920:	b10d      	cbz	r5, 8926 <nrf_gpio_reconfigure+0x76>
    8922:	782d      	ldrb	r5, [r5, #0]
    8924:	00ad      	lsls	r5, r5, #2
    8926:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8928:	b10c      	cbz	r4, 892e <nrf_gpio_reconfigure+0x7e>
    892a:	7824      	ldrb	r4, [r4, #0]
    892c:	0224      	lsls	r4, r4, #8
    892e:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8930:	b10f      	cbz	r7, 8936 <nrf_gpio_reconfigure+0x86>
    8932:	783f      	ldrb	r7, [r7, #0]
    8934:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8936:	430c      	orrs	r4, r1
    8938:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    893a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    893e:	b003      	add	sp, #12
    8940:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008942 <nrf_gpio_cfg_sense_set>:
{
    8942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8944:	f10d 030f 	add.w	r3, sp, #15
    8948:	9301      	str	r3, [sp, #4]
    894a:	2300      	movs	r3, #0
{
    894c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8950:	461a      	mov	r2, r3
    8952:	4619      	mov	r1, r3
    8954:	9300      	str	r3, [sp, #0]
    8956:	f7ff ffab 	bl	88b0 <nrf_gpio_reconfigure>
}
    895a:	b005      	add	sp, #20
    895c:	f85d fb04 	ldr.w	pc, [sp], #4

00008960 <partial_word_create>:
    value32 = 0xFFFFFFFF;
    8960:	f04f 33ff 	mov.w	r3, #4294967295
{
    8964:	b082      	sub	sp, #8
    value32 = 0xFFFFFFFF;
    8966:	9301      	str	r3, [sp, #4]
    byte_shift = addr % NVMC_BYTES_IN_WORD;
    8968:	f000 0003 	and.w	r0, r0, #3
    896c:	ab01      	add	r3, sp, #4
    896e:	4403      	add	r3, r0
    8970:	440a      	add	r2, r1
    for (uint32_t i = 0; i < bytes_count; i++)
    8972:	4291      	cmp	r1, r2
    8974:	d102      	bne.n	897c <partial_word_create+0x1c>
}
    8976:	9801      	ldr	r0, [sp, #4]
    8978:	b002      	add	sp, #8
    897a:	4770      	bx	lr
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
    897c:	f811 0b01 	ldrb.w	r0, [r1], #1
    8980:	f803 0b01 	strb.w	r0, [r3], #1
    for (uint32_t i = 0; i < bytes_count; i++)
    8984:	e7f5      	b.n	8972 <partial_word_create+0x12>

00008986 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    8986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    898a:	4770      	bx	lr

0000898c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    898c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    8990:	4770      	bx	lr

00008992 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    8992:	f44f 7080 	mov.w	r0, #256	; 0x100
    8996:	4770      	bx	lr

00008998 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    8998:	2100      	movs	r1, #0
    899a:	f7fc bcff 	b.w	539c <nrf_gpio_cfg.constprop.0>

0000899e <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    899e:	2302      	movs	r3, #2
    89a0:	f7fc bc54 	b.w	524c <qspi_xfer>

000089a4 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    89a4:	2303      	movs	r3, #3
    89a6:	f7fc bc51 	b.w	524c <qspi_xfer>

000089aa <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    89aa:	2100      	movs	r1, #0
    89ac:	2002      	movs	r0, #2
    89ae:	f7fc beeb 	b.w	5788 <nrfx_qspi_erase>

000089b2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    89b2:	4770      	bx	lr

000089b4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    89b4:	b140      	cbz	r0, 89c8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    89b6:	68c3      	ldr	r3, [r0, #12]
    89b8:	7858      	ldrb	r0, [r3, #1]
    89ba:	f010 0001 	ands.w	r0, r0, #1
    89be:	bf1e      	ittt	ne
    89c0:	7818      	ldrbne	r0, [r3, #0]
    89c2:	fab0 f080 	clzne	r0, r0
    89c6:	0940      	lsrne	r0, r0, #5
}
    89c8:	4770      	bx	lr

000089ca <z_early_memset>:
	(void) memset(dst, c, n);
    89ca:	f7ff bbbf 	b.w	814c <memset>

000089ce <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    89ce:	f7ff bbb2 	b.w	8136 <memcpy>

000089d2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    89d2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    89d6:	4313      	orrs	r3, r2
    89d8:	f013 0303 	ands.w	r3, r3, #3
    89dc:	d10c      	bne.n	89f8 <create_free_list+0x26>
	slab->free_list = NULL;
    89de:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    89e0:	6881      	ldr	r1, [r0, #8]
    89e2:	4299      	cmp	r1, r3
    89e4:	d801      	bhi.n	89ea <create_free_list+0x18>
	return 0;
    89e6:	2000      	movs	r0, #0
    89e8:	4770      	bx	lr
		*(char **)p = slab->free_list;
    89ea:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    89ec:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    89ee:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    89f0:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    89f2:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    89f4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    89f6:	e7f3      	b.n	89e0 <create_free_list+0xe>
		return -EINVAL;
    89f8:	f06f 0015 	mvn.w	r0, #21
}
    89fc:	4770      	bx	lr

000089fe <k_mem_slab_init>:
{
    89fe:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    8a00:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    8a04:	2300      	movs	r3, #0
	slab->buffer = buffer;
    8a06:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    8a08:	6183      	str	r3, [r0, #24]
{
    8a0a:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    8a0c:	f7ff ffe1 	bl	89d2 <create_free_list>
	if (rc < 0) {
    8a10:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    8a12:	bfa8      	it	ge
    8a14:	e9c4 4400 	strdge	r4, r4, [r4]
}
    8a18:	bd10      	pop	{r4, pc}

00008a1a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a1c:	4604      	mov	r4, r0
    8a1e:	460d      	mov	r5, r1
	__asm__ volatile(
    8a20:	f04f 0320 	mov.w	r3, #32
    8a24:	f3ef 8611 	mrs	r6, BASEPRI
    8a28:	f383 8812 	msr	BASEPRI_MAX, r3
    8a2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8a30:	6947      	ldr	r7, [r0, #20]
    8a32:	b977      	cbnz	r7, 8a52 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8a34:	f000 f8dc 	bl	8bf0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    8a38:	b158      	cbz	r0, 8a52 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8a3a:	682a      	ldr	r2, [r5, #0]
    8a3c:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8a3e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8a40:	f000 f89f 	bl	8b82 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8a44:	4631      	mov	r1, r6
    8a46:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    8a4e:	f7fd bba7 	b.w	61a0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    8a52:	682b      	ldr	r3, [r5, #0]
    8a54:	6962      	ldr	r2, [r4, #20]
    8a56:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8a58:	682b      	ldr	r3, [r5, #0]
    8a5a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8a5c:	69a3      	ldr	r3, [r4, #24]
    8a5e:	3b01      	subs	r3, #1
    8a60:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8a62:	f386 8811 	msr	BASEPRI, r6
    8a66:	f3bf 8f6f 	isb	sy
}
    8a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a6c <k_is_in_isr>:
    8a6c:	f3ef 8005 	mrs	r0, IPSR
}
    8a70:	3800      	subs	r0, #0
    8a72:	bf18      	it	ne
    8a74:	2001      	movne	r0, #1
    8a76:	4770      	bx	lr

00008a78 <k_thread_name_get>:
}
    8a78:	2000      	movs	r0, #0
    8a7a:	4770      	bx	lr

00008a7c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8a7c:	b508      	push	{r3, lr}
	__asm__ volatile(
    8a7e:	f04f 0220 	mov.w	r2, #32
    8a82:	f3ef 8311 	mrs	r3, BASEPRI
    8a86:	f382 8812 	msr	BASEPRI_MAX, r2
    8a8a:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    8a8e:	f7f9 faf3 	bl	2078 <arch_cpu_idle>
    8a92:	e7f4      	b.n	8a7e <idle+0x2>

00008a94 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8a94:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8a98:	428b      	cmp	r3, r1
    8a9a:	d001      	beq.n	8aa0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8a9c:	f7fd bb3a 	b.w	6114 <z_set_prio>
}
    8aa0:	2000      	movs	r0, #0
    8aa2:	4770      	bx	lr

00008aa4 <z_impl_k_mutex_init>:
{
    8aa4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8aa6:	2000      	movs	r0, #0
    8aa8:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8aac:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8ab0:	4770      	bx	lr

00008ab2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8ab2:	b13a      	cbz	r2, 8ac4 <z_impl_k_sem_init+0x12>
    8ab4:	428a      	cmp	r2, r1
    8ab6:	d305      	bcc.n	8ac4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8ab8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    8abc:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    8ac0:	2000      	movs	r0, #0
    8ac2:	4770      	bx	lr
		return -EINVAL;
    8ac4:	f06f 0015 	mvn.w	r0, #21
}
    8ac8:	4770      	bx	lr

00008aca <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8aca:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8ace:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8ad0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8ad2:	2300      	movs	r3, #0
	node->prev = NULL;
    8ad4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    8ad8:	4770      	bx	lr

00008ada <unpend_thread_no_timeout>:
{
    8ada:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8adc:	f7ff fff5 	bl	8aca <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8ae0:	7b43      	ldrb	r3, [r0, #13]
    8ae2:	f023 0302 	bic.w	r3, r3, #2
    8ae6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8ae8:	2300      	movs	r3, #0
    8aea:	6083      	str	r3, [r0, #8]
}
    8aec:	bd08      	pop	{r3, pc}

00008aee <z_thread_timeout>:
{
    8aee:	4601      	mov	r1, r0
    8af0:	b510      	push	{r4, lr}
    8af2:	f04f 0320 	mov.w	r3, #32
    8af6:	f3ef 8411 	mrs	r4, BASEPRI
    8afa:	f383 8812 	msr	BASEPRI_MAX, r3
    8afe:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8b02:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    8b06:	f013 0f28 	tst.w	r3, #40	; 0x28
    8b0a:	d10d      	bne.n	8b28 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    8b0c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8b10:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    8b12:	b10b      	cbz	r3, 8b18 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    8b14:	f7ff ffe1 	bl	8ada <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8b18:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    8b1c:	f023 0314 	bic.w	r3, r3, #20
    8b20:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    8b24:	f7fd fa00 	bl	5f28 <ready_thread>
	__asm__ volatile(
    8b28:	f384 8811 	msr	BASEPRI, r4
    8b2c:	f3bf 8f6f 	isb	sy
}
    8b30:	bd10      	pop	{r4, pc}

00008b32 <add_to_waitq_locked>:
{
    8b32:	b538      	push	{r3, r4, r5, lr}
    8b34:	4604      	mov	r4, r0
    8b36:	460d      	mov	r5, r1
	unready_thread(thread);
    8b38:	f7fd fa2a 	bl	5f90 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8b3c:	7b63      	ldrb	r3, [r4, #13]
    8b3e:	f043 0302 	orr.w	r3, r3, #2
    8b42:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8b44:	b1e5      	cbz	r5, 8b80 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    8b46:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    8b48:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b4a:	429d      	cmp	r5, r3
    8b4c:	d109      	bne.n	8b62 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    8b4e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8b50:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8b54:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8b56:	606c      	str	r4, [r5, #4]
}
    8b58:	e012      	b.n	8b80 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    8b5a:	686a      	ldr	r2, [r5, #4]
    8b5c:	4293      	cmp	r3, r2
    8b5e:	d0f6      	beq.n	8b4e <add_to_waitq_locked+0x1c>
    8b60:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b62:	2b00      	cmp	r3, #0
    8b64:	d0f3      	beq.n	8b4e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    8b66:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8b6a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    8b6e:	428a      	cmp	r2, r1
    8b70:	d0f3      	beq.n	8b5a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b72:	4291      	cmp	r1, r2
    8b74:	ddf1      	ble.n	8b5a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    8b76:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8b78:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8b7c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8b7e:	605c      	str	r4, [r3, #4]
}
    8b80:	bd38      	pop	{r3, r4, r5, pc}

00008b82 <z_ready_thread>:
{
    8b82:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b84:	f04f 0320 	mov.w	r3, #32
    8b88:	f3ef 8411 	mrs	r4, BASEPRI
    8b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    8b90:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8b94:	f7fd f9c8 	bl	5f28 <ready_thread>
	__asm__ volatile(
    8b98:	f384 8811 	msr	BASEPRI, r4
    8b9c:	f3bf 8f6f 	isb	sy
}
    8ba0:	bd10      	pop	{r4, pc}

00008ba2 <z_unpend_thread_no_timeout>:
{
    8ba2:	b508      	push	{r3, lr}
	__asm__ volatile(
    8ba4:	f04f 0320 	mov.w	r3, #32
    8ba8:	f3ef 8111 	mrs	r1, BASEPRI
    8bac:	f383 8812 	msr	BASEPRI_MAX, r3
    8bb0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    8bb4:	f7ff ff91 	bl	8ada <unpend_thread_no_timeout>
	__asm__ volatile(
    8bb8:	f381 8811 	msr	BASEPRI, r1
    8bbc:	f3bf 8f6f 	isb	sy
}
    8bc0:	bd08      	pop	{r3, pc}

00008bc2 <z_unpend1_no_timeout>:
{
    8bc2:	b508      	push	{r3, lr}
    8bc4:	4603      	mov	r3, r0
	__asm__ volatile(
    8bc6:	f04f 0220 	mov.w	r2, #32
    8bca:	f3ef 8111 	mrs	r1, BASEPRI
    8bce:	f382 8812 	msr	BASEPRI_MAX, r2
    8bd2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8bd6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8bd8:	4283      	cmp	r3, r0
    8bda:	d007      	beq.n	8bec <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    8bdc:	b108      	cbz	r0, 8be2 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    8bde:	f7ff ff7c 	bl	8ada <unpend_thread_no_timeout>
	__asm__ volatile(
    8be2:	f381 8811 	msr	BASEPRI, r1
    8be6:	f3bf 8f6f 	isb	sy
}
    8bea:	bd08      	pop	{r3, pc}
    8bec:	2000      	movs	r0, #0
    8bee:	e7f8      	b.n	8be2 <z_unpend1_no_timeout+0x20>

00008bf0 <z_unpend_first_thread>:
{
    8bf0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8bf2:	f04f 0320 	mov.w	r3, #32
    8bf6:	f3ef 8511 	mrs	r5, BASEPRI
    8bfa:	f383 8812 	msr	BASEPRI_MAX, r3
    8bfe:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8c02:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c04:	42a0      	cmp	r0, r4
    8c06:	d00d      	beq.n	8c24 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    8c08:	b134      	cbz	r4, 8c18 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    8c0a:	4620      	mov	r0, r4
    8c0c:	f7ff ff65 	bl	8ada <unpend_thread_no_timeout>
    8c10:	f104 0018 	add.w	r0, r4, #24
    8c14:	f000 f81e 	bl	8c54 <z_abort_timeout>
	__asm__ volatile(
    8c18:	f385 8811 	msr	BASEPRI, r5
    8c1c:	f3bf 8f6f 	isb	sy
}
    8c20:	4620      	mov	r0, r4
    8c22:	bd38      	pop	{r3, r4, r5, pc}
    8c24:	2400      	movs	r4, #0
    8c26:	e7f7      	b.n	8c18 <z_unpend_first_thread+0x28>

00008c28 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8c28:	4603      	mov	r3, r0
    8c2a:	b920      	cbnz	r0, 8c36 <z_reschedule_irqlock+0xe>
    8c2c:	f3ef 8205 	mrs	r2, IPSR
    8c30:	b90a      	cbnz	r2, 8c36 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8c32:	f7f9 bacf 	b.w	21d4 <arch_swap>
    8c36:	f383 8811 	msr	BASEPRI, r3
    8c3a:	f3bf 8f6f 	isb	sy
}
    8c3e:	4770      	bx	lr

00008c40 <z_reschedule_unlocked>:
	__asm__ volatile(
    8c40:	f04f 0320 	mov.w	r3, #32
    8c44:	f3ef 8011 	mrs	r0, BASEPRI
    8c48:	f383 8812 	msr	BASEPRI_MAX, r3
    8c4c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8c50:	f7ff bfea 	b.w	8c28 <z_reschedule_irqlock>

00008c54 <z_abort_timeout>:
{
    8c54:	b510      	push	{r4, lr}
    8c56:	f04f 0220 	mov.w	r2, #32
    8c5a:	f3ef 8411 	mrs	r4, BASEPRI
    8c5e:	f382 8812 	msr	BASEPRI_MAX, r2
    8c62:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    8c66:	6803      	ldr	r3, [r0, #0]
    8c68:	b13b      	cbz	r3, 8c7a <z_abort_timeout+0x26>
			remove_timeout(to);
    8c6a:	f7fd fc85 	bl	6578 <remove_timeout>
			ret = 0;
    8c6e:	2000      	movs	r0, #0
	__asm__ volatile(
    8c70:	f384 8811 	msr	BASEPRI, r4
    8c74:	f3bf 8f6f 	isb	sy
}
    8c78:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8c7a:	f06f 0015 	mvn.w	r0, #21
    8c7e:	e7f7      	b.n	8c70 <z_abort_timeout+0x1c>

00008c80 <z_set_timeout_expiry>:
{
    8c80:	b570      	push	{r4, r5, r6, lr}
    8c82:	4604      	mov	r4, r0
    8c84:	460d      	mov	r5, r1
	__asm__ volatile(
    8c86:	f04f 0320 	mov.w	r3, #32
    8c8a:	f3ef 8611 	mrs	r6, BASEPRI
    8c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    8c92:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    8c96:	f7fd fc47 	bl	6528 <next_timeout>
			      || (ticks <= next_to);
    8c9a:	2801      	cmp	r0, #1
    8c9c:	dd07      	ble.n	8cae <z_set_timeout_expiry+0x2e>
    8c9e:	42a0      	cmp	r0, r4
    8ca0:	db05      	blt.n	8cae <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8ca2:	42a0      	cmp	r0, r4
    8ca4:	4629      	mov	r1, r5
    8ca6:	bfa8      	it	ge
    8ca8:	4620      	movge	r0, r4
    8caa:	f7fb fa57 	bl	415c <sys_clock_set_timeout>
	__asm__ volatile(
    8cae:	f386 8811 	msr	BASEPRI, r6
    8cb2:	f3bf 8f6f 	isb	sy
}
    8cb6:	bd70      	pop	{r4, r5, r6, pc}

00008cb8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8cb8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8cba:	f7fd fd53 	bl	6764 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8cbe:	bd08      	pop	{r3, pc}

00008cc0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8cc0:	f7fd bd50 	b.w	6764 <sys_clock_tick_get>

00008cc4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8cc4:	b108      	cbz	r0, 8cca <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8cc6:	f7f9 b867 	b.w	1d98 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8cca:	4770      	bx	lr

00008ccc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8ccc:	b510      	push	{r4, lr}
    8cce:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    8cd0:	f7ff ffc0 	bl	8c54 <z_abort_timeout>

	if (inactive) {
    8cd4:	b9b0      	cbnz	r0, 8d04 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8cd8:	b10b      	cbz	r3, 8cde <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8cda:	4620      	mov	r0, r4
    8cdc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8cde:	f104 0018 	add.w	r0, r4, #24
    8ce2:	f7ff ff6e 	bl	8bc2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8ce6:	b168      	cbz	r0, 8d04 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8ce8:	f7ff ff4b 	bl	8b82 <z_ready_thread>
	__asm__ volatile(
    8cec:	f04f 0320 	mov.w	r3, #32
    8cf0:	f3ef 8011 	mrs	r0, BASEPRI
    8cf4:	f383 8812 	msr	BASEPRI_MAX, r3
    8cf8:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d00:	f7ff bf92 	b.w	8c28 <z_reschedule_irqlock>
    8d04:	bd10      	pop	{r4, pc}

00008d06 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8d06:	4770      	bx	lr
